/**
 * Oracle Delegate Access Control API
 * Oracle Delegate Access Control allows ExaCC and ExaCS customers to delegate management of their Exadata resources operators outside their tenancies. 
With Delegate Access Control, Support Providers can deliver managed services using comprehensive and robust tooling built on the OCI platform. 
Customers maintain control over who has access to the delegated resources in their tenancy and what actions can be taken. 
Enterprises managing resources across multiple tenants can use Delegate Access Control to streamline management tasks.
Using logging service, customers can view a near real-time audit report of all actions performed by a Service Provider operator. 

 * OpenAPI spec version: 20230801
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { DelegateAccessControlWaiter } from "./delegateaccesscontrol-waiter";
import { WorkRequestWaiter } from "./workrequest-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DelegateAccessControlApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DelegateAccessControlClient {
  protected static serviceEndpointTemplate =
    "https://delegate-access-control.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DelegateAccessControlWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "DelegateAccessControl";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("delegateaccesscontrol")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("delegateaccesscontrol");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20230801";
    if (this.logger)
      this.logger.info(`DelegateAccessControlClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        DelegateAccessControlClient.serviceEndpointTemplate,
        this._region,
        DelegateAccessControlClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        DelegateAccessControlClient.serviceEndpointTemplate,
        this._regionId,
        DelegateAccessControlClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DelegateAccessControlClient.serviceEndpointTemplate,
      region,
      DelegateAccessControlClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DelegateAccessControlClient.serviceEndpointTemplate,
      regionId,
      DelegateAccessControlClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new DelegateAccessControlWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DelegateAccessControlWaiter {
    this._waiters = new DelegateAccessControlWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DelegateAccessControlWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Approves a Delegated Resource Access Request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ApproveDelegatedResourceAccessRequestRequest
   * @return ApproveDelegatedResourceAccessRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ApproveDelegatedResourceAccessRequest.ts.html |here} to see how to use ApproveDelegatedResourceAccessRequest API.
   */
  public async approveDelegatedResourceAccessRequest(
    approveDelegatedResourceAccessRequestRequest: requests.ApproveDelegatedResourceAccessRequestRequest
  ): Promise<responses.ApproveDelegatedResourceAccessRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#approveDelegatedResourceAccessRequest."
      );
    const operationName = "approveDelegatedResourceAccessRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegatedResourceAccessRequestId}":
        approveDelegatedResourceAccessRequestRequest.delegatedResourceAccessRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": approveDelegatedResourceAccessRequestRequest.opcRetryToken,
      "if-match": approveDelegatedResourceAccessRequestRequest.ifMatch,
      "opc-request-id": approveDelegatedResourceAccessRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      approveDelegatedResourceAccessRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/actions/approve",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        approveDelegatedResourceAccessRequestRequest.approveDelegatedResourceAccessRequestDetails,
        "ApproveDelegatedResourceAccessRequestDetails",
        model.ApproveDelegatedResourceAccessRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ApproveDelegatedResourceAccessRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Delegation Control resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDelegationControlCompartmentRequest
   * @return ChangeDelegationControlCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ChangeDelegationControlCompartment.ts.html |here} to see how to use ChangeDelegationControlCompartment API.
   */
  public async changeDelegationControlCompartment(
    changeDelegationControlCompartmentRequest: requests.ChangeDelegationControlCompartmentRequest
  ): Promise<responses.ChangeDelegationControlCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#changeDelegationControlCompartment."
      );
    const operationName = "changeDelegationControlCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegationControlId}": changeDelegationControlCompartmentRequest.delegationControlId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeDelegationControlCompartmentRequest.opcRetryToken,
      "if-match": changeDelegationControlCompartmentRequest.ifMatch,
      "opc-request-id": changeDelegationControlCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDelegationControlCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationControls/{delegationControlId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDelegationControlCompartmentRequest.changeDelegationControlCompartmentDetails,
        "ChangeDelegationControlCompartmentDetails",
        model.ChangeDelegationControlCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDelegationControlCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Delegation Subscription resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDelegationSubscriptionCompartmentRequest
   * @return ChangeDelegationSubscriptionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ChangeDelegationSubscriptionCompartment.ts.html |here} to see how to use ChangeDelegationSubscriptionCompartment API.
   */
  public async changeDelegationSubscriptionCompartment(
    changeDelegationSubscriptionCompartmentRequest: requests.ChangeDelegationSubscriptionCompartmentRequest
  ): Promise<responses.ChangeDelegationSubscriptionCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#changeDelegationSubscriptionCompartment."
      );
    const operationName = "changeDelegationSubscriptionCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegationSubscriptionId}":
        changeDelegationSubscriptionCompartmentRequest.delegationSubscriptionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeDelegationSubscriptionCompartmentRequest.opcRetryToken,
      "if-match": changeDelegationSubscriptionCompartmentRequest.ifMatch,
      "opc-request-id": changeDelegationSubscriptionCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDelegationSubscriptionCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationSubscriptions/{delegationSubscriptionId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDelegationSubscriptionCompartmentRequest.changeDelegationSubscriptionCompartmentDetails,
        "ChangeDelegationSubscriptionCompartmentDetails",
        model.ChangeDelegationSubscriptionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDelegationSubscriptionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a Delegation Control.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDelegationControlRequest
   * @return CreateDelegationControlResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/CreateDelegationControl.ts.html |here} to see how to use CreateDelegationControl API.
   */
  public async createDelegationControl(
    createDelegationControlRequest: requests.CreateDelegationControlRequest
  ): Promise<responses.CreateDelegationControlResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DelegateAccessControlClient#createDelegationControl.");
    const operationName = "createDelegationControl";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDelegationControlRequest.opcRetryToken,
      "opc-request-id": createDelegationControlRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDelegationControlRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationControls",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDelegationControlRequest.createDelegationControlDetails,
        "CreateDelegationControlDetails",
        model.CreateDelegationControlDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDelegationControlResponse>{},
        body: await response.json(),
        bodyKey: "delegationControl",
        bodyModel: model.DelegationControl,
        type: "model.DelegationControl",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates Delegation Subscription in Delegation Control.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDelegationSubscriptionRequest
   * @return CreateDelegationSubscriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/CreateDelegationSubscription.ts.html |here} to see how to use CreateDelegationSubscription API.
   */
  public async createDelegationSubscription(
    createDelegationSubscriptionRequest: requests.CreateDelegationSubscriptionRequest
  ): Promise<responses.CreateDelegationSubscriptionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#createDelegationSubscription."
      );
    const operationName = "createDelegationSubscription";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDelegationSubscriptionRequest.opcRetryToken,
      "opc-request-id": createDelegationSubscriptionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDelegationSubscriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationSubscriptions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDelegationSubscriptionRequest.createDelegationSubscriptionDetails,
        "CreateDelegationSubscriptionDetails",
        model.CreateDelegationSubscriptionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDelegationSubscriptionResponse>{},
        body: await response.json(),
        bodyKey: "delegationSubscription",
        bodyModel: model.DelegationSubscription,
        type: "model.DelegationSubscription",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Delegation Control. You cannot delete a Delegation Control if it is assigned to govern any target resource currently or in the future.
   * In that case, first, delete all of the current and future assignments before deleting the Delegation Control. A Delegation Control that was previously assigned to a target
   * resource is marked as DELETED following a successful deletion. However, it is not completely deleted from the system. This is to ensure auditing information for the accesses
   * done under the Delegation Control is preserved for future needs. The system purges the deleted Delegation Control only when all of the audit data associated with the
   * Delegation Control are also deleted. Therefore, you cannot reuse the name of the deleted Delegation Control until the system purges the Delegation Control.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDelegationControlRequest
   * @return DeleteDelegationControlResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/DeleteDelegationControl.ts.html |here} to see how to use DeleteDelegationControl API.
   */
  public async deleteDelegationControl(
    deleteDelegationControlRequest: requests.DeleteDelegationControlRequest
  ): Promise<responses.DeleteDelegationControlResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DelegateAccessControlClient#deleteDelegationControl.");
    const operationName = "deleteDelegationControl";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegationControlId}": deleteDelegationControlRequest.delegationControlId
    };

    const queryParams = {
      "description": deleteDelegationControlRequest.description
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDelegationControlRequest.ifMatch,
      "opc-request-id": deleteDelegationControlRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDelegationControlRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationControls/{delegationControlId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDelegationControlResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * eletes an Delegation Subscription in Delegation Control.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDelegationSubscriptionRequest
   * @return DeleteDelegationSubscriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/DeleteDelegationSubscription.ts.html |here} to see how to use DeleteDelegationSubscription API.
   */
  public async deleteDelegationSubscription(
    deleteDelegationSubscriptionRequest: requests.DeleteDelegationSubscriptionRequest
  ): Promise<responses.DeleteDelegationSubscriptionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#deleteDelegationSubscription."
      );
    const operationName = "deleteDelegationSubscription";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegationSubscriptionId}": deleteDelegationSubscriptionRequest.delegationSubscriptionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDelegationSubscriptionRequest.ifMatch,
      "opc-request-id": deleteDelegationSubscriptionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDelegationSubscriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationSubscriptions/{delegationSubscriptionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDelegationSubscriptionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets details of a Delegated Resource Access Request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDelegatedResourceAccessRequestRequest
   * @return GetDelegatedResourceAccessRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetDelegatedResourceAccessRequest.ts.html |here} to see how to use GetDelegatedResourceAccessRequest API.
   */
  public async getDelegatedResourceAccessRequest(
    getDelegatedResourceAccessRequestRequest: requests.GetDelegatedResourceAccessRequestRequest
  ): Promise<responses.GetDelegatedResourceAccessRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#getDelegatedResourceAccessRequest."
      );
    const operationName = "getDelegatedResourceAccessRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegatedResourceAccessRequestId}":
        getDelegatedResourceAccessRequestRequest.delegatedResourceAccessRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDelegatedResourceAccessRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDelegatedResourceAccessRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDelegatedResourceAccessRequestResponse>{},
        body: await response.json(),
        bodyKey: "delegatedResourceAccessRequest",
        bodyModel: model.DelegatedResourceAccessRequest,
        type: "model.DelegatedResourceAccessRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the audit log report for the given Delegated Resource Access Request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDelegatedResourceAccessRequestAuditLogReportRequest
   * @return GetDelegatedResourceAccessRequestAuditLogReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetDelegatedResourceAccessRequestAuditLogReport.ts.html |here} to see how to use GetDelegatedResourceAccessRequestAuditLogReport API.
   */
  public async getDelegatedResourceAccessRequestAuditLogReport(
    getDelegatedResourceAccessRequestAuditLogReportRequest: requests.GetDelegatedResourceAccessRequestAuditLogReportRequest
  ): Promise<responses.GetDelegatedResourceAccessRequestAuditLogReportResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#getDelegatedResourceAccessRequestAuditLogReport."
      );
    const operationName = "getDelegatedResourceAccessRequestAuditLogReport";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegatedResourceAccessRequestId}":
        getDelegatedResourceAccessRequestAuditLogReportRequest.delegatedResourceAccessRequestId
    };

    const queryParams = {
      "isProcessTreeEnabled":
        getDelegatedResourceAccessRequestAuditLogReportRequest.isProcessTreeEnabled
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDelegatedResourceAccessRequestAuditLogReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDelegatedResourceAccessRequestAuditLogReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/delegatedResourceAccessRequestAuditLogReport",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDelegatedResourceAccessRequestAuditLogReportResponse>{},
        body: await response.json(),
        bodyKey: "delegatedResourceAccessRequestAuditLogReport",
        bodyModel: model.DelegatedResourceAccessRequestAuditLogReport,
        type: "model.DelegatedResourceAccessRequestAuditLogReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Delegation Control associated with the specified Delegation Control ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDelegationControlRequest
   * @return GetDelegationControlResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetDelegationControl.ts.html |here} to see how to use GetDelegationControl API.
   */
  public async getDelegationControl(
    getDelegationControlRequest: requests.GetDelegationControlRequest
  ): Promise<responses.GetDelegationControlResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DelegateAccessControlClient#getDelegationControl.");
    const operationName = "getDelegationControl";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegationControlId}": getDelegationControlRequest.delegationControlId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDelegationControlRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDelegationControlRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationControls/{delegationControlId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDelegationControlResponse>{},
        body: await response.json(),
        bodyKey: "delegationControl",
        bodyModel: model.DelegationControl,
        type: "model.DelegationControl",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a DelegationSubscription by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDelegationSubscriptionRequest
   * @return GetDelegationSubscriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetDelegationSubscription.ts.html |here} to see how to use GetDelegationSubscription API.
   */
  public async getDelegationSubscription(
    getDelegationSubscriptionRequest: requests.GetDelegationSubscriptionRequest
  ): Promise<responses.GetDelegationSubscriptionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DelegateAccessControlClient#getDelegationSubscription.");
    const operationName = "getDelegationSubscription";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegationSubscriptionId}": getDelegationSubscriptionRequest.delegationSubscriptionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDelegationSubscriptionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDelegationSubscriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationSubscriptions/{delegationSubscriptionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDelegationSubscriptionResponse>{},
        body: await response.json(),
        bodyKey: "delegationSubscription",
        bodyModel: model.DelegationSubscription,
        type: "model.DelegationSubscription",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a ServiceProvider by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetServiceProviderRequest
   * @return GetServiceProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetServiceProvider.ts.html |here} to see how to use GetServiceProvider API.
   */
  public async getServiceProvider(
    getServiceProviderRequest: requests.GetServiceProviderRequest
  ): Promise<responses.GetServiceProviderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DelegateAccessControlClient#getServiceProvider.");
    const operationName = "getServiceProvider";
    const apiReferenceLink = "";
    const pathParams = {
      "{serviceProviderId}": getServiceProviderRequest.serviceProviderId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getServiceProviderRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getServiceProviderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceProviders/{serviceProviderId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetServiceProviderResponse>{},
        body: await response.json(),
        bodyKey: "serviceProvider",
        bodyModel: model.ServiceProvider,
        type: "model.ServiceProvider",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Service Provider Action associated with the specified Service Provider Action ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetServiceProviderActionRequest
   * @return GetServiceProviderActionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetServiceProviderAction.ts.html |here} to see how to use GetServiceProviderAction API.
   */
  public async getServiceProviderAction(
    getServiceProviderActionRequest: requests.GetServiceProviderActionRequest
  ): Promise<responses.GetServiceProviderActionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DelegateAccessControlClient#getServiceProviderAction.");
    const operationName = "getServiceProviderAction";
    const apiReferenceLink = "";
    const pathParams = {
      "{serviceProviderActionId}": getServiceProviderActionRequest.serviceProviderActionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getServiceProviderActionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getServiceProviderActionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceProviderActions/{serviceProviderActionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetServiceProviderActionResponse>{},
        body: await response.json(),
        bodyKey: "serviceProviderAction",
        bodyModel: model.ServiceProviderAction,
        type: "model.ServiceProviderAction",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a history of all status associated with the Delegated Resource Access RequestId.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDelegatedResourceAccessRequestHistoriesRequest
   * @return ListDelegatedResourceAccessRequestHistoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListDelegatedResourceAccessRequestHistories.ts.html |here} to see how to use ListDelegatedResourceAccessRequestHistories API.
   */
  public async listDelegatedResourceAccessRequestHistories(
    listDelegatedResourceAccessRequestHistoriesRequest: requests.ListDelegatedResourceAccessRequestHistoriesRequest
  ): Promise<responses.ListDelegatedResourceAccessRequestHistoriesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#listDelegatedResourceAccessRequestHistories."
      );
    const operationName = "listDelegatedResourceAccessRequestHistories";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegatedResourceAccessRequestId}":
        listDelegatedResourceAccessRequestHistoriesRequest.delegatedResourceAccessRequestId
    };

    const queryParams = {
      "limit": listDelegatedResourceAccessRequestHistoriesRequest.limit,
      "page": listDelegatedResourceAccessRequestHistoriesRequest.page,
      "sortOrder": listDelegatedResourceAccessRequestHistoriesRequest.sortOrder,
      "sortBy": listDelegatedResourceAccessRequestHistoriesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDelegatedResourceAccessRequestHistoriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDelegatedResourceAccessRequestHistoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/history",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDelegatedResourceAccessRequestHistoriesResponse>{},
        body: await response.json(),
        bodyKey: "delegatedResourceAccessRequestHistoryCollection",
        bodyModel: model.DelegatedResourceAccessRequestHistoryCollection,
        type: "model.DelegatedResourceAccessRequestHistoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all Delegated Resource Access Requests in the compartment. Note that only one of lifecycleState or requestStatus query parameter can be used.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDelegatedResourceAccessRequestsRequest
   * @return ListDelegatedResourceAccessRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListDelegatedResourceAccessRequests.ts.html |here} to see how to use ListDelegatedResourceAccessRequests API.
   */
  public async listDelegatedResourceAccessRequests(
    listDelegatedResourceAccessRequestsRequest: requests.ListDelegatedResourceAccessRequestsRequest
  ): Promise<responses.ListDelegatedResourceAccessRequestsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#listDelegatedResourceAccessRequests."
      );
    const operationName = "listDelegatedResourceAccessRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDelegatedResourceAccessRequestsRequest.compartmentId,
      "delegationControlId": listDelegatedResourceAccessRequestsRequest.delegationControlId,
      "resourceId": listDelegatedResourceAccessRequestsRequest.resourceId,
      "lifecycleState": listDelegatedResourceAccessRequestsRequest.lifecycleState,
      "requestStatus": listDelegatedResourceAccessRequestsRequest.requestStatus,
      "timeStart": listDelegatedResourceAccessRequestsRequest.timeStart,
      "timeEnd": listDelegatedResourceAccessRequestsRequest.timeEnd,
      "limit": listDelegatedResourceAccessRequestsRequest.limit,
      "page": listDelegatedResourceAccessRequestsRequest.page,
      "sortOrder": listDelegatedResourceAccessRequestsRequest.sortOrder,
      "sortBy": listDelegatedResourceAccessRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDelegatedResourceAccessRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDelegatedResourceAccessRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegatedResourceAccessRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDelegatedResourceAccessRequestsResponse>{},
        body: await response.json(),
        bodyKey: "delegatedResourceAccessRequestSummaryCollection",
        bodyModel: model.DelegatedResourceAccessRequestSummaryCollection,
        type: "model.DelegatedResourceAccessRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of resources associated with the Delegation Control.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDelegationControlResourcesRequest
   * @return ListDelegationControlResourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListDelegationControlResources.ts.html |here} to see how to use ListDelegationControlResources API.
   */
  public async listDelegationControlResources(
    listDelegationControlResourcesRequest: requests.ListDelegationControlResourcesRequest
  ): Promise<responses.ListDelegationControlResourcesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#listDelegationControlResources."
      );
    const operationName = "listDelegationControlResources";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegationControlId}": listDelegationControlResourcesRequest.delegationControlId
    };

    const queryParams = {
      "limit": listDelegationControlResourcesRequest.limit,
      "page": listDelegationControlResourcesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDelegationControlResourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDelegationControlResourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationControls/{delegationControlId}/resources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDelegationControlResourcesResponse>{},
        body: await response.json(),
        bodyKey: "delegationControlResourceCollection",
        bodyModel: model.DelegationControlResourceCollection,
        type: "model.DelegationControlResourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Delegation Controls in the compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDelegationControlsRequest
   * @return ListDelegationControlsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListDelegationControls.ts.html |here} to see how to use ListDelegationControls API.
   */
  public async listDelegationControls(
    listDelegationControlsRequest: requests.ListDelegationControlsRequest
  ): Promise<responses.ListDelegationControlsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DelegateAccessControlClient#listDelegationControls.");
    const operationName = "listDelegationControls";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDelegationControlsRequest.compartmentId,
      "lifecycleState": listDelegationControlsRequest.lifecycleState,
      "displayName": listDelegationControlsRequest.displayName,
      "resourceType": listDelegationControlsRequest.resourceType,
      "resourceId": listDelegationControlsRequest.resourceId,
      "limit": listDelegationControlsRequest.limit,
      "page": listDelegationControlsRequest.page,
      "sortOrder": listDelegationControlsRequest.sortOrder,
      "sortBy": listDelegationControlsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDelegationControlsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDelegationControlsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationControls",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDelegationControlsResponse>{},
        body: await response.json(),
        bodyKey: "delegationControlSummaryCollection",
        bodyModel: model.DelegationControlSummaryCollection,
        type: "model.DelegationControlSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Delegation Subscriptions in Delegation Control.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDelegationSubscriptionsRequest
   * @return ListDelegationSubscriptionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListDelegationSubscriptions.ts.html |here} to see how to use ListDelegationSubscriptions API.
   */
  public async listDelegationSubscriptions(
    listDelegationSubscriptionsRequest: requests.ListDelegationSubscriptionsRequest
  ): Promise<responses.ListDelegationSubscriptionsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#listDelegationSubscriptions."
      );
    const operationName = "listDelegationSubscriptions";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDelegationSubscriptionsRequest.compartmentId,
      "lifecycleState": listDelegationSubscriptionsRequest.lifecycleState,
      "displayName": listDelegationSubscriptionsRequest.displayName,
      "limit": listDelegationSubscriptionsRequest.limit,
      "page": listDelegationSubscriptionsRequest.page,
      "sortOrder": listDelegationSubscriptionsRequest.sortOrder,
      "sortBy": listDelegationSubscriptionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDelegationSubscriptionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDelegationSubscriptionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationSubscriptions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDelegationSubscriptionsResponse>{},
        body: await response.json(),
        bodyKey: "delegationSubscriptionSummaryCollection",
        bodyModel: model.DelegationSubscriptionSummaryCollection,
        type: "model.DelegationSubscriptionSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all the ServiceProviderActions available in the system.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListServiceProviderActionsRequest
   * @return ListServiceProviderActionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListServiceProviderActions.ts.html |here} to see how to use ListServiceProviderActions API.
   */
  public async listServiceProviderActions(
    listServiceProviderActionsRequest: requests.ListServiceProviderActionsRequest
  ): Promise<responses.ListServiceProviderActionsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#listServiceProviderActions."
      );
    const operationName = "listServiceProviderActions";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "name": listServiceProviderActionsRequest.name,
      "resourceType": listServiceProviderActionsRequest.resourceType,
      "serviceProviderServiceType": listServiceProviderActionsRequest.serviceProviderServiceType,
      "compartmentId": listServiceProviderActionsRequest.compartmentId,
      "lifecycleState": listServiceProviderActionsRequest.lifecycleState,
      "limit": listServiceProviderActionsRequest.limit,
      "page": listServiceProviderActionsRequest.page,
      "sortOrder": listServiceProviderActionsRequest.sortOrder,
      "sortBy": listServiceProviderActionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listServiceProviderActionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listServiceProviderActionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceProviderActions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListServiceProviderActionsResponse>{},
        body: await response.json(),
        bodyKey: "serviceProviderActionSummaryCollection",
        bodyModel: model.ServiceProviderActionSummaryCollection,
        type: "model.ServiceProviderActionSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the MoreInformation interaction between customer and support operators.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListServiceProviderInteractionsRequest
   * @return ListServiceProviderInteractionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListServiceProviderInteractions.ts.html |here} to see how to use ListServiceProviderInteractions API.
   */
  public async listServiceProviderInteractions(
    listServiceProviderInteractionsRequest: requests.ListServiceProviderInteractionsRequest
  ): Promise<responses.ListServiceProviderInteractionsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#listServiceProviderInteractions."
      );
    const operationName = "listServiceProviderInteractions";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegatedResourceAccessRequestId}":
        listServiceProviderInteractionsRequest.delegatedResourceAccessRequestId
    };

    const queryParams = {
      "limit": listServiceProviderInteractionsRequest.limit,
      "page": listServiceProviderInteractionsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listServiceProviderInteractionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listServiceProviderInteractionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/serviceProviderInteractions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListServiceProviderInteractionsResponse>{},
        body: await response.json(),
        bodyKey: "serviceProviderInteractionCollection",
        bodyModel: model.ServiceProviderInteractionCollection,
        type: "model.ServiceProviderInteractionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Service Providers.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListServiceProvidersRequest
   * @return ListServiceProvidersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListServiceProviders.ts.html |here} to see how to use ListServiceProviders API.
   */
  public async listServiceProviders(
    listServiceProvidersRequest: requests.ListServiceProvidersRequest
  ): Promise<responses.ListServiceProvidersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DelegateAccessControlClient#listServiceProviders.");
    const operationName = "listServiceProviders";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listServiceProvidersRequest.compartmentId,
      "lifecycleState": listServiceProvidersRequest.lifecycleState,
      "name": listServiceProvidersRequest.name,
      "supportedResourceType": listServiceProvidersRequest.supportedResourceType,
      "serviceProviderType": listServiceProvidersRequest.serviceProviderType,
      "limit": listServiceProvidersRequest.limit,
      "page": listServiceProvidersRequest.page,
      "sortOrder": listServiceProvidersRequest.sortOrder,
      "sortBy": listServiceProvidersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listServiceProvidersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listServiceProvidersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceProviders",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListServiceProvidersResponse>{},
        body: await response.json(),
        bodyKey: "serviceProviderSummaryCollection",
        bodyModel: model.ServiceProviderSummaryCollection,
        type: "model.ServiceProviderSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Rejects a Delegated Resource Access Request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RejectDelegatedResourceAccessRequestRequest
   * @return RejectDelegatedResourceAccessRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/RejectDelegatedResourceAccessRequest.ts.html |here} to see how to use RejectDelegatedResourceAccessRequest API.
   */
  public async rejectDelegatedResourceAccessRequest(
    rejectDelegatedResourceAccessRequestRequest: requests.RejectDelegatedResourceAccessRequestRequest
  ): Promise<responses.RejectDelegatedResourceAccessRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#rejectDelegatedResourceAccessRequest."
      );
    const operationName = "rejectDelegatedResourceAccessRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegatedResourceAccessRequestId}":
        rejectDelegatedResourceAccessRequestRequest.delegatedResourceAccessRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": rejectDelegatedResourceAccessRequestRequest.opcRetryToken,
      "if-match": rejectDelegatedResourceAccessRequestRequest.ifMatch,
      "opc-request-id": rejectDelegatedResourceAccessRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      rejectDelegatedResourceAccessRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/actions/reject",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        rejectDelegatedResourceAccessRequestRequest.rejectDelegatedResourceAccessRequestDetails,
        "RejectDelegatedResourceAccessRequestDetails",
        model.RejectDelegatedResourceAccessRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RejectDelegatedResourceAccessRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Revokes an already approved Delegated Resource Access Request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RevokeDelegatedResourceAccessRequestRequest
   * @return RevokeDelegatedResourceAccessRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/RevokeDelegatedResourceAccessRequest.ts.html |here} to see how to use RevokeDelegatedResourceAccessRequest API.
   */
  public async revokeDelegatedResourceAccessRequest(
    revokeDelegatedResourceAccessRequestRequest: requests.RevokeDelegatedResourceAccessRequestRequest
  ): Promise<responses.RevokeDelegatedResourceAccessRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#revokeDelegatedResourceAccessRequest."
      );
    const operationName = "revokeDelegatedResourceAccessRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegatedResourceAccessRequestId}":
        revokeDelegatedResourceAccessRequestRequest.delegatedResourceAccessRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": revokeDelegatedResourceAccessRequestRequest.opcRetryToken,
      "if-match": revokeDelegatedResourceAccessRequestRequest.ifMatch,
      "opc-request-id": revokeDelegatedResourceAccessRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      revokeDelegatedResourceAccessRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/actions/revoke",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        revokeDelegatedResourceAccessRequestRequest.revokeDelegatedResourceAccessRequestDetails,
        "RevokeDelegatedResourceAccessRequestDetails",
        model.RevokeDelegatedResourceAccessRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RevokeDelegatedResourceAccessRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Posts query for additional information for the given Delegated Resource Access Request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ServiceProviderInteractionRequestRequest
   * @return ServiceProviderInteractionRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ServiceProviderInteractionRequest.ts.html |here} to see how to use ServiceProviderInteractionRequest API.
   */
  public async serviceProviderInteractionRequest(
    serviceProviderInteractionRequestRequest: requests.ServiceProviderInteractionRequestRequest
  ): Promise<responses.ServiceProviderInteractionRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#serviceProviderInteractionRequest."
      );
    const operationName = "serviceProviderInteractionRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegatedResourceAccessRequestId}":
        serviceProviderInteractionRequestRequest.delegatedResourceAccessRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": serviceProviderInteractionRequestRequest.opcRetryToken,
      "if-match": serviceProviderInteractionRequestRequest.ifMatch,
      "opc-request-id": serviceProviderInteractionRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      serviceProviderInteractionRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/actions/serviceProviderInteractionRequest",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        serviceProviderInteractionRequestRequest.serviceProviderInteractionRequestDetails,
        "ServiceProviderInteractionRequestDetails",
        model.ServiceProviderInteractionRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ServiceProviderInteractionRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the existing DelegationControl for a given Delegation Control ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDelegationControlRequest
   * @return UpdateDelegationControlResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/UpdateDelegationControl.ts.html |here} to see how to use UpdateDelegationControl API.
   */
  public async updateDelegationControl(
    updateDelegationControlRequest: requests.UpdateDelegationControlRequest
  ): Promise<responses.UpdateDelegationControlResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DelegateAccessControlClient#updateDelegationControl.");
    const operationName = "updateDelegationControl";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegationControlId}": updateDelegationControlRequest.delegationControlId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDelegationControlRequest.ifMatch,
      "opc-request-id": updateDelegationControlRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDelegationControlRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationControls/{delegationControlId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDelegationControlRequest.updateDelegationControlDetails,
        "UpdateDelegationControlDetails",
        model.UpdateDelegationControlDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDelegationControlResponse>{},
        body: await response.json(),
        bodyKey: "delegationControl",
        bodyModel: model.DelegationControl,
        type: "model.DelegationControl",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the existing DelegationSubscription for a given Delegation Subscription ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDelegationSubscriptionRequest
   * @return UpdateDelegationSubscriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/UpdateDelegationSubscription.ts.html |here} to see how to use UpdateDelegationSubscription API.
   */
  public async updateDelegationSubscription(
    updateDelegationSubscriptionRequest: requests.UpdateDelegationSubscriptionRequest
  ): Promise<responses.UpdateDelegationSubscriptionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DelegateAccessControlClient#updateDelegationSubscription."
      );
    const operationName = "updateDelegationSubscription";
    const apiReferenceLink = "";
    const pathParams = {
      "{delegationSubscriptionId}": updateDelegationSubscriptionRequest.delegationSubscriptionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDelegationSubscriptionRequest.ifMatch,
      "opc-request-id": updateDelegationSubscriptionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDelegationSubscriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/delegationSubscriptions/{delegationSubscriptionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDelegationSubscriptionRequest.updateDelegationSubscriptionDetails,
        "UpdateDelegationSubscriptionDetails",
        model.UpdateDelegationSubscriptionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDelegationSubscriptionResponse>{},
        body: await response.json(),
        bodyKey: "delegationSubscription",
        bodyModel: model.DelegationSubscription,
        type: "model.DelegationSubscription",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum WorkRequestApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class WorkRequestClient {
  protected static serviceEndpointTemplate =
    "https://delegate-access-control.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": WorkRequestWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "WorkRequest";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("delegateaccesscontrol")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("delegateaccesscontrol");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20230801";
    if (this.logger) this.logger.info(`WorkRequestClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        WorkRequestClient.serviceEndpointTemplate,
        this._region,
        WorkRequestClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        WorkRequestClient.serviceEndpointTemplate,
        this._regionId,
        WorkRequestClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      WorkRequestClient.serviceEndpointTemplate,
      region,
      WorkRequestClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      WorkRequestClient.serviceEndpointTemplate,
      regionId,
      WorkRequestClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new WorkRequestWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): WorkRequestWaiter {
    this._waiters = new WorkRequestWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): WorkRequestWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Gets details of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of errors for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WorkRequestClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of logs for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
