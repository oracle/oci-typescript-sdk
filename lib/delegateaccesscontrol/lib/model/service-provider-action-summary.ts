/**
 * Oracle Delegate Access Control API
 * Oracle Delegate Access Control allows ExaCC and ExaCS customers to delegate management of their Exadata resources operators outside their tenancies. 
With Delegate Access Control, Support Providers can deliver managed services using comprehensive and robust tooling built on the OCI platform. 
Customers maintain control over who has access to the delegated resources in their tenancy and what actions can be taken. 
Enterprises managing resources across multiple tenants can use Delegate Access Control to streamline management tasks.
Using logging service, customers can view a near real-time audit report of all actions performed by a Service Provider operator. 

 * OpenAPI spec version: 20230801
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Details of the Service Provider Action. Service provider actions are pre-defined set of commands available to the support operator on different layers of the infrastructure.
 */
export interface ServiceProviderActionSummary {
  /**
   * Unique identifier assigned by Oracle to a Service Provider Action.
   */
  "id": string;
  /**
   * Name of the Service Provider Action.
   */
  "name": string;
  /**
   * Display Name of the Service Provider Action.
   */
  "customerDisplayName"?: string;
  /**
   * Name of the component for which the Service Provider Action is applicable.
   */
  "component"?: string;
  /**
   * resourceType for which the ServiceProviderAction is applicable
   */
  "resourceType"?: model.DelegationControlResourceType;
  /**
   * List of Service Provider Service Types that this Service Provider Action is applicable to.
   */
  "serviceProviderServiceTypes"?: Array<ServiceProviderActionSummary.ServiceProviderServiceTypes>;
  /**
   * The current lifecycle state of the Service Provider Action.
   */
  "lifecycleState"?: string;
  /**
   * Description of the Service Provider Action in terms of associated risk profile, and characteristics of the operating system commands made
   * available to the support operator under this Service Provider Action.
   *
   */
  "description"?: string;
}

export namespace ServiceProviderActionSummary {
  export enum ServiceProviderServiceTypes {
    Troubleshooting = "TROUBLESHOOTING",
    AssistedPatching = "ASSISTED_PATCHING",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ServiceProviderActionSummary): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ServiceProviderActionSummary): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
