/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The details of an external database feature configuration.
 */
export interface DatabaseFeatureConfiguration {
  /**
   * The list of statuses for Database Management features.
   *
   */
  "featureStatus": DatabaseFeatureConfiguration.FeatureStatus;
  "connectorDetails"?:
    | model.ExternalConnectorDetails
    | model.MacsConnectorDetails
    | model.PrivateEndPointConnectorDetails;
  "databaseConnectionDetails"?: model.DatabaseConnectionDetails;

  "feature": string;
}

export namespace DatabaseFeatureConfiguration {
  export enum FeatureStatus {
    Enabled = "ENABLED",
    NotEnabled = "NOT_ENABLED",
    Unsupported = "UNSUPPORTED",
    FailedEnabling = "FAILED_ENABLING",
    FailedDisabling = "FAILED_DISABLING",
    Failed = "FAILED",
    EnabledWithWarnings = "ENABLED_WITH_WARNINGS",
    PendingDisable = "PENDING_DISABLE",
    Enabling = "ENABLING",
    Disabling = "DISABLING",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: DatabaseFeatureConfiguration): object {
    const jsonObj = {
      ...obj,
      ...{
        "connectorDetails": obj.connectorDetails
          ? model.ConnectorDetails.getJsonObj(obj.connectorDetails)
          : undefined,
        "databaseConnectionDetails": obj.databaseConnectionDetails
          ? model.DatabaseConnectionDetails.getJsonObj(obj.databaseConnectionDetails)
          : undefined
      }
    };

    if (obj && "feature" in obj && obj.feature) {
      switch (obj.feature) {
        case "DIAGNOSTICS_AND_MANAGEMENT":
          return model.DatabaseDiagnosticsAndManagementFeatureConfiguration.getJsonObj(
            <model.DatabaseDiagnosticsAndManagementFeatureConfiguration>(<object>jsonObj),
            true
          );
        case "DB_LIFECYCLE_MANAGEMENT":
          return model.DatabaseLifecycleFeatureConfiguration.getJsonObj(
            <model.DatabaseLifecycleFeatureConfiguration>(<object>jsonObj),
            true
          );
        case "SQLWATCH":
          return model.DatabaseSqlWatchFeatureConfiguration.getJsonObj(
            <model.DatabaseSqlWatchFeatureConfiguration>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.feature}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DatabaseFeatureConfiguration): object {
    const jsonObj = {
      ...obj,
      ...{
        "connectorDetails": obj.connectorDetails
          ? model.ConnectorDetails.getDeserializedJsonObj(obj.connectorDetails)
          : undefined,
        "databaseConnectionDetails": obj.databaseConnectionDetails
          ? model.DatabaseConnectionDetails.getDeserializedJsonObj(obj.databaseConnectionDetails)
          : undefined
      }
    };

    if (obj && "feature" in obj && obj.feature) {
      switch (obj.feature) {
        case "DIAGNOSTICS_AND_MANAGEMENT":
          return model.DatabaseDiagnosticsAndManagementFeatureConfiguration.getDeserializedJsonObj(
            <model.DatabaseDiagnosticsAndManagementFeatureConfiguration>(<object>jsonObj),
            true
          );
        case "DB_LIFECYCLE_MANAGEMENT":
          return model.DatabaseLifecycleFeatureConfiguration.getDeserializedJsonObj(
            <model.DatabaseLifecycleFeatureConfiguration>(<object>jsonObj),
            true
          );
        case "SQLWATCH":
          return model.DatabaseSqlWatchFeatureConfiguration.getDeserializedJsonObj(
            <model.DatabaseSqlWatchFeatureConfiguration>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.feature}`);
      }
    }
    return jsonObj;
  }
}
