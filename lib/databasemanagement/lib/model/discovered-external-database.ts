/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The details of an external Oracle Database discovered in an external DB system discovery run.
 */
export interface DiscoveredExternalDatabase extends model.DiscoveredExternalDbSystemComponent {
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
   */
  "compartmentId": string;
  /**
   * The {@code DB_UNIQUE_NAME} of the external database.
   */
  "dbUniqueName": string;
  /**
   * The type of Oracle Database. Indicates whether the database is a Container Database,
   * Pluggable Database, or a Non-container Database.
   *
   */
  "dbType"?: model.DatabaseSubType;
  /**
   * Indicates whether the Oracle Database is part of a cluster.
   */
  "isCluster"?: boolean;
  /**
   * The Oracle Database edition.
   */
  "dbEdition"?: string;
  /**
   * The Oracle Database ID.
   */
  "dbId"?: string;
  /**
   * The database packs licensed for the external Oracle Database.
   */
  "dbPacks"?: string;
  /**
   * The role of the Oracle Database in Oracle Data Guard configuration.
   */
  "dbRole"?: DiscoveredExternalDatabase.DbRole;
  /**
   * The Oracle Database version.
   */
  "dbVersion"?: string;
  /**
   * The list of Pluggable Databases.
   */
  "pluggableDatabases"?: Array<model.DiscoveredExternalPluggableDatabase>;
  "connector"?: model.ExternalDbSystemDiscoveryMacsConnector;
  /**
   * Indicates whether Diagnostics & Management should be enabled for all the current pluggable databases in the container database.
   */
  "canEnableAllCurrentPdbs"?: boolean;
  /**
   * Indicates whether Diagnostics & Management should be enabled automatically for all the pluggable databases in the container database.
   */
  "isAutoEnablePluggableDatabase"?: boolean;

  "componentType": string;
}

export namespace DiscoveredExternalDatabase {
  export enum DbRole {
    LogicalStandby = "LOGICAL_STANDBY",
    PhysicalStandby = "PHYSICAL_STANDBY",
    SnapshotStandby = "SNAPSHOT_STANDBY",
    Primary = "PRIMARY",
    FarSync = "FAR_SYNC",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: DiscoveredExternalDatabase, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.DiscoveredExternalDbSystemComponent.getJsonObj(
            obj
          ) as DiscoveredExternalDatabase)),
      ...{
        "pluggableDatabases": obj.pluggableDatabases
          ? obj.pluggableDatabases.map(item => {
              return model.DiscoveredExternalPluggableDatabase.getJsonObj(item);
            })
          : undefined,
        "connector": obj.connector
          ? model.ExternalDbSystemDiscoveryConnector.getJsonObj(obj.connector)
          : undefined
      }
    };

    return jsonObj;
  }
  export const componentType = "DATABASE";
  export function getDeserializedJsonObj(
    obj: DiscoveredExternalDatabase,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.DiscoveredExternalDbSystemComponent.getDeserializedJsonObj(
            obj
          ) as DiscoveredExternalDatabase)),
      ...{
        "pluggableDatabases": obj.pluggableDatabases
          ? obj.pluggableDatabases.map(item => {
              return model.DiscoveredExternalPluggableDatabase.getDeserializedJsonObj(item);
            })
          : undefined,
        "connector": obj.connector
          ? model.ExternalDbSystemDiscoveryConnector.getDeserializedJsonObj(obj.connector)
          : undefined
      }
    };

    return jsonObj;
  }
}
