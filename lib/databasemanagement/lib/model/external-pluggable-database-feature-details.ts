/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems. 
For more information, see [Database Management](/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The details required to enable the specified Database Management feature.
 */
export interface ExternalPluggableDatabaseFeatureDetails {
  "connectorDetails":
    | model.ExternalConnectorDetails
    | model.MacsConnectorDetails
    | model.PrivateEndPointConnectorDetails;

  "feature": string;
}

export namespace ExternalPluggableDatabaseFeatureDetails {
  export function getJsonObj(obj: ExternalPluggableDatabaseFeatureDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "connectorDetails": obj.connectorDetails
          ? model.ConnectorDetails.getJsonObj(obj.connectorDetails)
          : undefined
      }
    };

    if (obj && "feature" in obj && obj.feature) {
      switch (obj.feature) {
        case "DIAGNOSTICS_AND_MANAGEMENT":
          return model.ExternalPluggableDatabaseDiagnosticsAndManagementFeatureDetails.getJsonObj(
            <model.ExternalPluggableDatabaseDiagnosticsAndManagementFeatureDetails>(
              (<object>jsonObj)
            ),
            true
          );
        case "DB_LIFECYCLE_MANAGEMENT":
          return model.ExternalPluggableDatabaseLifecycleManagementFeatureDetails.getJsonObj(
            <model.ExternalPluggableDatabaseLifecycleManagementFeatureDetails>(<object>jsonObj),
            true
          );
        case "SQLWATCH":
          return model.ExternalPluggableDatabaseSqlWatchFeatureDetails.getJsonObj(
            <model.ExternalPluggableDatabaseSqlWatchFeatureDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.feature}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ExternalPluggableDatabaseFeatureDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "connectorDetails": obj.connectorDetails
          ? model.ConnectorDetails.getDeserializedJsonObj(obj.connectorDetails)
          : undefined
      }
    };

    if (obj && "feature" in obj && obj.feature) {
      switch (obj.feature) {
        case "DIAGNOSTICS_AND_MANAGEMENT":
          return model.ExternalPluggableDatabaseDiagnosticsAndManagementFeatureDetails.getDeserializedJsonObj(
            <model.ExternalPluggableDatabaseDiagnosticsAndManagementFeatureDetails>(
              (<object>jsonObj)
            ),
            true
          );
        case "DB_LIFECYCLE_MANAGEMENT":
          return model.ExternalPluggableDatabaseLifecycleManagementFeatureDetails.getDeserializedJsonObj(
            <model.ExternalPluggableDatabaseLifecycleManagementFeatureDetails>(<object>jsonObj),
            true
          );
        case "SQLWATCH":
          return model.ExternalPluggableDatabaseSqlWatchFeatureDetails.getDeserializedJsonObj(
            <model.ExternalPluggableDatabaseSqlWatchFeatureDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.feature}`);
      }
    }
    return jsonObj;
  }
}
