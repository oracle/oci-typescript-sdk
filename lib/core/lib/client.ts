/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.
The required permissions are documented in the
[Details for the Core Services](/iaas/Content/Identity/Reference/corepolicyreference.htm) article.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { WorkRequestClient } from "oci-workrequests";
import { BlockstorageWaiter } from "./blockstorage-waiter";
import { ComputeWaiter } from "./compute-waiter";
import { ComputeManagementWaiter } from "./computemanagement-waiter";
import { VirtualNetworkWaiter } from "./virtualnetwork-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum BlockstorageApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class BlockstorageClient {
  protected static serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": BlockstorageWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Blockstorage";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("core")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("core");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20160918";
    if (this.logger) this.logger.info(`BlockstorageClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        BlockstorageClient.serviceEndpointTemplate,
        this._region,
        BlockstorageClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        BlockstorageClient.serviceEndpointTemplate,
        this._regionId,
        BlockstorageClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      BlockstorageClient.serviceEndpointTemplate,
      region,
      BlockstorageClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      BlockstorageClient.serviceEndpointTemplate,
      regionId,
      BlockstorageClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new BlockstorageWaiter for resources for this service.
   *
   * @param workRequestClient The work request service client used to query for work request status
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(
    workRequestClient: WorkRequestClient,
    config?: common.WaiterConfiguration
  ): BlockstorageWaiter {
    this._waiters = new BlockstorageWaiter(this, workRequestClient, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): BlockstorageWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Moves a boot volume backup into a different compartment within the same tenancy.
   * For information about moving resources between compartments,
   * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeBootVolumeBackupCompartmentRequest
   * @return ChangeBootVolumeBackupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeBootVolumeBackupCompartment.ts.html |here} to see how to use ChangeBootVolumeBackupCompartment API.
   */
  public async changeBootVolumeBackupCompartment(
    changeBootVolumeBackupCompartmentRequest: requests.ChangeBootVolumeBackupCompartmentRequest
  ): Promise<responses.ChangeBootVolumeBackupCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#changeBootVolumeBackupCompartment.");
    const operationName = "changeBootVolumeBackupCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeBackup/ChangeBootVolumeBackupCompartment";
    const pathParams = {
      "{bootVolumeBackupId}": changeBootVolumeBackupCompartmentRequest.bootVolumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeBootVolumeBackupCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeBootVolumeBackupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups/{bootVolumeBackupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeBootVolumeBackupCompartmentRequest.changeBootVolumeBackupCompartmentDetails,
        "ChangeBootVolumeBackupCompartmentDetails",
        model.ChangeBootVolumeBackupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeBootVolumeBackupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a boot volume into a different compartment within the same tenancy.
   * For information about moving resources between compartments,
   * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeBootVolumeCompartmentRequest
   * @return ChangeBootVolumeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeBootVolumeCompartment.ts.html |here} to see how to use ChangeBootVolumeCompartment API.
   */
  public async changeBootVolumeCompartment(
    changeBootVolumeCompartmentRequest: requests.ChangeBootVolumeCompartmentRequest
  ): Promise<responses.ChangeBootVolumeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#changeBootVolumeCompartment.");
    const operationName = "changeBootVolumeCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolume/ChangeBootVolumeCompartment";
    const pathParams = {
      "{bootVolumeId}": changeBootVolumeCompartmentRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeBootVolumeCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeBootVolumeCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeBootVolumeCompartmentRequest.changeBootVolumeCompartmentDetails,
        "ChangeBootVolumeCompartmentDetails",
        model.ChangeBootVolumeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeBootVolumeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a volume backup into a different compartment within the same tenancy.
   * For information about moving resources between compartments,
   * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeVolumeBackupCompartmentRequest
   * @return ChangeVolumeBackupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVolumeBackupCompartment.ts.html |here} to see how to use ChangeVolumeBackupCompartment API.
   */
  public async changeVolumeBackupCompartment(
    changeVolumeBackupCompartmentRequest: requests.ChangeVolumeBackupCompartmentRequest
  ): Promise<responses.ChangeVolumeBackupCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#changeVolumeBackupCompartment.");
    const operationName = "changeVolumeBackupCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackup/ChangeVolumeBackupCompartment";
    const pathParams = {
      "{volumeBackupId}": changeVolumeBackupCompartmentRequest.volumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeVolumeBackupCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeVolumeBackupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups/{volumeBackupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVolumeBackupCompartmentRequest.changeVolumeBackupCompartmentDetails,
        "ChangeVolumeBackupCompartmentDetails",
        model.ChangeVolumeBackupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVolumeBackupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a volume into a different compartment within the same tenancy.
   * For information about moving resources between compartments,
   * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeVolumeCompartmentRequest
   * @return ChangeVolumeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVolumeCompartment.ts.html |here} to see how to use ChangeVolumeCompartment API.
   */
  public async changeVolumeCompartment(
    changeVolumeCompartmentRequest: requests.ChangeVolumeCompartmentRequest
  ): Promise<responses.ChangeVolumeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#changeVolumeCompartment.");
    const operationName = "changeVolumeCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Volume/ChangeVolumeCompartment";
    const pathParams = {
      "{volumeId}": changeVolumeCompartmentRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeVolumeCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeVolumeCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVolumeCompartmentRequest.changeVolumeCompartmentDetails,
        "ChangeVolumeCompartmentDetails",
        model.ChangeVolumeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVolumeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a volume group backup into a different compartment within the same tenancy.
   * For information about moving resources between compartments,
   * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeVolumeGroupBackupCompartmentRequest
   * @return ChangeVolumeGroupBackupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVolumeGroupBackupCompartment.ts.html |here} to see how to use ChangeVolumeGroupBackupCompartment API.
   */
  public async changeVolumeGroupBackupCompartment(
    changeVolumeGroupBackupCompartmentRequest: requests.ChangeVolumeGroupBackupCompartmentRequest
  ): Promise<responses.ChangeVolumeGroupBackupCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#changeVolumeGroupBackupCompartment.");
    const operationName = "changeVolumeGroupBackupCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroupBackup/ChangeVolumeGroupBackupCompartment";
    const pathParams = {
      "{volumeGroupBackupId}": changeVolumeGroupBackupCompartmentRequest.volumeGroupBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeVolumeGroupBackupCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeVolumeGroupBackupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups/{volumeGroupBackupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVolumeGroupBackupCompartmentRequest.changeVolumeGroupBackupCompartmentDetails,
        "ChangeVolumeGroupBackupCompartmentDetails",
        model.ChangeVolumeGroupBackupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVolumeGroupBackupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a volume group into a different compartment within the same tenancy.
   * For information about moving resources between compartments,
   * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeVolumeGroupCompartmentRequest
   * @return ChangeVolumeGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVolumeGroupCompartment.ts.html |here} to see how to use ChangeVolumeGroupCompartment API.
   */
  public async changeVolumeGroupCompartment(
    changeVolumeGroupCompartmentRequest: requests.ChangeVolumeGroupCompartmentRequest
  ): Promise<responses.ChangeVolumeGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#changeVolumeGroupCompartment.");
    const operationName = "changeVolumeGroupCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroup/ChangeVolumeGroupCompartment";
    const pathParams = {
      "{volumeGroupId}": changeVolumeGroupCompartmentRequest.volumeGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeVolumeGroupCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeVolumeGroupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroups/{volumeGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVolumeGroupCompartmentRequest.changeVolumeGroupCompartmentDetails,
        "ChangeVolumeGroupCompartmentDetails",
        model.ChangeVolumeGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVolumeGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a boot volume backup copy in specified region. For general information about volume backups,
   * see [Overview of Boot Volume Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/bootvolumebackups.htm)
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CopyBootVolumeBackupRequest
   * @return CopyBootVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CopyBootVolumeBackup.ts.html |here} to see how to use CopyBootVolumeBackup API.
   */
  public async copyBootVolumeBackup(
    copyBootVolumeBackupRequest: requests.CopyBootVolumeBackupRequest
  ): Promise<responses.CopyBootVolumeBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#copyBootVolumeBackup.");
    const operationName = "copyBootVolumeBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeBackup/CopyBootVolumeBackup";
    const pathParams = {
      "{bootVolumeBackupId}": copyBootVolumeBackupRequest.bootVolumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": copyBootVolumeBackupRequest.opcRetryToken,
      "opc-request-id": copyBootVolumeBackupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      copyBootVolumeBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups/{bootVolumeBackupId}/actions/copy",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        copyBootVolumeBackupRequest.copyBootVolumeBackupDetails,
        "CopyBootVolumeBackupDetails",
        model.CopyBootVolumeBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CopyBootVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeBackup",
        bodyModel: model.BootVolumeBackup,
        type: "model.BootVolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a volume backup copy in specified region. For general information about volume backups,
   * see [Overview of Block Volume Service Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/blockvolumebackups.htm)
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CopyVolumeBackupRequest
   * @return CopyVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CopyVolumeBackup.ts.html |here} to see how to use CopyVolumeBackup API.
   */
  public async copyVolumeBackup(
    copyVolumeBackupRequest: requests.CopyVolumeBackupRequest
  ): Promise<responses.CopyVolumeBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#copyVolumeBackup.");
    const operationName = "copyVolumeBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackup/CopyVolumeBackup";
    const pathParams = {
      "{volumeBackupId}": copyVolumeBackupRequest.volumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": copyVolumeBackupRequest.opcRetryToken,
      "opc-request-id": copyVolumeBackupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      copyVolumeBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups/{volumeBackupId}/actions/copy",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        copyVolumeBackupRequest.copyVolumeBackupDetails,
        "CopyVolumeBackupDetails",
        model.CopyVolumeBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CopyVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackup",
        bodyModel: model.VolumeBackup,
        type: "model.VolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a volume group backup copy in specified region. For general information about volume group backups,
   * see [Overview of Block Volume Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/blockvolumebackups.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CopyVolumeGroupBackupRequest
   * @return CopyVolumeGroupBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CopyVolumeGroupBackup.ts.html |here} to see how to use CopyVolumeGroupBackup API.
   */
  public async copyVolumeGroupBackup(
    copyVolumeGroupBackupRequest: requests.CopyVolumeGroupBackupRequest
  ): Promise<responses.CopyVolumeGroupBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#copyVolumeGroupBackup.");
    const operationName = "copyVolumeGroupBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroupBackup/CopyVolumeGroupBackup";
    const pathParams = {
      "{volumeGroupBackupId}": copyVolumeGroupBackupRequest.volumeGroupBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": copyVolumeGroupBackupRequest.opcRetryToken,
      "opc-request-id": copyVolumeGroupBackupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      copyVolumeGroupBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups/{volumeGroupBackupId}/actions/copy",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        copyVolumeGroupBackupRequest.copyVolumeGroupBackupDetails,
        "CopyVolumeGroupBackupDetails",
        model.CopyVolumeGroupBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CopyVolumeGroupBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroupBackup",
        bodyModel: model.VolumeGroupBackup,
        type: "model.VolumeGroupBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new boot volume in the specified compartment from an existing boot volume or a boot volume backup.
   * For general information about boot volumes, see [Boot Volumes](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/bootvolumes.htm).
   * You may optionally specify a *display name* for the volume, which is simply a friendly name or
   * description. It does not have to be unique, and you can change it. Avoid entering confidential information.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateBootVolumeRequest
   * @return CreateBootVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateBootVolume.ts.html |here} to see how to use CreateBootVolume API.
   */
  public async createBootVolume(
    createBootVolumeRequest: requests.CreateBootVolumeRequest
  ): Promise<responses.CreateBootVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#createBootVolume.");
    const operationName = "createBootVolume";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolume/CreateBootVolume";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createBootVolumeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBootVolumeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBootVolumeRequest.createBootVolumeDetails,
        "CreateBootVolumeDetails",
        model.CreateBootVolumeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBootVolumeResponse>{},
        body: await response.json(),
        bodyKey: "bootVolume",
        bodyModel: model.BootVolume,
        type: "model.BootVolume",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new boot volume backup of the specified boot volume. For general information about boot volume backups,
* see [Overview of Boot Volume Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/bootvolumebackups.htm)
* <p>
When the request is received, the backup object is in a REQUEST_RECEIVED state.
* When the data is imaged, it goes into a CREATING state.
* After the backup is fully uploaded to the cloud, it goes into an AVAILABLE state.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateBootVolumeBackupRequest
     * @return CreateBootVolumeBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateBootVolumeBackup.ts.html |here} to see how to use CreateBootVolumeBackup API.
     */
  public async createBootVolumeBackup(
    createBootVolumeBackupRequest: requests.CreateBootVolumeBackupRequest
  ): Promise<responses.CreateBootVolumeBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#createBootVolumeBackup.");
    const operationName = "createBootVolumeBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeBackup/CreateBootVolumeBackup";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createBootVolumeBackupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBootVolumeBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBootVolumeBackupRequest.createBootVolumeBackupDetails,
        "CreateBootVolumeBackupDetails",
        model.CreateBootVolumeBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBootVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeBackup",
        bodyModel: model.BootVolumeBackup,
        type: "model.BootVolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new volume in the specified compartment. Volumes can be created in sizes ranging from
* 50 GB (51200 MB) to 32 TB (33554432 MB), in 1 GB (1024 MB) increments. By default, volumes are 1 TB (1048576 MB).
* For general information about block volumes, see
* [Overview of Block Volume Service](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/overview.htm).
* <p>
A volume and instance can be in separate compartments but must be in the same availability domain.
* For information about access control and compartments, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about
* availability domains, see [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm).
* To get a list of availability domains, use the `ListAvailabilityDomains` operation
* in the Identity and Access Management Service API.
* <p>
You may optionally specify a *display name* for the volume, which is simply a friendly name or
* description. It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateVolumeRequest
     * @return CreateVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVolume.ts.html |here} to see how to use CreateVolume API.
     */
  public async createVolume(
    createVolumeRequest: requests.CreateVolumeRequest
  ): Promise<responses.CreateVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#createVolume.");
    const operationName = "createVolume";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Volume/CreateVolume";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVolumeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVolumeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVolumeRequest.createVolumeDetails,
        "CreateVolumeDetails",
        model.CreateVolumeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVolumeResponse>{},
        body: await response.json(),
        bodyKey: "volume",
        bodyModel: model.Volume,
        type: "model.Volume",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new backup of the specified volume. For general information about volume backups,
* see [Overview of Block Volume Service Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/blockvolumebackups.htm)
* <p>
When the request is received, the backup object is in a REQUEST_RECEIVED state.
* When the data is imaged, it goes into a CREATING state.
* After the backup is fully uploaded to the cloud, it goes into an AVAILABLE state.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateVolumeBackupRequest
     * @return CreateVolumeBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVolumeBackup.ts.html |here} to see how to use CreateVolumeBackup API.
     */
  public async createVolumeBackup(
    createVolumeBackupRequest: requests.CreateVolumeBackupRequest
  ): Promise<responses.CreateVolumeBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#createVolumeBackup.");
    const operationName = "createVolumeBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackup/CreateVolumeBackup";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVolumeBackupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVolumeBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVolumeBackupRequest.createVolumeBackupDetails,
        "CreateVolumeBackupDetails",
        model.CreateVolumeBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackup",
        bodyModel: model.VolumeBackup,
        type: "model.VolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new user defined backup policy.
* <p>
For more information about Oracle defined backup policies and user defined backup policies,
* see [Policy-Based Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/schedulingvolumebackups.htm).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateVolumeBackupPolicyRequest
     * @return CreateVolumeBackupPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVolumeBackupPolicy.ts.html |here} to see how to use CreateVolumeBackupPolicy API.
     */
  public async createVolumeBackupPolicy(
    createVolumeBackupPolicyRequest: requests.CreateVolumeBackupPolicyRequest
  ): Promise<responses.CreateVolumeBackupPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#createVolumeBackupPolicy.");
    const operationName = "createVolumeBackupPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackupPolicy/CreateVolumeBackupPolicy";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVolumeBackupPolicyRequest.opcRetryToken,
      "opc-request-id": createVolumeBackupPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVolumeBackupPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVolumeBackupPolicyRequest.createVolumeBackupPolicyDetails,
        "CreateVolumeBackupPolicyDetails",
        model.CreateVolumeBackupPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVolumeBackupPolicyResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackupPolicy",
        bodyModel: model.VolumeBackupPolicy,
        type: "model.VolumeBackupPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Assigns a volume backup policy to the specified volume. Note that a given volume can
   * only have one backup policy assigned to it. If this operation is used for a volume that already
   * has a different backup policy assigned, the prior backup policy will be silently unassigned.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateVolumeBackupPolicyAssignmentRequest
   * @return CreateVolumeBackupPolicyAssignmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVolumeBackupPolicyAssignment.ts.html |here} to see how to use CreateVolumeBackupPolicyAssignment API.
   */
  public async createVolumeBackupPolicyAssignment(
    createVolumeBackupPolicyAssignmentRequest: requests.CreateVolumeBackupPolicyAssignmentRequest
  ): Promise<responses.CreateVolumeBackupPolicyAssignmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#createVolumeBackupPolicyAssignment.");
    const operationName = "createVolumeBackupPolicyAssignment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackupPolicyAssignment/CreateVolumeBackupPolicyAssignment";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVolumeBackupPolicyAssignmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicyAssignments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVolumeBackupPolicyAssignmentRequest.createVolumeBackupPolicyAssignmentDetails,
        "CreateVolumeBackupPolicyAssignmentDetails",
        model.CreateVolumeBackupPolicyAssignmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVolumeBackupPolicyAssignmentResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackupPolicyAssignment",
        bodyModel: model.VolumeBackupPolicyAssignment,
        type: "model.VolumeBackupPolicyAssignment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new volume group in the specified compartment.
* A volume group is a collection of volumes and may be created from a list of volumes, cloning an existing
* volume group, or by restoring a volume group backup.
* You may optionally specify a *display name* for the volume group, which is simply a friendly name or
* description. It does not have to be unique, and you can change it. Avoid entering confidential information.
* <p>
For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateVolumeGroupRequest
     * @return CreateVolumeGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVolumeGroup.ts.html |here} to see how to use CreateVolumeGroup API.
     */
  public async createVolumeGroup(
    createVolumeGroupRequest: requests.CreateVolumeGroupRequest
  ): Promise<responses.CreateVolumeGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#createVolumeGroup.");
    const operationName = "createVolumeGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroup/CreateVolumeGroup";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVolumeGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVolumeGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVolumeGroupRequest.createVolumeGroupDetails,
        "CreateVolumeGroupDetails",
        model.CreateVolumeGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVolumeGroupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroup",
        bodyModel: model.VolumeGroup,
        type: "model.VolumeGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new backup volume group of the specified volume group.
   * For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateVolumeGroupBackupRequest
   * @return CreateVolumeGroupBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVolumeGroupBackup.ts.html |here} to see how to use CreateVolumeGroupBackup API.
   */
  public async createVolumeGroupBackup(
    createVolumeGroupBackupRequest: requests.CreateVolumeGroupBackupRequest
  ): Promise<responses.CreateVolumeGroupBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#createVolumeGroupBackup.");
    const operationName = "createVolumeGroupBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroupBackup/CreateVolumeGroupBackup";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVolumeGroupBackupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVolumeGroupBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVolumeGroupBackupRequest.createVolumeGroupBackupDetails,
        "CreateVolumeGroupBackupDetails",
        model.CreateVolumeGroupBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVolumeGroupBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroupBackup",
        bodyModel: model.VolumeGroupBackup,
        type: "model.VolumeGroupBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified boot volume. The volume cannot have an active connection to an instance.
   * To disconnect the boot volume from a connected instance, see
   * [Disconnecting From a Boot Volume](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/deletingbootvolume.htm).
   * **Warning:** All data on the boot volume will be permanently lost when the boot volume is deleted.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteBootVolumeRequest
   * @return DeleteBootVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteBootVolume.ts.html |here} to see how to use DeleteBootVolume API.
   */
  public async deleteBootVolume(
    deleteBootVolumeRequest: requests.DeleteBootVolumeRequest
  ): Promise<responses.DeleteBootVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#deleteBootVolume.");
    const operationName = "deleteBootVolume";
    const apiReferenceLink = "";
    const pathParams = {
      "{bootVolumeId}": deleteBootVolumeRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteBootVolumeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBootVolumeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBootVolumeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a boot volume backup.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteBootVolumeBackupRequest
   * @return DeleteBootVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteBootVolumeBackup.ts.html |here} to see how to use DeleteBootVolumeBackup API.
   */
  public async deleteBootVolumeBackup(
    deleteBootVolumeBackupRequest: requests.DeleteBootVolumeBackupRequest
  ): Promise<responses.DeleteBootVolumeBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#deleteBootVolumeBackup.");
    const operationName = "deleteBootVolumeBackup";
    const apiReferenceLink = "";
    const pathParams = {
      "{bootVolumeBackupId}": deleteBootVolumeBackupRequest.bootVolumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteBootVolumeBackupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBootVolumeBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups/{bootVolumeBackupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBootVolumeBackupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the specified boot volume's assigned Vault Service encryption key.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteBootVolumeKmsKeyRequest
   * @return DeleteBootVolumeKmsKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteBootVolumeKmsKey.ts.html |here} to see how to use DeleteBootVolumeKmsKey API.
   */
  public async deleteBootVolumeKmsKey(
    deleteBootVolumeKmsKeyRequest: requests.DeleteBootVolumeKmsKeyRequest
  ): Promise<responses.DeleteBootVolumeKmsKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#deleteBootVolumeKmsKey.");
    const operationName = "deleteBootVolumeKmsKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{bootVolumeId}": deleteBootVolumeKmsKeyRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteBootVolumeKmsKeyRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBootVolumeKmsKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}/kmsKey",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBootVolumeKmsKeyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified volume. The volume cannot have an active connection to an instance.
   * To disconnect the volume from a connected instance, see
   * [Disconnecting From a Volume](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/disconnectingfromavolume.htm).
   * **Warning:** All data on the volume will be permanently lost when the volume is deleted.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteVolumeRequest
   * @return DeleteVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolume.ts.html |here} to see how to use DeleteVolume API.
   */
  public async deleteVolume(
    deleteVolumeRequest: requests.DeleteVolumeRequest
  ): Promise<responses.DeleteVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#deleteVolume.");
    const operationName = "deleteVolume";
    const apiReferenceLink = "";
    const pathParams = {
      "{volumeId}": deleteVolumeRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVolumeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVolumeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a volume backup.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteVolumeBackupRequest
   * @return DeleteVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolumeBackup.ts.html |here} to see how to use DeleteVolumeBackup API.
   */
  public async deleteVolumeBackup(
    deleteVolumeBackupRequest: requests.DeleteVolumeBackupRequest
  ): Promise<responses.DeleteVolumeBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#deleteVolumeBackup.");
    const operationName = "deleteVolumeBackup";
    const apiReferenceLink = "";
    const pathParams = {
      "{volumeBackupId}": deleteVolumeBackupRequest.volumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVolumeBackupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVolumeBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups/{volumeBackupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeBackupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes a user defined backup policy.
*  For more information about user defined backup policies,
*  see [Policy-Based Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/schedulingvolumebackups.htm#UserDefinedBackupPolicies).
* <p>
 Avoid entering confidential information.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteVolumeBackupPolicyRequest
     * @return DeleteVolumeBackupPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolumeBackupPolicy.ts.html |here} to see how to use DeleteVolumeBackupPolicy API.
     */
  public async deleteVolumeBackupPolicy(
    deleteVolumeBackupPolicyRequest: requests.DeleteVolumeBackupPolicyRequest
  ): Promise<responses.DeleteVolumeBackupPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#deleteVolumeBackupPolicy.");
    const operationName = "deleteVolumeBackupPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{policyId}": deleteVolumeBackupPolicyRequest.policyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteVolumeBackupPolicyRequest.opcRequestId,
      "if-match": deleteVolumeBackupPolicyRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVolumeBackupPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicies/{policyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeBackupPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a volume backup policy assignment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteVolumeBackupPolicyAssignmentRequest
   * @return DeleteVolumeBackupPolicyAssignmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolumeBackupPolicyAssignment.ts.html |here} to see how to use DeleteVolumeBackupPolicyAssignment API.
   */
  public async deleteVolumeBackupPolicyAssignment(
    deleteVolumeBackupPolicyAssignmentRequest: requests.DeleteVolumeBackupPolicyAssignmentRequest
  ): Promise<responses.DeleteVolumeBackupPolicyAssignmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#deleteVolumeBackupPolicyAssignment.");
    const operationName = "deleteVolumeBackupPolicyAssignment";
    const apiReferenceLink = "";
    const pathParams = {
      "{policyAssignmentId}": deleteVolumeBackupPolicyAssignmentRequest.policyAssignmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVolumeBackupPolicyAssignmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVolumeBackupPolicyAssignmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicyAssignments/{policyAssignmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeBackupPolicyAssignmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified volume group. Individual volumes are not deleted, only the volume group is deleted.
   * For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteVolumeGroupRequest
   * @return DeleteVolumeGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolumeGroup.ts.html |here} to see how to use DeleteVolumeGroup API.
   */
  public async deleteVolumeGroup(
    deleteVolumeGroupRequest: requests.DeleteVolumeGroupRequest
  ): Promise<responses.DeleteVolumeGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#deleteVolumeGroup.");
    const operationName = "deleteVolumeGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{volumeGroupId}": deleteVolumeGroupRequest.volumeGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVolumeGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVolumeGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroups/{volumeGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a volume group backup. This operation deletes all the backups in
   * the volume group. For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteVolumeGroupBackupRequest
   * @return DeleteVolumeGroupBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolumeGroupBackup.ts.html |here} to see how to use DeleteVolumeGroupBackup API.
   */
  public async deleteVolumeGroupBackup(
    deleteVolumeGroupBackupRequest: requests.DeleteVolumeGroupBackupRequest
  ): Promise<responses.DeleteVolumeGroupBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#deleteVolumeGroupBackup.");
    const operationName = "deleteVolumeGroupBackup";
    const apiReferenceLink = "";
    const pathParams = {
      "{volumeGroupBackupId}": deleteVolumeGroupBackupRequest.volumeGroupBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVolumeGroupBackupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVolumeGroupBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups/{volumeGroupBackupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeGroupBackupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the specified volume's assigned Vault service encryption key.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteVolumeKmsKeyRequest
   * @return DeleteVolumeKmsKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolumeKmsKey.ts.html |here} to see how to use DeleteVolumeKmsKey API.
   */
  public async deleteVolumeKmsKey(
    deleteVolumeKmsKeyRequest: requests.DeleteVolumeKmsKeyRequest
  ): Promise<responses.DeleteVolumeKmsKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#deleteVolumeKmsKey.");
    const operationName = "deleteVolumeKmsKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{volumeId}": deleteVolumeKmsKeyRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVolumeKmsKeyRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVolumeKmsKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}/kmsKey",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeKmsKeyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified block volume replica.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBlockVolumeReplicaRequest
   * @return GetBlockVolumeReplicaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetBlockVolumeReplica.ts.html |here} to see how to use GetBlockVolumeReplica API.
   */
  public async getBlockVolumeReplica(
    getBlockVolumeReplicaRequest: requests.GetBlockVolumeReplicaRequest
  ): Promise<responses.GetBlockVolumeReplicaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#getBlockVolumeReplica.");
    const operationName = "getBlockVolumeReplica";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BlockVolumeReplica/GetBlockVolumeReplica";
    const pathParams = {
      "{blockVolumeReplicaId}": getBlockVolumeReplicaRequest.blockVolumeReplicaId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBlockVolumeReplicaRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockVolumeReplicas/{blockVolumeReplicaId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBlockVolumeReplicaResponse>{},
        body: await response.json(),
        bodyKey: "blockVolumeReplica",
        bodyModel: model.BlockVolumeReplica,
        type: "model.BlockVolumeReplica",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified boot volume.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBootVolumeRequest
   * @return GetBootVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetBootVolume.ts.html |here} to see how to use GetBootVolume API.
   */
  public async getBootVolume(
    getBootVolumeRequest: requests.GetBootVolumeRequest
  ): Promise<responses.GetBootVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getBootVolume.");
    const operationName = "getBootVolume";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolume/GetBootVolume";
    const pathParams = {
      "{bootVolumeId}": getBootVolumeRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBootVolumeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBootVolumeResponse>{},
        body: await response.json(),
        bodyKey: "bootVolume",
        bodyModel: model.BootVolume,
        type: "model.BootVolume",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified boot volume backup.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBootVolumeBackupRequest
   * @return GetBootVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetBootVolumeBackup.ts.html |here} to see how to use GetBootVolumeBackup API.
   */
  public async getBootVolumeBackup(
    getBootVolumeBackupRequest: requests.GetBootVolumeBackupRequest
  ): Promise<responses.GetBootVolumeBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getBootVolumeBackup.");
    const operationName = "getBootVolumeBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeBackup/GetBootVolumeBackup";
    const pathParams = {
      "{bootVolumeBackupId}": getBootVolumeBackupRequest.bootVolumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBootVolumeBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups/{bootVolumeBackupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBootVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeBackup",
        bodyModel: model.BootVolumeBackup,
        type: "model.BootVolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Vault service encryption key assigned to the specified boot volume.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBootVolumeKmsKeyRequest
   * @return GetBootVolumeKmsKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetBootVolumeKmsKey.ts.html |here} to see how to use GetBootVolumeKmsKey API.
   */
  public async getBootVolumeKmsKey(
    getBootVolumeKmsKeyRequest: requests.GetBootVolumeKmsKeyRequest
  ): Promise<responses.GetBootVolumeKmsKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getBootVolumeKmsKey.");
    const operationName = "getBootVolumeKmsKey";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeKmsKey/GetBootVolumeKmsKey";
    const pathParams = {
      "{bootVolumeId}": getBootVolumeKmsKeyRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": getBootVolumeKmsKeyRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBootVolumeKmsKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}/kmsKey",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBootVolumeKmsKeyResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeKmsKey",
        bodyModel: model.BootVolumeKmsKey,
        type: "model.BootVolumeKmsKey",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified boot volume replica.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBootVolumeReplicaRequest
   * @return GetBootVolumeReplicaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetBootVolumeReplica.ts.html |here} to see how to use GetBootVolumeReplica API.
   */
  public async getBootVolumeReplica(
    getBootVolumeReplicaRequest: requests.GetBootVolumeReplicaRequest
  ): Promise<responses.GetBootVolumeReplicaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#getBootVolumeReplica.");
    const operationName = "getBootVolumeReplica";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeReplica/GetBootVolumeReplica";
    const pathParams = {
      "{bootVolumeReplicaId}": getBootVolumeReplicaRequest.bootVolumeReplicaId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBootVolumeReplicaRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeReplicas/{bootVolumeReplicaId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBootVolumeReplicaResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeReplica",
        bodyModel: model.BootVolumeReplica,
        type: "model.BootVolumeReplica",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified volume.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVolumeRequest
   * @return GetVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolume.ts.html |here} to see how to use GetVolume API.
   */
  public async getVolume(
    getVolumeRequest: requests.GetVolumeRequest
  ): Promise<responses.GetVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getVolume.");
    const operationName = "getVolume";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Volume/GetVolume";
    const pathParams = {
      "{volumeId}": getVolumeRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVolumeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeResponse>{},
        body: await response.json(),
        bodyKey: "volume",
        bodyModel: model.Volume,
        type: "model.Volume",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified volume backup.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVolumeBackupRequest
   * @return GetVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeBackup.ts.html |here} to see how to use GetVolumeBackup API.
   */
  public async getVolumeBackup(
    getVolumeBackupRequest: requests.GetVolumeBackupRequest
  ): Promise<responses.GetVolumeBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getVolumeBackup.");
    const operationName = "getVolumeBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackup/GetVolumeBackup";
    const pathParams = {
      "{volumeBackupId}": getVolumeBackupRequest.volumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVolumeBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups/{volumeBackupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackup",
        bodyModel: model.VolumeBackup,
        type: "model.VolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified volume backup policy.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVolumeBackupPolicyRequest
   * @return GetVolumeBackupPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeBackupPolicy.ts.html |here} to see how to use GetVolumeBackupPolicy API.
   */
  public async getVolumeBackupPolicy(
    getVolumeBackupPolicyRequest: requests.GetVolumeBackupPolicyRequest
  ): Promise<responses.GetVolumeBackupPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#getVolumeBackupPolicy.");
    const operationName = "getVolumeBackupPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackupPolicy/GetVolumeBackupPolicy";
    const pathParams = {
      "{policyId}": getVolumeBackupPolicyRequest.policyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVolumeBackupPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicies/{policyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeBackupPolicyResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackupPolicy",
        bodyModel: model.VolumeBackupPolicy,
        type: "model.VolumeBackupPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the volume backup policy assignment for the specified volume. The
   * `assetId` query parameter is required, and the returned list will contain at most
   * one item, since volume can only have one volume backup policy assigned at a time.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVolumeBackupPolicyAssetAssignmentRequest
   * @return GetVolumeBackupPolicyAssetAssignmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeBackupPolicyAssetAssignment.ts.html |here} to see how to use GetVolumeBackupPolicyAssetAssignment API.
   */
  public async getVolumeBackupPolicyAssetAssignment(
    getVolumeBackupPolicyAssetAssignmentRequest: requests.GetVolumeBackupPolicyAssetAssignmentRequest
  ): Promise<responses.GetVolumeBackupPolicyAssetAssignmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation BlockstorageClient#getVolumeBackupPolicyAssetAssignment."
      );
    const operationName = "getVolumeBackupPolicyAssetAssignment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackupPolicyAssignment/GetVolumeBackupPolicyAssetAssignment";
    const pathParams = {};

    const queryParams = {
      "assetId": getVolumeBackupPolicyAssetAssignmentRequest.assetId,
      "limit": getVolumeBackupPolicyAssetAssignmentRequest.limit,
      "page": getVolumeBackupPolicyAssetAssignmentRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVolumeBackupPolicyAssetAssignmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicyAssignments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeBackupPolicyAssetAssignmentResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VolumeBackupPolicyAssignment,
        type: "Array<model.VolumeBackupPolicyAssignment>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of getVolumeBackupPolicyAssetAssignmentRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VolumeBackupPolicyAssignment objects
   * contained in responses from the getVolumeBackupPolicyAssetAssignment operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllVolumeBackupPolicyAssetAssignment(
    request: requests.GetVolumeBackupPolicyAssetAssignmentRequest
  ): AsyncIterableIterator<model.VolumeBackupPolicyAssignment> {
    return paginateRecords(request, req => this.getVolumeBackupPolicyAssetAssignment(req));
  }

  /**
   * NOTE: This function is deprecated in favor of getVolumeBackupPolicyAssetAssignmentResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the getVolumeBackupPolicyAssetAssignment operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllVolumeBackupPolicyAssetAssignmentResponses(
    request: requests.GetVolumeBackupPolicyAssetAssignmentRequest
  ): AsyncIterableIterator<responses.GetVolumeBackupPolicyAssetAssignmentResponse> {
    return paginateResponses(request, req => this.getVolumeBackupPolicyAssetAssignment(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeBackupPolicyAssignment objects
   * contained in responses from the getVolumeBackupPolicyAssetAssignment operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getVolumeBackupPolicyAssetAssignmentRecordIterator(
    request: requests.GetVolumeBackupPolicyAssetAssignmentRequest
  ): AsyncIterableIterator<model.VolumeBackupPolicyAssignment> {
    return paginateRecords(request, req => this.getVolumeBackupPolicyAssetAssignment(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the getVolumeBackupPolicyAssetAssignment operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getVolumeBackupPolicyAssetAssignmentResponseIterator(
    request: requests.GetVolumeBackupPolicyAssetAssignmentRequest
  ): AsyncIterableIterator<responses.GetVolumeBackupPolicyAssetAssignmentResponse> {
    return paginateResponses(request, req => this.getVolumeBackupPolicyAssetAssignment(req));
  }

  /**
   * Gets information for the specified volume backup policy assignment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVolumeBackupPolicyAssignmentRequest
   * @return GetVolumeBackupPolicyAssignmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeBackupPolicyAssignment.ts.html |here} to see how to use GetVolumeBackupPolicyAssignment API.
   */
  public async getVolumeBackupPolicyAssignment(
    getVolumeBackupPolicyAssignmentRequest: requests.GetVolumeBackupPolicyAssignmentRequest
  ): Promise<responses.GetVolumeBackupPolicyAssignmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#getVolumeBackupPolicyAssignment.");
    const operationName = "getVolumeBackupPolicyAssignment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackupPolicyAssignment/GetVolumeBackupPolicyAssignment";
    const pathParams = {
      "{policyAssignmentId}": getVolumeBackupPolicyAssignmentRequest.policyAssignmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVolumeBackupPolicyAssignmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicyAssignments/{policyAssignmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeBackupPolicyAssignmentResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackupPolicyAssignment",
        bodyModel: model.VolumeBackupPolicyAssignment,
        type: "model.VolumeBackupPolicyAssignment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified volume group. For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVolumeGroupRequest
   * @return GetVolumeGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeGroup.ts.html |here} to see how to use GetVolumeGroup API.
   */
  public async getVolumeGroup(
    getVolumeGroupRequest: requests.GetVolumeGroupRequest
  ): Promise<responses.GetVolumeGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getVolumeGroup.");
    const operationName = "getVolumeGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroup/GetVolumeGroup";
    const pathParams = {
      "{volumeGroupId}": getVolumeGroupRequest.volumeGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVolumeGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroups/{volumeGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeGroupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroup",
        bodyModel: model.VolumeGroup,
        type: "model.VolumeGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified volume group backup. For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVolumeGroupBackupRequest
   * @return GetVolumeGroupBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeGroupBackup.ts.html |here} to see how to use GetVolumeGroupBackup API.
   */
  public async getVolumeGroupBackup(
    getVolumeGroupBackupRequest: requests.GetVolumeGroupBackupRequest
  ): Promise<responses.GetVolumeGroupBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#getVolumeGroupBackup.");
    const operationName = "getVolumeGroupBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroupBackup/GetVolumeGroupBackup";
    const pathParams = {
      "{volumeGroupBackupId}": getVolumeGroupBackupRequest.volumeGroupBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVolumeGroupBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups/{volumeGroupBackupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeGroupBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroupBackup",
        bodyModel: model.VolumeGroupBackup,
        type: "model.VolumeGroupBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified volume group replica.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVolumeGroupReplicaRequest
   * @return GetVolumeGroupReplicaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeGroupReplica.ts.html |here} to see how to use GetVolumeGroupReplica API.
   */
  public async getVolumeGroupReplica(
    getVolumeGroupReplicaRequest: requests.GetVolumeGroupReplicaRequest
  ): Promise<responses.GetVolumeGroupReplicaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#getVolumeGroupReplica.");
    const operationName = "getVolumeGroupReplica";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroupReplica/GetVolumeGroupReplica";
    const pathParams = {
      "{volumeGroupReplicaId}": getVolumeGroupReplicaRequest.volumeGroupReplicaId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVolumeGroupReplicaRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupReplicas/{volumeGroupReplicaId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeGroupReplicaResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroupReplica",
        bodyModel: model.VolumeGroupReplica,
        type: "model.VolumeGroupReplica",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Vault service encryption key assigned to the specified volume.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVolumeKmsKeyRequest
   * @return GetVolumeKmsKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeKmsKey.ts.html |here} to see how to use GetVolumeKmsKey API.
   */
  public async getVolumeKmsKey(
    getVolumeKmsKeyRequest: requests.GetVolumeKmsKeyRequest
  ): Promise<responses.GetVolumeKmsKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getVolumeKmsKey.");
    const operationName = "getVolumeKmsKey";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeKmsKey/GetVolumeKmsKey";
    const pathParams = {
      "{volumeId}": getVolumeKmsKeyRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": getVolumeKmsKeyRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVolumeKmsKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}/kmsKey",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeKmsKeyResponse>{},
        body: await response.json(),
        bodyKey: "volumeKmsKey",
        bodyModel: model.VolumeKmsKey,
        type: "model.VolumeKmsKey",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the block volume replicas in the specified compartment and availability domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListBlockVolumeReplicasRequest
   * @return ListBlockVolumeReplicasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListBlockVolumeReplicas.ts.html |here} to see how to use ListBlockVolumeReplicas API.
   */
  public async listBlockVolumeReplicas(
    listBlockVolumeReplicasRequest: requests.ListBlockVolumeReplicasRequest
  ): Promise<responses.ListBlockVolumeReplicasResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#listBlockVolumeReplicas.");
    const operationName = "listBlockVolumeReplicas";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BlockVolumeReplica/ListBlockVolumeReplicas";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listBlockVolumeReplicasRequest.availabilityDomain,
      "compartmentId": listBlockVolumeReplicasRequest.compartmentId,
      "volumeGroupReplicaId": listBlockVolumeReplicasRequest.volumeGroupReplicaId,
      "limit": listBlockVolumeReplicasRequest.limit,
      "page": listBlockVolumeReplicasRequest.page,
      "displayName": listBlockVolumeReplicasRequest.displayName,
      "sortBy": listBlockVolumeReplicasRequest.sortBy,
      "sortOrder": listBlockVolumeReplicasRequest.sortOrder,
      "lifecycleState": listBlockVolumeReplicasRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBlockVolumeReplicasRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/blockVolumeReplicas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBlockVolumeReplicasResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.BlockVolumeReplica,
        type: "Array<model.BlockVolumeReplica>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listBlockVolumeReplicasRecordIterator function.
   * Creates a new async iterator which will iterate over the models.BlockVolumeReplica objects
   * contained in responses from the listBlockVolumeReplicas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBlockVolumeReplicas(
    request: requests.ListBlockVolumeReplicasRequest
  ): AsyncIterableIterator<model.BlockVolumeReplica> {
    return paginateRecords(request, req => this.listBlockVolumeReplicas(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listBlockVolumeReplicasResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listBlockVolumeReplicas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBlockVolumeReplicasResponses(
    request: requests.ListBlockVolumeReplicasRequest
  ): AsyncIterableIterator<responses.ListBlockVolumeReplicasResponse> {
    return paginateResponses(request, req => this.listBlockVolumeReplicas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.BlockVolumeReplica objects
   * contained in responses from the listBlockVolumeReplicas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBlockVolumeReplicasRecordIterator(
    request: requests.ListBlockVolumeReplicasRequest
  ): AsyncIterableIterator<model.BlockVolumeReplica> {
    return paginateRecords(request, req => this.listBlockVolumeReplicas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listBlockVolumeReplicas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBlockVolumeReplicasResponseIterator(
    request: requests.ListBlockVolumeReplicasRequest
  ): AsyncIterableIterator<responses.ListBlockVolumeReplicasResponse> {
    return paginateResponses(request, req => this.listBlockVolumeReplicas(req));
  }

  /**
   * Lists the boot volume backups in the specified compartment. You can filter the results by boot volume.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListBootVolumeBackupsRequest
   * @return ListBootVolumeBackupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListBootVolumeBackups.ts.html |here} to see how to use ListBootVolumeBackups API.
   */
  public async listBootVolumeBackups(
    listBootVolumeBackupsRequest: requests.ListBootVolumeBackupsRequest
  ): Promise<responses.ListBootVolumeBackupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#listBootVolumeBackups.");
    const operationName = "listBootVolumeBackups";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeBackup/ListBootVolumeBackups";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listBootVolumeBackupsRequest.compartmentId,
      "bootVolumeId": listBootVolumeBackupsRequest.bootVolumeId,
      "limit": listBootVolumeBackupsRequest.limit,
      "page": listBootVolumeBackupsRequest.page,
      "displayName": listBootVolumeBackupsRequest.displayName,
      "sourceBootVolumeBackupId": listBootVolumeBackupsRequest.sourceBootVolumeBackupId,
      "sortBy": listBootVolumeBackupsRequest.sortBy,
      "sortOrder": listBootVolumeBackupsRequest.sortOrder,
      "lifecycleState": listBootVolumeBackupsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBootVolumeBackupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBootVolumeBackupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.BootVolumeBackup,
        type: "Array<model.BootVolumeBackup>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listBootVolumeBackupsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.BootVolumeBackup objects
   * contained in responses from the listBootVolumeBackups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumeBackups(
    request: requests.ListBootVolumeBackupsRequest
  ): AsyncIterableIterator<model.BootVolumeBackup> {
    return paginateRecords(request, req => this.listBootVolumeBackups(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listBootVolumeBackupsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listBootVolumeBackups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumeBackupsResponses(
    request: requests.ListBootVolumeBackupsRequest
  ): AsyncIterableIterator<responses.ListBootVolumeBackupsResponse> {
    return paginateResponses(request, req => this.listBootVolumeBackups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.BootVolumeBackup objects
   * contained in responses from the listBootVolumeBackups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBootVolumeBackupsRecordIterator(
    request: requests.ListBootVolumeBackupsRequest
  ): AsyncIterableIterator<model.BootVolumeBackup> {
    return paginateRecords(request, req => this.listBootVolumeBackups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listBootVolumeBackups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBootVolumeBackupsResponseIterator(
    request: requests.ListBootVolumeBackupsRequest
  ): AsyncIterableIterator<responses.ListBootVolumeBackupsResponse> {
    return paginateResponses(request, req => this.listBootVolumeBackups(req));
  }

  /**
   * Lists the boot volume replicas in the specified compartment and availability domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListBootVolumeReplicasRequest
   * @return ListBootVolumeReplicasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListBootVolumeReplicas.ts.html |here} to see how to use ListBootVolumeReplicas API.
   */
  public async listBootVolumeReplicas(
    listBootVolumeReplicasRequest: requests.ListBootVolumeReplicasRequest
  ): Promise<responses.ListBootVolumeReplicasResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#listBootVolumeReplicas.");
    const operationName = "listBootVolumeReplicas";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeReplica/ListBootVolumeReplicas";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listBootVolumeReplicasRequest.availabilityDomain,
      "compartmentId": listBootVolumeReplicasRequest.compartmentId,
      "volumeGroupReplicaId": listBootVolumeReplicasRequest.volumeGroupReplicaId,
      "limit": listBootVolumeReplicasRequest.limit,
      "page": listBootVolumeReplicasRequest.page,
      "displayName": listBootVolumeReplicasRequest.displayName,
      "sortBy": listBootVolumeReplicasRequest.sortBy,
      "sortOrder": listBootVolumeReplicasRequest.sortOrder,
      "lifecycleState": listBootVolumeReplicasRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBootVolumeReplicasRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeReplicas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBootVolumeReplicasResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.BootVolumeReplica,
        type: "Array<model.BootVolumeReplica>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listBootVolumeReplicasRecordIterator function.
   * Creates a new async iterator which will iterate over the models.BootVolumeReplica objects
   * contained in responses from the listBootVolumeReplicas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumeReplicas(
    request: requests.ListBootVolumeReplicasRequest
  ): AsyncIterableIterator<model.BootVolumeReplica> {
    return paginateRecords(request, req => this.listBootVolumeReplicas(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listBootVolumeReplicasResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listBootVolumeReplicas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumeReplicasResponses(
    request: requests.ListBootVolumeReplicasRequest
  ): AsyncIterableIterator<responses.ListBootVolumeReplicasResponse> {
    return paginateResponses(request, req => this.listBootVolumeReplicas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.BootVolumeReplica objects
   * contained in responses from the listBootVolumeReplicas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBootVolumeReplicasRecordIterator(
    request: requests.ListBootVolumeReplicasRequest
  ): AsyncIterableIterator<model.BootVolumeReplica> {
    return paginateRecords(request, req => this.listBootVolumeReplicas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listBootVolumeReplicas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBootVolumeReplicasResponseIterator(
    request: requests.ListBootVolumeReplicasRequest
  ): AsyncIterableIterator<responses.ListBootVolumeReplicasResponse> {
    return paginateResponses(request, req => this.listBootVolumeReplicas(req));
  }

  /**
   * Lists the boot volumes in the specified compartment and availability domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListBootVolumesRequest
   * @return ListBootVolumesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListBootVolumes.ts.html |here} to see how to use ListBootVolumes API.
   */
  public async listBootVolumes(
    listBootVolumesRequest: requests.ListBootVolumesRequest
  ): Promise<responses.ListBootVolumesResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#listBootVolumes.");
    const operationName = "listBootVolumes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolume/ListBootVolumes";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listBootVolumesRequest.availabilityDomain,
      "compartmentId": listBootVolumesRequest.compartmentId,
      "limit": listBootVolumesRequest.limit,
      "page": listBootVolumesRequest.page,
      "volumeGroupId": listBootVolumesRequest.volumeGroupId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBootVolumesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBootVolumesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.BootVolume,
        type: "Array<model.BootVolume>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listBootVolumesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.BootVolume objects
   * contained in responses from the listBootVolumes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumes(
    request: requests.ListBootVolumesRequest
  ): AsyncIterableIterator<model.BootVolume> {
    return paginateRecords(request, req => this.listBootVolumes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listBootVolumesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listBootVolumes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumesResponses(
    request: requests.ListBootVolumesRequest
  ): AsyncIterableIterator<responses.ListBootVolumesResponse> {
    return paginateResponses(request, req => this.listBootVolumes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.BootVolume objects
   * contained in responses from the listBootVolumes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBootVolumesRecordIterator(
    request: requests.ListBootVolumesRequest
  ): AsyncIterableIterator<model.BootVolume> {
    return paginateRecords(request, req => this.listBootVolumes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listBootVolumes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBootVolumesResponseIterator(
    request: requests.ListBootVolumesRequest
  ): AsyncIterableIterator<responses.ListBootVolumesResponse> {
    return paginateResponses(request, req => this.listBootVolumes(req));
  }

  /**
     * Lists all the volume backup policies available in the specified compartment.
* <p>
For more information about Oracle defined backup policies and user defined backup policies,
* see [Policy-Based Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/schedulingvolumebackups.htm).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListVolumeBackupPoliciesRequest
     * @return ListVolumeBackupPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumeBackupPolicies.ts.html |here} to see how to use ListVolumeBackupPolicies API.
     */
  public async listVolumeBackupPolicies(
    listVolumeBackupPoliciesRequest: requests.ListVolumeBackupPoliciesRequest
  ): Promise<responses.ListVolumeBackupPoliciesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#listVolumeBackupPolicies.");
    const operationName = "listVolumeBackupPolicies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackupPolicy/ListVolumeBackupPolicies";
    const pathParams = {};

    const queryParams = {
      "limit": listVolumeBackupPoliciesRequest.limit,
      "page": listVolumeBackupPoliciesRequest.page,
      "compartmentId": listVolumeBackupPoliciesRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVolumeBackupPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumeBackupPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VolumeBackupPolicy,
        type: "Array<model.VolumeBackupPolicy>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumeBackupPoliciesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VolumeBackupPolicy objects
   * contained in responses from the listVolumeBackupPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeBackupPolicies(
    request: requests.ListVolumeBackupPoliciesRequest
  ): AsyncIterableIterator<model.VolumeBackupPolicy> {
    return paginateRecords(request, req => this.listVolumeBackupPolicies(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumeBackupPoliciesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVolumeBackupPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeBackupPoliciesResponses(
    request: requests.ListVolumeBackupPoliciesRequest
  ): AsyncIterableIterator<responses.ListVolumeBackupPoliciesResponse> {
    return paginateResponses(request, req => this.listVolumeBackupPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeBackupPolicy objects
   * contained in responses from the listVolumeBackupPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumeBackupPoliciesRecordIterator(
    request: requests.ListVolumeBackupPoliciesRequest
  ): AsyncIterableIterator<model.VolumeBackupPolicy> {
    return paginateRecords(request, req => this.listVolumeBackupPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumeBackupPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumeBackupPoliciesResponseIterator(
    request: requests.ListVolumeBackupPoliciesRequest
  ): AsyncIterableIterator<responses.ListVolumeBackupPoliciesResponse> {
    return paginateResponses(request, req => this.listVolumeBackupPolicies(req));
  }

  /**
   * Lists the volume backups in the specified compartment. You can filter the results by volume.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListVolumeBackupsRequest
   * @return ListVolumeBackupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumeBackups.ts.html |here} to see how to use ListVolumeBackups API.
   */
  public async listVolumeBackups(
    listVolumeBackupsRequest: requests.ListVolumeBackupsRequest
  ): Promise<responses.ListVolumeBackupsResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#listVolumeBackups.");
    const operationName = "listVolumeBackups";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackup/ListVolumeBackups";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVolumeBackupsRequest.compartmentId,
      "volumeId": listVolumeBackupsRequest.volumeId,
      "limit": listVolumeBackupsRequest.limit,
      "page": listVolumeBackupsRequest.page,
      "displayName": listVolumeBackupsRequest.displayName,
      "sourceVolumeBackupId": listVolumeBackupsRequest.sourceVolumeBackupId,
      "sortBy": listVolumeBackupsRequest.sortBy,
      "sortOrder": listVolumeBackupsRequest.sortOrder,
      "lifecycleState": listVolumeBackupsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVolumeBackupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumeBackupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VolumeBackup,
        type: "Array<model.VolumeBackup>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumeBackupsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VolumeBackup objects
   * contained in responses from the listVolumeBackups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeBackups(
    request: requests.ListVolumeBackupsRequest
  ): AsyncIterableIterator<model.VolumeBackup> {
    return paginateRecords(request, req => this.listVolumeBackups(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumeBackupsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVolumeBackups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeBackupsResponses(
    request: requests.ListVolumeBackupsRequest
  ): AsyncIterableIterator<responses.ListVolumeBackupsResponse> {
    return paginateResponses(request, req => this.listVolumeBackups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeBackup objects
   * contained in responses from the listVolumeBackups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumeBackupsRecordIterator(
    request: requests.ListVolumeBackupsRequest
  ): AsyncIterableIterator<model.VolumeBackup> {
    return paginateRecords(request, req => this.listVolumeBackups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumeBackups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumeBackupsResponseIterator(
    request: requests.ListVolumeBackupsRequest
  ): AsyncIterableIterator<responses.ListVolumeBackupsResponse> {
    return paginateResponses(request, req => this.listVolumeBackups(req));
  }

  /**
   * Lists the volume group backups in the specified compartment. You can filter the results by volume group.
   * For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListVolumeGroupBackupsRequest
   * @return ListVolumeGroupBackupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumeGroupBackups.ts.html |here} to see how to use ListVolumeGroupBackups API.
   */
  public async listVolumeGroupBackups(
    listVolumeGroupBackupsRequest: requests.ListVolumeGroupBackupsRequest
  ): Promise<responses.ListVolumeGroupBackupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#listVolumeGroupBackups.");
    const operationName = "listVolumeGroupBackups";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroupBackup/ListVolumeGroupBackups";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVolumeGroupBackupsRequest.compartmentId,
      "volumeGroupId": listVolumeGroupBackupsRequest.volumeGroupId,
      "limit": listVolumeGroupBackupsRequest.limit,
      "page": listVolumeGroupBackupsRequest.page,
      "displayName": listVolumeGroupBackupsRequest.displayName,
      "sortBy": listVolumeGroupBackupsRequest.sortBy,
      "sortOrder": listVolumeGroupBackupsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVolumeGroupBackupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumeGroupBackupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VolumeGroupBackup,
        type: "Array<model.VolumeGroupBackup>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumeGroupBackupsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VolumeGroupBackup objects
   * contained in responses from the listVolumeGroupBackups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeGroupBackups(
    request: requests.ListVolumeGroupBackupsRequest
  ): AsyncIterableIterator<model.VolumeGroupBackup> {
    return paginateRecords(request, req => this.listVolumeGroupBackups(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumeGroupBackupsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVolumeGroupBackups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeGroupBackupsResponses(
    request: requests.ListVolumeGroupBackupsRequest
  ): AsyncIterableIterator<responses.ListVolumeGroupBackupsResponse> {
    return paginateResponses(request, req => this.listVolumeGroupBackups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeGroupBackup objects
   * contained in responses from the listVolumeGroupBackups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumeGroupBackupsRecordIterator(
    request: requests.ListVolumeGroupBackupsRequest
  ): AsyncIterableIterator<model.VolumeGroupBackup> {
    return paginateRecords(request, req => this.listVolumeGroupBackups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumeGroupBackups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumeGroupBackupsResponseIterator(
    request: requests.ListVolumeGroupBackupsRequest
  ): AsyncIterableIterator<responses.ListVolumeGroupBackupsResponse> {
    return paginateResponses(request, req => this.listVolumeGroupBackups(req));
  }

  /**
   * Lists the volume group replicas in the specified compartment. You can filter the results by volume group.
   * For more information, see [Volume Group Replication](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroupreplication.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListVolumeGroupReplicasRequest
   * @return ListVolumeGroupReplicasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumeGroupReplicas.ts.html |here} to see how to use ListVolumeGroupReplicas API.
   */
  public async listVolumeGroupReplicas(
    listVolumeGroupReplicasRequest: requests.ListVolumeGroupReplicasRequest
  ): Promise<responses.ListVolumeGroupReplicasResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#listVolumeGroupReplicas.");
    const operationName = "listVolumeGroupReplicas";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroupReplica/ListVolumeGroupReplicas";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listVolumeGroupReplicasRequest.availabilityDomain,
      "compartmentId": listVolumeGroupReplicasRequest.compartmentId,
      "limit": listVolumeGroupReplicasRequest.limit,
      "page": listVolumeGroupReplicasRequest.page,
      "displayName": listVolumeGroupReplicasRequest.displayName,
      "sortBy": listVolumeGroupReplicasRequest.sortBy,
      "sortOrder": listVolumeGroupReplicasRequest.sortOrder,
      "lifecycleState": listVolumeGroupReplicasRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVolumeGroupReplicasRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupReplicas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumeGroupReplicasResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VolumeGroupReplica,
        type: "Array<model.VolumeGroupReplica>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumeGroupReplicasRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VolumeGroupReplica objects
   * contained in responses from the listVolumeGroupReplicas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeGroupReplicas(
    request: requests.ListVolumeGroupReplicasRequest
  ): AsyncIterableIterator<model.VolumeGroupReplica> {
    return paginateRecords(request, req => this.listVolumeGroupReplicas(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumeGroupReplicasResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVolumeGroupReplicas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeGroupReplicasResponses(
    request: requests.ListVolumeGroupReplicasRequest
  ): AsyncIterableIterator<responses.ListVolumeGroupReplicasResponse> {
    return paginateResponses(request, req => this.listVolumeGroupReplicas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeGroupReplica objects
   * contained in responses from the listVolumeGroupReplicas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumeGroupReplicasRecordIterator(
    request: requests.ListVolumeGroupReplicasRequest
  ): AsyncIterableIterator<model.VolumeGroupReplica> {
    return paginateRecords(request, req => this.listVolumeGroupReplicas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumeGroupReplicas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumeGroupReplicasResponseIterator(
    request: requests.ListVolumeGroupReplicasRequest
  ): AsyncIterableIterator<responses.ListVolumeGroupReplicasResponse> {
    return paginateResponses(request, req => this.listVolumeGroupReplicas(req));
  }

  /**
   * Lists the volume groups in the specified compartment and availability domain.
   * For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListVolumeGroupsRequest
   * @return ListVolumeGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumeGroups.ts.html |here} to see how to use ListVolumeGroups API.
   */
  public async listVolumeGroups(
    listVolumeGroupsRequest: requests.ListVolumeGroupsRequest
  ): Promise<responses.ListVolumeGroupsResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#listVolumeGroups.");
    const operationName = "listVolumeGroups";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroup/ListVolumeGroups";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listVolumeGroupsRequest.availabilityDomain,
      "compartmentId": listVolumeGroupsRequest.compartmentId,
      "limit": listVolumeGroupsRequest.limit,
      "page": listVolumeGroupsRequest.page,
      "displayName": listVolumeGroupsRequest.displayName,
      "sortBy": listVolumeGroupsRequest.sortBy,
      "sortOrder": listVolumeGroupsRequest.sortOrder,
      "lifecycleState": listVolumeGroupsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVolumeGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumeGroupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VolumeGroup,
        type: "Array<model.VolumeGroup>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumeGroupsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VolumeGroup objects
   * contained in responses from the listVolumeGroups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeGroups(
    request: requests.ListVolumeGroupsRequest
  ): AsyncIterableIterator<model.VolumeGroup> {
    return paginateRecords(request, req => this.listVolumeGroups(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumeGroupsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVolumeGroups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeGroupsResponses(
    request: requests.ListVolumeGroupsRequest
  ): AsyncIterableIterator<responses.ListVolumeGroupsResponse> {
    return paginateResponses(request, req => this.listVolumeGroups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeGroup objects
   * contained in responses from the listVolumeGroups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumeGroupsRecordIterator(
    request: requests.ListVolumeGroupsRequest
  ): AsyncIterableIterator<model.VolumeGroup> {
    return paginateRecords(request, req => this.listVolumeGroups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumeGroups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumeGroupsResponseIterator(
    request: requests.ListVolumeGroupsRequest
  ): AsyncIterableIterator<responses.ListVolumeGroupsResponse> {
    return paginateResponses(request, req => this.listVolumeGroups(req));
  }

  /**
   * Lists the volumes in the specified compartment and availability domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListVolumesRequest
   * @return ListVolumesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumes.ts.html |here} to see how to use ListVolumes API.
   */
  public async listVolumes(
    listVolumesRequest: requests.ListVolumesRequest
  ): Promise<responses.ListVolumesResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#listVolumes.");
    const operationName = "listVolumes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Volume/ListVolumes";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listVolumesRequest.availabilityDomain,
      "compartmentId": listVolumesRequest.compartmentId,
      "limit": listVolumesRequest.limit,
      "page": listVolumesRequest.page,
      "displayName": listVolumesRequest.displayName,
      "sortBy": listVolumesRequest.sortBy,
      "sortOrder": listVolumesRequest.sortOrder,
      "volumeGroupId": listVolumesRequest.volumeGroupId,
      "clusterPlacementGroupId": listVolumesRequest.clusterPlacementGroupId,
      "lifecycleState": listVolumesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVolumesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Volume,
        type: "Array<model.Volume>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Volume objects
   * contained in responses from the listVolumes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumes(request: requests.ListVolumesRequest): AsyncIterableIterator<model.Volume> {
    return paginateRecords(request, req => this.listVolumes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVolumes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumesResponses(
    request: requests.ListVolumesRequest
  ): AsyncIterableIterator<responses.ListVolumesResponse> {
    return paginateResponses(request, req => this.listVolumes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Volume objects
   * contained in responses from the listVolumes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumesRecordIterator(
    request: requests.ListVolumesRequest
  ): AsyncIterableIterator<model.Volume> {
    return paginateRecords(request, req => this.listVolumes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumesResponseIterator(
    request: requests.ListVolumesRequest
  ): AsyncIterableIterator<responses.ListVolumesResponse> {
    return paginateResponses(request, req => this.listVolumes(req));
  }

  /**
   * Updates the specified boot volume's display name, defined tags, and free-form tags.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateBootVolumeRequest
   * @return UpdateBootVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateBootVolume.ts.html |here} to see how to use UpdateBootVolume API.
   */
  public async updateBootVolume(
    updateBootVolumeRequest: requests.UpdateBootVolumeRequest
  ): Promise<responses.UpdateBootVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#updateBootVolume.");
    const operationName = "updateBootVolume";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolume/UpdateBootVolume";
    const pathParams = {
      "{bootVolumeId}": updateBootVolumeRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateBootVolumeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBootVolumeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBootVolumeRequest.updateBootVolumeDetails,
        "UpdateBootVolumeDetails",
        model.UpdateBootVolumeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBootVolumeResponse>{},
        body: await response.json(),
        bodyKey: "bootVolume",
        bodyModel: model.BootVolume,
        type: "model.BootVolume",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the display name for the specified boot volume backup.
   * Avoid entering confidential information.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateBootVolumeBackupRequest
   * @return UpdateBootVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateBootVolumeBackup.ts.html |here} to see how to use UpdateBootVolumeBackup API.
   */
  public async updateBootVolumeBackup(
    updateBootVolumeBackupRequest: requests.UpdateBootVolumeBackupRequest
  ): Promise<responses.UpdateBootVolumeBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#updateBootVolumeBackup.");
    const operationName = "updateBootVolumeBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeBackup/UpdateBootVolumeBackup";
    const pathParams = {
      "{bootVolumeBackupId}": updateBootVolumeBackupRequest.bootVolumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateBootVolumeBackupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBootVolumeBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups/{bootVolumeBackupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBootVolumeBackupRequest.updateBootVolumeBackupDetails,
        "UpdateBootVolumeBackupDetails",
        model.UpdateBootVolumeBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBootVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeBackup",
        bodyModel: model.BootVolumeBackup,
        type: "model.BootVolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified volume with a new Vault service master encryption key.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateBootVolumeKmsKeyRequest
   * @return UpdateBootVolumeKmsKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateBootVolumeKmsKey.ts.html |here} to see how to use UpdateBootVolumeKmsKey API.
   */
  public async updateBootVolumeKmsKey(
    updateBootVolumeKmsKeyRequest: requests.UpdateBootVolumeKmsKeyRequest
  ): Promise<responses.UpdateBootVolumeKmsKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#updateBootVolumeKmsKey.");
    const operationName = "updateBootVolumeKmsKey";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeKmsKey/UpdateBootVolumeKmsKey";
    const pathParams = {
      "{bootVolumeId}": updateBootVolumeKmsKeyRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateBootVolumeKmsKeyRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBootVolumeKmsKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}/kmsKey",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBootVolumeKmsKeyRequest.updateBootVolumeKmsKeyDetails,
        "UpdateBootVolumeKmsKeyDetails",
        model.UpdateBootVolumeKmsKeyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBootVolumeKmsKeyResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeKmsKey",
        bodyModel: model.BootVolumeKmsKey,
        type: "model.BootVolumeKmsKey",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified volume's display name.
   * Avoid entering confidential information.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateVolumeRequest
   * @return UpdateVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolume.ts.html |here} to see how to use UpdateVolume API.
   */
  public async updateVolume(
    updateVolumeRequest: requests.UpdateVolumeRequest
  ): Promise<responses.UpdateVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#updateVolume.");
    const operationName = "updateVolume";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Volume/UpdateVolume";
    const pathParams = {
      "{volumeId}": updateVolumeRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVolumeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVolumeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeRequest.updateVolumeDetails,
        "UpdateVolumeDetails",
        model.UpdateVolumeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeResponse>{},
        body: await response.json(),
        bodyKey: "volume",
        bodyModel: model.Volume,
        type: "model.Volume",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the display name for the specified volume backup.
   * Avoid entering confidential information.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateVolumeBackupRequest
   * @return UpdateVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolumeBackup.ts.html |here} to see how to use UpdateVolumeBackup API.
   */
  public async updateVolumeBackup(
    updateVolumeBackupRequest: requests.UpdateVolumeBackupRequest
  ): Promise<responses.UpdateVolumeBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#updateVolumeBackup.");
    const operationName = "updateVolumeBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackup/UpdateVolumeBackup";
    const pathParams = {
      "{volumeBackupId}": updateVolumeBackupRequest.volumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVolumeBackupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVolumeBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups/{volumeBackupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeBackupRequest.updateVolumeBackupDetails,
        "UpdateVolumeBackupDetails",
        model.UpdateVolumeBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackup",
        bodyModel: model.VolumeBackup,
        type: "model.VolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates a user defined backup policy.
*  For more information about user defined backup policies,
*  see [Policy-Based Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/schedulingvolumebackups.htm#UserDefinedBackupPolicies).
* <p>
 Avoid entering confidential information.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateVolumeBackupPolicyRequest
     * @return UpdateVolumeBackupPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolumeBackupPolicy.ts.html |here} to see how to use UpdateVolumeBackupPolicy API.
     */
  public async updateVolumeBackupPolicy(
    updateVolumeBackupPolicyRequest: requests.UpdateVolumeBackupPolicyRequest
  ): Promise<responses.UpdateVolumeBackupPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#updateVolumeBackupPolicy.");
    const operationName = "updateVolumeBackupPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeBackupPolicy/UpdateVolumeBackupPolicy";
    const pathParams = {
      "{policyId}": updateVolumeBackupPolicyRequest.policyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVolumeBackupPolicyRequest.ifMatch,
      "opc-request-id": updateVolumeBackupPolicyRequest.opcRequestId,
      "opc-retry-token": updateVolumeBackupPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVolumeBackupPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicies/{policyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeBackupPolicyRequest.updateVolumeBackupPolicyDetails,
        "UpdateVolumeBackupPolicyDetails",
        model.UpdateVolumeBackupPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeBackupPolicyResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackupPolicy",
        bodyModel: model.VolumeBackupPolicy,
        type: "model.VolumeBackupPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the set of volumes in a volume group along with the display name. Use this operation
* to add or remove volumes in a volume group. Specify the full list of volume IDs to include in the
* volume group. If the volume ID is not specified in the call, it will be removed from the volume group.
* Avoid entering confidential information.
* <p>
For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateVolumeGroupRequest
     * @return UpdateVolumeGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolumeGroup.ts.html |here} to see how to use UpdateVolumeGroup API.
     */
  public async updateVolumeGroup(
    updateVolumeGroupRequest: requests.UpdateVolumeGroupRequest
  ): Promise<responses.UpdateVolumeGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#updateVolumeGroup.");
    const operationName = "updateVolumeGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroup/UpdateVolumeGroup";
    const pathParams = {
      "{volumeGroupId}": updateVolumeGroupRequest.volumeGroupId
    };

    const queryParams = {
      "preserveVolumeReplica": updateVolumeGroupRequest.preserveVolumeReplica
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVolumeGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVolumeGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroups/{volumeGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeGroupRequest.updateVolumeGroupDetails,
        "UpdateVolumeGroupDetails",
        model.UpdateVolumeGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeGroupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroup",
        bodyModel: model.VolumeGroup,
        type: "model.VolumeGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the display name for the specified volume group backup. For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateVolumeGroupBackupRequest
   * @return UpdateVolumeGroupBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolumeGroupBackup.ts.html |here} to see how to use UpdateVolumeGroupBackup API.
   */
  public async updateVolumeGroupBackup(
    updateVolumeGroupBackupRequest: requests.UpdateVolumeGroupBackupRequest
  ): Promise<responses.UpdateVolumeGroupBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#updateVolumeGroupBackup.");
    const operationName = "updateVolumeGroupBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeGroupBackup/UpdateVolumeGroupBackup";
    const pathParams = {
      "{volumeGroupBackupId}": updateVolumeGroupBackupRequest.volumeGroupBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVolumeGroupBackupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVolumeGroupBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups/{volumeGroupBackupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeGroupBackupRequest.updateVolumeGroupBackupDetails,
        "UpdateVolumeGroupBackupDetails",
        model.UpdateVolumeGroupBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeGroupBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroupBackup",
        bodyModel: model.VolumeGroupBackup,
        type: "model.VolumeGroupBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified volume with a new Key Management master encryption key.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateVolumeKmsKeyRequest
   * @return UpdateVolumeKmsKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolumeKmsKey.ts.html |here} to see how to use UpdateVolumeKmsKey API.
   */
  public async updateVolumeKmsKey(
    updateVolumeKmsKeyRequest: requests.UpdateVolumeKmsKeyRequest
  ): Promise<responses.UpdateVolumeKmsKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#updateVolumeKmsKey.");
    const operationName = "updateVolumeKmsKey";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeKmsKey/UpdateVolumeKmsKey";
    const pathParams = {
      "{volumeId}": updateVolumeKmsKeyRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVolumeKmsKeyRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVolumeKmsKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}/kmsKey",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeKmsKeyRequest.updateVolumeKmsKeyDetails,
        "UpdateVolumeKmsKeyDetails",
        model.UpdateVolumeKmsKeyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeKmsKeyResponse>{},
        body: await response.json(),
        bodyKey: "volumeKmsKey",
        bodyModel: model.VolumeKmsKey,
        type: "model.VolumeKmsKey",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum ComputeApiKeys {}
/**
 * This service client does not use circuit breakers by default if the user has not defined a circuit breaker configuration.
 */
export class ComputeClient {
  protected static serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ComputeWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Compute";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("core")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("core");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = false;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20160918";
    if (this.logger) this.logger.info(`ComputeClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ComputeClient.serviceEndpointTemplate,
        this._region,
        ComputeClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ComputeClient.serviceEndpointTemplate,
        this._regionId,
        ComputeClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ComputeClient.serviceEndpointTemplate,
      region,
      ComputeClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ComputeClient.serviceEndpointTemplate,
      regionId,
      ComputeClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new ComputeWaiter for resources for this service.
   *
   * @param workRequestClient The work request service client used to query for work request status
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(
    workRequestClient: WorkRequestClient,
    config?: common.WaiterConfiguration
  ): ComputeWaiter {
    this._waiters = new ComputeWaiter(this, workRequestClient, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ComputeWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Accept the changes to the PCR values in the measured boot report.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AcceptShieldedIntegrityPolicyRequest
   * @return AcceptShieldedIntegrityPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AcceptShieldedIntegrityPolicy.ts.html |here} to see how to use AcceptShieldedIntegrityPolicy API.
   */
  public async acceptShieldedIntegrityPolicy(
    acceptShieldedIntegrityPolicyRequest: requests.AcceptShieldedIntegrityPolicyRequest
  ): Promise<responses.AcceptShieldedIntegrityPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#acceptShieldedIntegrityPolicy.");
    const operationName = "acceptShieldedIntegrityPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/MeasuredBootReport/AcceptShieldedIntegrityPolicy";
    const pathParams = {
      "{instanceId}": acceptShieldedIntegrityPolicyRequest.instanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": acceptShieldedIntegrityPolicyRequest.opcRequestId,
      "if-match": acceptShieldedIntegrityPolicyRequest.ifMatch,
      "opc-retry-token": acceptShieldedIntegrityPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      acceptShieldedIntegrityPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}/actions/acceptShieldedIntegrityPolicy",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AcceptShieldedIntegrityPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a shape to the compatible shapes list for the image.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddImageShapeCompatibilityEntryRequest
   * @return AddImageShapeCompatibilityEntryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AddImageShapeCompatibilityEntry.ts.html |here} to see how to use AddImageShapeCompatibilityEntry API.
   */
  public async addImageShapeCompatibilityEntry(
    addImageShapeCompatibilityEntryRequest: requests.AddImageShapeCompatibilityEntryRequest
  ): Promise<responses.AddImageShapeCompatibilityEntryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#addImageShapeCompatibilityEntry.");
    const operationName = "addImageShapeCompatibilityEntry";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ImageShapeCompatibilityEntry/AddImageShapeCompatibilityEntry";
    const pathParams = {
      "{imageId}": addImageShapeCompatibilityEntryRequest.imageId,
      "{shapeName}": addImageShapeCompatibilityEntryRequest.shapeName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addImageShapeCompatibilityEntryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}/shapes/{shapeName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        addImageShapeCompatibilityEntryRequest.addImageShapeCompatibilityEntryDetails,
        "AddImageShapeCompatibilityEntryDetails",
        model.AddImageShapeCompatibilityEntryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddImageShapeCompatibilityEntryResponse>{},
        body: await response.json(),
        bodyKey: "imageShapeCompatibilityEntry",
        bodyModel: model.ImageShapeCompatibilityEntry,
        type: "model.ImageShapeCompatibilityEntry",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Attaches the specified boot volume to the specified instance.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AttachBootVolumeRequest
   * @return AttachBootVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AttachBootVolume.ts.html |here} to see how to use AttachBootVolume API.
   */
  public async attachBootVolume(
    attachBootVolumeRequest: requests.AttachBootVolumeRequest
  ): Promise<responses.AttachBootVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#attachBootVolume.");
    const operationName = "attachBootVolume";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeAttachment/AttachBootVolume";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": attachBootVolumeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      attachBootVolumeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeAttachments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachBootVolumeRequest.attachBootVolumeDetails,
        "AttachBootVolumeDetails",
        model.AttachBootVolumeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachBootVolumeResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeAttachment",
        bodyModel: model.BootVolumeAttachment,
        type: "model.BootVolumeAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a secondary VNIC and attaches it to the specified instance.
   * For more information about secondary VNICs, see
   * [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AttachVnicRequest
   * @return AttachVnicResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AttachVnic.ts.html |here} to see how to use AttachVnic API.
   */
  public async attachVnic(
    attachVnicRequest: requests.AttachVnicRequest
  ): Promise<responses.AttachVnicResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#attachVnic.");
    const operationName = "attachVnic";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VnicAttachment/AttachVnic";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": attachVnicRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      attachVnicRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vnicAttachments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachVnicRequest.attachVnicDetails,
        "AttachVnicDetails",
        model.AttachVnicDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachVnicResponse>{},
        body: await response.json(),
        bodyKey: "vnicAttachment",
        bodyModel: model.VnicAttachment,
        type: "model.VnicAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Attaches the specified storage volume to the specified instance.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AttachVolumeRequest
   * @return AttachVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AttachVolume.ts.html |here} to see how to use AttachVolume API.
   */
  public async attachVolume(
    attachVolumeRequest: requests.AttachVolumeRequest
  ): Promise<responses.AttachVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#attachVolume.");
    const operationName = "attachVolume";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeAttachment/AttachVolume";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": attachVolumeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      attachVolumeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeAttachments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachVolumeRequest.attachVolumeDetails,
        "AttachVolumeDetails",
        model.AttachVolumeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachVolumeResponse>{},
        body: await response.json(),
        bodyKey: "volumeAttachment",
        bodyModel: model.VolumeAttachment,
        type: "model.VolumeAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Captures the most recent serial console data (up to a megabyte) for the
* specified instance.
* <p>
The `CaptureConsoleHistory` operation works with the other console history operations
* as described below.
* <p>
1. Use `CaptureConsoleHistory` to request the capture of up to a megabyte of the
* most recent console history. This call returns a `ConsoleHistory`
* object. The object will have a state of REQUESTED.
* 2. Wait for the capture operation to succeed by polling `GetConsoleHistory` with
* the identifier of the console history metadata. The state of the
* `ConsoleHistory` object will go from REQUESTED to GETTING-HISTORY and
* then SUCCEEDED (or FAILED).
* 3. Use `GetConsoleHistoryContent` to get the actual console history data (not the
* metadata).
* 4. Optionally, use `DeleteConsoleHistory` to delete the console history metadata
* and the console history data.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CaptureConsoleHistoryRequest
     * @return CaptureConsoleHistoryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CaptureConsoleHistory.ts.html |here} to see how to use CaptureConsoleHistory API.
     */
  public async captureConsoleHistory(
    captureConsoleHistoryRequest: requests.CaptureConsoleHistoryRequest
  ): Promise<responses.CaptureConsoleHistoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#captureConsoleHistory.");
    const operationName = "captureConsoleHistory";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ConsoleHistory/CaptureConsoleHistory";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": captureConsoleHistoryRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      captureConsoleHistoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleHistories",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        captureConsoleHistoryRequest.captureConsoleHistoryDetails,
        "CaptureConsoleHistoryDetails",
        model.CaptureConsoleHistoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CaptureConsoleHistoryResponse>{},
        body: await response.json(),
        bodyKey: "consoleHistory",
        bodyModel: model.ConsoleHistory,
        type: "model.ConsoleHistory",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a compute capacity reservation into a different compartment. For information about
   * moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeComputeCapacityReservationCompartmentRequest
   * @return ChangeComputeCapacityReservationCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeComputeCapacityReservationCompartment.ts.html |here} to see how to use ChangeComputeCapacityReservationCompartment API.
   */
  public async changeComputeCapacityReservationCompartment(
    changeComputeCapacityReservationCompartmentRequest: requests.ChangeComputeCapacityReservationCompartmentRequest
  ): Promise<responses.ChangeComputeCapacityReservationCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeClient#changeComputeCapacityReservationCompartment."
      );
    const operationName = "changeComputeCapacityReservationCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCapacityReservation/ChangeComputeCapacityReservationCompartment";
    const pathParams = {
      "{capacityReservationId}":
        changeComputeCapacityReservationCompartmentRequest.capacityReservationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeComputeCapacityReservationCompartmentRequest.ifMatch,
      "opc-request-id": changeComputeCapacityReservationCompartmentRequest.opcRequestId,
      "opc-retry-token": changeComputeCapacityReservationCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeComputeCapacityReservationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityReservations/{capacityReservationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeComputeCapacityReservationCompartmentRequest.changeComputeCapacityReservationCompartmentDetails,
        "ChangeComputeCapacityReservationCompartmentDetails",
        model.ChangeComputeCapacityReservationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeComputeCapacityReservationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a compute capacity topology into a different compartment. For information about moving resources between
   * compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeComputeCapacityTopologyCompartmentRequest
   * @return ChangeComputeCapacityTopologyCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeComputeCapacityTopologyCompartment.ts.html |here} to see how to use ChangeComputeCapacityTopologyCompartment API.
   */
  public async changeComputeCapacityTopologyCompartment(
    changeComputeCapacityTopologyCompartmentRequest: requests.ChangeComputeCapacityTopologyCompartmentRequest
  ): Promise<responses.ChangeComputeCapacityTopologyCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeClient#changeComputeCapacityTopologyCompartment."
      );
    const operationName = "changeComputeCapacityTopologyCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCapacityTopology/ChangeComputeCapacityTopologyCompartment";
    const pathParams = {
      "{computeCapacityTopologyId}":
        changeComputeCapacityTopologyCompartmentRequest.computeCapacityTopologyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeComputeCapacityTopologyCompartmentRequest.ifMatch,
      "opc-request-id": changeComputeCapacityTopologyCompartmentRequest.opcRequestId,
      "opc-retry-token": changeComputeCapacityTopologyCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeComputeCapacityTopologyCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityTopologies/{computeCapacityTopologyId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeComputeCapacityTopologyCompartmentRequest.changeComputeCapacityTopologyCompartmentDetails,
        "ChangeComputeCapacityTopologyCompartmentDetails",
        model.ChangeComputeCapacityTopologyCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeComputeCapacityTopologyCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves a compute cluster into a different compartment within the same tenancy.
* A [compute cluster](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/compute-clusters.htm) is a remote direct memory access (RDMA) network group.
* <p>
For information about moving resources between compartments, see
* [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeComputeClusterCompartmentRequest
     * @return ChangeComputeClusterCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeComputeClusterCompartment.ts.html |here} to see how to use ChangeComputeClusterCompartment API.
     */
  public async changeComputeClusterCompartment(
    changeComputeClusterCompartmentRequest: requests.ChangeComputeClusterCompartmentRequest
  ): Promise<responses.ChangeComputeClusterCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#changeComputeClusterCompartment.");
    const operationName = "changeComputeClusterCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCluster/ChangeComputeClusterCompartment";
    const pathParams = {
      "{computeClusterId}": changeComputeClusterCompartmentRequest.computeClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeComputeClusterCompartmentRequest.ifMatch,
      "opc-request-id": changeComputeClusterCompartmentRequest.opcRequestId,
      "opc-retry-token": changeComputeClusterCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeComputeClusterCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeClusters/{computeClusterId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeComputeClusterCompartmentRequest.changeComputeClusterCompartmentDetails,
        "ChangeComputeClusterCompartmentDetails",
        model.ChangeComputeClusterCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeComputeClusterCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a compute image capability schema into a different compartment within the same tenancy.
   * For information about moving resources between compartments, see
   *         [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeComputeImageCapabilitySchemaCompartmentRequest
   * @return ChangeComputeImageCapabilitySchemaCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeComputeImageCapabilitySchemaCompartment.ts.html |here} to see how to use ChangeComputeImageCapabilitySchemaCompartment API.
   */
  public async changeComputeImageCapabilitySchemaCompartment(
    changeComputeImageCapabilitySchemaCompartmentRequest: requests.ChangeComputeImageCapabilitySchemaCompartmentRequest
  ): Promise<responses.ChangeComputeImageCapabilitySchemaCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeClient#changeComputeImageCapabilitySchemaCompartment."
      );
    const operationName = "changeComputeImageCapabilitySchemaCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeImageCapabilitySchema/ChangeComputeImageCapabilitySchemaCompartment";
    const pathParams = {
      "{computeImageCapabilitySchemaId}":
        changeComputeImageCapabilitySchemaCompartmentRequest.computeImageCapabilitySchemaId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeComputeImageCapabilitySchemaCompartmentRequest.ifMatch,
      "opc-request-id": changeComputeImageCapabilitySchemaCompartmentRequest.opcRequestId,
      "opc-retry-token": changeComputeImageCapabilitySchemaCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeComputeImageCapabilitySchemaCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/computeImageCapabilitySchemas/{computeImageCapabilitySchemaId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeComputeImageCapabilitySchemaCompartmentRequest.changeComputeImageCapabilitySchemaCompartmentDetails,
        "ChangeComputeImageCapabilitySchemaCompartmentDetails",
        model.ChangeComputeImageCapabilitySchemaCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeComputeImageCapabilitySchemaCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a dedicated virtual machine host from one compartment to another.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeDedicatedVmHostCompartmentRequest
   * @return ChangeDedicatedVmHostCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeDedicatedVmHostCompartment.ts.html |here} to see how to use ChangeDedicatedVmHostCompartment API.
   */
  public async changeDedicatedVmHostCompartment(
    changeDedicatedVmHostCompartmentRequest: requests.ChangeDedicatedVmHostCompartmentRequest
  ): Promise<responses.ChangeDedicatedVmHostCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#changeDedicatedVmHostCompartment.");
    const operationName = "changeDedicatedVmHostCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DedicatedVmHost/ChangeDedicatedVmHostCompartment";
    const pathParams = {
      "{dedicatedVmHostId}": changeDedicatedVmHostCompartmentRequest.dedicatedVmHostId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDedicatedVmHostCompartmentRequest.ifMatch,
      "opc-request-id": changeDedicatedVmHostCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDedicatedVmHostCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDedicatedVmHostCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts/{dedicatedVmHostId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDedicatedVmHostCompartmentRequest.changeDedicatedVmHostCompartmentDetails,
        "ChangeDedicatedVmHostCompartmentDetails",
        model.ChangeDedicatedVmHostCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDedicatedVmHostCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves an image into a different compartment within the same tenancy. For information about moving
   * resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeImageCompartmentRequest
   * @return ChangeImageCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeImageCompartment.ts.html |here} to see how to use ChangeImageCompartment API.
   */
  public async changeImageCompartment(
    changeImageCompartmentRequest: requests.ChangeImageCompartmentRequest
  ): Promise<responses.ChangeImageCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#changeImageCompartment.");
    const operationName = "changeImageCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Image/ChangeImageCompartment";
    const pathParams = {
      "{imageId}": changeImageCompartmentRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeImageCompartmentRequest.ifMatch,
      "opc-request-id": changeImageCompartmentRequest.opcRequestId,
      "opc-retry-token": changeImageCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeImageCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeImageCompartmentRequest.changeImageCompartmentDetails,
        "ChangeImageCompartmentDetails",
        model.ChangeImageCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeImageCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves an instance into a different compartment within the same tenancy. For information about
* moving resources between compartments, see
* [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* <p>
When you move an instance to a different compartment, associated resources such as boot volumes and VNICs
* are not moved.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeInstanceCompartmentRequest
     * @return ChangeInstanceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeInstanceCompartment.ts.html |here} to see how to use ChangeInstanceCompartment API.
     */
  public async changeInstanceCompartment(
    changeInstanceCompartmentRequest: requests.ChangeInstanceCompartmentRequest
  ): Promise<responses.ChangeInstanceCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#changeInstanceCompartment.");
    const operationName = "changeInstanceCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Instance/ChangeInstanceCompartment";
    const pathParams = {
      "{instanceId}": changeInstanceCompartmentRequest.instanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeInstanceCompartmentRequest.ifMatch,
      "opc-request-id": changeInstanceCompartmentRequest.opcRequestId,
      "opc-retry-token": changeInstanceCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeInstanceCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeInstanceCompartmentRequest.changeInstanceCompartmentDetails,
        "ChangeInstanceCompartmentDetails",
        model.ChangeInstanceCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeInstanceCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a subscription for listing resource version for a compartment. It will take some time to propagate to all regions.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateAppCatalogSubscriptionRequest
   * @return CreateAppCatalogSubscriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateAppCatalogSubscription.ts.html |here} to see how to use CreateAppCatalogSubscription API.
   */
  public async createAppCatalogSubscription(
    createAppCatalogSubscriptionRequest: requests.CreateAppCatalogSubscriptionRequest
  ): Promise<responses.CreateAppCatalogSubscriptionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#createAppCatalogSubscription.");
    const operationName = "createAppCatalogSubscription";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/AppCatalogSubscription/CreateAppCatalogSubscription";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createAppCatalogSubscriptionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAppCatalogSubscriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogSubscriptions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAppCatalogSubscriptionRequest.createAppCatalogSubscriptionDetails,
        "CreateAppCatalogSubscriptionDetails",
        model.CreateAppCatalogSubscriptionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAppCatalogSubscriptionResponse>{},
        body: await response.json(),
        bodyKey: "appCatalogSubscription",
        bodyModel: model.AppCatalogSubscription,
        type: "model.AppCatalogSubscription",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Generates a report of the host capacity within an availability domain that is available for you
* to create compute instances. Host capacity is the physical infrastructure that resources such as compute
* instances run on.
* <p>
Use the capacity report to determine whether sufficient capacity is available for a shape before
* you create an instance or change the shape of an instance.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateComputeCapacityReportRequest
     * @return CreateComputeCapacityReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateComputeCapacityReport.ts.html |here} to see how to use CreateComputeCapacityReport API.
     */
  public async createComputeCapacityReport(
    createComputeCapacityReportRequest: requests.CreateComputeCapacityReportRequest
  ): Promise<responses.CreateComputeCapacityReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#createComputeCapacityReport.");
    const operationName = "createComputeCapacityReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCapacityReport/CreateComputeCapacityReport";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createComputeCapacityReportRequest.opcRequestId,
      "opc-retry-token": createComputeCapacityReportRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createComputeCapacityReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityReports",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createComputeCapacityReportRequest.createComputeCapacityReportDetails,
        "CreateComputeCapacityReportDetails",
        model.CreateComputeCapacityReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateComputeCapacityReportResponse>{},
        body: await response.json(),
        bodyKey: "computeCapacityReport",
        bodyModel: model.ComputeCapacityReport,
        type: "model.ComputeCapacityReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new compute capacity reservation in the specified compartment and availability domain.
   * Compute capacity reservations let you reserve instances in a compartment.
   * When you launch an instance using this reservation, you are assured that you have enough space for your instance,
   * and you won't get out of capacity errors.
   * For more information, see [Reserved Capacity](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/reserve-capacity.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateComputeCapacityReservationRequest
   * @return CreateComputeCapacityReservationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateComputeCapacityReservation.ts.html |here} to see how to use CreateComputeCapacityReservation API.
   */
  public async createComputeCapacityReservation(
    createComputeCapacityReservationRequest: requests.CreateComputeCapacityReservationRequest
  ): Promise<responses.CreateComputeCapacityReservationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#createComputeCapacityReservation.");
    const operationName = "createComputeCapacityReservation";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createComputeCapacityReservationRequest.opcRequestId,
      "opc-retry-token": createComputeCapacityReservationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createComputeCapacityReservationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityReservations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createComputeCapacityReservationRequest.createComputeCapacityReservationDetails,
        "CreateComputeCapacityReservationDetails",
        model.CreateComputeCapacityReservationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateComputeCapacityReservationResponse>{},
        body: await response.json(),
        bodyKey: "computeCapacityReservation",
        bodyModel: model.ComputeCapacityReservation,
        type: "model.ComputeCapacityReservation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new compute capacity topology in the specified compartment and availability domain.
* <p>
Compute capacity topologies provide the RDMA network topology of your bare metal hosts so that you can launch
* instances on your bare metal hosts with targeted network locations.
* <p>
Compute capacity topologies report the health status of your bare metal hosts.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateComputeCapacityTopologyRequest
     * @return CreateComputeCapacityTopologyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateComputeCapacityTopology.ts.html |here} to see how to use CreateComputeCapacityTopology API.
     */
  public async createComputeCapacityTopology(
    createComputeCapacityTopologyRequest: requests.CreateComputeCapacityTopologyRequest
  ): Promise<responses.CreateComputeCapacityTopologyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#createComputeCapacityTopology.");
    const operationName = "createComputeCapacityTopology";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createComputeCapacityTopologyRequest.opcRequestId,
      "opc-retry-token": createComputeCapacityTopologyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createComputeCapacityTopologyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityTopologies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createComputeCapacityTopologyRequest.createComputeCapacityTopologyDetails,
        "CreateComputeCapacityTopologyDetails",
        model.CreateComputeCapacityTopologyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateComputeCapacityTopologyResponse>{},
        body: await response.json(),
        bodyKey: "computeCapacityTopology",
        bodyModel: model.ComputeCapacityTopology,
        type: "model.ComputeCapacityTopology",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates an empty [compute cluster](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/compute-clusters.htm). A compute cluster
* is a remote direct memory access (RDMA) network group.
* <p>
After the compute cluster is created, you can use the compute cluster's OCID with the
* {@link #launchInstance(LaunchInstanceRequest) launchInstance} operation to create instances in the compute cluster.
* The instances must be created in the same compartment and availability domain as the cluster.
* <p>
Use compute clusters when you want to manage instances in the cluster individually in the RDMA network group.
* <p>
If you want predictable capacity for a specific number of identical instances that are managed as a group,
* create a cluster network that uses instance pools by using the
* {@link #createClusterNetwork(CreateClusterNetworkRequest) createClusterNetwork} operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateComputeClusterRequest
     * @return CreateComputeClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateComputeCluster.ts.html |here} to see how to use CreateComputeCluster API.
     */
  public async createComputeCluster(
    createComputeClusterRequest: requests.CreateComputeClusterRequest
  ): Promise<responses.CreateComputeClusterResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#createComputeCluster.");
    const operationName = "createComputeCluster";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCluster/CreateComputeCluster";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createComputeClusterRequest.opcRetryToken,
      "opc-request-id": createComputeClusterRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createComputeClusterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeClusters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createComputeClusterRequest.createComputeClusterDetails,
        "CreateComputeClusterDetails",
        model.CreateComputeClusterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateComputeClusterResponse>{},
        body: await response.json(),
        bodyKey: "computeCluster",
        bodyModel: model.ComputeCluster,
        type: "model.ComputeCluster",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates compute image capability schema.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateComputeImageCapabilitySchemaRequest
   * @return CreateComputeImageCapabilitySchemaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateComputeImageCapabilitySchema.ts.html |here} to see how to use CreateComputeImageCapabilitySchema API.
   */
  public async createComputeImageCapabilitySchema(
    createComputeImageCapabilitySchemaRequest: requests.CreateComputeImageCapabilitySchemaRequest
  ): Promise<responses.CreateComputeImageCapabilitySchemaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#createComputeImageCapabilitySchema.");
    const operationName = "createComputeImageCapabilitySchema";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeImageCapabilitySchema/CreateComputeImageCapabilitySchema";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createComputeImageCapabilitySchemaRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createComputeImageCapabilitySchemaRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeImageCapabilitySchemas",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createComputeImageCapabilitySchemaRequest.createComputeImageCapabilitySchemaDetails,
        "CreateComputeImageCapabilitySchemaDetails",
        model.CreateComputeImageCapabilitySchemaDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateComputeImageCapabilitySchemaResponse>{},
        body: await response.json(),
        bodyKey: "computeImageCapabilitySchema",
        bodyModel: model.ComputeImageCapabilitySchema,
        type: "model.ComputeImageCapabilitySchema",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new dedicated virtual machine host in the specified compartment and the specified availability domain.
   * Dedicated virtual machine hosts enable you to run your Compute virtual machine (VM) instances on dedicated servers
   * that are a single tenant and not shared with other customers.
   * For more information, see [Dedicated Virtual Machine Hosts](https://docs.cloud.oracle.com/iaas/Content/Compute/Concepts/dedicatedvmhosts.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDedicatedVmHostRequest
   * @return CreateDedicatedVmHostResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateDedicatedVmHost.ts.html |here} to see how to use CreateDedicatedVmHost API.
   */
  public async createDedicatedVmHost(
    createDedicatedVmHostRequest: requests.CreateDedicatedVmHostRequest
  ): Promise<responses.CreateDedicatedVmHostResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#createDedicatedVmHost.");
    const operationName = "createDedicatedVmHost";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DedicatedVmHost/CreateDedicatedVmHost";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDedicatedVmHostRequest.opcRequestId,
      "opc-retry-token": createDedicatedVmHostRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDedicatedVmHostRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDedicatedVmHostRequest.createDedicatedVmHostDetails,
        "CreateDedicatedVmHostDetails",
        model.CreateDedicatedVmHostDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDedicatedVmHostResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedVmHost",
        bodyModel: model.DedicatedVmHost,
        type: "model.DedicatedVmHost",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a boot disk image for the specified instance or imports an exported image from the Oracle Cloud Infrastructure Object Storage service.
* <p>
When creating a new image, you must provide the OCID of the instance you want to use as the basis for the image, and
* the OCID of the compartment containing that instance. For more information about images,
* see [Managing Custom Images](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingcustomimages.htm).
* <p>
When importing an exported image from Object Storage, you specify the source information
* in {@link #imageSourceDetails(ImageSourceDetailsRequest) imageSourceDetails}.
* <p>
When importing an image based on the namespace, bucket name, and object name,
* use {@link #imageSourceViaObjectStorageTupleDetails(ImageSourceViaObjectStorageTupleDetailsRequest) imageSourceViaObjectStorageTupleDetails}.
* <p>
When importing an image based on the Object Storage URL, use
* {@link #imageSourceViaObjectStorageUriDetails(ImageSourceViaObjectStorageUriDetailsRequest) imageSourceViaObjectStorageUriDetails}.
* See [Object Storage URLs](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/imageimportexport.htm#URLs) and [Using Pre-Authenticated Requests](https://docs.cloud.oracle.com/iaas/Content/Object/Tasks/usingpreauthenticatedrequests.htm)
* for constructing URLs for image import/export.
* <p>
For more information about importing exported images, see
* [Image Import/Export](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/imageimportexport.htm).
* <p>
You may optionally specify a *display name* for the image, which is simply a friendly name or description.
* It does not have to be unique, and you can change it. See {@link #updateImage(UpdateImageRequest) updateImage}.
* Avoid entering confidential information.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateImageRequest
     * @return CreateImageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateImage.ts.html |here} to see how to use CreateImage API.
     */
  public async createImage(
    createImageRequest: requests.CreateImageRequest
  ): Promise<responses.CreateImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#createImage.");
    const operationName = "createImage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Image/CreateImage";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createImageRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createImageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createImageRequest.createImageDetails,
        "CreateImageDetails",
        model.CreateImageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateImageResponse>{},
        body: await response.json(),
        bodyKey: "image",
        bodyModel: model.Image,
        type: "model.Image",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new console connection to the specified instance.
* After the console connection has been created and is available,
* you connect to the console using SSH.
* <p>
For more information about instance console connections, see [Troubleshooting Instances Using Instance Console Connections](https://docs.cloud.oracle.com/iaas/Content/Compute/References/serialconsole.htm).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateInstanceConsoleConnectionRequest
     * @return CreateInstanceConsoleConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateInstanceConsoleConnection.ts.html |here} to see how to use CreateInstanceConsoleConnection API.
     */
  public async createInstanceConsoleConnection(
    createInstanceConsoleConnectionRequest: requests.CreateInstanceConsoleConnectionRequest
  ): Promise<responses.CreateInstanceConsoleConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#createInstanceConsoleConnection.");
    const operationName = "createInstanceConsoleConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConsoleConnection/CreateInstanceConsoleConnection";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createInstanceConsoleConnectionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createInstanceConsoleConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleConnections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createInstanceConsoleConnectionRequest.createInstanceConsoleConnectionDetails,
        "CreateInstanceConsoleConnectionDetails",
        model.CreateInstanceConsoleConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateInstanceConsoleConnectionResponse>{},
        body: await response.json(),
        bodyKey: "instanceConsoleConnection",
        bodyModel: model.InstanceConsoleConnection,
        type: "model.InstanceConsoleConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a subscription for a listing resource version for a compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteAppCatalogSubscriptionRequest
   * @return DeleteAppCatalogSubscriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteAppCatalogSubscription.ts.html |here} to see how to use DeleteAppCatalogSubscription API.
   */
  public async deleteAppCatalogSubscription(
    deleteAppCatalogSubscriptionRequest: requests.DeleteAppCatalogSubscriptionRequest
  ): Promise<responses.DeleteAppCatalogSubscriptionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#deleteAppCatalogSubscription.");
    const operationName = "deleteAppCatalogSubscription";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "listingId": deleteAppCatalogSubscriptionRequest.listingId,
      "compartmentId": deleteAppCatalogSubscriptionRequest.compartmentId,
      "resourceVersion": deleteAppCatalogSubscriptionRequest.resourceVersion
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAppCatalogSubscriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogSubscriptions",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAppCatalogSubscriptionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified compute capacity reservation.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteComputeCapacityReservationRequest
   * @return DeleteComputeCapacityReservationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteComputeCapacityReservation.ts.html |here} to see how to use DeleteComputeCapacityReservation API.
   */
  public async deleteComputeCapacityReservation(
    deleteComputeCapacityReservationRequest: requests.DeleteComputeCapacityReservationRequest
  ): Promise<responses.DeleteComputeCapacityReservationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#deleteComputeCapacityReservation.");
    const operationName = "deleteComputeCapacityReservation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCapacityReservation/DeleteComputeCapacityReservation";
    const pathParams = {
      "{capacityReservationId}": deleteComputeCapacityReservationRequest.capacityReservationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteComputeCapacityReservationRequest.opcRequestId,
      "if-match": deleteComputeCapacityReservationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteComputeCapacityReservationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityReservations/{capacityReservationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteComputeCapacityReservationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified compute capacity topology.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteComputeCapacityTopologyRequest
   * @return DeleteComputeCapacityTopologyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteComputeCapacityTopology.ts.html |here} to see how to use DeleteComputeCapacityTopology API.
   */
  public async deleteComputeCapacityTopology(
    deleteComputeCapacityTopologyRequest: requests.DeleteComputeCapacityTopologyRequest
  ): Promise<responses.DeleteComputeCapacityTopologyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#deleteComputeCapacityTopology.");
    const operationName = "deleteComputeCapacityTopology";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCapacityTopology/DeleteComputeCapacityTopology";
    const pathParams = {
      "{computeCapacityTopologyId}": deleteComputeCapacityTopologyRequest.computeCapacityTopologyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteComputeCapacityTopologyRequest.ifMatch,
      "opc-request-id": deleteComputeCapacityTopologyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteComputeCapacityTopologyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityTopologies/{computeCapacityTopologyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteComputeCapacityTopologyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes a compute cluster. A [compute cluster](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/compute-clusters.htm) is a
* remote direct memory access (RDMA) network group.
* <p>
Before you delete a compute cluster, first delete all instances in the cluster by using
* the {@link #terminateInstance(TerminateInstanceRequest) terminateInstance} operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteComputeClusterRequest
     * @return DeleteComputeClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteComputeCluster.ts.html |here} to see how to use DeleteComputeCluster API.
     */
  public async deleteComputeCluster(
    deleteComputeClusterRequest: requests.DeleteComputeClusterRequest
  ): Promise<responses.DeleteComputeClusterResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#deleteComputeCluster.");
    const operationName = "deleteComputeCluster";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCluster/DeleteComputeCluster";
    const pathParams = {
      "{computeClusterId}": deleteComputeClusterRequest.computeClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteComputeClusterRequest.opcRequestId,
      "if-match": deleteComputeClusterRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteComputeClusterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeClusters/{computeClusterId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteComputeClusterResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified Compute Image Capability Schema
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteComputeImageCapabilitySchemaRequest
   * @return DeleteComputeImageCapabilitySchemaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteComputeImageCapabilitySchema.ts.html |here} to see how to use DeleteComputeImageCapabilitySchema API.
   */
  public async deleteComputeImageCapabilitySchema(
    deleteComputeImageCapabilitySchemaRequest: requests.DeleteComputeImageCapabilitySchemaRequest
  ): Promise<responses.DeleteComputeImageCapabilitySchemaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#deleteComputeImageCapabilitySchema.");
    const operationName = "deleteComputeImageCapabilitySchema";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeImageCapabilitySchema/DeleteComputeImageCapabilitySchema";
    const pathParams = {
      "{computeImageCapabilitySchemaId}":
        deleteComputeImageCapabilitySchemaRequest.computeImageCapabilitySchemaId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteComputeImageCapabilitySchemaRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteComputeImageCapabilitySchemaRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeImageCapabilitySchemas/{computeImageCapabilitySchemaId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteComputeImageCapabilitySchemaResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified console history metadata and the console history data.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteConsoleHistoryRequest
   * @return DeleteConsoleHistoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteConsoleHistory.ts.html |here} to see how to use DeleteConsoleHistory API.
   */
  public async deleteConsoleHistory(
    deleteConsoleHistoryRequest: requests.DeleteConsoleHistoryRequest
  ): Promise<responses.DeleteConsoleHistoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#deleteConsoleHistory.");
    const operationName = "deleteConsoleHistory";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ConsoleHistory/DeleteConsoleHistory";
    const pathParams = {
      "{instanceConsoleHistoryId}": deleteConsoleHistoryRequest.instanceConsoleHistoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteConsoleHistoryRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteConsoleHistoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleHistories/{instanceConsoleHistoryId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteConsoleHistoryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified dedicated virtual machine host.
* <p>
If any VM instances are assigned to the dedicated virtual machine host,
* the delete operation will fail and the service will return a 409 response code.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDedicatedVmHostRequest
     * @return DeleteDedicatedVmHostResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteDedicatedVmHost.ts.html |here} to see how to use DeleteDedicatedVmHost API.
     */
  public async deleteDedicatedVmHost(
    deleteDedicatedVmHostRequest: requests.DeleteDedicatedVmHostRequest
  ): Promise<responses.DeleteDedicatedVmHostResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#deleteDedicatedVmHost.");
    const operationName = "deleteDedicatedVmHost";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DedicatedVmHost/DeleteDedicatedVmHost";
    const pathParams = {
      "{dedicatedVmHostId}": deleteDedicatedVmHostRequest.dedicatedVmHostId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteDedicatedVmHostRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDedicatedVmHostRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts/{dedicatedVmHostId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDedicatedVmHostResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an image.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteImageRequest
   * @return DeleteImageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteImage.ts.html |here} to see how to use DeleteImage API.
   */
  public async deleteImage(
    deleteImageRequest: requests.DeleteImageRequest
  ): Promise<responses.DeleteImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#deleteImage.");
    const operationName = "deleteImage";
    const apiReferenceLink = "";
    const pathParams = {
      "{imageId}": deleteImageRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteImageRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteImageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteImageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified instance console connection.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteInstanceConsoleConnectionRequest
   * @return DeleteInstanceConsoleConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteInstanceConsoleConnection.ts.html |here} to see how to use DeleteInstanceConsoleConnection API.
   */
  public async deleteInstanceConsoleConnection(
    deleteInstanceConsoleConnectionRequest: requests.DeleteInstanceConsoleConnectionRequest
  ): Promise<responses.DeleteInstanceConsoleConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#deleteInstanceConsoleConnection.");
    const operationName = "deleteInstanceConsoleConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConsoleConnection/DeleteInstanceConsoleConnection";
    const pathParams = {
      "{instanceConsoleConnectionId}":
        deleteInstanceConsoleConnectionRequest.instanceConsoleConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteInstanceConsoleConnectionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteInstanceConsoleConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleConnections/{instanceConsoleConnectionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteInstanceConsoleConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Detaches a boot volume from an instance. You must specify the OCID of the boot volume attachment.
* <p>
This is an asynchronous operation. The attachment's `lifecycleState` will change to DETACHING temporarily
* until the attachment is completely removed.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DetachBootVolumeRequest
     * @return DetachBootVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DetachBootVolume.ts.html |here} to see how to use DetachBootVolume API.
     */
  public async detachBootVolume(
    detachBootVolumeRequest: requests.DetachBootVolumeRequest
  ): Promise<responses.DetachBootVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#detachBootVolume.");
    const operationName = "detachBootVolume";
    const apiReferenceLink = "";
    const pathParams = {
      "{bootVolumeAttachmentId}": detachBootVolumeRequest.bootVolumeAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": detachBootVolumeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detachBootVolumeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeAttachments/{bootVolumeAttachmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachBootVolumeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detaches and deletes the specified secondary VNIC.
   * This operation cannot be used on the instance's primary VNIC.
   * When you terminate an instance, all attached VNICs (primary
   * and secondary) are automatically detached and deleted.
   * <p>
   **Important:** If the VNIC has a
   * {@link PrivateIp} that is the
   * [target of a route rule](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm#privateip),
   * deleting the VNIC causes that route rule to blackhole and the traffic
   * will be dropped.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DetachVnicRequest
   * @return DetachVnicResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DetachVnic.ts.html |here} to see how to use DetachVnic API.
   */
  public async detachVnic(
    detachVnicRequest: requests.DetachVnicRequest
  ): Promise<responses.DetachVnicResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#detachVnic.");
    const operationName = "detachVnic";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VnicAttachment/DetachVnic";
    const pathParams = {
      "{vnicAttachmentId}": detachVnicRequest.vnicAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": detachVnicRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detachVnicRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vnicAttachments/{vnicAttachmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachVnicResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Detaches a storage volume from an instance. You must specify the OCID of the volume attachment.
* <p>
This is an asynchronous operation. The attachment's `lifecycleState` will change to DETACHING temporarily
* until the attachment is completely removed.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DetachVolumeRequest
     * @return DetachVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DetachVolume.ts.html |here} to see how to use DetachVolume API.
     */
  public async detachVolume(
    detachVolumeRequest: requests.DetachVolumeRequest
  ): Promise<responses.DetachVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#detachVolume.");
    const operationName = "detachVolume";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeAttachment/DetachVolume";
    const pathParams = {
      "{volumeAttachmentId}": detachVolumeRequest.volumeAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": detachVolumeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detachVolumeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeAttachments/{volumeAttachmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachVolumeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Exports the specified image to the Oracle Cloud Infrastructure Object Storage service. You can use the Object Storage URL,
* or the namespace, bucket name, and object name when specifying the location to export to.
* <p>
For more information about exporting images, see [Image Import/Export](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/imageimportexport.htm).
* <p>
To perform an image export, you need write access to the Object Storage bucket for the image,
* see [Let Users Write Objects to Object Storage Buckets](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/commonpolicies.htm#Let4).
* <p>
See [Object Storage URLs](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/imageimportexport.htm#URLs) and [Using Pre-Authenticated Requests](https://docs.cloud.oracle.com/iaas/Content/Object/Tasks/usingpreauthenticatedrequests.htm)
* for constructing URLs for image import/export.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ExportImageRequest
     * @return ExportImageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ExportImage.ts.html |here} to see how to use ExportImage API.
     */
  public async exportImage(
    exportImageRequest: requests.ExportImageRequest
  ): Promise<responses.ExportImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#exportImage.");
    const operationName = "exportImage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Image/ExportImage";
    const pathParams = {
      "{imageId}": exportImageRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": exportImageRequest.opcRetryToken,
      "if-match": exportImageRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      exportImageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}/actions/export",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        exportImageRequest.exportImageDetails,
        "ExportImageDetails",
        model.ExportImageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ExportImageResponse>{},
        body: await response.json(),
        bodyKey: "image",
        bodyModel: model.Image,
        type: "model.Image",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified listing.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAppCatalogListingRequest
   * @return GetAppCatalogListingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetAppCatalogListing.ts.html |here} to see how to use GetAppCatalogListing API.
   */
  public async getAppCatalogListing(
    getAppCatalogListingRequest: requests.GetAppCatalogListingRequest
  ): Promise<responses.GetAppCatalogListingResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getAppCatalogListing.");
    const operationName = "getAppCatalogListing";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/AppCatalogListing/GetAppCatalogListing";
    const pathParams = {
      "{listingId}": getAppCatalogListingRequest.listingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAppCatalogListingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogListings/{listingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAppCatalogListingResponse>{},
        body: await response.json(),
        bodyKey: "appCatalogListing",
        bodyModel: model.AppCatalogListing,
        type: "model.AppCatalogListing",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the agreements for a particular resource version of a listing.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAppCatalogListingAgreementsRequest
   * @return GetAppCatalogListingAgreementsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetAppCatalogListingAgreements.ts.html |here} to see how to use GetAppCatalogListingAgreements API.
   */
  public async getAppCatalogListingAgreements(
    getAppCatalogListingAgreementsRequest: requests.GetAppCatalogListingAgreementsRequest
  ): Promise<responses.GetAppCatalogListingAgreementsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getAppCatalogListingAgreements.");
    const operationName = "getAppCatalogListingAgreements";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/AppCatalogListingResourceVersionAgreements/GetAppCatalogListingAgreements";
    const pathParams = {
      "{listingId}": getAppCatalogListingAgreementsRequest.listingId,
      "{resourceVersion}": getAppCatalogListingAgreementsRequest.resourceVersion
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAppCatalogListingAgreementsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogListings/{listingId}/resourceVersions/{resourceVersion}/agreements",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAppCatalogListingAgreementsResponse>{},
        body: await response.json(),
        bodyKey: "appCatalogListingResourceVersionAgreements",
        bodyModel: model.AppCatalogListingResourceVersionAgreements,
        type: "model.AppCatalogListingResourceVersionAgreements",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified listing resource version.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAppCatalogListingResourceVersionRequest
   * @return GetAppCatalogListingResourceVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetAppCatalogListingResourceVersion.ts.html |here} to see how to use GetAppCatalogListingResourceVersion API.
   */
  public async getAppCatalogListingResourceVersion(
    getAppCatalogListingResourceVersionRequest: requests.GetAppCatalogListingResourceVersionRequest
  ): Promise<responses.GetAppCatalogListingResourceVersionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getAppCatalogListingResourceVersion.");
    const operationName = "getAppCatalogListingResourceVersion";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/AppCatalogListingResourceVersion/GetAppCatalogListingResourceVersion";
    const pathParams = {
      "{listingId}": getAppCatalogListingResourceVersionRequest.listingId,
      "{resourceVersion}": getAppCatalogListingResourceVersionRequest.resourceVersion
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAppCatalogListingResourceVersionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogListings/{listingId}/resourceVersions/{resourceVersion}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAppCatalogListingResourceVersionResponse>{},
        body: await response.json(),
        bodyKey: "appCatalogListingResourceVersion",
        bodyModel: model.AppCatalogListingResourceVersion,
        type: "model.AppCatalogListingResourceVersion",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified boot volume attachment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBootVolumeAttachmentRequest
   * @return GetBootVolumeAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetBootVolumeAttachment.ts.html |here} to see how to use GetBootVolumeAttachment API.
   */
  public async getBootVolumeAttachment(
    getBootVolumeAttachmentRequest: requests.GetBootVolumeAttachmentRequest
  ): Promise<responses.GetBootVolumeAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getBootVolumeAttachment.");
    const operationName = "getBootVolumeAttachment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeAttachment/GetBootVolumeAttachment";
    const pathParams = {
      "{bootVolumeAttachmentId}": getBootVolumeAttachmentRequest.bootVolumeAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBootVolumeAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeAttachments/{bootVolumeAttachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBootVolumeAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeAttachment",
        bodyModel: model.BootVolumeAttachment,
        type: "model.BootVolumeAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified compute capacity reservation.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetComputeCapacityReservationRequest
   * @return GetComputeCapacityReservationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetComputeCapacityReservation.ts.html |here} to see how to use GetComputeCapacityReservation API.
   */
  public async getComputeCapacityReservation(
    getComputeCapacityReservationRequest: requests.GetComputeCapacityReservationRequest
  ): Promise<responses.GetComputeCapacityReservationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getComputeCapacityReservation.");
    const operationName = "getComputeCapacityReservation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCapacityReservation/GetComputeCapacityReservation";
    const pathParams = {
      "{capacityReservationId}": getComputeCapacityReservationRequest.capacityReservationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getComputeCapacityReservationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getComputeCapacityReservationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityReservations/{capacityReservationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetComputeCapacityReservationResponse>{},
        body: await response.json(),
        bodyKey: "computeCapacityReservation",
        bodyModel: model.ComputeCapacityReservation,
        type: "model.ComputeCapacityReservation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified compute capacity topology.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetComputeCapacityTopologyRequest
   * @return GetComputeCapacityTopologyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetComputeCapacityTopology.ts.html |here} to see how to use GetComputeCapacityTopology API.
   */
  public async getComputeCapacityTopology(
    getComputeCapacityTopologyRequest: requests.GetComputeCapacityTopologyRequest
  ): Promise<responses.GetComputeCapacityTopologyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getComputeCapacityTopology.");
    const operationName = "getComputeCapacityTopology";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCapacityTopology/GetComputeCapacityTopology";
    const pathParams = {
      "{computeCapacityTopologyId}": getComputeCapacityTopologyRequest.computeCapacityTopologyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getComputeCapacityTopologyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getComputeCapacityTopologyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityTopologies/{computeCapacityTopologyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetComputeCapacityTopologyResponse>{},
        body: await response.json(),
        bodyKey: "computeCapacityTopology",
        bodyModel: model.ComputeCapacityTopology,
        type: "model.ComputeCapacityTopology",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a compute cluster. A [compute cluster](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/compute-clusters.htm)
   * is a remote direct memory access (RDMA) network group.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetComputeClusterRequest
   * @return GetComputeClusterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetComputeCluster.ts.html |here} to see how to use GetComputeCluster API.
   */
  public async getComputeCluster(
    getComputeClusterRequest: requests.GetComputeClusterRequest
  ): Promise<responses.GetComputeClusterResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getComputeCluster.");
    const operationName = "getComputeCluster";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCluster/GetComputeCluster";
    const pathParams = {
      "{computeClusterId}": getComputeClusterRequest.computeClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getComputeClusterRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getComputeClusterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeClusters/{computeClusterId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetComputeClusterResponse>{},
        body: await response.json(),
        bodyKey: "computeCluster",
        bodyModel: model.ComputeCluster,
        type: "model.ComputeCluster",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Compute Global Image Capability Schema
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetComputeGlobalImageCapabilitySchemaRequest
   * @return GetComputeGlobalImageCapabilitySchemaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetComputeGlobalImageCapabilitySchema.ts.html |here} to see how to use GetComputeGlobalImageCapabilitySchema API.
   */
  public async getComputeGlobalImageCapabilitySchema(
    getComputeGlobalImageCapabilitySchemaRequest: requests.GetComputeGlobalImageCapabilitySchemaRequest
  ): Promise<responses.GetComputeGlobalImageCapabilitySchemaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getComputeGlobalImageCapabilitySchema.");
    const operationName = "getComputeGlobalImageCapabilitySchema";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeGlobalImageCapabilitySchema/GetComputeGlobalImageCapabilitySchema";
    const pathParams = {
      "{computeGlobalImageCapabilitySchemaId}":
        getComputeGlobalImageCapabilitySchemaRequest.computeGlobalImageCapabilitySchemaId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getComputeGlobalImageCapabilitySchemaRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeGlobalImageCapabilitySchemas/{computeGlobalImageCapabilitySchemaId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetComputeGlobalImageCapabilitySchemaResponse>{},
        body: await response.json(),
        bodyKey: "computeGlobalImageCapabilitySchema",
        bodyModel: model.ComputeGlobalImageCapabilitySchema,
        type: "model.ComputeGlobalImageCapabilitySchema",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Compute Global Image Capability Schema Version
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetComputeGlobalImageCapabilitySchemaVersionRequest
   * @return GetComputeGlobalImageCapabilitySchemaVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetComputeGlobalImageCapabilitySchemaVersion.ts.html |here} to see how to use GetComputeGlobalImageCapabilitySchemaVersion API.
   */
  public async getComputeGlobalImageCapabilitySchemaVersion(
    getComputeGlobalImageCapabilitySchemaVersionRequest: requests.GetComputeGlobalImageCapabilitySchemaVersionRequest
  ): Promise<responses.GetComputeGlobalImageCapabilitySchemaVersionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeClient#getComputeGlobalImageCapabilitySchemaVersion."
      );
    const operationName = "getComputeGlobalImageCapabilitySchemaVersion";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeGlobalImageCapabilitySchemaVersion/GetComputeGlobalImageCapabilitySchemaVersion";
    const pathParams = {
      "{computeGlobalImageCapabilitySchemaId}":
        getComputeGlobalImageCapabilitySchemaVersionRequest.computeGlobalImageCapabilitySchemaId,
      "{computeGlobalImageCapabilitySchemaVersionName}":
        getComputeGlobalImageCapabilitySchemaVersionRequest.computeGlobalImageCapabilitySchemaVersionName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getComputeGlobalImageCapabilitySchemaVersionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/computeGlobalImageCapabilitySchemas/{computeGlobalImageCapabilitySchemaId}/versions/{computeGlobalImageCapabilitySchemaVersionName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetComputeGlobalImageCapabilitySchemaVersionResponse>{},
        body: await response.json(),
        bodyKey: "computeGlobalImageCapabilitySchemaVersion",
        bodyModel: model.ComputeGlobalImageCapabilitySchemaVersion,
        type: "model.ComputeGlobalImageCapabilitySchemaVersion",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Compute Image Capability Schema
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetComputeImageCapabilitySchemaRequest
   * @return GetComputeImageCapabilitySchemaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetComputeImageCapabilitySchema.ts.html |here} to see how to use GetComputeImageCapabilitySchema API.
   */
  public async getComputeImageCapabilitySchema(
    getComputeImageCapabilitySchemaRequest: requests.GetComputeImageCapabilitySchemaRequest
  ): Promise<responses.GetComputeImageCapabilitySchemaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getComputeImageCapabilitySchema.");
    const operationName = "getComputeImageCapabilitySchema";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeImageCapabilitySchema/GetComputeImageCapabilitySchema";
    const pathParams = {
      "{computeImageCapabilitySchemaId}":
        getComputeImageCapabilitySchemaRequest.computeImageCapabilitySchemaId
    };

    const queryParams = {
      "isMergeEnabled": getComputeImageCapabilitySchemaRequest.isMergeEnabled
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getComputeImageCapabilitySchemaRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeImageCapabilitySchemas/{computeImageCapabilitySchemaId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetComputeImageCapabilitySchemaResponse>{},
        body: await response.json(),
        bodyKey: "computeImageCapabilitySchema",
        bodyModel: model.ComputeImageCapabilitySchema,
        type: "model.ComputeImageCapabilitySchema",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Shows the metadata for the specified console history.
   * See {@link #captureConsoleHistory(CaptureConsoleHistoryRequest) captureConsoleHistory}
   * for details about using the console history operations.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetConsoleHistoryRequest
   * @return GetConsoleHistoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetConsoleHistory.ts.html |here} to see how to use GetConsoleHistory API.
   */
  public async getConsoleHistory(
    getConsoleHistoryRequest: requests.GetConsoleHistoryRequest
  ): Promise<responses.GetConsoleHistoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getConsoleHistory.");
    const operationName = "getConsoleHistory";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ConsoleHistory/GetConsoleHistory";
    const pathParams = {
      "{instanceConsoleHistoryId}": getConsoleHistoryRequest.instanceConsoleHistoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConsoleHistoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleHistories/{instanceConsoleHistoryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConsoleHistoryResponse>{},
        body: await response.json(),
        bodyKey: "consoleHistory",
        bodyModel: model.ConsoleHistory,
        type: "model.ConsoleHistory",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the actual console history data (not the metadata).
   * See {@link #captureConsoleHistory(CaptureConsoleHistoryRequest) captureConsoleHistory}
   * for details about using the console history operations.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetConsoleHistoryContentRequest
   * @return GetConsoleHistoryContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetConsoleHistoryContent.ts.html |here} to see how to use GetConsoleHistoryContent API.
   */
  public async getConsoleHistoryContent(
    getConsoleHistoryContentRequest: requests.GetConsoleHistoryContentRequest
  ): Promise<responses.GetConsoleHistoryContentResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getConsoleHistoryContent.");
    const operationName = "getConsoleHistoryContent";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ConsoleHistory/GetConsoleHistoryContent";
    const pathParams = {
      "{instanceConsoleHistoryId}": getConsoleHistoryContentRequest.instanceConsoleHistoryId
    };

    const queryParams = {
      "offset": getConsoleHistoryContentRequest.offset,
      "length": getConsoleHistoryContentRequest.length
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConsoleHistoryContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleHistories/{instanceConsoleHistoryId}/data",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConsoleHistoryContentResponse>{},
        body: await response.json(),
        bodyKey: "value",
        bodyModel: "string",
        type: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-bytes-remaining"),
            key: "opcBytesRemaining",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified dedicated virtual machine host.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDedicatedVmHostRequest
   * @return GetDedicatedVmHostResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetDedicatedVmHost.ts.html |here} to see how to use GetDedicatedVmHost API.
   */
  public async getDedicatedVmHost(
    getDedicatedVmHostRequest: requests.GetDedicatedVmHostRequest
  ): Promise<responses.GetDedicatedVmHostResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getDedicatedVmHost.");
    const operationName = "getDedicatedVmHost";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DedicatedVmHost/GetDedicatedVmHost";
    const pathParams = {
      "{dedicatedVmHostId}": getDedicatedVmHostRequest.dedicatedVmHostId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDedicatedVmHostRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDedicatedVmHostRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts/{dedicatedVmHostId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDedicatedVmHostResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedVmHost",
        bodyModel: model.DedicatedVmHost,
        type: "model.DedicatedVmHost",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified image.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetImageRequest
   * @return GetImageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetImage.ts.html |here} to see how to use GetImage API.
   */
  public async getImage(
    getImageRequest: requests.GetImageRequest
  ): Promise<responses.GetImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getImage.");
    const operationName = "getImage";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Image/GetImage";
    const pathParams = {
      "{imageId}": getImageRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getImageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetImageResponse>{},
        body: await response.json(),
        bodyKey: "image",
        bodyModel: model.Image,
        type: "model.Image",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves an image shape compatibility entry.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetImageShapeCompatibilityEntryRequest
   * @return GetImageShapeCompatibilityEntryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetImageShapeCompatibilityEntry.ts.html |here} to see how to use GetImageShapeCompatibilityEntry API.
   */
  public async getImageShapeCompatibilityEntry(
    getImageShapeCompatibilityEntryRequest: requests.GetImageShapeCompatibilityEntryRequest
  ): Promise<responses.GetImageShapeCompatibilityEntryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getImageShapeCompatibilityEntry.");
    const operationName = "getImageShapeCompatibilityEntry";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ImageShapeCompatibilityEntry/GetImageShapeCompatibilityEntry";
    const pathParams = {
      "{imageId}": getImageShapeCompatibilityEntryRequest.imageId,
      "{shapeName}": getImageShapeCompatibilityEntryRequest.shapeName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getImageShapeCompatibilityEntryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getImageShapeCompatibilityEntryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}/shapes/{shapeName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetImageShapeCompatibilityEntryResponse>{},
        body: await response.json(),
        bodyKey: "imageShapeCompatibilityEntry",
        bodyModel: model.ImageShapeCompatibilityEntry,
        type: "model.ImageShapeCompatibilityEntry",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified instance.
   * <p>
   **Note:** To retrieve public and private IP addresses for an instance, use the {@link #listVnicAttachments(ListVnicAttachmentsRequest) listVnicAttachments}
   * operation to get the VNIC ID for the instance, and then call {@link #getVnic(GetVnicRequest) getVnic} with the VNIC ID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetInstanceRequest
   * @return GetInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstance.ts.html |here} to see how to use GetInstance API.
   */
  public async getInstance(
    getInstanceRequest: requests.GetInstanceRequest
  ): Promise<responses.GetInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getInstance.");
    const operationName = "getInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Instance/GetInstance";
    const pathParams = {
      "{instanceId}": getInstanceRequest.instanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstanceResponse>{},
        body: await response.json(),
        bodyKey: "instance",
        bodyModel: model.Instance,
        type: "model.Instance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified instance console connection's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetInstanceConsoleConnectionRequest
   * @return GetInstanceConsoleConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstanceConsoleConnection.ts.html |here} to see how to use GetInstanceConsoleConnection API.
   */
  public async getInstanceConsoleConnection(
    getInstanceConsoleConnectionRequest: requests.GetInstanceConsoleConnectionRequest
  ): Promise<responses.GetInstanceConsoleConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getInstanceConsoleConnection.");
    const operationName = "getInstanceConsoleConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConsoleConnection/GetInstanceConsoleConnection";
    const pathParams = {
      "{instanceConsoleConnectionId}":
        getInstanceConsoleConnectionRequest.instanceConsoleConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getInstanceConsoleConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleConnections/{instanceConsoleConnectionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstanceConsoleConnectionResponse>{},
        body: await response.json(),
        bodyKey: "instanceConsoleConnection",
        bodyModel: model.InstanceConsoleConnection,
        type: "model.InstanceConsoleConnection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the maintenance event for the given instance.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetInstanceMaintenanceEventRequest
   * @return GetInstanceMaintenanceEventResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstanceMaintenanceEvent.ts.html |here} to see how to use GetInstanceMaintenanceEvent API.
   */
  public async getInstanceMaintenanceEvent(
    getInstanceMaintenanceEventRequest: requests.GetInstanceMaintenanceEventRequest
  ): Promise<responses.GetInstanceMaintenanceEventResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getInstanceMaintenanceEvent.");
    const operationName = "getInstanceMaintenanceEvent";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceMaintenanceEvent/GetInstanceMaintenanceEvent";
    const pathParams = {
      "{instanceMaintenanceEventId}": getInstanceMaintenanceEventRequest.instanceMaintenanceEventId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getInstanceMaintenanceEventRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getInstanceMaintenanceEventRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceMaintenanceEvents/{instanceMaintenanceEventId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstanceMaintenanceEventResponse>{},
        body: await response.json(),
        bodyKey: "instanceMaintenanceEvent",
        bodyModel: model.InstanceMaintenanceEvent,
        type: "model.InstanceMaintenanceEvent",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the maximum possible date that a maintenance reboot can be extended. For more information, see
   * [Infrastructure Maintenance](https://docs.cloud.oracle.com/iaas/Content/Compute/References/infrastructure-maintenance.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetInstanceMaintenanceRebootRequest
   * @return GetInstanceMaintenanceRebootResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstanceMaintenanceReboot.ts.html |here} to see how to use GetInstanceMaintenanceReboot API.
   */
  public async getInstanceMaintenanceReboot(
    getInstanceMaintenanceRebootRequest: requests.GetInstanceMaintenanceRebootRequest
  ): Promise<responses.GetInstanceMaintenanceRebootResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getInstanceMaintenanceReboot.");
    const operationName = "getInstanceMaintenanceReboot";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceMaintenanceReboot/GetInstanceMaintenanceReboot";
    const pathParams = {
      "{instanceId}": getInstanceMaintenanceRebootRequest.instanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getInstanceMaintenanceRebootRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getInstanceMaintenanceRebootRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}/maintenanceReboot",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstanceMaintenanceRebootResponse>{},
        body: await response.json(),
        bodyKey: "instanceMaintenanceReboot",
        bodyModel: model.InstanceMaintenanceReboot,
        type: "model.InstanceMaintenanceReboot",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the measured boot report for this shielded instance.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetMeasuredBootReportRequest
   * @return GetMeasuredBootReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetMeasuredBootReport.ts.html |here} to see how to use GetMeasuredBootReport API.
   */
  public async getMeasuredBootReport(
    getMeasuredBootReportRequest: requests.GetMeasuredBootReportRequest
  ): Promise<responses.GetMeasuredBootReportResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getMeasuredBootReport.");
    const operationName = "getMeasuredBootReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/MeasuredBootReport/GetMeasuredBootReport";
    const pathParams = {
      "{instanceId}": getMeasuredBootReportRequest.instanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMeasuredBootReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMeasuredBootReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}/measuredBootReport",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMeasuredBootReportResponse>{},
        body: await response.json(),
        bodyKey: "measuredBootReport",
        bodyModel: model.MeasuredBootReport,
        type: "model.MeasuredBootReport",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the information for the specified VNIC attachment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVnicAttachmentRequest
   * @return GetVnicAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVnicAttachment.ts.html |here} to see how to use GetVnicAttachment API.
   */
  public async getVnicAttachment(
    getVnicAttachmentRequest: requests.GetVnicAttachmentRequest
  ): Promise<responses.GetVnicAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getVnicAttachment.");
    const operationName = "getVnicAttachment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VnicAttachment/GetVnicAttachment";
    const pathParams = {
      "{vnicAttachmentId}": getVnicAttachmentRequest.vnicAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVnicAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vnicAttachments/{vnicAttachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVnicAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "vnicAttachment",
        bodyModel: model.VnicAttachment,
        type: "model.VnicAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified volume attachment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVolumeAttachmentRequest
   * @return GetVolumeAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeAttachment.ts.html |here} to see how to use GetVolumeAttachment API.
   */
  public async getVolumeAttachment(
    getVolumeAttachmentRequest: requests.GetVolumeAttachmentRequest
  ): Promise<responses.GetVolumeAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getVolumeAttachment.");
    const operationName = "getVolumeAttachment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeAttachment/GetVolumeAttachment";
    const pathParams = {
      "{volumeAttachmentId}": getVolumeAttachmentRequest.volumeAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVolumeAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeAttachments/{volumeAttachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "volumeAttachment",
        bodyModel: model.VolumeAttachment,
        type: "model.VolumeAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the generated credentials for the instance. Only works for instances that require a password to log in, such as Windows.
   * For certain operating systems, users will be forced to change the initial credentials.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetWindowsInstanceInitialCredentialsRequest
   * @return GetWindowsInstanceInitialCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetWindowsInstanceInitialCredentials.ts.html |here} to see how to use GetWindowsInstanceInitialCredentials API.
   */
  public async getWindowsInstanceInitialCredentials(
    getWindowsInstanceInitialCredentialsRequest: requests.GetWindowsInstanceInitialCredentialsRequest
  ): Promise<responses.GetWindowsInstanceInitialCredentialsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getWindowsInstanceInitialCredentials.");
    const operationName = "getWindowsInstanceInitialCredentials";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceCredentials/GetWindowsInstanceInitialCredentials";
    const pathParams = {
      "{instanceId}": getWindowsInstanceInitialCredentialsRequest.instanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWindowsInstanceInitialCredentialsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}/initialCredentials",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWindowsInstanceInitialCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "instanceCredentials",
        bodyModel: model.InstanceCredentials,
        type: "model.InstanceCredentials",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Performs one of the following power actions on the specified instance:
* <p>
- **START** - Powers on the instance.
* <p>
- **STOP** - Powers off the instance.
* <p>
- **RESET** - Powers off the instance and then powers it back on.
* <p>
- **SOFTSTOP** - Gracefully shuts down the instance by sending a shutdown command to the operating system.
* After waiting 15 minutes for the OS to shut down, the instance is powered off.
* If the applications that run on the instance take more than 15 minutes to shut down, they could be improperly stopped, resulting
* in data corruption. To avoid this, manually shut down the instance using the commands available in the OS before you softstop the
* instance.
* <p>
- **SOFTRESET** - Gracefully reboots the instance by sending a shutdown command to the operating system.
* After waiting 15 minutes for the OS to shut down, the instance is powered off and
* then powered back on.
* <p>

* - **SENDDIAGNOSTICINTERRUPT** - For advanced users. **Caution: Sending a diagnostic interrupt to a live system can
* cause data corruption or system failure.** Sends a diagnostic interrupt that causes the instance's
* OS to crash and then reboot. Before you send a diagnostic interrupt, you must configure the instance to generate a
* crash dump file when it crashes. The crash dump captures information about the state of the OS at the time of
* the crash. After the OS restarts, you can analyze the crash dump to diagnose the issue. For more information, see
* [Sending a Diagnostic Interrupt](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/sendingdiagnosticinterrupt.htm).
* <p>

* <p>
- **DIAGNOSTICREBOOT** - Powers off the instance, rebuilds it, and then powers it back on.
* Before you send a diagnostic reboot, restart the instance's OS, confirm that the instance and networking settings are configured
* correctly, and try other [troubleshooting steps](https://docs.cloud.oracle.com/iaas/Content/Compute/References/troubleshooting-compute-instances.htm).
* Use diagnostic reboot as a final attempt to troubleshoot an unreachable instance. For virtual machine (VM) instances only.
* For more information, see [Performing a Diagnostic Reboot](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/diagnostic-reboot.htm).
* <p>

* - **REBOOTMIGRATE** - Powers off the instance, moves it to new hardware, and then powers it back on. For more information, see
* [Infrastructure Maintenance](https://docs.cloud.oracle.com/iaas/Content/Compute/References/infrastructure-maintenance.htm).
* <p>

* For more information about managing instance lifecycle states, see
* [Stopping and Starting an Instance](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/restartinginstance.htm).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstanceActionRequest
     * @return InstanceActionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/InstanceAction.ts.html |here} to see how to use InstanceAction API.
     */
  public async instanceAction(
    instanceActionRequest: requests.InstanceActionRequest
  ): Promise<responses.InstanceActionResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#instanceAction.");
    const operationName = "instanceAction";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Instance/InstanceAction";
    const pathParams = {
      "{instanceId}": instanceActionRequest.instanceId
    };

    const queryParams = {
      "action": instanceActionRequest.action
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": instanceActionRequest.opcRetryToken,
      "if-match": instanceActionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      instanceActionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        instanceActionRequest.instancePowerActionDetails,
        "InstancePowerActionDetails",
        model.InstancePowerActionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.InstanceActionResponse>{},
        body: await response.json(),
        bodyKey: "instance",
        bodyModel: model.Instance,
        type: "model.Instance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new instance in the specified compartment and the specified availability domain.
* For general information about instances, see
* [Overview of the Compute Service](https://docs.cloud.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm).
* <p>
For information about access control and compartments, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* <p>
For information about availability domains, see
* [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm).
* To get a list of availability domains, use the `ListAvailabilityDomains` operation
* in the Identity and Access Management Service API.
* <p>
All Oracle Cloud Infrastructure resources, including instances, get an Oracle-assigned,
* unique ID called an Oracle Cloud Identifier (OCID).
* When you create a resource, you can find its OCID in the response. You can
* also retrieve a resource's OCID by using a List API operation
* on that resource type, or by viewing the resource in the Console.
* <p>
To launch an instance using an image or a boot volume use the `sourceDetails` parameter in {@link LaunchInstanceDetails}.
* <p>
When you launch an instance, it is automatically attached to a virtual
* network interface card (VNIC), called the *primary VNIC*. The VNIC
* has a private IP address from the subnet's CIDR. You can either assign a
* private IP address of your choice or let Oracle automatically assign one.
* You can choose whether the instance has a public IP address. To retrieve the
* addresses, use the {@link #listVnicAttachments(ListVnicAttachmentsRequest) listVnicAttachments}
* operation to get the VNIC ID for the instance, and then call
* {@link #getVnic(GetVnicRequest) getVnic} with the VNIC ID.
* <p>
You can later add secondary VNICs to an instance. For more information, see
* [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
* <p>
To launch an instance from a Marketplace image listing, you must provide the image ID of the
* listing resource version that you want, but you also must subscribe to the listing before you try
* to launch the instance. To subscribe to the listing, use the {@link #getAppCatalogListingAgreements(GetAppCatalogListingAgreementsRequest) getAppCatalogListingAgreements}
* operation to get the signature for the terms of use agreement for the desired listing resource version.
* Then, call {@link #createAppCatalogSubscription(CreateAppCatalogSubscriptionRequest) createAppCatalogSubscription}
* with the signature. To get the image ID for the LaunchInstance operation, call
* {@link #getAppCatalogListingResourceVersion(GetAppCatalogListingResourceVersionRequest) getAppCatalogListingResourceVersion}.
* <p>
To determine whether capacity is available for a specific shape before you create an instance,
* use the {@link #createComputeCapacityReport(CreateComputeCapacityReportRequest) createComputeCapacityReport}
* operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param LaunchInstanceRequest
     * @return LaunchInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/LaunchInstance.ts.html |here} to see how to use LaunchInstance API.
     */
  public async launchInstance(
    launchInstanceRequest: requests.LaunchInstanceRequest
  ): Promise<responses.LaunchInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#launchInstance.");
    const operationName = "launchInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Instance/LaunchInstance";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": launchInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      launchInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        launchInstanceRequest.launchInstanceDetails,
        "LaunchInstanceDetails",
        model.LaunchInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.LaunchInstanceResponse>{},
        body: await response.json(),
        bodyKey: "instance",
        bodyModel: model.Instance,
        type: "model.Instance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets all resource versions for a particular listing.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAppCatalogListingResourceVersionsRequest
   * @return ListAppCatalogListingResourceVersionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListAppCatalogListingResourceVersions.ts.html |here} to see how to use ListAppCatalogListingResourceVersions API.
   */
  public async listAppCatalogListingResourceVersions(
    listAppCatalogListingResourceVersionsRequest: requests.ListAppCatalogListingResourceVersionsRequest
  ): Promise<responses.ListAppCatalogListingResourceVersionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listAppCatalogListingResourceVersions.");
    const operationName = "listAppCatalogListingResourceVersions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/AppCatalogListingResourceVersionSummary/ListAppCatalogListingResourceVersions";
    const pathParams = {
      "{listingId}": listAppCatalogListingResourceVersionsRequest.listingId
    };

    const queryParams = {
      "limit": listAppCatalogListingResourceVersionsRequest.limit,
      "page": listAppCatalogListingResourceVersionsRequest.page,
      "sortOrder": listAppCatalogListingResourceVersionsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAppCatalogListingResourceVersionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogListings/{listingId}/resourceVersions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAppCatalogListingResourceVersionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.AppCatalogListingResourceVersionSummary,
        type: "Array<model.AppCatalogListingResourceVersionSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listAppCatalogListingResourceVersionsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.AppCatalogListingResourceVersionSummary objects
   * contained in responses from the listAppCatalogListingResourceVersions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAppCatalogListingResourceVersions(
    request: requests.ListAppCatalogListingResourceVersionsRequest
  ): AsyncIterableIterator<model.AppCatalogListingResourceVersionSummary> {
    return paginateRecords(request, req => this.listAppCatalogListingResourceVersions(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listAppCatalogListingResourceVersionsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listAppCatalogListingResourceVersions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAppCatalogListingResourceVersionsResponses(
    request: requests.ListAppCatalogListingResourceVersionsRequest
  ): AsyncIterableIterator<responses.ListAppCatalogListingResourceVersionsResponse> {
    return paginateResponses(request, req => this.listAppCatalogListingResourceVersions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.AppCatalogListingResourceVersionSummary objects
   * contained in responses from the listAppCatalogListingResourceVersions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAppCatalogListingResourceVersionsRecordIterator(
    request: requests.ListAppCatalogListingResourceVersionsRequest
  ): AsyncIterableIterator<model.AppCatalogListingResourceVersionSummary> {
    return paginateRecords(request, req => this.listAppCatalogListingResourceVersions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAppCatalogListingResourceVersions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAppCatalogListingResourceVersionsResponseIterator(
    request: requests.ListAppCatalogListingResourceVersionsRequest
  ): AsyncIterableIterator<responses.ListAppCatalogListingResourceVersionsResponse> {
    return paginateResponses(request, req => this.listAppCatalogListingResourceVersions(req));
  }

  /**
   * Lists the published listings.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAppCatalogListingsRequest
   * @return ListAppCatalogListingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListAppCatalogListings.ts.html |here} to see how to use ListAppCatalogListings API.
   */
  public async listAppCatalogListings(
    listAppCatalogListingsRequest: requests.ListAppCatalogListingsRequest
  ): Promise<responses.ListAppCatalogListingsResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listAppCatalogListings.");
    const operationName = "listAppCatalogListings";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/AppCatalogListingSummary/ListAppCatalogListings";
    const pathParams = {};

    const queryParams = {
      "limit": listAppCatalogListingsRequest.limit,
      "page": listAppCatalogListingsRequest.page,
      "sortOrder": listAppCatalogListingsRequest.sortOrder,
      "publisherName": listAppCatalogListingsRequest.publisherName,
      "publisherType": listAppCatalogListingsRequest.publisherType,
      "displayName": listAppCatalogListingsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAppCatalogListingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogListings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAppCatalogListingsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.AppCatalogListingSummary,
        type: "Array<model.AppCatalogListingSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listAppCatalogListingsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.AppCatalogListingSummary objects
   * contained in responses from the listAppCatalogListings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAppCatalogListings(
    request: requests.ListAppCatalogListingsRequest
  ): AsyncIterableIterator<model.AppCatalogListingSummary> {
    return paginateRecords(request, req => this.listAppCatalogListings(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listAppCatalogListingsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listAppCatalogListings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAppCatalogListingsResponses(
    request: requests.ListAppCatalogListingsRequest
  ): AsyncIterableIterator<responses.ListAppCatalogListingsResponse> {
    return paginateResponses(request, req => this.listAppCatalogListings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.AppCatalogListingSummary objects
   * contained in responses from the listAppCatalogListings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAppCatalogListingsRecordIterator(
    request: requests.ListAppCatalogListingsRequest
  ): AsyncIterableIterator<model.AppCatalogListingSummary> {
    return paginateRecords(request, req => this.listAppCatalogListings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAppCatalogListings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAppCatalogListingsResponseIterator(
    request: requests.ListAppCatalogListingsRequest
  ): AsyncIterableIterator<responses.ListAppCatalogListingsResponse> {
    return paginateResponses(request, req => this.listAppCatalogListings(req));
  }

  /**
   * Lists subscriptions for a compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAppCatalogSubscriptionsRequest
   * @return ListAppCatalogSubscriptionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListAppCatalogSubscriptions.ts.html |here} to see how to use ListAppCatalogSubscriptions API.
   */
  public async listAppCatalogSubscriptions(
    listAppCatalogSubscriptionsRequest: requests.ListAppCatalogSubscriptionsRequest
  ): Promise<responses.ListAppCatalogSubscriptionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listAppCatalogSubscriptions.");
    const operationName = "listAppCatalogSubscriptions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/AppCatalogSubscriptionSummary/ListAppCatalogSubscriptions";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAppCatalogSubscriptionsRequest.compartmentId,
      "limit": listAppCatalogSubscriptionsRequest.limit,
      "page": listAppCatalogSubscriptionsRequest.page,
      "sortBy": listAppCatalogSubscriptionsRequest.sortBy,
      "sortOrder": listAppCatalogSubscriptionsRequest.sortOrder,
      "listingId": listAppCatalogSubscriptionsRequest.listingId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAppCatalogSubscriptionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogSubscriptions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAppCatalogSubscriptionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.AppCatalogSubscriptionSummary,
        type: "Array<model.AppCatalogSubscriptionSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listAppCatalogSubscriptionsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.AppCatalogSubscriptionSummary objects
   * contained in responses from the listAppCatalogSubscriptions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAppCatalogSubscriptions(
    request: requests.ListAppCatalogSubscriptionsRequest
  ): AsyncIterableIterator<model.AppCatalogSubscriptionSummary> {
    return paginateRecords(request, req => this.listAppCatalogSubscriptions(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listAppCatalogSubscriptionsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listAppCatalogSubscriptions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAppCatalogSubscriptionsResponses(
    request: requests.ListAppCatalogSubscriptionsRequest
  ): AsyncIterableIterator<responses.ListAppCatalogSubscriptionsResponse> {
    return paginateResponses(request, req => this.listAppCatalogSubscriptions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.AppCatalogSubscriptionSummary objects
   * contained in responses from the listAppCatalogSubscriptions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAppCatalogSubscriptionsRecordIterator(
    request: requests.ListAppCatalogSubscriptionsRequest
  ): AsyncIterableIterator<model.AppCatalogSubscriptionSummary> {
    return paginateRecords(request, req => this.listAppCatalogSubscriptions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAppCatalogSubscriptions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAppCatalogSubscriptionsResponseIterator(
    request: requests.ListAppCatalogSubscriptionsRequest
  ): AsyncIterableIterator<responses.ListAppCatalogSubscriptionsResponse> {
    return paginateResponses(request, req => this.listAppCatalogSubscriptions(req));
  }

  /**
   * Lists the boot volume attachments in the specified compartment. You can filter the
   * list by specifying an instance OCID, boot volume OCID, or both.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListBootVolumeAttachmentsRequest
   * @return ListBootVolumeAttachmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListBootVolumeAttachments.ts.html |here} to see how to use ListBootVolumeAttachments API.
   */
  public async listBootVolumeAttachments(
    listBootVolumeAttachmentsRequest: requests.ListBootVolumeAttachmentsRequest
  ): Promise<responses.ListBootVolumeAttachmentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listBootVolumeAttachments.");
    const operationName = "listBootVolumeAttachments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/BootVolumeAttachment/ListBootVolumeAttachments";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listBootVolumeAttachmentsRequest.availabilityDomain,
      "compartmentId": listBootVolumeAttachmentsRequest.compartmentId,
      "limit": listBootVolumeAttachmentsRequest.limit,
      "page": listBootVolumeAttachmentsRequest.page,
      "instanceId": listBootVolumeAttachmentsRequest.instanceId,
      "bootVolumeId": listBootVolumeAttachmentsRequest.bootVolumeId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBootVolumeAttachmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeAttachments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBootVolumeAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.BootVolumeAttachment,
        type: "Array<model.BootVolumeAttachment>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listBootVolumeAttachmentsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.BootVolumeAttachment objects
   * contained in responses from the listBootVolumeAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumeAttachments(
    request: requests.ListBootVolumeAttachmentsRequest
  ): AsyncIterableIterator<model.BootVolumeAttachment> {
    return paginateRecords(request, req => this.listBootVolumeAttachments(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listBootVolumeAttachmentsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listBootVolumeAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumeAttachmentsResponses(
    request: requests.ListBootVolumeAttachmentsRequest
  ): AsyncIterableIterator<responses.ListBootVolumeAttachmentsResponse> {
    return paginateResponses(request, req => this.listBootVolumeAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.BootVolumeAttachment objects
   * contained in responses from the listBootVolumeAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBootVolumeAttachmentsRecordIterator(
    request: requests.ListBootVolumeAttachmentsRequest
  ): AsyncIterableIterator<model.BootVolumeAttachment> {
    return paginateRecords(request, req => this.listBootVolumeAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listBootVolumeAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBootVolumeAttachmentsResponseIterator(
    request: requests.ListBootVolumeAttachmentsRequest
  ): AsyncIterableIterator<responses.ListBootVolumeAttachmentsResponse> {
    return paginateResponses(request, req => this.listBootVolumeAttachments(req));
  }

  /**
   * Lists the shapes that can be reserved within the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListComputeCapacityReservationInstanceShapesRequest
   * @return ListComputeCapacityReservationInstanceShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeCapacityReservationInstanceShapes.ts.html |here} to see how to use ListComputeCapacityReservationInstanceShapes API.
   */
  public async listComputeCapacityReservationInstanceShapes(
    listComputeCapacityReservationInstanceShapesRequest: requests.ListComputeCapacityReservationInstanceShapesRequest
  ): Promise<responses.ListComputeCapacityReservationInstanceShapesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeClient#listComputeCapacityReservationInstanceShapes."
      );
    const operationName = "listComputeCapacityReservationInstanceShapes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCapacityReservationInstanceShapeSummary/ListComputeCapacityReservationInstanceShapes";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listComputeCapacityReservationInstanceShapesRequest.availabilityDomain,
      "compartmentId": listComputeCapacityReservationInstanceShapesRequest.compartmentId,
      "limit": listComputeCapacityReservationInstanceShapesRequest.limit,
      "page": listComputeCapacityReservationInstanceShapesRequest.page,
      "displayName": listComputeCapacityReservationInstanceShapesRequest.displayName,
      "sortBy": listComputeCapacityReservationInstanceShapesRequest.sortBy,
      "sortOrder": listComputeCapacityReservationInstanceShapesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listComputeCapacityReservationInstanceShapesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listComputeCapacityReservationInstanceShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityReservationInstanceShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeCapacityReservationInstanceShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ComputeCapacityReservationInstanceShapeSummary,
        type: "Array<model.ComputeCapacityReservationInstanceShapeSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listComputeCapacityReservationInstanceShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ComputeCapacityReservationInstanceShapeSummary objects
   * contained in responses from the listComputeCapacityReservationInstanceShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeCapacityReservationInstanceShapes(
    request: requests.ListComputeCapacityReservationInstanceShapesRequest
  ): AsyncIterableIterator<model.ComputeCapacityReservationInstanceShapeSummary> {
    return paginateRecords(request, req => this.listComputeCapacityReservationInstanceShapes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listComputeCapacityReservationInstanceShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listComputeCapacityReservationInstanceShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeCapacityReservationInstanceShapesResponses(
    request: requests.ListComputeCapacityReservationInstanceShapesRequest
  ): AsyncIterableIterator<responses.ListComputeCapacityReservationInstanceShapesResponse> {
    return paginateResponses(request, req =>
      this.listComputeCapacityReservationInstanceShapes(req)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the models.ComputeCapacityReservationInstanceShapeSummary objects
   * contained in responses from the listComputeCapacityReservationInstanceShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listComputeCapacityReservationInstanceShapesRecordIterator(
    request: requests.ListComputeCapacityReservationInstanceShapesRequest
  ): AsyncIterableIterator<model.ComputeCapacityReservationInstanceShapeSummary> {
    return paginateRecords(request, req => this.listComputeCapacityReservationInstanceShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listComputeCapacityReservationInstanceShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listComputeCapacityReservationInstanceShapesResponseIterator(
    request: requests.ListComputeCapacityReservationInstanceShapesRequest
  ): AsyncIterableIterator<responses.ListComputeCapacityReservationInstanceShapesResponse> {
    return paginateResponses(request, req =>
      this.listComputeCapacityReservationInstanceShapes(req)
    );
  }

  /**
   * Lists the instances launched under a capacity reservation. You can filter results by specifying criteria.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListComputeCapacityReservationInstancesRequest
   * @return ListComputeCapacityReservationInstancesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeCapacityReservationInstances.ts.html |here} to see how to use ListComputeCapacityReservationInstances API.
   */
  public async listComputeCapacityReservationInstances(
    listComputeCapacityReservationInstancesRequest: requests.ListComputeCapacityReservationInstancesRequest
  ): Promise<responses.ListComputeCapacityReservationInstancesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listComputeCapacityReservationInstances.");
    const operationName = "listComputeCapacityReservationInstances";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CapacityReservationInstanceSummary/ListComputeCapacityReservationInstances";
    const pathParams = {
      "{capacityReservationId}":
        listComputeCapacityReservationInstancesRequest.capacityReservationId
    };

    const queryParams = {
      "availabilityDomain": listComputeCapacityReservationInstancesRequest.availabilityDomain,
      "compartmentId": listComputeCapacityReservationInstancesRequest.compartmentId,
      "limit": listComputeCapacityReservationInstancesRequest.limit,
      "page": listComputeCapacityReservationInstancesRequest.page,
      "sortBy": listComputeCapacityReservationInstancesRequest.sortBy,
      "sortOrder": listComputeCapacityReservationInstancesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listComputeCapacityReservationInstancesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listComputeCapacityReservationInstancesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityReservations/{capacityReservationId}/instances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeCapacityReservationInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.CapacityReservationInstanceSummary,
        type: "Array<model.CapacityReservationInstanceSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listComputeCapacityReservationInstancesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.CapacityReservationInstanceSummary objects
   * contained in responses from the listComputeCapacityReservationInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeCapacityReservationInstances(
    request: requests.ListComputeCapacityReservationInstancesRequest
  ): AsyncIterableIterator<model.CapacityReservationInstanceSummary> {
    return paginateRecords(request, req => this.listComputeCapacityReservationInstances(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listComputeCapacityReservationInstancesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listComputeCapacityReservationInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeCapacityReservationInstancesResponses(
    request: requests.ListComputeCapacityReservationInstancesRequest
  ): AsyncIterableIterator<responses.ListComputeCapacityReservationInstancesResponse> {
    return paginateResponses(request, req => this.listComputeCapacityReservationInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.CapacityReservationInstanceSummary objects
   * contained in responses from the listComputeCapacityReservationInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listComputeCapacityReservationInstancesRecordIterator(
    request: requests.ListComputeCapacityReservationInstancesRequest
  ): AsyncIterableIterator<model.CapacityReservationInstanceSummary> {
    return paginateRecords(request, req => this.listComputeCapacityReservationInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listComputeCapacityReservationInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listComputeCapacityReservationInstancesResponseIterator(
    request: requests.ListComputeCapacityReservationInstancesRequest
  ): AsyncIterableIterator<responses.ListComputeCapacityReservationInstancesResponse> {
    return paginateResponses(request, req => this.listComputeCapacityReservationInstances(req));
  }

  /**
     * Lists the compute capacity reservations that match the specified criteria and compartment.
* <p>
You can limit the list by specifying a compute capacity reservation display name
* (the list will include all the identically-named compute capacity reservations in the compartment).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListComputeCapacityReservationsRequest
     * @return ListComputeCapacityReservationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeCapacityReservations.ts.html |here} to see how to use ListComputeCapacityReservations API.
     */
  public async listComputeCapacityReservations(
    listComputeCapacityReservationsRequest: requests.ListComputeCapacityReservationsRequest
  ): Promise<responses.ListComputeCapacityReservationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listComputeCapacityReservations.");
    const operationName = "listComputeCapacityReservations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCapacityReservation/ListComputeCapacityReservations";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listComputeCapacityReservationsRequest.availabilityDomain,
      "compartmentId": listComputeCapacityReservationsRequest.compartmentId,
      "lifecycleState": listComputeCapacityReservationsRequest.lifecycleState,
      "displayName": listComputeCapacityReservationsRequest.displayName,
      "limit": listComputeCapacityReservationsRequest.limit,
      "page": listComputeCapacityReservationsRequest.page,
      "sortBy": listComputeCapacityReservationsRequest.sortBy,
      "sortOrder": listComputeCapacityReservationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listComputeCapacityReservationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listComputeCapacityReservationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityReservations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeCapacityReservationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ComputeCapacityReservationSummary,
        type: "Array<model.ComputeCapacityReservationSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listComputeCapacityReservationsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ComputeCapacityReservationSummary objects
   * contained in responses from the listComputeCapacityReservations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeCapacityReservations(
    request: requests.ListComputeCapacityReservationsRequest
  ): AsyncIterableIterator<model.ComputeCapacityReservationSummary> {
    return paginateRecords(request, req => this.listComputeCapacityReservations(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listComputeCapacityReservationsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listComputeCapacityReservations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeCapacityReservationsResponses(
    request: requests.ListComputeCapacityReservationsRequest
  ): AsyncIterableIterator<responses.ListComputeCapacityReservationsResponse> {
    return paginateResponses(request, req => this.listComputeCapacityReservations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ComputeCapacityReservationSummary objects
   * contained in responses from the listComputeCapacityReservations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listComputeCapacityReservationsRecordIterator(
    request: requests.ListComputeCapacityReservationsRequest
  ): AsyncIterableIterator<model.ComputeCapacityReservationSummary> {
    return paginateRecords(request, req => this.listComputeCapacityReservations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listComputeCapacityReservations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listComputeCapacityReservationsResponseIterator(
    request: requests.ListComputeCapacityReservationsRequest
  ): AsyncIterableIterator<responses.ListComputeCapacityReservationsResponse> {
    return paginateResponses(request, req => this.listComputeCapacityReservations(req));
  }

  /**
   * Lists the compute capacity topologies in the specified compartment. You can filter the list by a compute
   * capacity topology display name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListComputeCapacityTopologiesRequest
   * @return ListComputeCapacityTopologiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeCapacityTopologies.ts.html |here} to see how to use ListComputeCapacityTopologies API.
   */
  public async listComputeCapacityTopologies(
    listComputeCapacityTopologiesRequest: requests.ListComputeCapacityTopologiesRequest
  ): Promise<responses.ListComputeCapacityTopologiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listComputeCapacityTopologies.");
    const operationName = "listComputeCapacityTopologies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCapacityTopology/ListComputeCapacityTopologies";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listComputeCapacityTopologiesRequest.availabilityDomain,
      "compartmentId": listComputeCapacityTopologiesRequest.compartmentId,
      "displayName": listComputeCapacityTopologiesRequest.displayName,
      "limit": listComputeCapacityTopologiesRequest.limit,
      "page": listComputeCapacityTopologiesRequest.page,
      "sortBy": listComputeCapacityTopologiesRequest.sortBy,
      "sortOrder": listComputeCapacityTopologiesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listComputeCapacityTopologiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listComputeCapacityTopologiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityTopologies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeCapacityTopologiesResponse>{},
        body: await response.json(),
        bodyKey: "computeCapacityTopologyCollection",
        bodyModel: model.ComputeCapacityTopologyCollection,
        type: "model.ComputeCapacityTopologyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists compute bare metal hosts in the specified compute capacity topology.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListComputeCapacityTopologyComputeBareMetalHostsRequest
   * @return ListComputeCapacityTopologyComputeBareMetalHostsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeCapacityTopologyComputeBareMetalHosts.ts.html |here} to see how to use ListComputeCapacityTopologyComputeBareMetalHosts API.
   */
  public async listComputeCapacityTopologyComputeBareMetalHosts(
    listComputeCapacityTopologyComputeBareMetalHostsRequest: requests.ListComputeCapacityTopologyComputeBareMetalHostsRequest
  ): Promise<responses.ListComputeCapacityTopologyComputeBareMetalHostsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeClient#listComputeCapacityTopologyComputeBareMetalHosts."
      );
    const operationName = "listComputeCapacityTopologyComputeBareMetalHosts";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeBareMetalHost/ListComputeCapacityTopologyComputeBareMetalHosts";
    const pathParams = {
      "{computeCapacityTopologyId}":
        listComputeCapacityTopologyComputeBareMetalHostsRequest.computeCapacityTopologyId
    };

    const queryParams = {
      "availabilityDomain":
        listComputeCapacityTopologyComputeBareMetalHostsRequest.availabilityDomain,
      "compartmentId": listComputeCapacityTopologyComputeBareMetalHostsRequest.compartmentId,
      "computeHpcIslandId":
        listComputeCapacityTopologyComputeBareMetalHostsRequest.computeHpcIslandId,
      "computeNetworkBlockId":
        listComputeCapacityTopologyComputeBareMetalHostsRequest.computeNetworkBlockId,
      "computeLocalBlockId":
        listComputeCapacityTopologyComputeBareMetalHostsRequest.computeLocalBlockId,
      "limit": listComputeCapacityTopologyComputeBareMetalHostsRequest.limit,
      "page": listComputeCapacityTopologyComputeBareMetalHostsRequest.page,
      "sortBy": listComputeCapacityTopologyComputeBareMetalHostsRequest.sortBy,
      "sortOrder": listComputeCapacityTopologyComputeBareMetalHostsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listComputeCapacityTopologyComputeBareMetalHostsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listComputeCapacityTopologyComputeBareMetalHostsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityTopologies/{computeCapacityTopologyId}/computeBareMetalHosts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeCapacityTopologyComputeBareMetalHostsResponse>{},
        body: await response.json(),
        bodyKey: "computeBareMetalHostCollection",
        bodyModel: model.ComputeBareMetalHostCollection,
        type: "model.ComputeBareMetalHostCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists compute HPC islands in the specified compute capacity topology.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListComputeCapacityTopologyComputeHpcIslandsRequest
   * @return ListComputeCapacityTopologyComputeHpcIslandsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeCapacityTopologyComputeHpcIslands.ts.html |here} to see how to use ListComputeCapacityTopologyComputeHpcIslands API.
   */
  public async listComputeCapacityTopologyComputeHpcIslands(
    listComputeCapacityTopologyComputeHpcIslandsRequest: requests.ListComputeCapacityTopologyComputeHpcIslandsRequest
  ): Promise<responses.ListComputeCapacityTopologyComputeHpcIslandsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeClient#listComputeCapacityTopologyComputeHpcIslands."
      );
    const operationName = "listComputeCapacityTopologyComputeHpcIslands";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeHpcIsland/ListComputeCapacityTopologyComputeHpcIslands";
    const pathParams = {
      "{computeCapacityTopologyId}":
        listComputeCapacityTopologyComputeHpcIslandsRequest.computeCapacityTopologyId
    };

    const queryParams = {
      "availabilityDomain": listComputeCapacityTopologyComputeHpcIslandsRequest.availabilityDomain,
      "compartmentId": listComputeCapacityTopologyComputeHpcIslandsRequest.compartmentId,
      "limit": listComputeCapacityTopologyComputeHpcIslandsRequest.limit,
      "page": listComputeCapacityTopologyComputeHpcIslandsRequest.page,
      "sortBy": listComputeCapacityTopologyComputeHpcIslandsRequest.sortBy,
      "sortOrder": listComputeCapacityTopologyComputeHpcIslandsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listComputeCapacityTopologyComputeHpcIslandsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listComputeCapacityTopologyComputeHpcIslandsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityTopologies/{computeCapacityTopologyId}/computeHpcIslands",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeCapacityTopologyComputeHpcIslandsResponse>{},
        body: await response.json(),
        bodyKey: "computeHpcIslandCollection",
        bodyModel: model.ComputeHpcIslandCollection,
        type: "model.ComputeHpcIslandCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists compute network blocks in the specified compute capacity topology.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListComputeCapacityTopologyComputeNetworkBlocksRequest
   * @return ListComputeCapacityTopologyComputeNetworkBlocksResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeCapacityTopologyComputeNetworkBlocks.ts.html |here} to see how to use ListComputeCapacityTopologyComputeNetworkBlocks API.
   */
  public async listComputeCapacityTopologyComputeNetworkBlocks(
    listComputeCapacityTopologyComputeNetworkBlocksRequest: requests.ListComputeCapacityTopologyComputeNetworkBlocksRequest
  ): Promise<responses.ListComputeCapacityTopologyComputeNetworkBlocksResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeClient#listComputeCapacityTopologyComputeNetworkBlocks."
      );
    const operationName = "listComputeCapacityTopologyComputeNetworkBlocks";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeNetworkBlock/ListComputeCapacityTopologyComputeNetworkBlocks";
    const pathParams = {
      "{computeCapacityTopologyId}":
        listComputeCapacityTopologyComputeNetworkBlocksRequest.computeCapacityTopologyId
    };

    const queryParams = {
      "availabilityDomain":
        listComputeCapacityTopologyComputeNetworkBlocksRequest.availabilityDomain,
      "compartmentId": listComputeCapacityTopologyComputeNetworkBlocksRequest.compartmentId,
      "computeHpcIslandId":
        listComputeCapacityTopologyComputeNetworkBlocksRequest.computeHpcIslandId,
      "limit": listComputeCapacityTopologyComputeNetworkBlocksRequest.limit,
      "page": listComputeCapacityTopologyComputeNetworkBlocksRequest.page,
      "sortBy": listComputeCapacityTopologyComputeNetworkBlocksRequest.sortBy,
      "sortOrder": listComputeCapacityTopologyComputeNetworkBlocksRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listComputeCapacityTopologyComputeNetworkBlocksRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listComputeCapacityTopologyComputeNetworkBlocksRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityTopologies/{computeCapacityTopologyId}/computeNetworkBlocks",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeCapacityTopologyComputeNetworkBlocksResponse>{},
        body: await response.json(),
        bodyKey: "computeNetworkBlockCollection",
        bodyModel: model.ComputeNetworkBlockCollection,
        type: "model.ComputeNetworkBlockCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the compute clusters in the specified compartment.
   * A [compute cluster](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/compute-clusters.htm) is a remote direct memory access (RDMA) network group.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListComputeClustersRequest
   * @return ListComputeClustersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeClusters.ts.html |here} to see how to use ListComputeClusters API.
   */
  public async listComputeClusters(
    listComputeClustersRequest: requests.ListComputeClustersRequest
  ): Promise<responses.ListComputeClustersResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listComputeClusters.");
    const operationName = "listComputeClusters";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCluster/ListComputeClusters";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listComputeClustersRequest.availabilityDomain,
      "compartmentId": listComputeClustersRequest.compartmentId,
      "displayName": listComputeClustersRequest.displayName,
      "limit": listComputeClustersRequest.limit,
      "page": listComputeClustersRequest.page,
      "sortBy": listComputeClustersRequest.sortBy,
      "sortOrder": listComputeClustersRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listComputeClustersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listComputeClustersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeClusters",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeClustersResponse>{},
        body: await response.json(),
        bodyKey: "computeClusterCollection",
        bodyModel: model.ComputeClusterCollection,
        type: "model.ComputeClusterCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists Compute Global Image Capability Schema versions in the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListComputeGlobalImageCapabilitySchemaVersionsRequest
   * @return ListComputeGlobalImageCapabilitySchemaVersionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeGlobalImageCapabilitySchemaVersions.ts.html |here} to see how to use ListComputeGlobalImageCapabilitySchemaVersions API.
   */
  public async listComputeGlobalImageCapabilitySchemaVersions(
    listComputeGlobalImageCapabilitySchemaVersionsRequest: requests.ListComputeGlobalImageCapabilitySchemaVersionsRequest
  ): Promise<responses.ListComputeGlobalImageCapabilitySchemaVersionsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeClient#listComputeGlobalImageCapabilitySchemaVersions."
      );
    const operationName = "listComputeGlobalImageCapabilitySchemaVersions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeGlobalImageCapabilitySchemaVersionSummary/ListComputeGlobalImageCapabilitySchemaVersions";
    const pathParams = {
      "{computeGlobalImageCapabilitySchemaId}":
        listComputeGlobalImageCapabilitySchemaVersionsRequest.computeGlobalImageCapabilitySchemaId
    };

    const queryParams = {
      "displayName": listComputeGlobalImageCapabilitySchemaVersionsRequest.displayName,
      "limit": listComputeGlobalImageCapabilitySchemaVersionsRequest.limit,
      "page": listComputeGlobalImageCapabilitySchemaVersionsRequest.page,
      "sortBy": listComputeGlobalImageCapabilitySchemaVersionsRequest.sortBy,
      "sortOrder": listComputeGlobalImageCapabilitySchemaVersionsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listComputeGlobalImageCapabilitySchemaVersionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeGlobalImageCapabilitySchemas/{computeGlobalImageCapabilitySchemaId}/versions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeGlobalImageCapabilitySchemaVersionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ComputeGlobalImageCapabilitySchemaVersionSummary,
        type: "Array<model.ComputeGlobalImageCapabilitySchemaVersionSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listComputeGlobalImageCapabilitySchemaVersionsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ComputeGlobalImageCapabilitySchemaVersionSummary objects
   * contained in responses from the listComputeGlobalImageCapabilitySchemaVersions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeGlobalImageCapabilitySchemaVersions(
    request: requests.ListComputeGlobalImageCapabilitySchemaVersionsRequest
  ): AsyncIterableIterator<model.ComputeGlobalImageCapabilitySchemaVersionSummary> {
    return paginateRecords(request, req =>
      this.listComputeGlobalImageCapabilitySchemaVersions(req)
    );
  }

  /**
   * NOTE: This function is deprecated in favor of listComputeGlobalImageCapabilitySchemaVersionsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listComputeGlobalImageCapabilitySchemaVersions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeGlobalImageCapabilitySchemaVersionsResponses(
    request: requests.ListComputeGlobalImageCapabilitySchemaVersionsRequest
  ): AsyncIterableIterator<responses.ListComputeGlobalImageCapabilitySchemaVersionsResponse> {
    return paginateResponses(request, req =>
      this.listComputeGlobalImageCapabilitySchemaVersions(req)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the models.ComputeGlobalImageCapabilitySchemaVersionSummary objects
   * contained in responses from the listComputeGlobalImageCapabilitySchemaVersions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listComputeGlobalImageCapabilitySchemaVersionsRecordIterator(
    request: requests.ListComputeGlobalImageCapabilitySchemaVersionsRequest
  ): AsyncIterableIterator<model.ComputeGlobalImageCapabilitySchemaVersionSummary> {
    return paginateRecords(request, req =>
      this.listComputeGlobalImageCapabilitySchemaVersions(req)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listComputeGlobalImageCapabilitySchemaVersions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listComputeGlobalImageCapabilitySchemaVersionsResponseIterator(
    request: requests.ListComputeGlobalImageCapabilitySchemaVersionsRequest
  ): AsyncIterableIterator<responses.ListComputeGlobalImageCapabilitySchemaVersionsResponse> {
    return paginateResponses(request, req =>
      this.listComputeGlobalImageCapabilitySchemaVersions(req)
    );
  }

  /**
   * Lists Compute Global Image Capability Schema in the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListComputeGlobalImageCapabilitySchemasRequest
   * @return ListComputeGlobalImageCapabilitySchemasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeGlobalImageCapabilitySchemas.ts.html |here} to see how to use ListComputeGlobalImageCapabilitySchemas API.
   */
  public async listComputeGlobalImageCapabilitySchemas(
    listComputeGlobalImageCapabilitySchemasRequest: requests.ListComputeGlobalImageCapabilitySchemasRequest
  ): Promise<responses.ListComputeGlobalImageCapabilitySchemasResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listComputeGlobalImageCapabilitySchemas.");
    const operationName = "listComputeGlobalImageCapabilitySchemas";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeGlobalImageCapabilitySchemaSummary/ListComputeGlobalImageCapabilitySchemas";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listComputeGlobalImageCapabilitySchemasRequest.compartmentId,
      "displayName": listComputeGlobalImageCapabilitySchemasRequest.displayName,
      "limit": listComputeGlobalImageCapabilitySchemasRequest.limit,
      "page": listComputeGlobalImageCapabilitySchemasRequest.page,
      "sortBy": listComputeGlobalImageCapabilitySchemasRequest.sortBy,
      "sortOrder": listComputeGlobalImageCapabilitySchemasRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listComputeGlobalImageCapabilitySchemasRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeGlobalImageCapabilitySchemas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeGlobalImageCapabilitySchemasResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ComputeGlobalImageCapabilitySchemaSummary,
        type: "Array<model.ComputeGlobalImageCapabilitySchemaSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listComputeGlobalImageCapabilitySchemasRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ComputeGlobalImageCapabilitySchemaSummary objects
   * contained in responses from the listComputeGlobalImageCapabilitySchemas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeGlobalImageCapabilitySchemas(
    request: requests.ListComputeGlobalImageCapabilitySchemasRequest
  ): AsyncIterableIterator<model.ComputeGlobalImageCapabilitySchemaSummary> {
    return paginateRecords(request, req => this.listComputeGlobalImageCapabilitySchemas(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listComputeGlobalImageCapabilitySchemasResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listComputeGlobalImageCapabilitySchemas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeGlobalImageCapabilitySchemasResponses(
    request: requests.ListComputeGlobalImageCapabilitySchemasRequest
  ): AsyncIterableIterator<responses.ListComputeGlobalImageCapabilitySchemasResponse> {
    return paginateResponses(request, req => this.listComputeGlobalImageCapabilitySchemas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ComputeGlobalImageCapabilitySchemaSummary objects
   * contained in responses from the listComputeGlobalImageCapabilitySchemas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listComputeGlobalImageCapabilitySchemasRecordIterator(
    request: requests.ListComputeGlobalImageCapabilitySchemasRequest
  ): AsyncIterableIterator<model.ComputeGlobalImageCapabilitySchemaSummary> {
    return paginateRecords(request, req => this.listComputeGlobalImageCapabilitySchemas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listComputeGlobalImageCapabilitySchemas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listComputeGlobalImageCapabilitySchemasResponseIterator(
    request: requests.ListComputeGlobalImageCapabilitySchemasRequest
  ): AsyncIterableIterator<responses.ListComputeGlobalImageCapabilitySchemasResponse> {
    return paginateResponses(request, req => this.listComputeGlobalImageCapabilitySchemas(req));
  }

  /**
   * Lists Compute Image Capability Schema in the specified compartment. You can also query by a specific imageId.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListComputeImageCapabilitySchemasRequest
   * @return ListComputeImageCapabilitySchemasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeImageCapabilitySchemas.ts.html |here} to see how to use ListComputeImageCapabilitySchemas API.
   */
  public async listComputeImageCapabilitySchemas(
    listComputeImageCapabilitySchemasRequest: requests.ListComputeImageCapabilitySchemasRequest
  ): Promise<responses.ListComputeImageCapabilitySchemasResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listComputeImageCapabilitySchemas.");
    const operationName = "listComputeImageCapabilitySchemas";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeImageCapabilitySchemaSummary/ListComputeImageCapabilitySchemas";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listComputeImageCapabilitySchemasRequest.compartmentId,
      "imageId": listComputeImageCapabilitySchemasRequest.imageId,
      "displayName": listComputeImageCapabilitySchemasRequest.displayName,
      "limit": listComputeImageCapabilitySchemasRequest.limit,
      "page": listComputeImageCapabilitySchemasRequest.page,
      "sortBy": listComputeImageCapabilitySchemasRequest.sortBy,
      "sortOrder": listComputeImageCapabilitySchemasRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listComputeImageCapabilitySchemasRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeImageCapabilitySchemas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeImageCapabilitySchemasResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ComputeImageCapabilitySchemaSummary,
        type: "Array<model.ComputeImageCapabilitySchemaSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listComputeImageCapabilitySchemasRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ComputeImageCapabilitySchemaSummary objects
   * contained in responses from the listComputeImageCapabilitySchemas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeImageCapabilitySchemas(
    request: requests.ListComputeImageCapabilitySchemasRequest
  ): AsyncIterableIterator<model.ComputeImageCapabilitySchemaSummary> {
    return paginateRecords(request, req => this.listComputeImageCapabilitySchemas(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listComputeImageCapabilitySchemasResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listComputeImageCapabilitySchemas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeImageCapabilitySchemasResponses(
    request: requests.ListComputeImageCapabilitySchemasRequest
  ): AsyncIterableIterator<responses.ListComputeImageCapabilitySchemasResponse> {
    return paginateResponses(request, req => this.listComputeImageCapabilitySchemas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ComputeImageCapabilitySchemaSummary objects
   * contained in responses from the listComputeImageCapabilitySchemas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listComputeImageCapabilitySchemasRecordIterator(
    request: requests.ListComputeImageCapabilitySchemasRequest
  ): AsyncIterableIterator<model.ComputeImageCapabilitySchemaSummary> {
    return paginateRecords(request, req => this.listComputeImageCapabilitySchemas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listComputeImageCapabilitySchemas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listComputeImageCapabilitySchemasResponseIterator(
    request: requests.ListComputeImageCapabilitySchemasRequest
  ): AsyncIterableIterator<responses.ListComputeImageCapabilitySchemasResponse> {
    return paginateResponses(request, req => this.listComputeImageCapabilitySchemas(req));
  }

  /**
   * Lists the console history metadata for the specified compartment or instance.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListConsoleHistoriesRequest
   * @return ListConsoleHistoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListConsoleHistories.ts.html |here} to see how to use ListConsoleHistories API.
   */
  public async listConsoleHistories(
    listConsoleHistoriesRequest: requests.ListConsoleHistoriesRequest
  ): Promise<responses.ListConsoleHistoriesResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listConsoleHistories.");
    const operationName = "listConsoleHistories";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ConsoleHistory/ListConsoleHistories";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listConsoleHistoriesRequest.availabilityDomain,
      "compartmentId": listConsoleHistoriesRequest.compartmentId,
      "limit": listConsoleHistoriesRequest.limit,
      "page": listConsoleHistoriesRequest.page,
      "instanceId": listConsoleHistoriesRequest.instanceId,
      "sortBy": listConsoleHistoriesRequest.sortBy,
      "sortOrder": listConsoleHistoriesRequest.sortOrder,
      "lifecycleState": listConsoleHistoriesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listConsoleHistoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleHistories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConsoleHistoriesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ConsoleHistory,
        type: "Array<model.ConsoleHistory>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listConsoleHistoriesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ConsoleHistory objects
   * contained in responses from the listConsoleHistories operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllConsoleHistories(
    request: requests.ListConsoleHistoriesRequest
  ): AsyncIterableIterator<model.ConsoleHistory> {
    return paginateRecords(request, req => this.listConsoleHistories(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listConsoleHistoriesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listConsoleHistories operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllConsoleHistoriesResponses(
    request: requests.ListConsoleHistoriesRequest
  ): AsyncIterableIterator<responses.ListConsoleHistoriesResponse> {
    return paginateResponses(request, req => this.listConsoleHistories(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ConsoleHistory objects
   * contained in responses from the listConsoleHistories operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listConsoleHistoriesRecordIterator(
    request: requests.ListConsoleHistoriesRequest
  ): AsyncIterableIterator<model.ConsoleHistory> {
    return paginateRecords(request, req => this.listConsoleHistories(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listConsoleHistories operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listConsoleHistoriesResponseIterator(
    request: requests.ListConsoleHistoriesRequest
  ): AsyncIterableIterator<responses.ListConsoleHistoriesResponse> {
    return paginateResponses(request, req => this.listConsoleHistories(req));
  }

  /**
   * Lists the shapes that can be used to launch a virtual machine instance on a dedicated virtual machine host within the specified compartment.
   * You can filter the list by compatibility with a specific dedicated virtual machine host shape.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDedicatedVmHostInstanceShapesRequest
   * @return ListDedicatedVmHostInstanceShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDedicatedVmHostInstanceShapes.ts.html |here} to see how to use ListDedicatedVmHostInstanceShapes API.
   */
  public async listDedicatedVmHostInstanceShapes(
    listDedicatedVmHostInstanceShapesRequest: requests.ListDedicatedVmHostInstanceShapesRequest
  ): Promise<responses.ListDedicatedVmHostInstanceShapesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listDedicatedVmHostInstanceShapes.");
    const operationName = "listDedicatedVmHostInstanceShapes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DedicatedVmHostInstanceShapeSummary/ListDedicatedVmHostInstanceShapes";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listDedicatedVmHostInstanceShapesRequest.availabilityDomain,
      "compartmentId": listDedicatedVmHostInstanceShapesRequest.compartmentId,
      "dedicatedVmHostShape": listDedicatedVmHostInstanceShapesRequest.dedicatedVmHostShape,
      "limit": listDedicatedVmHostInstanceShapesRequest.limit,
      "page": listDedicatedVmHostInstanceShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDedicatedVmHostInstanceShapesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDedicatedVmHostInstanceShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHostInstanceShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDedicatedVmHostInstanceShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DedicatedVmHostInstanceShapeSummary,
        type: "Array<model.DedicatedVmHostInstanceShapeSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDedicatedVmHostInstanceShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DedicatedVmHostInstanceShapeSummary objects
   * contained in responses from the listDedicatedVmHostInstanceShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostInstanceShapes(
    request: requests.ListDedicatedVmHostInstanceShapesRequest
  ): AsyncIterableIterator<model.DedicatedVmHostInstanceShapeSummary> {
    return paginateRecords(request, req => this.listDedicatedVmHostInstanceShapes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDedicatedVmHostInstanceShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHostInstanceShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostInstanceShapesResponses(
    request: requests.ListDedicatedVmHostInstanceShapesRequest
  ): AsyncIterableIterator<responses.ListDedicatedVmHostInstanceShapesResponse> {
    return paginateResponses(request, req => this.listDedicatedVmHostInstanceShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DedicatedVmHostInstanceShapeSummary objects
   * contained in responses from the listDedicatedVmHostInstanceShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDedicatedVmHostInstanceShapesRecordIterator(
    request: requests.ListDedicatedVmHostInstanceShapesRequest
  ): AsyncIterableIterator<model.DedicatedVmHostInstanceShapeSummary> {
    return paginateRecords(request, req => this.listDedicatedVmHostInstanceShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHostInstanceShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDedicatedVmHostInstanceShapesResponseIterator(
    request: requests.ListDedicatedVmHostInstanceShapesRequest
  ): AsyncIterableIterator<responses.ListDedicatedVmHostInstanceShapesResponse> {
    return paginateResponses(request, req => this.listDedicatedVmHostInstanceShapes(req));
  }

  /**
   * Returns the list of instances on the dedicated virtual machine hosts that match the specified criteria.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDedicatedVmHostInstancesRequest
   * @return ListDedicatedVmHostInstancesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDedicatedVmHostInstances.ts.html |here} to see how to use ListDedicatedVmHostInstances API.
   */
  public async listDedicatedVmHostInstances(
    listDedicatedVmHostInstancesRequest: requests.ListDedicatedVmHostInstancesRequest
  ): Promise<responses.ListDedicatedVmHostInstancesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listDedicatedVmHostInstances.");
    const operationName = "listDedicatedVmHostInstances";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DedicatedVmHostInstanceSummary/ListDedicatedVmHostInstances";
    const pathParams = {
      "{dedicatedVmHostId}": listDedicatedVmHostInstancesRequest.dedicatedVmHostId
    };

    const queryParams = {
      "availabilityDomain": listDedicatedVmHostInstancesRequest.availabilityDomain,
      "compartmentId": listDedicatedVmHostInstancesRequest.compartmentId,
      "limit": listDedicatedVmHostInstancesRequest.limit,
      "page": listDedicatedVmHostInstancesRequest.page,
      "sortBy": listDedicatedVmHostInstancesRequest.sortBy,
      "sortOrder": listDedicatedVmHostInstancesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDedicatedVmHostInstancesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDedicatedVmHostInstancesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts/{dedicatedVmHostId}/instances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDedicatedVmHostInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DedicatedVmHostInstanceSummary,
        type: "Array<model.DedicatedVmHostInstanceSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDedicatedVmHostInstancesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DedicatedVmHostInstanceSummary objects
   * contained in responses from the listDedicatedVmHostInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostInstances(
    request: requests.ListDedicatedVmHostInstancesRequest
  ): AsyncIterableIterator<model.DedicatedVmHostInstanceSummary> {
    return paginateRecords(request, req => this.listDedicatedVmHostInstances(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDedicatedVmHostInstancesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHostInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostInstancesResponses(
    request: requests.ListDedicatedVmHostInstancesRequest
  ): AsyncIterableIterator<responses.ListDedicatedVmHostInstancesResponse> {
    return paginateResponses(request, req => this.listDedicatedVmHostInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DedicatedVmHostInstanceSummary objects
   * contained in responses from the listDedicatedVmHostInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDedicatedVmHostInstancesRecordIterator(
    request: requests.ListDedicatedVmHostInstancesRequest
  ): AsyncIterableIterator<model.DedicatedVmHostInstanceSummary> {
    return paginateRecords(request, req => this.listDedicatedVmHostInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHostInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDedicatedVmHostInstancesResponseIterator(
    request: requests.ListDedicatedVmHostInstancesRequest
  ): AsyncIterableIterator<responses.ListDedicatedVmHostInstancesResponse> {
    return paginateResponses(request, req => this.listDedicatedVmHostInstances(req));
  }

  /**
   * Lists the shapes that can be used to launch a dedicated virtual machine host within the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDedicatedVmHostShapesRequest
   * @return ListDedicatedVmHostShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDedicatedVmHostShapes.ts.html |here} to see how to use ListDedicatedVmHostShapes API.
   */
  public async listDedicatedVmHostShapes(
    listDedicatedVmHostShapesRequest: requests.ListDedicatedVmHostShapesRequest
  ): Promise<responses.ListDedicatedVmHostShapesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listDedicatedVmHostShapes.");
    const operationName = "listDedicatedVmHostShapes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DedicatedVmHostShapeSummary/ListDedicatedVmHostShapes";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listDedicatedVmHostShapesRequest.availabilityDomain,
      "compartmentId": listDedicatedVmHostShapesRequest.compartmentId,
      "instanceShapeName": listDedicatedVmHostShapesRequest.instanceShapeName,
      "limit": listDedicatedVmHostShapesRequest.limit,
      "page": listDedicatedVmHostShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDedicatedVmHostShapesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDedicatedVmHostShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHostShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDedicatedVmHostShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DedicatedVmHostShapeSummary,
        type: "Array<model.DedicatedVmHostShapeSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDedicatedVmHostShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DedicatedVmHostShapeSummary objects
   * contained in responses from the listDedicatedVmHostShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostShapes(
    request: requests.ListDedicatedVmHostShapesRequest
  ): AsyncIterableIterator<model.DedicatedVmHostShapeSummary> {
    return paginateRecords(request, req => this.listDedicatedVmHostShapes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDedicatedVmHostShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHostShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostShapesResponses(
    request: requests.ListDedicatedVmHostShapesRequest
  ): AsyncIterableIterator<responses.ListDedicatedVmHostShapesResponse> {
    return paginateResponses(request, req => this.listDedicatedVmHostShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DedicatedVmHostShapeSummary objects
   * contained in responses from the listDedicatedVmHostShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDedicatedVmHostShapesRecordIterator(
    request: requests.ListDedicatedVmHostShapesRequest
  ): AsyncIterableIterator<model.DedicatedVmHostShapeSummary> {
    return paginateRecords(request, req => this.listDedicatedVmHostShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHostShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDedicatedVmHostShapesResponseIterator(
    request: requests.ListDedicatedVmHostShapesRequest
  ): AsyncIterableIterator<responses.ListDedicatedVmHostShapesResponse> {
    return paginateResponses(request, req => this.listDedicatedVmHostShapes(req));
  }

  /**
     * Returns the list of dedicated virtual machine hosts that match the specified criteria in the specified compartment.
* <p>
You can limit the list by specifying a dedicated virtual machine host display name. The list will include all the identically-named
* dedicated virtual machine hosts in the compartment.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDedicatedVmHostsRequest
     * @return ListDedicatedVmHostsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDedicatedVmHosts.ts.html |here} to see how to use ListDedicatedVmHosts API.
     */
  public async listDedicatedVmHosts(
    listDedicatedVmHostsRequest: requests.ListDedicatedVmHostsRequest
  ): Promise<responses.ListDedicatedVmHostsResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listDedicatedVmHosts.");
    const operationName = "listDedicatedVmHosts";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DedicatedVmHostSummary/ListDedicatedVmHosts";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listDedicatedVmHostsRequest.availabilityDomain,
      "compartmentId": listDedicatedVmHostsRequest.compartmentId,
      "lifecycleState": listDedicatedVmHostsRequest.lifecycleState,
      "displayName": listDedicatedVmHostsRequest.displayName,
      "instanceShapeName": listDedicatedVmHostsRequest.instanceShapeName,
      "limit": listDedicatedVmHostsRequest.limit,
      "page": listDedicatedVmHostsRequest.page,
      "sortBy": listDedicatedVmHostsRequest.sortBy,
      "sortOrder": listDedicatedVmHostsRequest.sortOrder,
      "remainingMemoryInGBsGreaterThanOrEqualTo":
        listDedicatedVmHostsRequest.remainingMemoryInGBsGreaterThanOrEqualTo,
      "remainingOcpusGreaterThanOrEqualTo":
        listDedicatedVmHostsRequest.remainingOcpusGreaterThanOrEqualTo
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDedicatedVmHostsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDedicatedVmHostsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDedicatedVmHostsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DedicatedVmHostSummary,
        type: "Array<model.DedicatedVmHostSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDedicatedVmHostsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DedicatedVmHostSummary objects
   * contained in responses from the listDedicatedVmHosts operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHosts(
    request: requests.ListDedicatedVmHostsRequest
  ): AsyncIterableIterator<model.DedicatedVmHostSummary> {
    return paginateRecords(request, req => this.listDedicatedVmHosts(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDedicatedVmHostsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHosts operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostsResponses(
    request: requests.ListDedicatedVmHostsRequest
  ): AsyncIterableIterator<responses.ListDedicatedVmHostsResponse> {
    return paginateResponses(request, req => this.listDedicatedVmHosts(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DedicatedVmHostSummary objects
   * contained in responses from the listDedicatedVmHosts operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDedicatedVmHostsRecordIterator(
    request: requests.ListDedicatedVmHostsRequest
  ): AsyncIterableIterator<model.DedicatedVmHostSummary> {
    return paginateRecords(request, req => this.listDedicatedVmHosts(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHosts operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDedicatedVmHostsResponseIterator(
    request: requests.ListDedicatedVmHostsRequest
  ): AsyncIterableIterator<responses.ListDedicatedVmHostsResponse> {
    return paginateResponses(request, req => this.listDedicatedVmHosts(req));
  }

  /**
   * Lists the compatible shapes for the specified image.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListImageShapeCompatibilityEntriesRequest
   * @return ListImageShapeCompatibilityEntriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListImageShapeCompatibilityEntries.ts.html |here} to see how to use ListImageShapeCompatibilityEntries API.
   */
  public async listImageShapeCompatibilityEntries(
    listImageShapeCompatibilityEntriesRequest: requests.ListImageShapeCompatibilityEntriesRequest
  ): Promise<responses.ListImageShapeCompatibilityEntriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listImageShapeCompatibilityEntries.");
    const operationName = "listImageShapeCompatibilityEntries";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ImageShapeCompatibilityEntry/ListImageShapeCompatibilityEntries";
    const pathParams = {
      "{imageId}": listImageShapeCompatibilityEntriesRequest.imageId
    };

    const queryParams = {
      "limit": listImageShapeCompatibilityEntriesRequest.limit,
      "page": listImageShapeCompatibilityEntriesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listImageShapeCompatibilityEntriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listImageShapeCompatibilityEntriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}/shapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListImageShapeCompatibilityEntriesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ImageShapeCompatibilitySummary,
        type: "Array<model.ImageShapeCompatibilitySummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listImageShapeCompatibilityEntriesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ImageShapeCompatibilitySummary objects
   * contained in responses from the listImageShapeCompatibilityEntries operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllImageShapeCompatibilityEntries(
    request: requests.ListImageShapeCompatibilityEntriesRequest
  ): AsyncIterableIterator<model.ImageShapeCompatibilitySummary> {
    return paginateRecords(request, req => this.listImageShapeCompatibilityEntries(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listImageShapeCompatibilityEntriesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listImageShapeCompatibilityEntries operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllImageShapeCompatibilityEntriesResponses(
    request: requests.ListImageShapeCompatibilityEntriesRequest
  ): AsyncIterableIterator<responses.ListImageShapeCompatibilityEntriesResponse> {
    return paginateResponses(request, req => this.listImageShapeCompatibilityEntries(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ImageShapeCompatibilitySummary objects
   * contained in responses from the listImageShapeCompatibilityEntries operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listImageShapeCompatibilityEntriesRecordIterator(
    request: requests.ListImageShapeCompatibilityEntriesRequest
  ): AsyncIterableIterator<model.ImageShapeCompatibilitySummary> {
    return paginateRecords(request, req => this.listImageShapeCompatibilityEntries(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listImageShapeCompatibilityEntries operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listImageShapeCompatibilityEntriesResponseIterator(
    request: requests.ListImageShapeCompatibilityEntriesRequest
  ): AsyncIterableIterator<responses.ListImageShapeCompatibilityEntriesResponse> {
    return paginateResponses(request, req => this.listImageShapeCompatibilityEntries(req));
  }

  /**
     * Lists a subset of images available in the specified compartment, including
* [platform images](https://docs.cloud.oracle.com/iaas/Content/Compute/References/images.htm) and
* [custom images](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingcustomimages.htm).
* The list of platform images includes the three most recently published versions
* of each major distribution. The list does not support filtering based on image tags.
* <p>
The list of images returned is ordered to first show the recent platform images,
* then all of the custom images.
* <p>
**Caution:** Platform images are refreshed regularly. When new images are released, older versions are replaced.
* The image OCIDs remain available, but when the platform image is replaced, the image OCIDs are no longer returned as part of the platform image list.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListImagesRequest
     * @return ListImagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListImages.ts.html |here} to see how to use ListImages API.
     */
  public async listImages(
    listImagesRequest: requests.ListImagesRequest
  ): Promise<responses.ListImagesResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listImages.");
    const operationName = "listImages";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Image/ListImages";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listImagesRequest.compartmentId,
      "displayName": listImagesRequest.displayName,
      "operatingSystem": listImagesRequest.operatingSystem,
      "operatingSystemVersion": listImagesRequest.operatingSystemVersion,
      "shape": listImagesRequest.shape,
      "limit": listImagesRequest.limit,
      "page": listImagesRequest.page,
      "sortBy": listImagesRequest.sortBy,
      "sortOrder": listImagesRequest.sortOrder,
      "lifecycleState": listImagesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listImagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListImagesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Image,
        type: "Array<model.Image>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listImagesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Image objects
   * contained in responses from the listImages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllImages(request: requests.ListImagesRequest): AsyncIterableIterator<model.Image> {
    return paginateRecords(request, req => this.listImages(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listImagesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listImages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllImagesResponses(
    request: requests.ListImagesRequest
  ): AsyncIterableIterator<responses.ListImagesResponse> {
    return paginateResponses(request, req => this.listImages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Image objects
   * contained in responses from the listImages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listImagesRecordIterator(
    request: requests.ListImagesRequest
  ): AsyncIterableIterator<model.Image> {
    return paginateRecords(request, req => this.listImages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listImages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listImagesResponseIterator(
    request: requests.ListImagesRequest
  ): AsyncIterableIterator<responses.ListImagesResponse> {
    return paginateResponses(request, req => this.listImages(req));
  }

  /**
     * Lists the console connections for the specified compartment or instance.
* <p>
For more information about instance console connections, see [Troubleshooting Instances Using Instance Console Connections](https://docs.cloud.oracle.com/iaas/Content/Compute/References/serialconsole.htm).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListInstanceConsoleConnectionsRequest
     * @return ListInstanceConsoleConnectionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstanceConsoleConnections.ts.html |here} to see how to use ListInstanceConsoleConnections API.
     */
  public async listInstanceConsoleConnections(
    listInstanceConsoleConnectionsRequest: requests.ListInstanceConsoleConnectionsRequest
  ): Promise<responses.ListInstanceConsoleConnectionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listInstanceConsoleConnections.");
    const operationName = "listInstanceConsoleConnections";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConsoleConnection/ListInstanceConsoleConnections";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listInstanceConsoleConnectionsRequest.compartmentId,
      "instanceId": listInstanceConsoleConnectionsRequest.instanceId,
      "limit": listInstanceConsoleConnectionsRequest.limit,
      "page": listInstanceConsoleConnectionsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInstanceConsoleConnectionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleConnections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstanceConsoleConnectionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.InstanceConsoleConnection,
        type: "Array<model.InstanceConsoleConnection>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listInstanceConsoleConnectionsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.InstanceConsoleConnection objects
   * contained in responses from the listInstanceConsoleConnections operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceConsoleConnections(
    request: requests.ListInstanceConsoleConnectionsRequest
  ): AsyncIterableIterator<model.InstanceConsoleConnection> {
    return paginateRecords(request, req => this.listInstanceConsoleConnections(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listInstanceConsoleConnectionsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listInstanceConsoleConnections operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceConsoleConnectionsResponses(
    request: requests.ListInstanceConsoleConnectionsRequest
  ): AsyncIterableIterator<responses.ListInstanceConsoleConnectionsResponse> {
    return paginateResponses(request, req => this.listInstanceConsoleConnections(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstanceConsoleConnection objects
   * contained in responses from the listInstanceConsoleConnections operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstanceConsoleConnectionsRecordIterator(
    request: requests.ListInstanceConsoleConnectionsRequest
  ): AsyncIterableIterator<model.InstanceConsoleConnection> {
    return paginateRecords(request, req => this.listInstanceConsoleConnections(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstanceConsoleConnections operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstanceConsoleConnectionsResponseIterator(
    request: requests.ListInstanceConsoleConnectionsRequest
  ): AsyncIterableIterator<responses.ListInstanceConsoleConnectionsResponse> {
    return paginateResponses(request, req => this.listInstanceConsoleConnections(req));
  }

  /**
   * Gets a list of all the devices for given instance. You can optionally filter results by device availability.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListInstanceDevicesRequest
   * @return ListInstanceDevicesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstanceDevices.ts.html |here} to see how to use ListInstanceDevices API.
   */
  public async listInstanceDevices(
    listInstanceDevicesRequest: requests.ListInstanceDevicesRequest
  ): Promise<responses.ListInstanceDevicesResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listInstanceDevices.");
    const operationName = "listInstanceDevices";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Device/ListInstanceDevices";
    const pathParams = {
      "{instanceId}": listInstanceDevicesRequest.instanceId
    };

    const queryParams = {
      "isAvailable": listInstanceDevicesRequest.isAvailable,
      "name": listInstanceDevicesRequest.name,
      "limit": listInstanceDevicesRequest.limit,
      "page": listInstanceDevicesRequest.page,
      "sortBy": listInstanceDevicesRequest.sortBy,
      "sortOrder": listInstanceDevicesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listInstanceDevicesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInstanceDevicesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}/devices",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstanceDevicesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Device,
        type: "Array<model.Device>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listInstanceDevicesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Device objects
   * contained in responses from the listInstanceDevices operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceDevices(
    request: requests.ListInstanceDevicesRequest
  ): AsyncIterableIterator<model.Device> {
    return paginateRecords(request, req => this.listInstanceDevices(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listInstanceDevicesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listInstanceDevices operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceDevicesResponses(
    request: requests.ListInstanceDevicesRequest
  ): AsyncIterableIterator<responses.ListInstanceDevicesResponse> {
    return paginateResponses(request, req => this.listInstanceDevices(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Device objects
   * contained in responses from the listInstanceDevices operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstanceDevicesRecordIterator(
    request: requests.ListInstanceDevicesRequest
  ): AsyncIterableIterator<model.Device> {
    return paginateRecords(request, req => this.listInstanceDevices(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstanceDevices operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstanceDevicesResponseIterator(
    request: requests.ListInstanceDevicesRequest
  ): AsyncIterableIterator<responses.ListInstanceDevicesResponse> {
    return paginateResponses(request, req => this.listInstanceDevices(req));
  }

  /**
   * Gets a list of all the maintenance events for the given instance.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListInstanceMaintenanceEventsRequest
   * @return ListInstanceMaintenanceEventsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstanceMaintenanceEvents.ts.html |here} to see how to use ListInstanceMaintenanceEvents API.
   */
  public async listInstanceMaintenanceEvents(
    listInstanceMaintenanceEventsRequest: requests.ListInstanceMaintenanceEventsRequest
  ): Promise<responses.ListInstanceMaintenanceEventsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listInstanceMaintenanceEvents.");
    const operationName = "listInstanceMaintenanceEvents";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceMaintenanceEventSummary/ListInstanceMaintenanceEvents";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listInstanceMaintenanceEventsRequest.compartmentId,
      "instanceId": listInstanceMaintenanceEventsRequest.instanceId,
      "lifecycleState": listInstanceMaintenanceEventsRequest.lifecycleState,
      "correlationToken": listInstanceMaintenanceEventsRequest.correlationToken,
      "instanceAction": listInstanceMaintenanceEventsRequest.instanceAction,
      "timeWindowStartGreaterThanOrEqualTo":
        listInstanceMaintenanceEventsRequest.timeWindowStartGreaterThanOrEqualTo,
      "timeWindowStartLessThanOrEqualTo":
        listInstanceMaintenanceEventsRequest.timeWindowStartLessThanOrEqualTo,
      "limit": listInstanceMaintenanceEventsRequest.limit,
      "page": listInstanceMaintenanceEventsRequest.page,
      "sortBy": listInstanceMaintenanceEventsRequest.sortBy,
      "sortOrder": listInstanceMaintenanceEventsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listInstanceMaintenanceEventsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInstanceMaintenanceEventsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceMaintenanceEvents",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstanceMaintenanceEventsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.InstanceMaintenanceEventSummary,
        type: "Array<model.InstanceMaintenanceEventSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listInstanceMaintenanceEventsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.InstanceMaintenanceEventSummary objects
   * contained in responses from the listInstanceMaintenanceEvents operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceMaintenanceEvents(
    request: requests.ListInstanceMaintenanceEventsRequest
  ): AsyncIterableIterator<model.InstanceMaintenanceEventSummary> {
    return paginateRecords(request, req => this.listInstanceMaintenanceEvents(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listInstanceMaintenanceEventsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listInstanceMaintenanceEvents operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceMaintenanceEventsResponses(
    request: requests.ListInstanceMaintenanceEventsRequest
  ): AsyncIterableIterator<responses.ListInstanceMaintenanceEventsResponse> {
    return paginateResponses(request, req => this.listInstanceMaintenanceEvents(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstanceMaintenanceEventSummary objects
   * contained in responses from the listInstanceMaintenanceEvents operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstanceMaintenanceEventsRecordIterator(
    request: requests.ListInstanceMaintenanceEventsRequest
  ): AsyncIterableIterator<model.InstanceMaintenanceEventSummary> {
    return paginateRecords(request, req => this.listInstanceMaintenanceEvents(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstanceMaintenanceEvents operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstanceMaintenanceEventsResponseIterator(
    request: requests.ListInstanceMaintenanceEventsRequest
  ): AsyncIterableIterator<responses.ListInstanceMaintenanceEventsResponse> {
    return paginateResponses(request, req => this.listInstanceMaintenanceEvents(req));
  }

  /**
   * Lists the instances in the specified compartment and the specified availability domain.
   * You can filter the results by specifying an instance name (the list will include all the identically-named
   * instances in the compartment).
   * <p>
   **Note:** To retrieve public and private IP addresses for an instance, use the {@link #listVnicAttachments(ListVnicAttachmentsRequest) listVnicAttachments}
   * operation to get the VNIC ID for the instance, and then call {@link #getVnic(GetVnicRequest) getVnic} with the VNIC ID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListInstancesRequest
   * @return ListInstancesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstances.ts.html |here} to see how to use ListInstances API.
   */
  public async listInstances(
    listInstancesRequest: requests.ListInstancesRequest
  ): Promise<responses.ListInstancesResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listInstances.");
    const operationName = "listInstances";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Instance/ListInstances";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listInstancesRequest.availabilityDomain,
      "capacityReservationId": listInstancesRequest.capacityReservationId,
      "computeClusterId": listInstancesRequest.computeClusterId,
      "compartmentId": listInstancesRequest.compartmentId,
      "displayName": listInstancesRequest.displayName,
      "limit": listInstancesRequest.limit,
      "page": listInstancesRequest.page,
      "sortBy": listInstancesRequest.sortBy,
      "sortOrder": listInstancesRequest.sortOrder,
      "lifecycleState": listInstancesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInstancesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Instance,
        type: "Array<model.Instance>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listInstancesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Instance objects
   * contained in responses from the listInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstances(
    request: requests.ListInstancesRequest
  ): AsyncIterableIterator<model.Instance> {
    return paginateRecords(request, req => this.listInstances(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listInstancesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstancesResponses(
    request: requests.ListInstancesRequest
  ): AsyncIterableIterator<responses.ListInstancesResponse> {
    return paginateResponses(request, req => this.listInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Instance objects
   * contained in responses from the listInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstancesRecordIterator(
    request: requests.ListInstancesRequest
  ): AsyncIterableIterator<model.Instance> {
    return paginateRecords(request, req => this.listInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstancesResponseIterator(
    request: requests.ListInstancesRequest
  ): AsyncIterableIterator<responses.ListInstancesResponse> {
    return paginateResponses(request, req => this.listInstances(req));
  }

  /**
   * Lists the shapes that can be used to launch an instance within the specified compartment. You can
   * filter the list by compatibility with a specific image.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListShapesRequest
   * @return ListShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListShapes.ts.html |here} to see how to use ListShapes API.
   */
  public async listShapes(
    listShapesRequest: requests.ListShapesRequest
  ): Promise<responses.ListShapesResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listShapes.");
    const operationName = "listShapes";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Shape/ListShapes";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listShapesRequest.availabilityDomain,
      "compartmentId": listShapesRequest.compartmentId,
      "limit": listShapesRequest.limit,
      "page": listShapesRequest.page,
      "imageId": listShapesRequest.imageId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Shape,
        type: "Array<model.Shape>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Shape objects
   * contained in responses from the listShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllShapes(request: requests.ListShapesRequest): AsyncIterableIterator<model.Shape> {
    return paginateRecords(request, req => this.listShapes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllShapesResponses(
    request: requests.ListShapesRequest
  ): AsyncIterableIterator<responses.ListShapesResponse> {
    return paginateResponses(request, req => this.listShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Shape objects
   * contained in responses from the listShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listShapesRecordIterator(
    request: requests.ListShapesRequest
  ): AsyncIterableIterator<model.Shape> {
    return paginateRecords(request, req => this.listShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listShapesResponseIterator(
    request: requests.ListShapesRequest
  ): AsyncIterableIterator<responses.ListShapesResponse> {
    return paginateResponses(request, req => this.listShapes(req));
  }

  /**
   * Lists the VNIC attachments in the specified compartment. A VNIC attachment
   * resides in the same compartment as the attached instance. The list can be
   * filtered by instance, VNIC, or availability domain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListVnicAttachmentsRequest
   * @return ListVnicAttachmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVnicAttachments.ts.html |here} to see how to use ListVnicAttachments API.
   */
  public async listVnicAttachments(
    listVnicAttachmentsRequest: requests.ListVnicAttachmentsRequest
  ): Promise<responses.ListVnicAttachmentsResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listVnicAttachments.");
    const operationName = "listVnicAttachments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VnicAttachment/ListVnicAttachments";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listVnicAttachmentsRequest.availabilityDomain,
      "compartmentId": listVnicAttachmentsRequest.compartmentId,
      "instanceId": listVnicAttachmentsRequest.instanceId,
      "limit": listVnicAttachmentsRequest.limit,
      "page": listVnicAttachmentsRequest.page,
      "vnicId": listVnicAttachmentsRequest.vnicId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVnicAttachmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vnicAttachments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVnicAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VnicAttachment,
        type: "Array<model.VnicAttachment>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVnicAttachmentsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VnicAttachment objects
   * contained in responses from the listVnicAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVnicAttachments(
    request: requests.ListVnicAttachmentsRequest
  ): AsyncIterableIterator<model.VnicAttachment> {
    return paginateRecords(request, req => this.listVnicAttachments(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVnicAttachmentsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVnicAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVnicAttachmentsResponses(
    request: requests.ListVnicAttachmentsRequest
  ): AsyncIterableIterator<responses.ListVnicAttachmentsResponse> {
    return paginateResponses(request, req => this.listVnicAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VnicAttachment objects
   * contained in responses from the listVnicAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVnicAttachmentsRecordIterator(
    request: requests.ListVnicAttachmentsRequest
  ): AsyncIterableIterator<model.VnicAttachment> {
    return paginateRecords(request, req => this.listVnicAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVnicAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVnicAttachmentsResponseIterator(
    request: requests.ListVnicAttachmentsRequest
  ): AsyncIterableIterator<responses.ListVnicAttachmentsResponse> {
    return paginateResponses(request, req => this.listVnicAttachments(req));
  }

  /**
     * Lists the volume attachments in the specified compartment. You can filter the
* list by specifying an instance OCID, volume OCID, or both.
* <p>
Currently, the only supported volume attachment type are {@link IScsiVolumeAttachment} and
* {@link ParavirtualizedVolumeAttachment}.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListVolumeAttachmentsRequest
     * @return ListVolumeAttachmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumeAttachments.ts.html |here} to see how to use ListVolumeAttachments API.
     */
  public async listVolumeAttachments(
    listVolumeAttachmentsRequest: requests.ListVolumeAttachmentsRequest
  ): Promise<responses.ListVolumeAttachmentsResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listVolumeAttachments.");
    const operationName = "listVolumeAttachments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeAttachment/ListVolumeAttachments";
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listVolumeAttachmentsRequest.availabilityDomain,
      "compartmentId": listVolumeAttachmentsRequest.compartmentId,
      "limit": listVolumeAttachmentsRequest.limit,
      "page": listVolumeAttachmentsRequest.page,
      "instanceId": listVolumeAttachmentsRequest.instanceId,
      "volumeId": listVolumeAttachmentsRequest.volumeId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVolumeAttachmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeAttachments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumeAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VolumeAttachment,
        type: "Array<model.VolumeAttachment>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumeAttachmentsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VolumeAttachment objects
   * contained in responses from the listVolumeAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeAttachments(
    request: requests.ListVolumeAttachmentsRequest
  ): AsyncIterableIterator<model.VolumeAttachment> {
    return paginateRecords(request, req => this.listVolumeAttachments(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVolumeAttachmentsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVolumeAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeAttachmentsResponses(
    request: requests.ListVolumeAttachmentsRequest
  ): AsyncIterableIterator<responses.ListVolumeAttachmentsResponse> {
    return paginateResponses(request, req => this.listVolumeAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeAttachment objects
   * contained in responses from the listVolumeAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumeAttachmentsRecordIterator(
    request: requests.ListVolumeAttachmentsRequest
  ): AsyncIterableIterator<model.VolumeAttachment> {
    return paginateRecords(request, req => this.listVolumeAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumeAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVolumeAttachmentsResponseIterator(
    request: requests.ListVolumeAttachmentsRequest
  ): AsyncIterableIterator<responses.ListVolumeAttachmentsResponse> {
    return paginateResponses(request, req => this.listVolumeAttachments(req));
  }

  /**
   * Removes a shape from the compatible shapes list for the image.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveImageShapeCompatibilityEntryRequest
   * @return RemoveImageShapeCompatibilityEntryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemoveImageShapeCompatibilityEntry.ts.html |here} to see how to use RemoveImageShapeCompatibilityEntry API.
   */
  public async removeImageShapeCompatibilityEntry(
    removeImageShapeCompatibilityEntryRequest: requests.RemoveImageShapeCompatibilityEntryRequest
  ): Promise<responses.RemoveImageShapeCompatibilityEntryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#removeImageShapeCompatibilityEntry.");
    const operationName = "removeImageShapeCompatibilityEntry";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ImageShapeCompatibilityEntry/RemoveImageShapeCompatibilityEntry";
    const pathParams = {
      "{imageId}": removeImageShapeCompatibilityEntryRequest.imageId,
      "{shapeName}": removeImageShapeCompatibilityEntryRequest.shapeName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeImageShapeCompatibilityEntryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}/shapes/{shapeName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveImageShapeCompatibilityEntryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Permanently terminates (deletes) the specified instance. Any attached VNICs and volumes are automatically detached
* when the instance terminates.
* <p>
To preserve the boot volume associated with the instance, specify `true` for `PreserveBootVolumeQueryParam`.
* To delete the boot volume when the instance is deleted, specify `false` or do not specify a value for `PreserveBootVolumeQueryParam`.
* <p>
To preserve data volumes created with the instance, specify `true` or do not specify a value for `PreserveDataVolumesQueryParam`.
* To delete the data volumes when the instance itself is deleted, specify `false` for `PreserveDataVolumesQueryParam`.
* <p>
This is an asynchronous operation. The instance's `lifecycleState` changes to TERMINATING temporarily
* until the instance is completely deleted. After the instance is deleted, the record remains visible in the list of instances
* with the state TERMINATED for at least 12 hours, but no further action is needed.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param TerminateInstanceRequest
     * @return TerminateInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/TerminateInstance.ts.html |here} to see how to use TerminateInstance API.
     */
  public async terminateInstance(
    terminateInstanceRequest: requests.TerminateInstanceRequest
  ): Promise<responses.TerminateInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#terminateInstance.");
    const operationName = "terminateInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{instanceId}": terminateInstanceRequest.instanceId
    };

    const queryParams = {
      "preserveBootVolume": terminateInstanceRequest.preserveBootVolume,
      "preserveDataVolumesCreatedAtLaunch":
        terminateInstanceRequest.preserveDataVolumesCreatedAtLaunch
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": terminateInstanceRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      terminateInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.TerminateInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified capacity reservation and its associated capacity configurations.
   * Fields that are not provided in the request will not be updated. Capacity configurations that are not included will be deleted.
   * Avoid entering confidential information.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateComputeCapacityReservationRequest
   * @return UpdateComputeCapacityReservationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateComputeCapacityReservation.ts.html |here} to see how to use UpdateComputeCapacityReservation API.
   */
  public async updateComputeCapacityReservation(
    updateComputeCapacityReservationRequest: requests.UpdateComputeCapacityReservationRequest
  ): Promise<responses.UpdateComputeCapacityReservationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#updateComputeCapacityReservation.");
    const operationName = "updateComputeCapacityReservation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCapacityReservation/UpdateComputeCapacityReservation";
    const pathParams = {
      "{capacityReservationId}": updateComputeCapacityReservationRequest.capacityReservationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateComputeCapacityReservationRequest.ifMatch,
      "opc-request-id": updateComputeCapacityReservationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateComputeCapacityReservationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityReservations/{capacityReservationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateComputeCapacityReservationRequest.updateComputeCapacityReservationDetails,
        "UpdateComputeCapacityReservationDetails",
        model.UpdateComputeCapacityReservationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateComputeCapacityReservationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified compute capacity topology. Fields that are not provided in the request will not be updated.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateComputeCapacityTopologyRequest
   * @return UpdateComputeCapacityTopologyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateComputeCapacityTopology.ts.html |here} to see how to use UpdateComputeCapacityTopology API.
   */
  public async updateComputeCapacityTopology(
    updateComputeCapacityTopologyRequest: requests.UpdateComputeCapacityTopologyRequest
  ): Promise<responses.UpdateComputeCapacityTopologyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#updateComputeCapacityTopology.");
    const operationName = "updateComputeCapacityTopology";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCapacityTopology/UpdateComputeCapacityTopology";
    const pathParams = {
      "{computeCapacityTopologyId}": updateComputeCapacityTopologyRequest.computeCapacityTopologyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateComputeCapacityTopologyRequest.ifMatch,
      "opc-request-id": updateComputeCapacityTopologyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateComputeCapacityTopologyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeCapacityTopologies/{computeCapacityTopologyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateComputeCapacityTopologyRequest.updateComputeCapacityTopologyDetails,
        "UpdateComputeCapacityTopologyDetails",
        model.UpdateComputeCapacityTopologyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateComputeCapacityTopologyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates a compute cluster. A [compute cluster](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/compute-clusters.htm) is a
* remote direct memory access (RDMA) network group.
* <p>
To create instances within a compute cluster, use the {@link #launchInstance(LaunchInstanceRequest) launchInstance}
* operation.
* <p>
To delete instances from a compute cluster, use the {@link #terminateInstance(TerminateInstanceRequest) terminateInstance}
* operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateComputeClusterRequest
     * @return UpdateComputeClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateComputeCluster.ts.html |here} to see how to use UpdateComputeCluster API.
     */
  public async updateComputeCluster(
    updateComputeClusterRequest: requests.UpdateComputeClusterRequest
  ): Promise<responses.UpdateComputeClusterResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#updateComputeCluster.");
    const operationName = "updateComputeCluster";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeCluster/UpdateComputeCluster";
    const pathParams = {
      "{computeClusterId}": updateComputeClusterRequest.computeClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateComputeClusterRequest.opcRequestId,
      "opc-retry-token": updateComputeClusterRequest.opcRetryToken,
      "if-match": updateComputeClusterRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateComputeClusterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeClusters/{computeClusterId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateComputeClusterRequest.updateComputeClusterDetails,
        "UpdateComputeClusterDetails",
        model.UpdateComputeClusterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateComputeClusterResponse>{},
        body: await response.json(),
        bodyKey: "computeCluster",
        bodyModel: model.ComputeCluster,
        type: "model.ComputeCluster",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Compute Image Capability Schema
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateComputeImageCapabilitySchemaRequest
   * @return UpdateComputeImageCapabilitySchemaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateComputeImageCapabilitySchema.ts.html |here} to see how to use UpdateComputeImageCapabilitySchema API.
   */
  public async updateComputeImageCapabilitySchema(
    updateComputeImageCapabilitySchemaRequest: requests.UpdateComputeImageCapabilitySchemaRequest
  ): Promise<responses.UpdateComputeImageCapabilitySchemaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#updateComputeImageCapabilitySchema.");
    const operationName = "updateComputeImageCapabilitySchema";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ComputeImageCapabilitySchema/UpdateComputeImageCapabilitySchema";
    const pathParams = {
      "{computeImageCapabilitySchemaId}":
        updateComputeImageCapabilitySchemaRequest.computeImageCapabilitySchemaId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateComputeImageCapabilitySchemaRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateComputeImageCapabilitySchemaRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeImageCapabilitySchemas/{computeImageCapabilitySchemaId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateComputeImageCapabilitySchemaRequest.updateComputeImageCapabilitySchemaDetails,
        "UpdateComputeImageCapabilitySchemaDetails",
        model.UpdateComputeImageCapabilitySchemaDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateComputeImageCapabilitySchemaResponse>{},
        body: await response.json(),
        bodyKey: "computeImageCapabilitySchema",
        bodyModel: model.ComputeImageCapabilitySchema,
        type: "model.ComputeImageCapabilitySchema",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified console history metadata.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateConsoleHistoryRequest
   * @return UpdateConsoleHistoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateConsoleHistory.ts.html |here} to see how to use UpdateConsoleHistory API.
   */
  public async updateConsoleHistory(
    updateConsoleHistoryRequest: requests.UpdateConsoleHistoryRequest
  ): Promise<responses.UpdateConsoleHistoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#updateConsoleHistory.");
    const operationName = "updateConsoleHistory";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ConsoleHistory/UpdateConsoleHistory";
    const pathParams = {
      "{instanceConsoleHistoryId}": updateConsoleHistoryRequest.instanceConsoleHistoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateConsoleHistoryRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateConsoleHistoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleHistories/{instanceConsoleHistoryId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateConsoleHistoryRequest.updateConsoleHistoryDetails,
        "UpdateConsoleHistoryDetails",
        model.UpdateConsoleHistoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateConsoleHistoryResponse>{},
        body: await response.json(),
        bodyKey: "consoleHistory",
        bodyModel: model.ConsoleHistory,
        type: "model.ConsoleHistory",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the displayName, freeformTags, and definedTags attributes for the specified dedicated virtual machine host.
   * If an attribute value is not included, it will not be updated.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDedicatedVmHostRequest
   * @return UpdateDedicatedVmHostResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateDedicatedVmHost.ts.html |here} to see how to use UpdateDedicatedVmHost API.
   */
  public async updateDedicatedVmHost(
    updateDedicatedVmHostRequest: requests.UpdateDedicatedVmHostRequest
  ): Promise<responses.UpdateDedicatedVmHostResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#updateDedicatedVmHost.");
    const operationName = "updateDedicatedVmHost";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DedicatedVmHost/UpdateDedicatedVmHost";
    const pathParams = {
      "{dedicatedVmHostId}": updateDedicatedVmHostRequest.dedicatedVmHostId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDedicatedVmHostRequest.ifMatch,
      "opc-request-id": updateDedicatedVmHostRequest.opcRequestId,
      "opc-retry-token": updateDedicatedVmHostRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDedicatedVmHostRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts/{dedicatedVmHostId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDedicatedVmHostRequest.updateDedicatedVmHostDetails,
        "UpdateDedicatedVmHostDetails",
        model.UpdateDedicatedVmHostDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDedicatedVmHostResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedVmHost",
        bodyModel: model.DedicatedVmHost,
        type: "model.DedicatedVmHost",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the display name of the image. Avoid entering confidential information.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateImageRequest
   * @return UpdateImageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateImage.ts.html |here} to see how to use UpdateImage API.
   */
  public async updateImage(
    updateImageRequest: requests.UpdateImageRequest
  ): Promise<responses.UpdateImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#updateImage.");
    const operationName = "updateImage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Image/UpdateImage";
    const pathParams = {
      "{imageId}": updateImageRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateImageRequest.opcRetryToken,
      "if-match": updateImageRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateImageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateImageRequest.updateImageDetails,
        "UpdateImageDetails",
        model.UpdateImageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateImageResponse>{},
        body: await response.json(),
        bodyKey: "image",
        bodyModel: model.Image,
        type: "model.Image",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates certain fields on the specified instance. Fields that are not provided in the
* request will not be updated. Avoid entering confidential information.
* <p>
Changes to metadata fields will be reflected in the instance metadata service (this may take
* up to a minute).
* <p>
The OCID of the instance remains the same.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateInstanceRequest
     * @return UpdateInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateInstance.ts.html |here} to see how to use UpdateInstance API.
     */
  public async updateInstance(
    updateInstanceRequest: requests.UpdateInstanceRequest
  ): Promise<responses.UpdateInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#updateInstance.");
    const operationName = "updateInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Instance/UpdateInstance";
    const pathParams = {
      "{instanceId}": updateInstanceRequest.instanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateInstanceRequest.opcRetryToken,
      "if-match": updateInstanceRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateInstanceRequest.updateInstanceDetails,
        "UpdateInstanceDetails",
        model.UpdateInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateInstanceResponse>{},
        body: await response.json(),
        bodyKey: "instance",
        bodyModel: model.Instance,
        type: "model.Instance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the defined tags and free-form tags for the specified instance console connection.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateInstanceConsoleConnectionRequest
   * @return UpdateInstanceConsoleConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateInstanceConsoleConnection.ts.html |here} to see how to use UpdateInstanceConsoleConnection API.
   */
  public async updateInstanceConsoleConnection(
    updateInstanceConsoleConnectionRequest: requests.UpdateInstanceConsoleConnectionRequest
  ): Promise<responses.UpdateInstanceConsoleConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#updateInstanceConsoleConnection.");
    const operationName = "updateInstanceConsoleConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConsoleConnection/UpdateInstanceConsoleConnection";
    const pathParams = {
      "{instanceConsoleConnectionId}":
        updateInstanceConsoleConnectionRequest.instanceConsoleConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateInstanceConsoleConnectionRequest.opcRequestId,
      "if-match": updateInstanceConsoleConnectionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateInstanceConsoleConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleConnections/{instanceConsoleConnectionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateInstanceConsoleConnectionRequest.updateInstanceConsoleConnectionDetails,
        "UpdateInstanceConsoleConnectionDetails",
        model.UpdateInstanceConsoleConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateInstanceConsoleConnectionResponse>{},
        body: await response.json(),
        bodyKey: "instanceConsoleConnection",
        bodyModel: model.InstanceConsoleConnection,
        type: "model.InstanceConsoleConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the maintenance event for the given instance.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateInstanceMaintenanceEventRequest
   * @return UpdateInstanceMaintenanceEventResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateInstanceMaintenanceEvent.ts.html |here} to see how to use UpdateInstanceMaintenanceEvent API.
   */
  public async updateInstanceMaintenanceEvent(
    updateInstanceMaintenanceEventRequest: requests.UpdateInstanceMaintenanceEventRequest
  ): Promise<responses.UpdateInstanceMaintenanceEventResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#updateInstanceMaintenanceEvent.");
    const operationName = "updateInstanceMaintenanceEvent";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceMaintenanceEvent/UpdateInstanceMaintenanceEvent";
    const pathParams = {
      "{instanceMaintenanceEventId}":
        updateInstanceMaintenanceEventRequest.instanceMaintenanceEventId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateInstanceMaintenanceEventRequest.opcRequestId,
      "if-match": updateInstanceMaintenanceEventRequest.ifMatch,
      "opc-retry-token": updateInstanceMaintenanceEventRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateInstanceMaintenanceEventRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceMaintenanceEvents/{instanceMaintenanceEventId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateInstanceMaintenanceEventRequest.updateInstanceMaintenanceEventDetails,
        "UpdateInstanceMaintenanceEventDetails",
        model.UpdateInstanceMaintenanceEventDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateInstanceMaintenanceEventResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates information about the specified volume attachment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateVolumeAttachmentRequest
   * @return UpdateVolumeAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolumeAttachment.ts.html |here} to see how to use UpdateVolumeAttachment API.
   */
  public async updateVolumeAttachment(
    updateVolumeAttachmentRequest: requests.UpdateVolumeAttachmentRequest
  ): Promise<responses.UpdateVolumeAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#updateVolumeAttachment.");
    const operationName = "updateVolumeAttachment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VolumeAttachment/UpdateVolumeAttachment";
    const pathParams = {
      "{volumeAttachmentId}": updateVolumeAttachmentRequest.volumeAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateVolumeAttachmentRequest.opcRequestId,
      "if-match": updateVolumeAttachmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVolumeAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeAttachments/{volumeAttachmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeAttachmentRequest.updateVolumeAttachmentDetails,
        "UpdateVolumeAttachmentDetails",
        model.UpdateVolumeAttachmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "volumeAttachment",
        bodyModel: model.VolumeAttachment,
        type: "model.VolumeAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum ComputeManagementApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ComputeManagementClient {
  protected static serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ComputeManagementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ComputeManagement";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("core")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("core");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20160918";
    if (this.logger) this.logger.info(`ComputeManagementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ComputeManagementClient.serviceEndpointTemplate,
        this._region,
        ComputeManagementClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ComputeManagementClient.serviceEndpointTemplate,
        this._regionId,
        ComputeManagementClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ComputeManagementClient.serviceEndpointTemplate,
      region,
      ComputeManagementClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ComputeManagementClient.serviceEndpointTemplate,
      regionId,
      ComputeManagementClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new ComputeManagementWaiter for resources for this service.
   *
   * @param workRequestClient The work request service client used to query for work request status
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(
    workRequestClient: WorkRequestClient,
    config?: common.WaiterConfiguration
  ): ComputeManagementWaiter {
    this._waiters = new ComputeManagementWaiter(this, workRequestClient, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ComputeManagementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Attaches an instance to an instance pool. For information about the prerequisites
   * that an instance must meet before you can attach it to a pool, see
   * [Attaching an Instance to an Instance Pool](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/updatinginstancepool.htm#attach-instance).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AttachInstancePoolInstanceRequest
   * @return AttachInstancePoolInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AttachInstancePoolInstance.ts.html |here} to see how to use AttachInstancePoolInstance API.
   */
  public async attachInstancePoolInstance(
    attachInstancePoolInstanceRequest: requests.AttachInstancePoolInstanceRequest
  ): Promise<responses.AttachInstancePoolInstanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#attachInstancePoolInstance.");
    const operationName = "attachInstancePoolInstance";
    const apiReferenceLink = "";
    const pathParams = {
      "{instancePoolId}": attachInstancePoolInstanceRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": attachInstancePoolInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      attachInstancePoolInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/instances",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachInstancePoolInstanceRequest.attachInstancePoolInstanceDetails,
        "AttachInstancePoolInstanceDetails",
        model.AttachInstancePoolInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachInstancePoolInstanceResponse>{},
        body: await response.json(),
        bodyKey: "instancePoolInstance",
        bodyModel: model.InstancePoolInstance,
        type: "model.InstancePoolInstance",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Attach a load balancer to the instance pool.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AttachLoadBalancerRequest
   * @return AttachLoadBalancerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AttachLoadBalancer.ts.html |here} to see how to use AttachLoadBalancer API.
   */
  public async attachLoadBalancer(
    attachLoadBalancerRequest: requests.AttachLoadBalancerRequest
  ): Promise<responses.AttachLoadBalancerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#attachLoadBalancer.");
    const operationName = "attachLoadBalancer";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePool/AttachLoadBalancer";
    const pathParams = {
      "{instancePoolId}": attachLoadBalancerRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": attachLoadBalancerRequest.opcRetryToken,
      "if-match": attachLoadBalancerRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      attachLoadBalancerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/attachLoadBalancer",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachLoadBalancerRequest.attachLoadBalancerDetails,
        "AttachLoadBalancerDetails",
        model.AttachLoadBalancerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachLoadBalancerResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: model.InstancePool,
        type: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves a [cluster network with instance pools](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingclusternetworks.htm)
* into a different compartment within the same tenancy. For
* information about moving resources between compartments, see
* [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* <p>
When you move a cluster network to a different compartment, associated resources such as the instances
* in the cluster network, boot volumes, and VNICs are not moved.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeClusterNetworkCompartmentRequest
     * @return ChangeClusterNetworkCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeClusterNetworkCompartment.ts.html |here} to see how to use ChangeClusterNetworkCompartment API.
     */
  public async changeClusterNetworkCompartment(
    changeClusterNetworkCompartmentRequest: requests.ChangeClusterNetworkCompartmentRequest
  ): Promise<responses.ChangeClusterNetworkCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeManagementClient#changeClusterNetworkCompartment."
      );
    const operationName = "changeClusterNetworkCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ClusterNetwork/ChangeClusterNetworkCompartment";
    const pathParams = {
      "{clusterNetworkId}": changeClusterNetworkCompartmentRequest.clusterNetworkId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeClusterNetworkCompartmentRequest.ifMatch,
      "opc-request-id": changeClusterNetworkCompartmentRequest.opcRequestId,
      "opc-retry-token": changeClusterNetworkCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeClusterNetworkCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks/{clusterNetworkId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeClusterNetworkCompartmentRequest.changeClusterNetworkCompartmentDetails,
        "ChangeClusterNetworkCompartmentDetails",
        model.ChangeClusterNetworkCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeClusterNetworkCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves an instance configuration into a different compartment within the same tenancy.
* For information about moving resources between compartments, see
* [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* <p>
When you move an instance configuration to a different compartment, associated resources such as
* instance pools are not moved.
* <p>
**Important:** Most of the properties for an existing instance configuration, including the compartment,
* cannot be modified after you create the instance configuration. Although you can move an instance configuration
* to a different compartment, you will not be able to use the instance configuration to manage instance pools
* in the new compartment. If you want to update an instance configuration to point to a different compartment,
* you should instead create a new instance configuration in the target compartment using
* [CreateInstanceConfiguration](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConfiguration/CreateInstanceConfiguration).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeInstanceConfigurationCompartmentRequest
     * @return ChangeInstanceConfigurationCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeInstanceConfigurationCompartment.ts.html |here} to see how to use ChangeInstanceConfigurationCompartment API.
     */
  public async changeInstanceConfigurationCompartment(
    changeInstanceConfigurationCompartmentRequest: requests.ChangeInstanceConfigurationCompartmentRequest
  ): Promise<responses.ChangeInstanceConfigurationCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeManagementClient#changeInstanceConfigurationCompartment."
      );
    const operationName = "changeInstanceConfigurationCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConfiguration/ChangeInstanceConfigurationCompartment";
    const pathParams = {
      "{instanceConfigurationId}":
        changeInstanceConfigurationCompartmentRequest.instanceConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeInstanceConfigurationCompartmentRequest.ifMatch,
      "opc-request-id": changeInstanceConfigurationCompartmentRequest.opcRequestId,
      "opc-retry-token": changeInstanceConfigurationCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeInstanceConfigurationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations/{instanceConfigurationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeInstanceConfigurationCompartmentRequest.changeInstanceConfigurationCompartmentDetails,
        "ChangeInstanceConfigurationCompartmentDetails",
        model.ChangeInstanceConfigurationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeInstanceConfigurationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves an instance pool into a different compartment within the same tenancy. For
* information about moving resources between compartments, see
* [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* <p>
When you move an instance pool to a different compartment, associated resources such as the instances in
* the pool, boot volumes, VNICs, and autoscaling configurations are not moved.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeInstancePoolCompartmentRequest
     * @return ChangeInstancePoolCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeInstancePoolCompartment.ts.html |here} to see how to use ChangeInstancePoolCompartment API.
     */
  public async changeInstancePoolCompartment(
    changeInstancePoolCompartmentRequest: requests.ChangeInstancePoolCompartmentRequest
  ): Promise<responses.ChangeInstancePoolCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#changeInstancePoolCompartment.");
    const operationName = "changeInstancePoolCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePool/ChangeInstancePoolCompartment";
    const pathParams = {
      "{instancePoolId}": changeInstancePoolCompartmentRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeInstancePoolCompartmentRequest.ifMatch,
      "opc-request-id": changeInstancePoolCompartmentRequest.opcRequestId,
      "opc-retry-token": changeInstancePoolCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeInstancePoolCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeInstancePoolCompartmentRequest.changeInstancePoolCompartmentDetails,
        "ChangeInstancePoolCompartmentDetails",
        model.ChangeInstancePoolCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeInstancePoolCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a [cluster network with instance pools](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingclusternetworks.htm).
* A cluster network is a group of high performance computing (HPC), GPU, or optimized bare metal
* instances that are connected with an ultra low-latency remote direct memory access (RDMA) network.
* Cluster networks with instance pools use instance pools to manage groups of identical instances.
* <p>
Use cluster networks with instance pools when you want predictable capacity for a specific number of identical
* instances that are managed as a group.
* <p>
If you want to manage instances in the RDMA network independently of each other or use different types of instances
* in the network group, create a compute cluster by using the {@link #createComputeCluster(CreateComputeClusterRequest) createComputeCluster}
* operation.
* <p>
To determine whether capacity is available for a specific shape before you create a cluster network,
* use the {@link #createComputeCapacityReport(CreateComputeCapacityReportRequest) createComputeCapacityReport}
* operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateClusterNetworkRequest
     * @return CreateClusterNetworkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateClusterNetwork.ts.html |here} to see how to use CreateClusterNetwork API.
     */
  public async createClusterNetwork(
    createClusterNetworkRequest: requests.CreateClusterNetworkRequest
  ): Promise<responses.CreateClusterNetworkResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#createClusterNetwork.");
    const operationName = "createClusterNetwork";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ClusterNetwork/CreateClusterNetwork";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createClusterNetworkRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createClusterNetworkRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createClusterNetworkRequest.createClusterNetworkDetails,
        "CreateClusterNetworkDetails",
        model.CreateClusterNetworkDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateClusterNetworkResponse>{},
        body: await response.json(),
        bodyKey: "clusterNetwork",
        bodyModel: model.ClusterNetwork,
        type: "model.ClusterNetwork",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates an instance configuration. An instance configuration is a template that defines the
   * settings to use when creating Compute instances.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateInstanceConfigurationRequest
   * @return CreateInstanceConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateInstanceConfiguration.ts.html |here} to see how to use CreateInstanceConfiguration API.
   */
  public async createInstanceConfiguration(
    createInstanceConfigurationRequest: requests.CreateInstanceConfigurationRequest
  ): Promise<responses.CreateInstanceConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#createInstanceConfiguration.");
    const operationName = "createInstanceConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConfiguration/CreateInstanceConfiguration";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createInstanceConfigurationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createInstanceConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createInstanceConfigurationRequest.createInstanceConfiguration,
        "CreateInstanceConfigurationBase",
        model.CreateInstanceConfigurationBase.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateInstanceConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "instanceConfiguration",
        bodyModel: model.InstanceConfiguration,
        type: "model.InstanceConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates an instance pool.
* <p>
To determine whether capacity is available for a specific shape before you create an instance pool,
* use the {@link #createComputeCapacityReport(CreateComputeCapacityReportRequest) createComputeCapacityReport}
* operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateInstancePoolRequest
     * @return CreateInstancePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateInstancePool.ts.html |here} to see how to use CreateInstancePool API.
     */
  public async createInstancePool(
    createInstancePoolRequest: requests.CreateInstancePoolRequest
  ): Promise<responses.CreateInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#createInstancePool.");
    const operationName = "createInstancePool";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePool/CreateInstancePool";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createInstancePoolRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createInstancePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createInstancePoolRequest.createInstancePoolDetails,
        "CreateInstancePoolDetails",
        model.CreateInstancePoolDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: model.InstancePool,
        type: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an instance configuration.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteInstanceConfigurationRequest
   * @return DeleteInstanceConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteInstanceConfiguration.ts.html |here} to see how to use DeleteInstanceConfiguration API.
   */
  public async deleteInstanceConfiguration(
    deleteInstanceConfigurationRequest: requests.DeleteInstanceConfigurationRequest
  ): Promise<responses.DeleteInstanceConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#deleteInstanceConfiguration.");
    const operationName = "deleteInstanceConfiguration";
    const apiReferenceLink = "";
    const pathParams = {
      "{instanceConfigurationId}": deleteInstanceConfigurationRequest.instanceConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteInstanceConfigurationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteInstanceConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations/{instanceConfigurationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteInstanceConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detaches an instance from an instance pool.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DetachInstancePoolInstanceRequest
   * @return DetachInstancePoolInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DetachInstancePoolInstance.ts.html |here} to see how to use DetachInstancePoolInstance API.
   */
  public async detachInstancePoolInstance(
    detachInstancePoolInstanceRequest: requests.DetachInstancePoolInstanceRequest
  ): Promise<responses.DetachInstancePoolInstanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#detachInstancePoolInstance.");
    const operationName = "detachInstancePoolInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePoolInstance/DetachInstancePoolInstance";
    const pathParams = {
      "{instancePoolId}": detachInstancePoolInstanceRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": detachInstancePoolInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detachInstancePoolInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/detachInstance",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detachInstancePoolInstanceRequest.detachInstancePoolInstanceDetails,
        "DetachInstancePoolInstanceDetails",
        model.DetachInstancePoolInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachInstancePoolInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detach a load balancer from the instance pool.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DetachLoadBalancerRequest
   * @return DetachLoadBalancerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DetachLoadBalancer.ts.html |here} to see how to use DetachLoadBalancer API.
   */
  public async detachLoadBalancer(
    detachLoadBalancerRequest: requests.DetachLoadBalancerRequest
  ): Promise<responses.DetachLoadBalancerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#detachLoadBalancer.");
    const operationName = "detachLoadBalancer";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePool/DetachLoadBalancer";
    const pathParams = {
      "{instancePoolId}": detachLoadBalancerRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": detachLoadBalancerRequest.opcRetryToken,
      "if-match": detachLoadBalancerRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detachLoadBalancerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/detachLoadBalancer",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detachLoadBalancerRequest.detachLoadBalancerDetails,
        "DetachLoadBalancerDetails",
        model.DetachLoadBalancerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachLoadBalancerResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: model.InstancePool,
        type: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a [cluster network with instance pools](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingclusternetworks.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetClusterNetworkRequest
   * @return GetClusterNetworkResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetClusterNetwork.ts.html |here} to see how to use GetClusterNetwork API.
   */
  public async getClusterNetwork(
    getClusterNetworkRequest: requests.GetClusterNetworkRequest
  ): Promise<responses.GetClusterNetworkResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#getClusterNetwork.");
    const operationName = "getClusterNetwork";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ClusterNetwork/GetClusterNetwork";
    const pathParams = {
      "{clusterNetworkId}": getClusterNetworkRequest.clusterNetworkId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getClusterNetworkRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks/{clusterNetworkId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetClusterNetworkResponse>{},
        body: await response.json(),
        bodyKey: "clusterNetwork",
        bodyModel: model.ClusterNetwork,
        type: "model.ClusterNetwork",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified instance configuration
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetInstanceConfigurationRequest
   * @return GetInstanceConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstanceConfiguration.ts.html |here} to see how to use GetInstanceConfiguration API.
   */
  public async getInstanceConfiguration(
    getInstanceConfigurationRequest: requests.GetInstanceConfigurationRequest
  ): Promise<responses.GetInstanceConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#getInstanceConfiguration.");
    const operationName = "getInstanceConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConfiguration/GetInstanceConfiguration";
    const pathParams = {
      "{instanceConfigurationId}": getInstanceConfigurationRequest.instanceConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getInstanceConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations/{instanceConfigurationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstanceConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "instanceConfiguration",
        bodyModel: model.InstanceConfiguration,
        type: "model.InstanceConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified instance pool
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetInstancePoolRequest
   * @return GetInstancePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstancePool.ts.html |here} to see how to use GetInstancePool API.
   */
  public async getInstancePool(
    getInstancePoolRequest: requests.GetInstancePoolRequest
  ): Promise<responses.GetInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#getInstancePool.");
    const operationName = "getInstancePool";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePool/GetInstancePool";
    const pathParams = {
      "{instancePoolId}": getInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getInstancePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: model.InstancePool,
        type: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about an instance that belongs to an instance pool.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetInstancePoolInstanceRequest
   * @return GetInstancePoolInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstancePoolInstance.ts.html |here} to see how to use GetInstancePoolInstance API.
   */
  public async getInstancePoolInstance(
    getInstancePoolInstanceRequest: requests.GetInstancePoolInstanceRequest
  ): Promise<responses.GetInstancePoolInstanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#getInstancePoolInstance.");
    const operationName = "getInstancePoolInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePoolInstance/GetInstancePoolInstance";
    const pathParams = {
      "{instancePoolId}": getInstancePoolInstanceRequest.instancePoolId,
      "{instanceId}": getInstancePoolInstanceRequest.instanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getInstancePoolInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/instances/{instanceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstancePoolInstanceResponse>{},
        body: await response.json(),
        bodyKey: "instancePoolInstance",
        bodyModel: model.InstancePoolInstance,
        type: "model.InstancePoolInstance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a load balancer that is attached to the specified instance pool.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetInstancePoolLoadBalancerAttachmentRequest
   * @return GetInstancePoolLoadBalancerAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstancePoolLoadBalancerAttachment.ts.html |here} to see how to use GetInstancePoolLoadBalancerAttachment API.
   */
  public async getInstancePoolLoadBalancerAttachment(
    getInstancePoolLoadBalancerAttachmentRequest: requests.GetInstancePoolLoadBalancerAttachmentRequest
  ): Promise<responses.GetInstancePoolLoadBalancerAttachmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeManagementClient#getInstancePoolLoadBalancerAttachment."
      );
    const operationName = "getInstancePoolLoadBalancerAttachment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePoolLoadBalancerAttachment/GetInstancePoolLoadBalancerAttachment";
    const pathParams = {
      "{instancePoolId}": getInstancePoolLoadBalancerAttachmentRequest.instancePoolId,
      "{instancePoolLoadBalancerAttachmentId}":
        getInstancePoolLoadBalancerAttachmentRequest.instancePoolLoadBalancerAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getInstancePoolLoadBalancerAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/instancePools/{instancePoolId}/loadBalancerAttachments/{instancePoolLoadBalancerAttachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstancePoolLoadBalancerAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "instancePoolLoadBalancerAttachment",
        bodyModel: model.InstancePoolLoadBalancerAttachment,
        type: "model.InstancePoolLoadBalancerAttachment",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates an instance from an instance configuration.
* <p>
If the instance configuration does not include all of the parameters that are
* required to create an instance, such as the availability domain and subnet ID, you must
* provide these parameters when you create an instance from the instance configuration.
* For more information, see the {@link InstanceConfiguration}
* resource.
* <p>
To determine whether capacity is available for a specific shape before you create an instance,
* use the {@link #createComputeCapacityReport(CreateComputeCapacityReportRequest) createComputeCapacityReport}
* operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param LaunchInstanceConfigurationRequest
     * @return LaunchInstanceConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/LaunchInstanceConfiguration.ts.html |here} to see how to use LaunchInstanceConfiguration API.
     */
  public async launchInstanceConfiguration(
    launchInstanceConfigurationRequest: requests.LaunchInstanceConfigurationRequest
  ): Promise<responses.LaunchInstanceConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#launchInstanceConfiguration.");
    const operationName = "launchInstanceConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Instance/LaunchInstanceConfiguration";
    const pathParams = {
      "{instanceConfigurationId}": launchInstanceConfigurationRequest.instanceConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": launchInstanceConfigurationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      launchInstanceConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations/{instanceConfigurationId}/actions/launch",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        launchInstanceConfigurationRequest.instanceConfiguration,
        "InstanceConfigurationInstanceDetails",
        model.InstanceConfigurationInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.LaunchInstanceConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "instance",
        bodyModel: model.Instance,
        type: "model.Instance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the instances in a [cluster network with instance pools](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingclusternetworks.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListClusterNetworkInstancesRequest
   * @return ListClusterNetworkInstancesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListClusterNetworkInstances.ts.html |here} to see how to use ListClusterNetworkInstances API.
   */
  public async listClusterNetworkInstances(
    listClusterNetworkInstancesRequest: requests.ListClusterNetworkInstancesRequest
  ): Promise<responses.ListClusterNetworkInstancesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#listClusterNetworkInstances.");
    const operationName = "listClusterNetworkInstances";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ClusterNetwork/ListClusterNetworkInstances";
    const pathParams = {
      "{clusterNetworkId}": listClusterNetworkInstancesRequest.clusterNetworkId
    };

    const queryParams = {
      "compartmentId": listClusterNetworkInstancesRequest.compartmentId,
      "displayName": listClusterNetworkInstancesRequest.displayName,
      "limit": listClusterNetworkInstancesRequest.limit,
      "page": listClusterNetworkInstancesRequest.page,
      "sortBy": listClusterNetworkInstancesRequest.sortBy,
      "sortOrder": listClusterNetworkInstancesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listClusterNetworkInstancesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks/{clusterNetworkId}/instances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListClusterNetworkInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.InstanceSummary,
        type: "Array<model.InstanceSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listClusterNetworkInstancesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.InstanceSummary objects
   * contained in responses from the listClusterNetworkInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllClusterNetworkInstances(
    request: requests.ListClusterNetworkInstancesRequest
  ): AsyncIterableIterator<model.InstanceSummary> {
    return paginateRecords(request, req => this.listClusterNetworkInstances(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listClusterNetworkInstancesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listClusterNetworkInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllClusterNetworkInstancesResponses(
    request: requests.ListClusterNetworkInstancesRequest
  ): AsyncIterableIterator<responses.ListClusterNetworkInstancesResponse> {
    return paginateResponses(request, req => this.listClusterNetworkInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstanceSummary objects
   * contained in responses from the listClusterNetworkInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listClusterNetworkInstancesRecordIterator(
    request: requests.ListClusterNetworkInstancesRequest
  ): AsyncIterableIterator<model.InstanceSummary> {
    return paginateRecords(request, req => this.listClusterNetworkInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listClusterNetworkInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listClusterNetworkInstancesResponseIterator(
    request: requests.ListClusterNetworkInstancesRequest
  ): AsyncIterableIterator<responses.ListClusterNetworkInstancesResponse> {
    return paginateResponses(request, req => this.listClusterNetworkInstances(req));
  }

  /**
   * Lists the [cluster networks with instance pools](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingclusternetworks.htm)
   * in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListClusterNetworksRequest
   * @return ListClusterNetworksResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListClusterNetworks.ts.html |here} to see how to use ListClusterNetworks API.
   */
  public async listClusterNetworks(
    listClusterNetworksRequest: requests.ListClusterNetworksRequest
  ): Promise<responses.ListClusterNetworksResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#listClusterNetworks.");
    const operationName = "listClusterNetworks";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ClusterNetwork/ListClusterNetworks";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listClusterNetworksRequest.compartmentId,
      "displayName": listClusterNetworksRequest.displayName,
      "limit": listClusterNetworksRequest.limit,
      "page": listClusterNetworksRequest.page,
      "sortBy": listClusterNetworksRequest.sortBy,
      "sortOrder": listClusterNetworksRequest.sortOrder,
      "lifecycleState": listClusterNetworksRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listClusterNetworksRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListClusterNetworksResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ClusterNetworkSummary,
        type: "Array<model.ClusterNetworkSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listClusterNetworksRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ClusterNetworkSummary objects
   * contained in responses from the listClusterNetworks operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllClusterNetworks(
    request: requests.ListClusterNetworksRequest
  ): AsyncIterableIterator<model.ClusterNetworkSummary> {
    return paginateRecords(request, req => this.listClusterNetworks(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listClusterNetworksResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listClusterNetworks operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllClusterNetworksResponses(
    request: requests.ListClusterNetworksRequest
  ): AsyncIterableIterator<responses.ListClusterNetworksResponse> {
    return paginateResponses(request, req => this.listClusterNetworks(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ClusterNetworkSummary objects
   * contained in responses from the listClusterNetworks operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listClusterNetworksRecordIterator(
    request: requests.ListClusterNetworksRequest
  ): AsyncIterableIterator<model.ClusterNetworkSummary> {
    return paginateRecords(request, req => this.listClusterNetworks(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listClusterNetworks operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listClusterNetworksResponseIterator(
    request: requests.ListClusterNetworksRequest
  ): AsyncIterableIterator<responses.ListClusterNetworksResponse> {
    return paginateResponses(request, req => this.listClusterNetworks(req));
  }

  /**
   * Lists the instance configurations in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListInstanceConfigurationsRequest
   * @return ListInstanceConfigurationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstanceConfigurations.ts.html |here} to see how to use ListInstanceConfigurations API.
   */
  public async listInstanceConfigurations(
    listInstanceConfigurationsRequest: requests.ListInstanceConfigurationsRequest
  ): Promise<responses.ListInstanceConfigurationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#listInstanceConfigurations.");
    const operationName = "listInstanceConfigurations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConfigurationSummary/ListInstanceConfigurations";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listInstanceConfigurationsRequest.compartmentId,
      "limit": listInstanceConfigurationsRequest.limit,
      "page": listInstanceConfigurationsRequest.page,
      "sortBy": listInstanceConfigurationsRequest.sortBy,
      "sortOrder": listInstanceConfigurationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInstanceConfigurationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstanceConfigurationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.InstanceConfigurationSummary,
        type: "Array<model.InstanceConfigurationSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listInstanceConfigurationsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.InstanceConfigurationSummary objects
   * contained in responses from the listInstanceConfigurations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceConfigurations(
    request: requests.ListInstanceConfigurationsRequest
  ): AsyncIterableIterator<model.InstanceConfigurationSummary> {
    return paginateRecords(request, req => this.listInstanceConfigurations(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listInstanceConfigurationsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listInstanceConfigurations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceConfigurationsResponses(
    request: requests.ListInstanceConfigurationsRequest
  ): AsyncIterableIterator<responses.ListInstanceConfigurationsResponse> {
    return paginateResponses(request, req => this.listInstanceConfigurations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstanceConfigurationSummary objects
   * contained in responses from the listInstanceConfigurations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstanceConfigurationsRecordIterator(
    request: requests.ListInstanceConfigurationsRequest
  ): AsyncIterableIterator<model.InstanceConfigurationSummary> {
    return paginateRecords(request, req => this.listInstanceConfigurations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstanceConfigurations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstanceConfigurationsResponseIterator(
    request: requests.ListInstanceConfigurationsRequest
  ): AsyncIterableIterator<responses.ListInstanceConfigurationsResponse> {
    return paginateResponses(request, req => this.listInstanceConfigurations(req));
  }

  /**
   * List the instances in the specified instance pool.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListInstancePoolInstancesRequest
   * @return ListInstancePoolInstancesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstancePoolInstances.ts.html |here} to see how to use ListInstancePoolInstances API.
   */
  public async listInstancePoolInstances(
    listInstancePoolInstancesRequest: requests.ListInstancePoolInstancesRequest
  ): Promise<responses.ListInstancePoolInstancesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#listInstancePoolInstances.");
    const operationName = "listInstancePoolInstances";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceSummary/ListInstancePoolInstances";
    const pathParams = {
      "{instancePoolId}": listInstancePoolInstancesRequest.instancePoolId
    };

    const queryParams = {
      "compartmentId": listInstancePoolInstancesRequest.compartmentId,
      "displayName": listInstancePoolInstancesRequest.displayName,
      "limit": listInstancePoolInstancesRequest.limit,
      "page": listInstancePoolInstancesRequest.page,
      "sortBy": listInstancePoolInstancesRequest.sortBy,
      "sortOrder": listInstancePoolInstancesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInstancePoolInstancesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/instances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstancePoolInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.InstanceSummary,
        type: "Array<model.InstanceSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listInstancePoolInstancesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.InstanceSummary objects
   * contained in responses from the listInstancePoolInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstancePoolInstances(
    request: requests.ListInstancePoolInstancesRequest
  ): AsyncIterableIterator<model.InstanceSummary> {
    return paginateRecords(request, req => this.listInstancePoolInstances(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listInstancePoolInstancesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listInstancePoolInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstancePoolInstancesResponses(
    request: requests.ListInstancePoolInstancesRequest
  ): AsyncIterableIterator<responses.ListInstancePoolInstancesResponse> {
    return paginateResponses(request, req => this.listInstancePoolInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstanceSummary objects
   * contained in responses from the listInstancePoolInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstancePoolInstancesRecordIterator(
    request: requests.ListInstancePoolInstancesRequest
  ): AsyncIterableIterator<model.InstanceSummary> {
    return paginateRecords(request, req => this.listInstancePoolInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstancePoolInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstancePoolInstancesResponseIterator(
    request: requests.ListInstancePoolInstancesRequest
  ): AsyncIterableIterator<responses.ListInstancePoolInstancesResponse> {
    return paginateResponses(request, req => this.listInstancePoolInstances(req));
  }

  /**
   * Lists the instance pools in the specified compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListInstancePoolsRequest
   * @return ListInstancePoolsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstancePools.ts.html |here} to see how to use ListInstancePools API.
   */
  public async listInstancePools(
    listInstancePoolsRequest: requests.ListInstancePoolsRequest
  ): Promise<responses.ListInstancePoolsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#listInstancePools.");
    const operationName = "listInstancePools";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePoolSummary/ListInstancePools";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listInstancePoolsRequest.compartmentId,
      "displayName": listInstancePoolsRequest.displayName,
      "limit": listInstancePoolsRequest.limit,
      "page": listInstancePoolsRequest.page,
      "sortBy": listInstancePoolsRequest.sortBy,
      "sortOrder": listInstancePoolsRequest.sortOrder,
      "lifecycleState": listInstancePoolsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInstancePoolsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstancePoolsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.InstancePoolSummary,
        type: "Array<model.InstancePoolSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listInstancePoolsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.InstancePoolSummary objects
   * contained in responses from the listInstancePools operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstancePools(
    request: requests.ListInstancePoolsRequest
  ): AsyncIterableIterator<model.InstancePoolSummary> {
    return paginateRecords(request, req => this.listInstancePools(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listInstancePoolsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listInstancePools operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstancePoolsResponses(
    request: requests.ListInstancePoolsRequest
  ): AsyncIterableIterator<responses.ListInstancePoolsResponse> {
    return paginateResponses(request, req => this.listInstancePools(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstancePoolSummary objects
   * contained in responses from the listInstancePools operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstancePoolsRecordIterator(
    request: requests.ListInstancePoolsRequest
  ): AsyncIterableIterator<model.InstancePoolSummary> {
    return paginateRecords(request, req => this.listInstancePools(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstancePools operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInstancePoolsResponseIterator(
    request: requests.ListInstancePoolsRequest
  ): AsyncIterableIterator<responses.ListInstancePoolsResponse> {
    return paginateResponses(request, req => this.listInstancePools(req));
  }

  /**
   * Performs the reset (immediate power off and power on) action on the specified instance pool,
   * which performs the action on all the instances in the pool.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ResetInstancePoolRequest
   * @return ResetInstancePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ResetInstancePool.ts.html |here} to see how to use ResetInstancePool API.
   */
  public async resetInstancePool(
    resetInstancePoolRequest: requests.ResetInstancePoolRequest
  ): Promise<responses.ResetInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#resetInstancePool.");
    const operationName = "resetInstancePool";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePool/ResetInstancePool";
    const pathParams = {
      "{instancePoolId}": resetInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": resetInstancePoolRequest.opcRetryToken,
      "if-match": resetInstancePoolRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      resetInstancePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/reset",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ResetInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: model.InstancePool,
        type: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Performs the softreset (ACPI shutdown and power on) action on the specified instance pool,
* which performs the action on all the instances in the pool.
* <p>
Softreset gracefully reboots the instances by sending a shutdown command to the operating systems.
* After waiting 15 minutes for the OS to shut down, the instances are powered off and then powered back on.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SoftresetInstancePoolRequest
     * @return SoftresetInstancePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/SoftresetInstancePool.ts.html |here} to see how to use SoftresetInstancePool API.
     */
  public async softresetInstancePool(
    softresetInstancePoolRequest: requests.SoftresetInstancePoolRequest
  ): Promise<responses.SoftresetInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#softresetInstancePool.");
    const operationName = "softresetInstancePool";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePool/SoftresetInstancePool";
    const pathParams = {
      "{instancePoolId}": softresetInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": softresetInstancePoolRequest.opcRetryToken,
      "if-match": softresetInstancePoolRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      softresetInstancePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/softreset",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SoftresetInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: model.InstancePool,
        type: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Performs the softstop (ACPI shutdown and power on) action on the specified instance pool,
* which performs the action on all the instances in the pool.
* <p>
Softstop gracefully reboots the instances by sending a shutdown command to the operating systems.
* After waiting 15 minutes for the OS to shutdown, the instances are powered off and then powered back on.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SoftstopInstancePoolRequest
     * @return SoftstopInstancePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/SoftstopInstancePool.ts.html |here} to see how to use SoftstopInstancePool API.
     */
  public async softstopInstancePool(
    softstopInstancePoolRequest: requests.SoftstopInstancePoolRequest
  ): Promise<responses.SoftstopInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#softstopInstancePool.");
    const operationName = "softstopInstancePool";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePool/SoftstopInstancePool";
    const pathParams = {
      "{instancePoolId}": softstopInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": softstopInstancePoolRequest.opcRetryToken,
      "if-match": softstopInstancePoolRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      softstopInstancePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/softstop",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SoftstopInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: model.InstancePool,
        type: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Performs the start (power on) action on the specified instance pool,
   * which performs the action on all the instances in the pool.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StartInstancePoolRequest
   * @return StartInstancePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/StartInstancePool.ts.html |here} to see how to use StartInstancePool API.
   */
  public async startInstancePool(
    startInstancePoolRequest: requests.StartInstancePoolRequest
  ): Promise<responses.StartInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#startInstancePool.");
    const operationName = "startInstancePool";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePool/StartInstancePool";
    const pathParams = {
      "{instancePoolId}": startInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": startInstancePoolRequest.opcRetryToken,
      "if-match": startInstancePoolRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startInstancePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/start",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: model.InstancePool,
        type: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Performs the stop (immediate power off) action on the specified instance pool,
   * which performs the action on all the instances in the pool.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StopInstancePoolRequest
   * @return StopInstancePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/StopInstancePool.ts.html |here} to see how to use StopInstancePool API.
   */
  public async stopInstancePool(
    stopInstancePoolRequest: requests.StopInstancePoolRequest
  ): Promise<responses.StopInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#stopInstancePool.");
    const operationName = "stopInstancePool";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePool/StopInstancePool";
    const pathParams = {
      "{instancePoolId}": stopInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": stopInstancePoolRequest.opcRetryToken,
      "if-match": stopInstancePoolRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopInstancePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/stop",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: model.InstancePool,
        type: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes (terminates) a [cluster network with instance pools](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingclusternetworks.htm).
* <p>
When you delete a cluster network, all of its resources are permanently deleted,
* including associated instances and instance pools.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param TerminateClusterNetworkRequest
     * @return TerminateClusterNetworkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/TerminateClusterNetwork.ts.html |here} to see how to use TerminateClusterNetwork API.
     */
  public async terminateClusterNetwork(
    terminateClusterNetworkRequest: requests.TerminateClusterNetworkRequest
  ): Promise<responses.TerminateClusterNetworkResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#terminateClusterNetwork.");
    const operationName = "terminateClusterNetwork";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ClusterNetwork/TerminateClusterNetwork";
    const pathParams = {
      "{clusterNetworkId}": terminateClusterNetworkRequest.clusterNetworkId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": terminateClusterNetworkRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      terminateClusterNetworkRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks/{clusterNetworkId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.TerminateClusterNetworkResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Terminate the specified instance pool.
* <p>
**Warning:** When you delete an instance pool, the resources that were created by the pool are permanently
* deleted, including associated instances, attached boot volumes, and block volumes.
* <p>
If an autoscaling configuration applies to the instance pool, the autoscaling configuration will be deleted
* asynchronously after the pool is deleted. You can also manually delete the autoscaling configuration using
* the `DeleteAutoScalingConfiguration` operation in the Autoscaling API.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param TerminateInstancePoolRequest
     * @return TerminateInstancePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/TerminateInstancePool.ts.html |here} to see how to use TerminateInstancePool API.
     */
  public async terminateInstancePool(
    terminateInstancePoolRequest: requests.TerminateInstancePoolRequest
  ): Promise<responses.TerminateInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#terminateInstancePool.");
    const operationName = "terminateInstancePool";
    const apiReferenceLink = "";
    const pathParams = {
      "{instancePoolId}": terminateInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": terminateInstancePoolRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      terminateInstancePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.TerminateInstancePoolResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a [cluster network with instance pools](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingclusternetworks.htm).
   * The OCID of the cluster network remains the same.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateClusterNetworkRequest
   * @return UpdateClusterNetworkResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateClusterNetwork.ts.html |here} to see how to use UpdateClusterNetwork API.
   */
  public async updateClusterNetwork(
    updateClusterNetworkRequest: requests.UpdateClusterNetworkRequest
  ): Promise<responses.UpdateClusterNetworkResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#updateClusterNetwork.");
    const operationName = "updateClusterNetwork";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ClusterNetwork/UpdateClusterNetwork";
    const pathParams = {
      "{clusterNetworkId}": updateClusterNetworkRequest.clusterNetworkId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateClusterNetworkRequest.opcRetryToken,
      "if-match": updateClusterNetworkRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateClusterNetworkRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks/{clusterNetworkId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateClusterNetworkRequest.updateClusterNetworkDetails,
        "UpdateClusterNetworkDetails",
        model.UpdateClusterNetworkDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateClusterNetworkResponse>{},
        body: await response.json(),
        bodyKey: "clusterNetwork",
        bodyModel: model.ClusterNetwork,
        type: "model.ClusterNetwork",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the free-form tags, defined tags, and display name of an instance configuration.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateInstanceConfigurationRequest
   * @return UpdateInstanceConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateInstanceConfiguration.ts.html |here} to see how to use UpdateInstanceConfiguration API.
   */
  public async updateInstanceConfiguration(
    updateInstanceConfigurationRequest: requests.UpdateInstanceConfigurationRequest
  ): Promise<responses.UpdateInstanceConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#updateInstanceConfiguration.");
    const operationName = "updateInstanceConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConfiguration/UpdateInstanceConfiguration";
    const pathParams = {
      "{instanceConfigurationId}": updateInstanceConfigurationRequest.instanceConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateInstanceConfigurationRequest.opcRetryToken,
      "if-match": updateInstanceConfigurationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateInstanceConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations/{instanceConfigurationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateInstanceConfigurationRequest.updateInstanceConfigurationDetails,
        "UpdateInstanceConfigurationDetails",
        model.UpdateInstanceConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateInstanceConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "instanceConfiguration",
        bodyModel: model.InstanceConfiguration,
        type: "model.InstanceConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Update the specified instance pool.
* <p>
The OCID of the instance pool remains the same.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateInstancePoolRequest
     * @return UpdateInstancePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateInstancePool.ts.html |here} to see how to use UpdateInstancePool API.
     */
  public async updateInstancePool(
    updateInstancePoolRequest: requests.UpdateInstancePoolRequest
  ): Promise<responses.UpdateInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#updateInstancePool.");
    const operationName = "updateInstancePool";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InstancePool/UpdateInstancePool";
    const pathParams = {
      "{instancePoolId}": updateInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateInstancePoolRequest.opcRetryToken,
      "if-match": updateInstancePoolRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateInstancePoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateInstancePoolRequest.updateInstancePoolDetails,
        "UpdateInstancePoolDetails",
        model.UpdateInstancePoolDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: model.InstancePool,
        type: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum VirtualNetworkApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class VirtualNetworkClient {
  protected static serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": VirtualNetworkWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "VirtualNetwork";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("core")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("core");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20160918";
    if (this.logger) this.logger.info(`VirtualNetworkClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        VirtualNetworkClient.serviceEndpointTemplate,
        this._region,
        VirtualNetworkClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        VirtualNetworkClient.serviceEndpointTemplate,
        this._regionId,
        VirtualNetworkClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      VirtualNetworkClient.serviceEndpointTemplate,
      region,
      VirtualNetworkClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      VirtualNetworkClient.serviceEndpointTemplate,
      regionId,
      VirtualNetworkClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new VirtualNetworkWaiter for resources for this service.
   *
   * @param workRequestClient The work request service client used to query for work request status
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(
    workRequestClient: WorkRequestClient,
    config?: common.WaiterConfiguration
  ): VirtualNetworkWaiter {
    this._waiters = new VirtualNetworkWaiter(this, workRequestClient, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): VirtualNetworkWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Adds one or more route distribution statements to the specified route distribution.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddDrgRouteDistributionStatementsRequest
   * @return AddDrgRouteDistributionStatementsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AddDrgRouteDistributionStatements.ts.html |here} to see how to use AddDrgRouteDistributionStatements API.
   */
  public async addDrgRouteDistributionStatements(
    addDrgRouteDistributionStatementsRequest: requests.AddDrgRouteDistributionStatementsRequest
  ): Promise<responses.AddDrgRouteDistributionStatementsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#addDrgRouteDistributionStatements."
      );
    const operationName = "addDrgRouteDistributionStatements";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteDistributionStatement/AddDrgRouteDistributionStatements";
    const pathParams = {
      "{drgRouteDistributionId}": addDrgRouteDistributionStatementsRequest.drgRouteDistributionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addDrgRouteDistributionStatementsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/drgRouteDistributions/{drgRouteDistributionId}/actions/addDrgRouteDistributionStatements",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addDrgRouteDistributionStatementsRequest.addDrgRouteDistributionStatementsDetails,
        "AddDrgRouteDistributionStatementsDetails",
        model.AddDrgRouteDistributionStatementsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddDrgRouteDistributionStatementsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DrgRouteDistributionStatement,
        type: "Array<model.DrgRouteDistributionStatement>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds one or more static route rules to the specified DRG route table.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddDrgRouteRulesRequest
   * @return AddDrgRouteRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AddDrgRouteRules.ts.html |here} to see how to use AddDrgRouteRules API.
   */
  public async addDrgRouteRules(
    addDrgRouteRulesRequest: requests.AddDrgRouteRulesRequest
  ): Promise<responses.AddDrgRouteRulesResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#addDrgRouteRules.");
    const operationName = "addDrgRouteRules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteRule/AddDrgRouteRules";
    const pathParams = {
      "{drgRouteTableId}": addDrgRouteRulesRequest.drgRouteTableId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": addDrgRouteRulesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addDrgRouteRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteTables/{drgRouteTableId}/actions/addDrgRouteRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addDrgRouteRulesRequest.addDrgRouteRulesDetails,
        "AddDrgRouteRulesDetails",
        model.AddDrgRouteRulesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddDrgRouteRulesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DrgRouteRule,
        type: "Array<model.DrgRouteRule>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add an IPv6 prefix to a subnet.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddIpv6SubnetCidrRequest
   * @return AddIpv6SubnetCidrResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AddIpv6SubnetCidr.ts.html |here} to see how to use AddIpv6SubnetCidr API.
   */
  public async addIpv6SubnetCidr(
    addIpv6SubnetCidrRequest: requests.AddIpv6SubnetCidrRequest
  ): Promise<responses.AddIpv6SubnetCidrResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#addIpv6SubnetCidr.");
    const operationName = "addIpv6SubnetCidr";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Subnet/AddIpv6SubnetCidr";
    const pathParams = {
      "{subnetId}": addIpv6SubnetCidrRequest.subnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": addIpv6SubnetCidrRequest.opcRetryToken,
      "if-match": addIpv6SubnetCidrRequest.ifMatch,
      "opc-request-id": addIpv6SubnetCidrRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addIpv6SubnetCidrRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets/{subnetId}/actions/addIpv6Cidr",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addIpv6SubnetCidrRequest.addSubnetIpv6CidrDetails,
        "AddSubnetIpv6CidrDetails",
        model.AddSubnetIpv6CidrDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddIpv6SubnetCidrResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add an IPv6 prefix to a VCN. The VCN size is always /56 and assigned by Oracle.
   * Once added the IPv6 prefix cannot be removed or modified.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddIpv6VcnCidrRequest
   * @return AddIpv6VcnCidrResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AddIpv6VcnCidr.ts.html |here} to see how to use AddIpv6VcnCidr API.
   */
  public async addIpv6VcnCidr(
    addIpv6VcnCidrRequest: requests.AddIpv6VcnCidrRequest
  ): Promise<responses.AddIpv6VcnCidrResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#addIpv6VcnCidr.");
    const operationName = "addIpv6VcnCidr";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vcn/AddIpv6VcnCidr";
    const pathParams = {
      "{vcnId}": addIpv6VcnCidrRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addIpv6VcnCidrRequest.opcRequestId,
      "opc-retry-token": addIpv6VcnCidrRequest.opcRetryToken,
      "if-match": addIpv6VcnCidrRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addIpv6VcnCidrRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}/actions/addIpv6Cidr",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addIpv6VcnCidrRequest.addVcnIpv6CidrDetails,
        "AddVcnIpv6CidrDetails",
        model.AddVcnIpv6CidrDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddIpv6VcnCidrResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds one or more security rules to the specified network security group.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddNetworkSecurityGroupSecurityRulesRequest
   * @return AddNetworkSecurityGroupSecurityRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AddNetworkSecurityGroupSecurityRules.ts.html |here} to see how to use AddNetworkSecurityGroupSecurityRules API.
   */
  public async addNetworkSecurityGroupSecurityRules(
    addNetworkSecurityGroupSecurityRulesRequest: requests.AddNetworkSecurityGroupSecurityRulesRequest
  ): Promise<responses.AddNetworkSecurityGroupSecurityRulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#addNetworkSecurityGroupSecurityRules."
      );
    const operationName = "addNetworkSecurityGroupSecurityRules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/SecurityRule/AddNetworkSecurityGroupSecurityRules";
    const pathParams = {
      "{networkSecurityGroupId}": addNetworkSecurityGroupSecurityRulesRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addNetworkSecurityGroupSecurityRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}/actions/addSecurityRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addNetworkSecurityGroupSecurityRulesRequest.addNetworkSecurityGroupSecurityRulesDetails,
        "AddNetworkSecurityGroupSecurityRulesDetails",
        model.AddNetworkSecurityGroupSecurityRulesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddNetworkSecurityGroupSecurityRulesResponse>{},
        body: await response.json(),
        bodyKey: "addedNetworkSecurityGroupSecurityRules",
        bodyModel: model.AddedNetworkSecurityGroupSecurityRules,
        type: "model.AddedNetworkSecurityGroupSecurityRules",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Adds some or all of a CIDR block to a public IP pool.
* <p>
The CIDR block (or subrange) must not overlap with any other CIDR block already added to this or any other public IP pool.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddPublicIpPoolCapacityRequest
     * @return AddPublicIpPoolCapacityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AddPublicIpPoolCapacity.ts.html |here} to see how to use AddPublicIpPoolCapacity API.
     */
  public async addPublicIpPoolCapacity(
    addPublicIpPoolCapacityRequest: requests.AddPublicIpPoolCapacityRequest
  ): Promise<responses.AddPublicIpPoolCapacityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#addPublicIpPoolCapacity.");
    const operationName = "addPublicIpPoolCapacity";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIpPool/AddPublicIpPoolCapacity";
    const pathParams = {
      "{publicIpPoolId}": addPublicIpPoolCapacityRequest.publicIpPoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addPublicIpPoolCapacityRequest.opcRequestId,
      "opc-retry-token": addPublicIpPoolCapacityRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addPublicIpPoolCapacityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools/{publicIpPoolId}/actions/addCapacity",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addPublicIpPoolCapacityRequest.addPublicIpPoolCapacityDetails,
        "AddPublicIpPoolCapacityDetails",
        model.AddPublicIpPoolCapacityDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddPublicIpPoolCapacityResponse>{},
        body: await response.json(),
        bodyKey: "publicIpPool",
        bodyModel: model.PublicIpPool,
        type: "model.PublicIpPool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Adds a CIDR block to a VCN. The CIDR block you add:
* <p>
- Must be valid.
* - Must not overlap with another CIDR block in the VCN, a CIDR block of a peered VCN, or the on-premises network CIDR block.
* - Must not exceed the limit of CIDR blocks allowed per VCN.
* <p>
**Note:** Adding a CIDR block places your VCN in an updating state until the changes are complete. You cannot create or update the VCN's subnets, VLANs, LPGs, or route tables during this operation. The time to completion can take a few minutes. You can use the `GetWorkRequest` operation to check the status of the update.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddVcnCidrRequest
     * @return AddVcnCidrResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AddVcnCidr.ts.html |here} to see how to use AddVcnCidr API.
     */
  public async addVcnCidr(
    addVcnCidrRequest: requests.AddVcnCidrRequest
  ): Promise<responses.AddVcnCidrResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#addVcnCidr.");
    const operationName = "addVcnCidr";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vcn/AddVcnCidr";
    const pathParams = {
      "{vcnId}": addVcnCidrRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addVcnCidrRequest.opcRequestId,
      "opc-retry-token": addVcnCidrRequest.opcRetryToken,
      "if-match": addVcnCidrRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addVcnCidrRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}/actions/addCidr",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addVcnCidrRequest.addVcnCidrDetails,
        "AddVcnCidrDetails",
        model.AddVcnCidrDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddVcnCidrResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Begins BGP route advertisements for the BYOIP CIDR block you imported to the Oracle Cloud.
   * The `ByoipRange` resource must be in the PROVISIONED state before the BYOIP CIDR block routes can be advertised with BGP.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AdvertiseByoipRangeRequest
   * @return AdvertiseByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AdvertiseByoipRange.ts.html |here} to see how to use AdvertiseByoipRange API.
   */
  public async advertiseByoipRange(
    advertiseByoipRangeRequest: requests.AdvertiseByoipRangeRequest
  ): Promise<responses.AdvertiseByoipRangeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#advertiseByoipRange.");
    const operationName = "advertiseByoipRange";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ByoipRange/AdvertiseByoipRange";
    const pathParams = {
      "{byoipRangeId}": advertiseByoipRangeRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": advertiseByoipRangeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      advertiseByoipRangeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}/actions/advertise",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AdvertiseByoipRangeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds the specified {@link Service} to the list of enabled
   * `Service` objects for the specified gateway. You must also set up a route rule with the
   * `cidrBlock` of the `Service` as the rule's destination and the service gateway as the rule's
   * target. See {@link RouteTable}.
   * <p>
   **Note:** The `AttachServiceId` operation is an easy way to add an individual `Service` to
   * the service gateway. Compare it with
   * {@link #updateServiceGateway(UpdateServiceGatewayRequest) updateServiceGateway}, which replaces
   * the entire existing list of enabled `Service` objects with the list that you provide in the
   * `Update` call.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AttachServiceIdRequest
   * @return AttachServiceIdResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AttachServiceId.ts.html |here} to see how to use AttachServiceId API.
   */
  public async attachServiceId(
    attachServiceIdRequest: requests.AttachServiceIdRequest
  ): Promise<responses.AttachServiceIdResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#attachServiceId.");
    const operationName = "attachServiceId";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ServiceGateway/AttachServiceId";
    const pathParams = {
      "{serviceGatewayId}": attachServiceIdRequest.serviceGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": attachServiceIdRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      attachServiceIdRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways/{serviceGatewayId}/actions/attachService",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachServiceIdRequest.attachServiceDetails,
        "ServiceIdRequestDetails",
        model.ServiceIdRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachServiceIdResponse>{},
        body: await response.json(),
        bodyKey: "serviceGateway",
        bodyModel: model.ServiceGateway,
        type: "model.ServiceGateway",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds one or more customer public IP prefixes to the specified public virtual circuit.
   * Use this operation (and not {@link #updateVirtualCircuit(UpdateVirtualCircuitRequest) updateVirtualCircuit})
   * to add prefixes to the virtual circuit. Oracle must verify the customer's ownership
   * of each prefix before traffic for that prefix will flow across the virtual circuit.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkAddVirtualCircuitPublicPrefixesRequest
   * @return BulkAddVirtualCircuitPublicPrefixesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/BulkAddVirtualCircuitPublicPrefixes.ts.html |here} to see how to use BulkAddVirtualCircuitPublicPrefixes API.
   */
  public async bulkAddVirtualCircuitPublicPrefixes(
    bulkAddVirtualCircuitPublicPrefixesRequest: requests.BulkAddVirtualCircuitPublicPrefixesRequest
  ): Promise<responses.BulkAddVirtualCircuitPublicPrefixesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#bulkAddVirtualCircuitPublicPrefixes."
      );
    const operationName = "bulkAddVirtualCircuitPublicPrefixes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VirtualCircuitPublicPrefix/BulkAddVirtualCircuitPublicPrefixes";
    const pathParams = {
      "{virtualCircuitId}": bulkAddVirtualCircuitPublicPrefixesRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkAddVirtualCircuitPublicPrefixesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}/actions/bulkAddPublicPrefixes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkAddVirtualCircuitPublicPrefixesRequest.bulkAddVirtualCircuitPublicPrefixesDetails,
        "BulkAddVirtualCircuitPublicPrefixesDetails",
        model.BulkAddVirtualCircuitPublicPrefixesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkAddVirtualCircuitPublicPrefixesResponse>{},
        responseHeaders: []
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes one or more customer public IP prefixes from the specified public virtual circuit.
   * Use this operation (and not {@link #updateVirtualCircuit(UpdateVirtualCircuitRequest) updateVirtualCircuit})
   * to remove prefixes from the virtual circuit. When the virtual circuit's state switches
   * back to PROVISIONED, Oracle stops advertising the specified prefixes across the connection.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkDeleteVirtualCircuitPublicPrefixesRequest
   * @return BulkDeleteVirtualCircuitPublicPrefixesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/BulkDeleteVirtualCircuitPublicPrefixes.ts.html |here} to see how to use BulkDeleteVirtualCircuitPublicPrefixes API.
   */
  public async bulkDeleteVirtualCircuitPublicPrefixes(
    bulkDeleteVirtualCircuitPublicPrefixesRequest: requests.BulkDeleteVirtualCircuitPublicPrefixesRequest
  ): Promise<responses.BulkDeleteVirtualCircuitPublicPrefixesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#bulkDeleteVirtualCircuitPublicPrefixes."
      );
    const operationName = "bulkDeleteVirtualCircuitPublicPrefixes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VirtualCircuitPublicPrefix/BulkDeleteVirtualCircuitPublicPrefixes";
    const pathParams = {
      "{virtualCircuitId}": bulkDeleteVirtualCircuitPublicPrefixesRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkDeleteVirtualCircuitPublicPrefixesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}/actions/bulkDeletePublicPrefixes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkDeleteVirtualCircuitPublicPrefixesRequest.bulkDeleteVirtualCircuitPublicPrefixesDetails,
        "BulkDeleteVirtualCircuitPublicPrefixesDetails",
        model.BulkDeleteVirtualCircuitPublicPrefixesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkDeleteVirtualCircuitPublicPrefixesResponse>{},
        responseHeaders: []
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a BYOIP CIDR block to a different compartment. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeByoipRangeCompartmentRequest
   * @return ChangeByoipRangeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeByoipRangeCompartment.ts.html |here} to see how to use ChangeByoipRangeCompartment API.
   */
  public async changeByoipRangeCompartment(
    changeByoipRangeCompartmentRequest: requests.ChangeByoipRangeCompartmentRequest
  ): Promise<responses.ChangeByoipRangeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeByoipRangeCompartment.");
    const operationName = "changeByoipRangeCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ByoipRange/ChangeByoipRangeCompartment";
    const pathParams = {
      "{byoipRangeId}": changeByoipRangeCompartmentRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeByoipRangeCompartmentRequest.opcRequestId,
      "opc-retry-token": changeByoipRangeCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeByoipRangeCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeByoipRangeCompartmentRequest.changeByoipRangeCompartmentDetails,
        "ChangeByoipRangeCompartmentDetails",
        model.ChangeByoipRangeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeByoipRangeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a capture filter to a new compartment in the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeCaptureFilterCompartmentRequest
   * @return ChangeCaptureFilterCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeCaptureFilterCompartment.ts.html |here} to see how to use ChangeCaptureFilterCompartment API.
   */
  public async changeCaptureFilterCompartment(
    changeCaptureFilterCompartmentRequest: requests.ChangeCaptureFilterCompartmentRequest
  ): Promise<responses.ChangeCaptureFilterCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeCaptureFilterCompartment.");
    const operationName = "changeCaptureFilterCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CaptureFilter/ChangeCaptureFilterCompartment";
    const pathParams = {
      "{captureFilterId}": changeCaptureFilterCompartmentRequest.captureFilterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeCaptureFilterCompartmentRequest.ifMatch,
      "opc-request-id": changeCaptureFilterCompartmentRequest.opcRequestId,
      "opc-retry-token": changeCaptureFilterCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeCaptureFilterCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/captureFilters/{captureFilterId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeCaptureFilterCompartmentRequest.changeCaptureFilterCompartmentDetails,
        "ChangeCaptureFilterCompartmentDetails",
        model.ChangeCaptureFilterCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeCaptureFilterCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a CPE object into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeCpeCompartmentRequest
   * @return ChangeCpeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeCpeCompartment.ts.html |here} to see how to use ChangeCpeCompartment API.
   */
  public async changeCpeCompartment(
    changeCpeCompartmentRequest: requests.ChangeCpeCompartmentRequest
  ): Promise<responses.ChangeCpeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeCpeCompartment.");
    const operationName = "changeCpeCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Cpe/ChangeCpeCompartment";
    const pathParams = {
      "{cpeId}": changeCpeCompartmentRequest.cpeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeCpeCompartmentRequest.opcRequestId,
      "opc-retry-token": changeCpeCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeCpeCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes/{cpeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeCpeCompartmentRequest.changeCpeCompartmentDetails,
        "ChangeCpeCompartmentDetails",
        model.ChangeCpeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeCpeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a cross-connect into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeCrossConnectCompartmentRequest
   * @return ChangeCrossConnectCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeCrossConnectCompartment.ts.html |here} to see how to use ChangeCrossConnectCompartment API.
   */
  public async changeCrossConnectCompartment(
    changeCrossConnectCompartmentRequest: requests.ChangeCrossConnectCompartmentRequest
  ): Promise<responses.ChangeCrossConnectCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeCrossConnectCompartment.");
    const operationName = "changeCrossConnectCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnect/ChangeCrossConnectCompartment";
    const pathParams = {
      "{crossConnectId}": changeCrossConnectCompartmentRequest.crossConnectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeCrossConnectCompartmentRequest.opcRequestId,
      "opc-retry-token": changeCrossConnectCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeCrossConnectCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects/{crossConnectId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeCrossConnectCompartmentRequest.changeCrossConnectCompartmentDetails,
        "ChangeCrossConnectCompartmentDetails",
        model.ChangeCrossConnectCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeCrossConnectCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a cross-connect group into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeCrossConnectGroupCompartmentRequest
   * @return ChangeCrossConnectGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeCrossConnectGroupCompartment.ts.html |here} to see how to use ChangeCrossConnectGroupCompartment API.
   */
  public async changeCrossConnectGroupCompartment(
    changeCrossConnectGroupCompartmentRequest: requests.ChangeCrossConnectGroupCompartmentRequest
  ): Promise<responses.ChangeCrossConnectGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#changeCrossConnectGroupCompartment."
      );
    const operationName = "changeCrossConnectGroupCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectGroup/ChangeCrossConnectGroupCompartment";
    const pathParams = {
      "{crossConnectGroupId}": changeCrossConnectGroupCompartmentRequest.crossConnectGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeCrossConnectGroupCompartmentRequest.opcRequestId,
      "opc-retry-token": changeCrossConnectGroupCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeCrossConnectGroupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectGroups/{crossConnectGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeCrossConnectGroupCompartmentRequest.changeCrossConnectGroupCompartmentDetails,
        "ChangeCrossConnectGroupCompartmentDetails",
        model.ChangeCrossConnectGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeCrossConnectGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a set of DHCP options into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeDhcpOptionsCompartmentRequest
   * @return ChangeDhcpOptionsCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeDhcpOptionsCompartment.ts.html |here} to see how to use ChangeDhcpOptionsCompartment API.
   */
  public async changeDhcpOptionsCompartment(
    changeDhcpOptionsCompartmentRequest: requests.ChangeDhcpOptionsCompartmentRequest
  ): Promise<responses.ChangeDhcpOptionsCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeDhcpOptionsCompartment.");
    const operationName = "changeDhcpOptionsCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DhcpOptions/ChangeDhcpOptionsCompartment";
    const pathParams = {
      "{dhcpId}": changeDhcpOptionsCompartmentRequest.dhcpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDhcpOptionsCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDhcpOptionsCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDhcpOptionsCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dhcps/{dhcpId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDhcpOptionsCompartmentRequest.changeDhcpOptionsCompartmentDetails,
        "ChangeDhcpOptionsCompartmentDetails",
        model.ChangeDhcpOptionsCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDhcpOptionsCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a DRG into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeDrgCompartmentRequest
   * @return ChangeDrgCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeDrgCompartment.ts.html |here} to see how to use ChangeDrgCompartment API.
   */
  public async changeDrgCompartment(
    changeDrgCompartmentRequest: requests.ChangeDrgCompartmentRequest
  ): Promise<responses.ChangeDrgCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeDrgCompartment.");
    const operationName = "changeDrgCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Drg/ChangeDrgCompartment";
    const pathParams = {
      "{drgId}": changeDrgCompartmentRequest.drgId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDrgCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDrgCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDrgCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDrgCompartmentRequest.changeDrgCompartmentDetails,
        "ChangeDrgCompartmentDetails",
        model.ChangeDrgCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDrgCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves an IPSec connection into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeIPSecConnectionCompartmentRequest
   * @return ChangeIPSecConnectionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeIPSecConnectionCompartment.ts.html |here} to see how to use ChangeIPSecConnectionCompartment API.
   */
  public async changeIPSecConnectionCompartment(
    changeIPSecConnectionCompartmentRequest: requests.ChangeIPSecConnectionCompartmentRequest
  ): Promise<responses.ChangeIPSecConnectionCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeIPSecConnectionCompartment.");
    const operationName = "changeIPSecConnectionCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnection/ChangeIPSecConnectionCompartment";
    const pathParams = {
      "{ipscId}": changeIPSecConnectionCompartmentRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeIPSecConnectionCompartmentRequest.opcRequestId,
      "opc-retry-token": changeIPSecConnectionCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeIPSecConnectionCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeIPSecConnectionCompartmentRequest.changeIPSecConnectionCompartmentDetails,
        "ChangeIPSecConnectionCompartmentDetails",
        model.ChangeIPSecConnectionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeIPSecConnectionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves an internet gateway into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeInternetGatewayCompartmentRequest
   * @return ChangeInternetGatewayCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeInternetGatewayCompartment.ts.html |here} to see how to use ChangeInternetGatewayCompartment API.
   */
  public async changeInternetGatewayCompartment(
    changeInternetGatewayCompartmentRequest: requests.ChangeInternetGatewayCompartmentRequest
  ): Promise<responses.ChangeInternetGatewayCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeInternetGatewayCompartment.");
    const operationName = "changeInternetGatewayCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InternetGateway/ChangeInternetGatewayCompartment";
    const pathParams = {
      "{igId}": changeInternetGatewayCompartmentRequest.igId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeInternetGatewayCompartmentRequest.opcRequestId,
      "opc-retry-token": changeInternetGatewayCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeInternetGatewayCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internetGateways/{igId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeInternetGatewayCompartmentRequest.changeInternetGatewayCompartmentDetails,
        "ChangeInternetGatewayCompartmentDetails",
        model.ChangeInternetGatewayCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeInternetGatewayCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a local peering gateway into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeLocalPeeringGatewayCompartmentRequest
   * @return ChangeLocalPeeringGatewayCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeLocalPeeringGatewayCompartment.ts.html |here} to see how to use ChangeLocalPeeringGatewayCompartment API.
   */
  public async changeLocalPeeringGatewayCompartment(
    changeLocalPeeringGatewayCompartmentRequest: requests.ChangeLocalPeeringGatewayCompartmentRequest
  ): Promise<responses.ChangeLocalPeeringGatewayCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#changeLocalPeeringGatewayCompartment."
      );
    const operationName = "changeLocalPeeringGatewayCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/LocalPeeringGateway/ChangeLocalPeeringGatewayCompartment";
    const pathParams = {
      "{localPeeringGatewayId}": changeLocalPeeringGatewayCompartmentRequest.localPeeringGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeLocalPeeringGatewayCompartmentRequest.opcRequestId,
      "opc-retry-token": changeLocalPeeringGatewayCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeLocalPeeringGatewayCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways/{localPeeringGatewayId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeLocalPeeringGatewayCompartmentRequest.changeLocalPeeringGatewayCompartmentDetails,
        "ChangeLocalPeeringGatewayCompartmentDetails",
        model.ChangeLocalPeeringGatewayCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeLocalPeeringGatewayCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a NAT gateway into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeNatGatewayCompartmentRequest
   * @return ChangeNatGatewayCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeNatGatewayCompartment.ts.html |here} to see how to use ChangeNatGatewayCompartment API.
   */
  public async changeNatGatewayCompartment(
    changeNatGatewayCompartmentRequest: requests.ChangeNatGatewayCompartmentRequest
  ): Promise<responses.ChangeNatGatewayCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeNatGatewayCompartment.");
    const operationName = "changeNatGatewayCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NatGateway/ChangeNatGatewayCompartment";
    const pathParams = {
      "{natGatewayId}": changeNatGatewayCompartmentRequest.natGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeNatGatewayCompartmentRequest.opcRequestId,
      "opc-retry-token": changeNatGatewayCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeNatGatewayCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/natGateways/{natGatewayId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeNatGatewayCompartmentRequest.changeNatGatewayCompartmentDetails,
        "ChangeNatGatewayCompartmentDetails",
        model.ChangeNatGatewayCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeNatGatewayCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a network security group into a different compartment within the same tenancy. For
   * information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeNetworkSecurityGroupCompartmentRequest
   * @return ChangeNetworkSecurityGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeNetworkSecurityGroupCompartment.ts.html |here} to see how to use ChangeNetworkSecurityGroupCompartment API.
   */
  public async changeNetworkSecurityGroupCompartment(
    changeNetworkSecurityGroupCompartmentRequest: requests.ChangeNetworkSecurityGroupCompartmentRequest
  ): Promise<responses.ChangeNetworkSecurityGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#changeNetworkSecurityGroupCompartment."
      );
    const operationName = "changeNetworkSecurityGroupCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NetworkSecurityGroup/ChangeNetworkSecurityGroupCompartment";
    const pathParams = {
      "{networkSecurityGroupId}":
        changeNetworkSecurityGroupCompartmentRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeNetworkSecurityGroupCompartmentRequest.opcRequestId,
      "opc-retry-token": changeNetworkSecurityGroupCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeNetworkSecurityGroupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeNetworkSecurityGroupCompartmentRequest.changeNetworkSecurityGroupCompartmentDetails,
        "ChangeNetworkSecurityGroupCompartmentDetails",
        model.ChangeNetworkSecurityGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeNetworkSecurityGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves a public IP into a different compartment within the same tenancy. For information
* about moving resources between compartments, see
* [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* <p>
This operation applies only to reserved public IPs. Ephemeral public IPs always belong to the
* same compartment as their VNIC and move accordingly.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangePublicIpCompartmentRequest
     * @return ChangePublicIpCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangePublicIpCompartment.ts.html |here} to see how to use ChangePublicIpCompartment API.
     */
  public async changePublicIpCompartment(
    changePublicIpCompartmentRequest: requests.ChangePublicIpCompartmentRequest
  ): Promise<responses.ChangePublicIpCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changePublicIpCompartment.");
    const operationName = "changePublicIpCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIp/ChangePublicIpCompartment";
    const pathParams = {
      "{publicIpId}": changePublicIpCompartmentRequest.publicIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changePublicIpCompartmentRequest.opcRequestId,
      "opc-retry-token": changePublicIpCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changePublicIpCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps/{publicIpId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changePublicIpCompartmentRequest.changePublicIpCompartmentDetails,
        "ChangePublicIpCompartmentDetails",
        model.ChangePublicIpCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangePublicIpCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a public IP pool to a different compartment. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangePublicIpPoolCompartmentRequest
   * @return ChangePublicIpPoolCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangePublicIpPoolCompartment.ts.html |here} to see how to use ChangePublicIpPoolCompartment API.
   */
  public async changePublicIpPoolCompartment(
    changePublicIpPoolCompartmentRequest: requests.ChangePublicIpPoolCompartmentRequest
  ): Promise<responses.ChangePublicIpPoolCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changePublicIpPoolCompartment.");
    const operationName = "changePublicIpPoolCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIpPool/ChangePublicIpPoolCompartment";
    const pathParams = {
      "{publicIpPoolId}": changePublicIpPoolCompartmentRequest.publicIpPoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changePublicIpPoolCompartmentRequest.opcRequestId,
      "opc-retry-token": changePublicIpPoolCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changePublicIpPoolCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools/{publicIpPoolId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changePublicIpPoolCompartmentRequest.changePublicIpPoolCompartmentDetails,
        "ChangePublicIpPoolCompartmentDetails",
        model.ChangePublicIpPoolCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangePublicIpPoolCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a remote peering connection (RPC) into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeRemotePeeringConnectionCompartmentRequest
   * @return ChangeRemotePeeringConnectionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeRemotePeeringConnectionCompartment.ts.html |here} to see how to use ChangeRemotePeeringConnectionCompartment API.
   */
  public async changeRemotePeeringConnectionCompartment(
    changeRemotePeeringConnectionCompartmentRequest: requests.ChangeRemotePeeringConnectionCompartmentRequest
  ): Promise<responses.ChangeRemotePeeringConnectionCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#changeRemotePeeringConnectionCompartment."
      );
    const operationName = "changeRemotePeeringConnectionCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/RemotePeeringConnection/ChangeRemotePeeringConnectionCompartment";
    const pathParams = {
      "{remotePeeringConnectionId}":
        changeRemotePeeringConnectionCompartmentRequest.remotePeeringConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeRemotePeeringConnectionCompartmentRequest.opcRequestId,
      "opc-retry-token": changeRemotePeeringConnectionCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeRemotePeeringConnectionCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections/{remotePeeringConnectionId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeRemotePeeringConnectionCompartmentRequest.changeRemotePeeringConnectionCompartmentDetails,
        "ChangeRemotePeeringConnectionCompartmentDetails",
        model.ChangeRemotePeeringConnectionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeRemotePeeringConnectionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a route table into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeRouteTableCompartmentRequest
   * @return ChangeRouteTableCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeRouteTableCompartment.ts.html |here} to see how to use ChangeRouteTableCompartment API.
   */
  public async changeRouteTableCompartment(
    changeRouteTableCompartmentRequest: requests.ChangeRouteTableCompartmentRequest
  ): Promise<responses.ChangeRouteTableCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeRouteTableCompartment.");
    const operationName = "changeRouteTableCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/RouteTable/ChangeRouteTableCompartment";
    const pathParams = {
      "{rtId}": changeRouteTableCompartmentRequest.rtId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeRouteTableCompartmentRequest.opcRequestId,
      "opc-retry-token": changeRouteTableCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeRouteTableCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/routeTables/{rtId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeRouteTableCompartmentRequest.changeRouteTableCompartmentDetails,
        "ChangeRouteTableCompartmentDetails",
        model.ChangeRouteTableCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeRouteTableCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a security list into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeSecurityListCompartmentRequest
   * @return ChangeSecurityListCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeSecurityListCompartment.ts.html |here} to see how to use ChangeSecurityListCompartment API.
   */
  public async changeSecurityListCompartment(
    changeSecurityListCompartmentRequest: requests.ChangeSecurityListCompartmentRequest
  ): Promise<responses.ChangeSecurityListCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeSecurityListCompartment.");
    const operationName = "changeSecurityListCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/SecurityList/ChangeSecurityListCompartment";
    const pathParams = {
      "{securityListId}": changeSecurityListCompartmentRequest.securityListId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeSecurityListCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSecurityListCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSecurityListCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityLists/{securityListId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSecurityListCompartmentRequest.changeSecurityListCompartmentDetails,
        "ChangeSecurityListCompartmentDetails",
        model.ChangeSecurityListCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSecurityListCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a service gateway into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeServiceGatewayCompartmentRequest
   * @return ChangeServiceGatewayCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeServiceGatewayCompartment.ts.html |here} to see how to use ChangeServiceGatewayCompartment API.
   */
  public async changeServiceGatewayCompartment(
    changeServiceGatewayCompartmentRequest: requests.ChangeServiceGatewayCompartmentRequest
  ): Promise<responses.ChangeServiceGatewayCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeServiceGatewayCompartment.");
    const operationName = "changeServiceGatewayCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ServiceGateway/ChangeServiceGatewayCompartment";
    const pathParams = {
      "{serviceGatewayId}": changeServiceGatewayCompartmentRequest.serviceGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeServiceGatewayCompartmentRequest.opcRequestId,
      "opc-retry-token": changeServiceGatewayCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeServiceGatewayCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways/{serviceGatewayId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeServiceGatewayCompartmentRequest.changeServiceGatewayCompartmentDetails,
        "ChangeServiceGatewayCompartmentDetails",
        model.ChangeServiceGatewayCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeServiceGatewayCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a subnet into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeSubnetCompartmentRequest
   * @return ChangeSubnetCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeSubnetCompartment.ts.html |here} to see how to use ChangeSubnetCompartment API.
   */
  public async changeSubnetCompartment(
    changeSubnetCompartmentRequest: requests.ChangeSubnetCompartmentRequest
  ): Promise<responses.ChangeSubnetCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeSubnetCompartment.");
    const operationName = "changeSubnetCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Subnet/ChangeSubnetCompartment";
    const pathParams = {
      "{subnetId}": changeSubnetCompartmentRequest.subnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeSubnetCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSubnetCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSubnetCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets/{subnetId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSubnetCompartmentRequest.changeSubnetCompartmentDetails,
        "ChangeSubnetCompartmentDetails",
        model.ChangeSubnetCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSubnetCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a VCN into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeVcnCompartmentRequest
   * @return ChangeVcnCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVcnCompartment.ts.html |here} to see how to use ChangeVcnCompartment API.
   */
  public async changeVcnCompartment(
    changeVcnCompartmentRequest: requests.ChangeVcnCompartmentRequest
  ): Promise<responses.ChangeVcnCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeVcnCompartment.");
    const operationName = "changeVcnCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vcn/ChangeVcnCompartment";
    const pathParams = {
      "{vcnId}": changeVcnCompartmentRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeVcnCompartmentRequest.opcRequestId,
      "opc-retry-token": changeVcnCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeVcnCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVcnCompartmentRequest.changeVcnCompartmentDetails,
        "ChangeVcnCompartmentDetails",
        model.ChangeVcnCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVcnCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a virtual circuit into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeVirtualCircuitCompartmentRequest
   * @return ChangeVirtualCircuitCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVirtualCircuitCompartment.ts.html |here} to see how to use ChangeVirtualCircuitCompartment API.
   */
  public async changeVirtualCircuitCompartment(
    changeVirtualCircuitCompartmentRequest: requests.ChangeVirtualCircuitCompartmentRequest
  ): Promise<responses.ChangeVirtualCircuitCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeVirtualCircuitCompartment.");
    const operationName = "changeVirtualCircuitCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VirtualCircuit/ChangeVirtualCircuitCompartment";
    const pathParams = {
      "{virtualCircuitId}": changeVirtualCircuitCompartmentRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeVirtualCircuitCompartmentRequest.opcRequestId,
      "opc-retry-token": changeVirtualCircuitCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeVirtualCircuitCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVirtualCircuitCompartmentRequest.changeVirtualCircuitCompartmentDetails,
        "ChangeVirtualCircuitCompartmentDetails",
        model.ChangeVirtualCircuitCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVirtualCircuitCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a VLAN into a different compartment within the same tenancy.
   * For information about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeVlanCompartmentRequest
   * @return ChangeVlanCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVlanCompartment.ts.html |here} to see how to use ChangeVlanCompartment API.
   */
  public async changeVlanCompartment(
    changeVlanCompartmentRequest: requests.ChangeVlanCompartmentRequest
  ): Promise<responses.ChangeVlanCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeVlanCompartment.");
    const operationName = "changeVlanCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vlan/ChangeVlanCompartment";
    const pathParams = {
      "{vlanId}": changeVlanCompartmentRequest.vlanId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeVlanCompartmentRequest.ifMatch,
      "opc-request-id": changeVlanCompartmentRequest.opcRequestId,
      "opc-retry-token": changeVlanCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeVlanCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vlans/{vlanId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVlanCompartmentRequest.changeVlanCompartmentDetails,
        "ChangeVlanCompartmentDetails",
        model.ChangeVlanCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVlanCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a VTAP to a new compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeVtapCompartmentRequest
   * @return ChangeVtapCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVtapCompartment.ts.html |here} to see how to use ChangeVtapCompartment API.
   */
  public async changeVtapCompartment(
    changeVtapCompartmentRequest: requests.ChangeVtapCompartmentRequest
  ): Promise<responses.ChangeVtapCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeVtapCompartment.");
    const operationName = "changeVtapCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vtap/ChangeVtapCompartment";
    const pathParams = {
      "{vtapId}": changeVtapCompartmentRequest.vtapId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeVtapCompartmentRequest.ifMatch,
      "opc-request-id": changeVtapCompartmentRequest.opcRequestId,
      "opc-retry-token": changeVtapCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeVtapCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vtaps/{vtapId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVtapCompartmentRequest.changeVtapCompartmentDetails,
        "ChangeVtapCompartmentDetails",
        model.ChangeVtapCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVtapCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Connects this local peering gateway (LPG) to another one in the same region.
* <p>
This operation must be called by the VCN administrator who is designated as
* the *requestor* in the peering relationship. The *acceptor* must implement
* an Identity and Access Management (IAM) policy that gives the requestor permission
* to connect to LPGs in the acceptor's compartment. Without that permission, this
* operation will fail. For more information, see
* [VCN Peering](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/VCNpeering.htm).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ConnectLocalPeeringGatewaysRequest
     * @return ConnectLocalPeeringGatewaysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ConnectLocalPeeringGateways.ts.html |here} to see how to use ConnectLocalPeeringGateways API.
     */
  public async connectLocalPeeringGateways(
    connectLocalPeeringGatewaysRequest: requests.ConnectLocalPeeringGatewaysRequest
  ): Promise<responses.ConnectLocalPeeringGatewaysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#connectLocalPeeringGateways.");
    const operationName = "connectLocalPeeringGateways";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/LocalPeeringGateway/ConnectLocalPeeringGateways";
    const pathParams = {
      "{localPeeringGatewayId}": connectLocalPeeringGatewaysRequest.localPeeringGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      connectLocalPeeringGatewaysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways/{localPeeringGatewayId}/actions/connect",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        connectLocalPeeringGatewaysRequest.connectLocalPeeringGatewaysDetails,
        "ConnectLocalPeeringGatewaysDetails",
        model.ConnectLocalPeeringGatewaysDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ConnectLocalPeeringGatewaysResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Connects this RPC to another one in a different region.
* <p>
This operation must be called by the VCN administrator who is designated as
* the *requestor* in the peering relationship. The *acceptor* must implement
* an Identity and Access Management (IAM) policy that gives the requestor permission
* to connect to RPCs in the acceptor's compartment. Without that permission, this
* operation will fail. For more information, see
* [VCN Peering](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/VCNpeering.htm).
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ConnectRemotePeeringConnectionsRequest
     * @return ConnectRemotePeeringConnectionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ConnectRemotePeeringConnections.ts.html |here} to see how to use ConnectRemotePeeringConnections API.
     */
  public async connectRemotePeeringConnections(
    connectRemotePeeringConnectionsRequest: requests.ConnectRemotePeeringConnectionsRequest
  ): Promise<responses.ConnectRemotePeeringConnectionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#connectRemotePeeringConnections.");
    const operationName = "connectRemotePeeringConnections";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/RemotePeeringConnection/ConnectRemotePeeringConnections";
    const pathParams = {
      "{remotePeeringConnectionId}":
        connectRemotePeeringConnectionsRequest.remotePeeringConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      connectRemotePeeringConnectionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections/{remotePeeringConnectionId}/actions/connect",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        connectRemotePeeringConnectionsRequest.connectRemotePeeringConnectionsDetails,
        "ConnectRemotePeeringConnectionsDetails",
        model.ConnectRemotePeeringConnectionsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ConnectRemotePeeringConnectionsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a subrange of the BYOIP CIDR block.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateByoipRangeRequest
   * @return CreateByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateByoipRange.ts.html |here} to see how to use CreateByoipRange API.
   */
  public async createByoipRange(
    createByoipRangeRequest: requests.CreateByoipRangeRequest
  ): Promise<responses.CreateByoipRangeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createByoipRange.");
    const operationName = "createByoipRange";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ByoipRange/CreateByoipRange";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createByoipRangeRequest.opcRequestId,
      "opc-retry-token": createByoipRangeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createByoipRangeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createByoipRangeRequest.createByoipRangeDetails,
        "CreateByoipRangeDetails",
        model.CreateByoipRangeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateByoipRangeResponse>{},
        body: await response.json(),
        bodyKey: "byoipRange",
        bodyModel: model.ByoipRange,
        type: "model.ByoipRange",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a virtual test access point (VTAP) capture filter in the specified compartment.
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains
* the VTAP. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the VTAP, otherwise a default is provided.
* It does not have to be unique, and you can change it.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateCaptureFilterRequest
     * @return CreateCaptureFilterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateCaptureFilter.ts.html |here} to see how to use CreateCaptureFilter API.
     */
  public async createCaptureFilter(
    createCaptureFilterRequest: requests.CreateCaptureFilterRequest
  ): Promise<responses.CreateCaptureFilterResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createCaptureFilter.");
    const operationName = "createCaptureFilter";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CaptureFilter/CreateCaptureFilter";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createCaptureFilterRequest.opcRetryToken,
      "opc-request-id": createCaptureFilterRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createCaptureFilterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/captureFilters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCaptureFilterRequest.createCaptureFilterDetails,
        "CreateCaptureFilterDetails",
        model.CreateCaptureFilterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCaptureFilterResponse>{},
        body: await response.json(),
        bodyKey: "captureFilter",
        bodyModel: model.CaptureFilter,
        type: "model.CaptureFilter",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new virtual customer-premises equipment (CPE) object in the specified compartment. For
* more information, see [Site-to-Site VPN Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/overviewIPsec.htm).
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want
* the CPE to reside. Notice that the CPE doesn't have to be in the same compartment as the IPSec
* connection or other Networking Service components. If you're not sure which compartment to
* use, put the CPE in the same compartment as the DRG. For more information about
* compartments and access control, see [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You must provide the public IP address of your on-premises router. See
* [CPE Configuration](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/configuringCPE.htm).
* <p>
You may optionally specify a *display name* for the CPE, otherwise a default is provided. It does not have to
* be unique, and you can change it. Avoid entering confidential information.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateCpeRequest
     * @return CreateCpeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateCpe.ts.html |here} to see how to use CreateCpe API.
     */
  public async createCpe(
    createCpeRequest: requests.CreateCpeRequest
  ): Promise<responses.CreateCpeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createCpe.");
    const operationName = "createCpe";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Cpe/CreateCpe";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createCpeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createCpeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCpeRequest.createCpeDetails,
        "CreateCpeDetails",
        model.CreateCpeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCpeResponse>{},
        body: await response.json(),
        bodyKey: "cpe",
        bodyModel: model.Cpe,
        type: "model.Cpe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new cross-connect. Oracle recommends you create each cross-connect in a
* {@link CrossConnectGroup} so you can use link aggregation
* with the connection.
* <p>
After creating the `CrossConnect` object, you need to go the FastConnect location
* and request to have the physical cable installed. For more information, see
* [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the
* compartment where you want the cross-connect to reside. If you're
* not sure which compartment to use, put the cross-connect in the
* same compartment with your VCN. For more information about
* compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the cross-connect.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateCrossConnectRequest
     * @return CreateCrossConnectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateCrossConnect.ts.html |here} to see how to use CreateCrossConnect API.
     */
  public async createCrossConnect(
    createCrossConnectRequest: requests.CreateCrossConnectRequest
  ): Promise<responses.CreateCrossConnectResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createCrossConnect.");
    const operationName = "createCrossConnect";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnect/CreateCrossConnect";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createCrossConnectRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createCrossConnectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCrossConnectRequest.createCrossConnectDetails,
        "CreateCrossConnectDetails",
        model.CreateCrossConnectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCrossConnectResponse>{},
        body: await response.json(),
        bodyKey: "crossConnect",
        bodyModel: model.CrossConnect,
        type: "model.CrossConnect",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new cross-connect group to use with Oracle Cloud Infrastructure
* FastConnect. For more information, see
* [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the
* compartment where you want the cross-connect group to reside. If you're
* not sure which compartment to use, put the cross-connect group in the
* same compartment with your VCN. For more information about
* compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the cross-connect group.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateCrossConnectGroupRequest
     * @return CreateCrossConnectGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateCrossConnectGroup.ts.html |here} to see how to use CreateCrossConnectGroup API.
     */
  public async createCrossConnectGroup(
    createCrossConnectGroupRequest: requests.CreateCrossConnectGroupRequest
  ): Promise<responses.CreateCrossConnectGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createCrossConnectGroup.");
    const operationName = "createCrossConnectGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectGroup/CreateCrossConnectGroup";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createCrossConnectGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createCrossConnectGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCrossConnectGroupRequest.createCrossConnectGroupDetails,
        "CreateCrossConnectGroupDetails",
        model.CreateCrossConnectGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCrossConnectGroupResponse>{},
        body: await response.json(),
        bodyKey: "crossConnectGroup",
        bodyModel: model.CrossConnectGroup,
        type: "model.CrossConnectGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new set of DHCP options for the specified VCN. For more information, see
* {@link DhcpOptions}.
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want the set of
* DHCP options to reside. Notice that the set of options doesn't have to be in the same compartment as the VCN,
* subnets, or other Networking Service components. If you're not sure which compartment to use, put the set
* of DHCP options in the same compartment as the VCN. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the set of DHCP options, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDhcpOptionsRequest
     * @return CreateDhcpOptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateDhcpOptions.ts.html |here} to see how to use CreateDhcpOptions API.
     */
  public async createDhcpOptions(
    createDhcpOptionsRequest: requests.CreateDhcpOptionsRequest
  ): Promise<responses.CreateDhcpOptionsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createDhcpOptions.");
    const operationName = "createDhcpOptions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DhcpOptions/CreateDhcpOptions";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDhcpOptionsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDhcpOptionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dhcps",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDhcpOptionsRequest.createDhcpDetails,
        "CreateDhcpDetails",
        model.CreateDhcpDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDhcpOptionsResponse>{},
        body: await response.json(),
        bodyKey: "dhcpOptions",
        bodyModel: model.DhcpOptions,
        type: "model.DhcpOptions",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new dynamic routing gateway (DRG) in the specified compartment. For more information,
* see [Dynamic Routing Gateways (DRGs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingDRGs.htm).
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want
* the DRG to reside. Notice that the DRG doesn't have to be in the same compartment as the VCN,
* the DRG attachment, or other Networking Service components. If you're not sure which compartment
* to use, put the DRG in the same compartment as the VCN. For more information about compartments
* and access control, see [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the DRG, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDrgRequest
     * @return CreateDrgResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateDrg.ts.html |here} to see how to use CreateDrg API.
     */
  public async createDrg(
    createDrgRequest: requests.CreateDrgRequest
  ): Promise<responses.CreateDrgResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createDrg.");
    const operationName = "createDrg";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Drg/CreateDrg";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDrgRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDrgRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDrgRequest.createDrgDetails,
        "CreateDrgDetails",
        model.CreateDrgDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDrgResponse>{},
        body: await response.json(),
        bodyKey: "drg",
        bodyModel: model.Drg,
        type: "model.Drg",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Attaches the specified DRG to the specified network resource. A VCN can be attached to only one DRG
* at a time, but a DRG can be attached to more than one VCN. The response includes a `DrgAttachment`
* object with its own [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). For more information about DRGs, see
* [Dynamic Routing Gateways (DRGs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingDRGs.htm).
* <p>
You may optionally specify a *display name* for the attachment, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* <p>
For the purposes of access control, the DRG attachment is automatically placed into the currently selected compartment.
* For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDrgAttachmentRequest
     * @return CreateDrgAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateDrgAttachment.ts.html |here} to see how to use CreateDrgAttachment API.
     */
  public async createDrgAttachment(
    createDrgAttachmentRequest: requests.CreateDrgAttachmentRequest
  ): Promise<responses.CreateDrgAttachmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createDrgAttachment.");
    const operationName = "createDrgAttachment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgAttachment/CreateDrgAttachment";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDrgAttachmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDrgAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgAttachments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDrgAttachmentRequest.createDrgAttachmentDetails,
        "CreateDrgAttachmentDetails",
        model.CreateDrgAttachmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDrgAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "drgAttachment",
        bodyModel: model.DrgAttachment,
        type: "model.DrgAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new route distribution for the specified DRG.
   * Assign the route distribution as an import distribution to a DRG route table using the `UpdateDrgRouteTable` or `CreateDrgRouteTable` operations.
   * Assign the route distribution as an export distribution to a DRG attachment
   * using the `UpdateDrgAttachment` or `CreateDrgAttachment` operations.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDrgRouteDistributionRequest
   * @return CreateDrgRouteDistributionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateDrgRouteDistribution.ts.html |here} to see how to use CreateDrgRouteDistribution API.
   */
  public async createDrgRouteDistribution(
    createDrgRouteDistributionRequest: requests.CreateDrgRouteDistributionRequest
  ): Promise<responses.CreateDrgRouteDistributionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createDrgRouteDistribution.");
    const operationName = "createDrgRouteDistribution";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteDistribution/CreateDrgRouteDistribution";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDrgRouteDistributionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDrgRouteDistributionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteDistributions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDrgRouteDistributionRequest.createDrgRouteDistributionDetails,
        "CreateDrgRouteDistributionDetails",
        model.CreateDrgRouteDistributionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDrgRouteDistributionResponse>{},
        body: await response.json(),
        bodyKey: "drgRouteDistribution",
        bodyModel: model.DrgRouteDistribution,
        type: "model.DrgRouteDistribution",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new DRG route table for the specified DRG. Assign the DRG route table to a DRG attachment
   * using the `UpdateDrgAttachment` or `CreateDrgAttachment` operations.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDrgRouteTableRequest
   * @return CreateDrgRouteTableResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateDrgRouteTable.ts.html |here} to see how to use CreateDrgRouteTable API.
   */
  public async createDrgRouteTable(
    createDrgRouteTableRequest: requests.CreateDrgRouteTableRequest
  ): Promise<responses.CreateDrgRouteTableResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createDrgRouteTable.");
    const operationName = "createDrgRouteTable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteTable/CreateDrgRouteTable";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDrgRouteTableRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDrgRouteTableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteTables",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDrgRouteTableRequest.createDrgRouteTableDetails,
        "CreateDrgRouteTableDetails",
        model.CreateDrgRouteTableDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDrgRouteTableResponse>{},
        body: await response.json(),
        bodyKey: "drgRouteTable",
        bodyModel: model.DrgRouteTable,
        type: "model.DrgRouteTable",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new IPSec connection between the specified DRG and CPE. For more information, see
* [Site-to-Site VPN Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/overviewIPsec.htm).
* <p>
If you configure at least one tunnel to use static routing, then in the request you must provide
* at least one valid static route (you're allowed a maximum of 10). For example: 10.0.0.0/16.
* If you configure both tunnels to use BGP dynamic routing, you can provide an empty list for
* the static routes. For more information, see the important note in
* {@link IPSecConnection}.
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want the
* IPSec connection to reside. Notice that the IPSec connection doesn't have to be in the same compartment
* as the DRG, CPE, or other Networking Service components. If you're not sure which compartment to
* use, put the IPSec connection in the same compartment as the DRG. For more information about
* compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* <p>
You may optionally specify a *display name* for the IPSec connection, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* <p>
After creating the IPSec connection, you need to configure your on-premises router
* with tunnel-specific information. For tunnel status and the required configuration information, see:
* <p>
  * {@link IPSecConnectionTunnel}
*   * {@link IPSecConnectionTunnelSharedSecret}
* <p>
For each tunnel, you need the IP address of Oracle's VPN headend and the shared secret
* (that is, the pre-shared key). For more information, see
* [CPE Configuration](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/configuringCPE.htm).
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateIPSecConnectionRequest
     * @return CreateIPSecConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateIPSecConnection.ts.html |here} to see how to use CreateIPSecConnection API.
     */
  public async createIPSecConnection(
    createIPSecConnectionRequest: requests.CreateIPSecConnectionRequest
  ): Promise<responses.CreateIPSecConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createIPSecConnection.");
    const operationName = "createIPSecConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnection/CreateIPSecConnection";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createIPSecConnectionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createIPSecConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createIPSecConnectionRequest.createIPSecConnectionDetails,
        "CreateIPSecConnectionDetails",
        model.CreateIPSecConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateIPSecConnectionResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnection",
        bodyModel: model.IPSecConnection,
        type: "model.IPSecConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new internet gateway for the specified VCN. For more information, see
* [Access to the Internet](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingIGs.htm).
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want the Internet
* Gateway to reside. Notice that the internet gateway doesn't have to be in the same compartment as the VCN or
* other Networking Service components. If you're not sure which compartment to use, put the Internet
* Gateway in the same compartment with the VCN. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* <p>
You may optionally specify a *display name* for the internet gateway, otherwise a default is provided. It
* does not have to be unique, and you can change it. Avoid entering confidential information.
* <p>
For traffic to flow between a subnet and an internet gateway, you must create a route rule accordingly in
* the subnet's route table (for example, 0.0.0.0/0 > internet gateway). See
* {@link #updateRouteTable(UpdateRouteTableRequest) updateRouteTable}.
* <p>
You must specify whether the internet gateway is enabled when you create it. If it's disabled, that means no
* traffic will flow to/from the internet even if there's a route rule that enables that traffic. You can later
* use {@link #updateInternetGateway(UpdateInternetGatewayRequest) updateInternetGateway} to easily disable/enable
* the gateway without changing the route rule.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateInternetGatewayRequest
     * @return CreateInternetGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateInternetGateway.ts.html |here} to see how to use CreateInternetGateway API.
     */
  public async createInternetGateway(
    createInternetGatewayRequest: requests.CreateInternetGatewayRequest
  ): Promise<responses.CreateInternetGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createInternetGateway.");
    const operationName = "createInternetGateway";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InternetGateway/CreateInternetGateway";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createInternetGatewayRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createInternetGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internetGateways",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createInternetGatewayRequest.createInternetGatewayDetails,
        "CreateInternetGatewayDetails",
        model.CreateInternetGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateInternetGatewayResponse>{},
        body: await response.json(),
        bodyKey: "internetGateway",
        bodyModel: model.InternetGateway,
        type: "model.InternetGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates an IPv6 for the specified VNIC.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateIpv6Request
   * @return CreateIpv6Response
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateIpv6.ts.html |here} to see how to use CreateIpv6 API.
   */
  public async createIpv6(
    createIpv6Request: requests.CreateIpv6Request
  ): Promise<responses.CreateIpv6Response> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createIpv6.");
    const operationName = "createIpv6";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Ipv6/CreateIpv6";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createIpv6Request.opcRequestId,
      "opc-retry-token": createIpv6Request.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createIpv6Request.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipv6",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createIpv6Request.createIpv6Details,
        "CreateIpv6Details",
        model.CreateIpv6Details.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateIpv6Response>{},
        body: await response.json(),
        bodyKey: "ipv6",
        bodyModel: model.Ipv6,
        type: "model.Ipv6",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new local peering gateway (LPG) for the specified VCN.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateLocalPeeringGatewayRequest
   * @return CreateLocalPeeringGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateLocalPeeringGateway.ts.html |here} to see how to use CreateLocalPeeringGateway API.
   */
  public async createLocalPeeringGateway(
    createLocalPeeringGatewayRequest: requests.CreateLocalPeeringGatewayRequest
  ): Promise<responses.CreateLocalPeeringGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createLocalPeeringGateway.");
    const operationName = "createLocalPeeringGateway";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/LocalPeeringGateway/CreateLocalPeeringGateway";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createLocalPeeringGatewayRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createLocalPeeringGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLocalPeeringGatewayRequest.createLocalPeeringGatewayDetails,
        "CreateLocalPeeringGatewayDetails",
        model.CreateLocalPeeringGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLocalPeeringGatewayResponse>{},
        body: await response.json(),
        bodyKey: "localPeeringGateway",
        bodyModel: model.LocalPeeringGateway,
        type: "model.LocalPeeringGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new NAT gateway for the specified VCN. You must also set up a route rule with the
   * NAT gateway as the rule's target. See {@link RouteTable}.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateNatGatewayRequest
   * @return CreateNatGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateNatGateway.ts.html |here} to see how to use CreateNatGateway API.
   */
  public async createNatGateway(
    createNatGatewayRequest: requests.CreateNatGatewayRequest
  ): Promise<responses.CreateNatGatewayResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createNatGateway.");
    const operationName = "createNatGateway";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NatGateway/CreateNatGateway";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createNatGatewayRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createNatGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/natGateways",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createNatGatewayRequest.createNatGatewayDetails,
        "CreateNatGatewayDetails",
        model.CreateNatGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateNatGatewayResponse>{},
        body: await response.json(),
        bodyKey: "natGateway",
        bodyModel: model.NatGateway,
        type: "model.NatGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new network security group for the specified VCN.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateNetworkSecurityGroupRequest
   * @return CreateNetworkSecurityGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateNetworkSecurityGroup.ts.html |here} to see how to use CreateNetworkSecurityGroup API.
   */
  public async createNetworkSecurityGroup(
    createNetworkSecurityGroupRequest: requests.CreateNetworkSecurityGroupRequest
  ): Promise<responses.CreateNetworkSecurityGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createNetworkSecurityGroup.");
    const operationName = "createNetworkSecurityGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NetworkSecurityGroup/CreateNetworkSecurityGroup";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createNetworkSecurityGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createNetworkSecurityGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createNetworkSecurityGroupRequest.createNetworkSecurityGroupDetails,
        "CreateNetworkSecurityGroupDetails",
        model.CreateNetworkSecurityGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateNetworkSecurityGroupResponse>{},
        body: await response.json(),
        bodyKey: "networkSecurityGroup",
        bodyModel: model.NetworkSecurityGroup,
        type: "model.NetworkSecurityGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a secondary private IP for the specified VNIC.
   * For more information about secondary private IPs, see
   * [IP Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingIPaddresses.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreatePrivateIpRequest
   * @return CreatePrivateIpResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreatePrivateIp.ts.html |here} to see how to use CreatePrivateIp API.
   */
  public async createPrivateIp(
    createPrivateIpRequest: requests.CreatePrivateIpRequest
  ): Promise<responses.CreatePrivateIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createPrivateIp.");
    const operationName = "createPrivateIp";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PrivateIp/CreatePrivateIp";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createPrivateIpRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPrivateIpRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateIps",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPrivateIpRequest.createPrivateIpDetails,
        "CreatePrivateIpDetails",
        model.CreatePrivateIpDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePrivateIpResponse>{},
        body: await response.json(),
        bodyKey: "privateIp",
        bodyModel: model.PrivateIp,
        type: "model.PrivateIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a public IP. Use the `lifetime` property to specify whether it's an ephemeral or
* reserved public IP. For information about limits on how many you can create, see
* [Public IP Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingpublicIPs.htm).
* <p>
* **For an ephemeral public IP assigned to a private IP:** You must also specify a `privateIpId`
* with the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the primary private IP you want to assign the public IP to. The public IP is
* created in the same availability domain as the private IP. An ephemeral public IP must always be
* assigned to a private IP, and only to the *primary* private IP on a VNIC, not a secondary
* private IP. Exception: If you create a {@link NatGateway}, Oracle
* automatically assigns the NAT gateway a regional ephemeral public IP that you cannot remove.
* <p>
* **For a reserved public IP:** You may also optionally assign the public IP to a private
* IP by specifying `privateIpId`. Or you can later assign the public IP with
* {@link #updatePublicIp(UpdatePublicIpRequest) updatePublicIp}.
* <p>
**Note:** When assigning a public IP to a private IP, the private IP must not already have
* a public IP with `lifecycleState` = ASSIGNING or ASSIGNED. If it does, an error is returned.
* <p>
Also, for reserved public IPs, the optional assignment part of this operation is
* asynchronous. Poll the public IP's `lifecycleState` to determine if the assignment
* succeeded.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreatePublicIpRequest
     * @return CreatePublicIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreatePublicIp.ts.html |here} to see how to use CreatePublicIp API.
     */
  public async createPublicIp(
    createPublicIpRequest: requests.CreatePublicIpRequest
  ): Promise<responses.CreatePublicIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createPublicIp.");
    const operationName = "createPublicIp";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIp/CreatePublicIp";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createPublicIpRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPublicIpRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPublicIpRequest.createPublicIpDetails,
        "CreatePublicIpDetails",
        model.CreatePublicIpDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePublicIpResponse>{},
        body: await response.json(),
        bodyKey: "publicIp",
        bodyModel: model.PublicIp,
        type: "model.PublicIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a public IP pool.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreatePublicIpPoolRequest
   * @return CreatePublicIpPoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreatePublicIpPool.ts.html |here} to see how to use CreatePublicIpPool API.
   */
  public async createPublicIpPool(
    createPublicIpPoolRequest: requests.CreatePublicIpPoolRequest
  ): Promise<responses.CreatePublicIpPoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createPublicIpPool.");
    const operationName = "createPublicIpPool";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIpPool/CreatePublicIpPool";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createPublicIpPoolRequest.opcRequestId,
      "opc-retry-token": createPublicIpPoolRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPublicIpPoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPublicIpPoolRequest.createPublicIpPoolDetails,
        "CreatePublicIpPoolDetails",
        model.CreatePublicIpPoolDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePublicIpPoolResponse>{},
        body: await response.json(),
        bodyKey: "publicIpPool",
        bodyModel: model.PublicIpPool,
        type: "model.PublicIpPool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new remote peering connection (RPC) for the specified DRG.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateRemotePeeringConnectionRequest
   * @return CreateRemotePeeringConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateRemotePeeringConnection.ts.html |here} to see how to use CreateRemotePeeringConnection API.
   */
  public async createRemotePeeringConnection(
    createRemotePeeringConnectionRequest: requests.CreateRemotePeeringConnectionRequest
  ): Promise<responses.CreateRemotePeeringConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createRemotePeeringConnection.");
    const operationName = "createRemotePeeringConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/RemotePeeringConnection/CreateRemotePeeringConnection";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createRemotePeeringConnectionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createRemotePeeringConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRemotePeeringConnectionRequest.createRemotePeeringConnectionDetails,
        "CreateRemotePeeringConnectionDetails",
        model.CreateRemotePeeringConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRemotePeeringConnectionResponse>{},
        body: await response.json(),
        bodyKey: "remotePeeringConnection",
        bodyModel: model.RemotePeeringConnection,
        type: "model.RemotePeeringConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new route table for the specified VCN. In the request you must also include at least one route
* rule for the new route table. For information on the number of rules you can have in a route table, see
* [Service Limits](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/servicelimits.htm). For general information about route
* tables in your VCN and the types of targets you can use in route rules,
* see [Route Tables](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm).
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want the route
* table to reside. Notice that the route table doesn't have to be in the same compartment as the VCN, subnets,
* or other Networking Service components. If you're not sure which compartment to use, put the route
* table in the same compartment as the VCN. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the route table, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateRouteTableRequest
     * @return CreateRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateRouteTable.ts.html |here} to see how to use CreateRouteTable API.
     */
  public async createRouteTable(
    createRouteTableRequest: requests.CreateRouteTableRequest
  ): Promise<responses.CreateRouteTableResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createRouteTable.");
    const operationName = "createRouteTable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/RouteTable/CreateRouteTable";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createRouteTableRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createRouteTableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/routeTables",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRouteTableRequest.createRouteTableDetails,
        "CreateRouteTableDetails",
        model.CreateRouteTableDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRouteTableResponse>{},
        body: await response.json(),
        bodyKey: "routeTable",
        bodyModel: model.RouteTable,
        type: "model.RouteTable",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new security list for the specified VCN. For more information
* about security lists, see [Security Lists](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/securitylists.htm).
* For information on the number of rules you can have in a security list, see
* [Service Limits](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/servicelimits.htm).
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want the security
* list to reside. Notice that the security list doesn't have to be in the same compartment as the VCN, subnets,
* or other Networking Service components. If you're not sure which compartment to use, put the security
* list in the same compartment as the VCN. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the security list, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSecurityListRequest
     * @return CreateSecurityListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateSecurityList.ts.html |here} to see how to use CreateSecurityList API.
     */
  public async createSecurityList(
    createSecurityListRequest: requests.CreateSecurityListRequest
  ): Promise<responses.CreateSecurityListResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createSecurityList.");
    const operationName = "createSecurityList";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/SecurityList/CreateSecurityList";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSecurityListRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSecurityListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityLists",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSecurityListRequest.createSecurityListDetails,
        "CreateSecurityListDetails",
        model.CreateSecurityListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSecurityListResponse>{},
        body: await response.json(),
        bodyKey: "securityList",
        bodyModel: model.SecurityList,
        type: "model.SecurityList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new service gateway in the specified compartment.
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want
* the service gateway to reside. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the service gateway, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateServiceGatewayRequest
     * @return CreateServiceGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateServiceGateway.ts.html |here} to see how to use CreateServiceGateway API.
     */
  public async createServiceGateway(
    createServiceGatewayRequest: requests.CreateServiceGatewayRequest
  ): Promise<responses.CreateServiceGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createServiceGateway.");
    const operationName = "createServiceGateway";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ServiceGateway/CreateServiceGateway";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createServiceGatewayRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createServiceGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createServiceGatewayRequest.createServiceGatewayDetails,
        "CreateServiceGatewayDetails",
        model.CreateServiceGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateServiceGatewayResponse>{},
        body: await response.json(),
        bodyKey: "serviceGateway",
        bodyModel: model.ServiceGateway,
        type: "model.ServiceGateway",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new subnet in the specified VCN. You can't change the size of the subnet after creation,
* so it's important to think about the size of subnets you need before creating them.
* For more information, see [VCNs and Subnets](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVCNs.htm).
* For information on the number of subnets you can have in a VCN, see
* [Service Limits](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/servicelimits.htm).
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want the subnet
* to reside. Notice that the subnet doesn't have to be in the same compartment as the VCN, route tables, or
* other Networking Service components. If you're not sure which compartment to use, put the subnet in
* the same compartment as the VCN. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about OCIDs,
* see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally associate a route table with the subnet. If you don't, the subnet will use the
* VCN's default route table. For more information about route tables, see
* [Route Tables](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm).
* <p>
You may optionally associate a security list with the subnet. If you don't, the subnet will use the
* VCN's default security list. For more information about security lists, see
* [Security Lists](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/securitylists.htm).
* <p>
You may optionally associate a set of DHCP options with the subnet. If you don't, the subnet will use the
* VCN's default set. For more information about DHCP options, see
* [DHCP Options](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingDHCP.htm).
* <p>
You may optionally specify a *display name* for the subnet, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* <p>
You can also add a DNS label for the subnet, which is required if you want the Internet and
* VCN Resolver to resolve hostnames for instances in the subnet. For more information, see
* [DNS in Your Virtual Cloud Network](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/dns.htm).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSubnetRequest
     * @return CreateSubnetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateSubnet.ts.html |here} to see how to use CreateSubnet API.
     */
  public async createSubnet(
    createSubnetRequest: requests.CreateSubnetRequest
  ): Promise<responses.CreateSubnetResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createSubnet.");
    const operationName = "createSubnet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Subnet/CreateSubnet";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSubnetRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSubnetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSubnetRequest.createSubnetDetails,
        "CreateSubnetDetails",
        model.CreateSubnetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSubnetResponse>{},
        body: await response.json(),
        bodyKey: "subnet",
        bodyModel: model.Subnet,
        type: "model.Subnet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new virtual cloud network (VCN). For more information, see
* [VCNs and Subnets](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVCNs.htm).
* <p>
For the VCN, you specify a list of one or more IPv4 CIDR blocks that meet the following criteria:
* <p>
- The CIDR blocks must be valid.
* - They must not overlap with each other or with the on-premises network CIDR block.
* - The number of CIDR blocks does not exceed the limit of CIDR blocks allowed per VCN.
* <p>
For a CIDR block, Oracle recommends that you use one of the private IP address ranges specified in [RFC 1918](https://tools.ietf.org/html/rfc1918) (10.0.0.0/8, 172.16/12, and 192.168/16). Example:
* 172.16.0.0/16. The CIDR blocks can range from /16 to /30.
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want the VCN to
* reside. Consult an Oracle Cloud Infrastructure administrator in your organization if you're not sure which
* compartment to use. Notice that the VCN doesn't have to be in the same compartment as the subnets or other
* Networking Service components. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the VCN, otherwise a default is provided. It does not have to
* be unique, and you can change it. Avoid entering confidential information.
* <p>
You can also add a DNS label for the VCN, which is required if you want the instances to use the
* Interent and VCN Resolver option for DNS in the VCN. For more information, see
* [DNS in Your Virtual Cloud Network](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/dns.htm).
* <p>
The VCN automatically comes with a default route table, default security list, and default set of DHCP options.
* The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for each is returned in the response. You can't delete these default objects, but you can change their
* contents (that is, change the route rules, security list rules, and so on).
* <p>
The VCN and subnets you create are not accessible until you attach an internet gateway or set up a Site-to-Site VPN
* or FastConnect. For more information, see
* [Overview of the Networking Service](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/overview.htm).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateVcnRequest
     * @return CreateVcnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVcn.ts.html |here} to see how to use CreateVcn API.
     */
  public async createVcn(
    createVcnRequest: requests.CreateVcnRequest
  ): Promise<responses.CreateVcnResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createVcn.");
    const operationName = "createVcn";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vcn/CreateVcn";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVcnRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVcnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVcnRequest.createVcnDetails,
        "CreateVcnDetails",
        model.CreateVcnDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVcnResponse>{},
        body: await response.json(),
        bodyKey: "vcn",
        bodyModel: model.Vcn,
        type: "model.Vcn",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new virtual circuit to use with Oracle Cloud
* Infrastructure FastConnect. For more information, see
* [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the
* compartment where you want the virtual circuit to reside. If you're
* not sure which compartment to use, put the virtual circuit in the
* same compartment with the DRG it's using. For more information about
* compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the virtual circuit.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* <p>
**Important:** When creating a virtual circuit, you specify a DRG for
* the traffic to flow through. Make sure you attach the DRG to your
* VCN and confirm the VCN's routing sends traffic to the DRG. Otherwise
* traffic will not flow. For more information, see
* [Route Tables](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm).
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateVirtualCircuitRequest
     * @return CreateVirtualCircuitResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVirtualCircuit.ts.html |here} to see how to use CreateVirtualCircuit API.
     */
  public async createVirtualCircuit(
    createVirtualCircuitRequest: requests.CreateVirtualCircuitRequest
  ): Promise<responses.CreateVirtualCircuitResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createVirtualCircuit.");
    const operationName = "createVirtualCircuit";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VirtualCircuit/CreateVirtualCircuit";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVirtualCircuitRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVirtualCircuitRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVirtualCircuitRequest.createVirtualCircuitDetails,
        "CreateVirtualCircuitDetails",
        model.CreateVirtualCircuitDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVirtualCircuitResponse>{},
        body: await response.json(),
        bodyKey: "virtualCircuit",
        bodyModel: model.VirtualCircuit,
        type: "model.VirtualCircuit",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a VLAN in the specified VCN and the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateVlanRequest
   * @return CreateVlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVlan.ts.html |here} to see how to use CreateVlan API.
   */
  public async createVlan(
    createVlanRequest: requests.CreateVlanRequest
  ): Promise<responses.CreateVlanResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createVlan.");
    const operationName = "createVlan";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vlan/CreateVlan";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVlanRequest.opcRetryToken,
      "opc-request-id": createVlanRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVlanRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vlans",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVlanRequest.createVlanDetails,
        "CreateVlanDetails",
        model.CreateVlanDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVlanResponse>{},
        body: await response.json(),
        bodyKey: "vlan",
        bodyModel: model.Vlan,
        type: "model.Vlan",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a virtual test access point (VTAP) in the specified compartment.
* <p>
For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the VTAP.
* For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the VTAP, otherwise a default is provided.
* It does not have to be unique, and you can change it.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateVtapRequest
     * @return CreateVtapResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVtap.ts.html |here} to see how to use CreateVtap API.
     */
  public async createVtap(
    createVtapRequest: requests.CreateVtapRequest
  ): Promise<responses.CreateVtapResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createVtap.");
    const operationName = "createVtap";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vtap/CreateVtap";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVtapRequest.opcRetryToken,
      "opc-request-id": createVtapRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVtapRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vtaps",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVtapRequest.createVtapDetails,
        "CreateVtapDetails",
        model.CreateVtapDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVtapResponse>{},
        body: await response.json(),
        bodyKey: "vtap",
        bodyModel: model.Vtap,
        type: "model.Vtap",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified `ByoipRange` resource.
   * The resource must be in one of the following states: CREATING, PROVISIONED, ACTIVE, or FAILED.
   * It must not have any subranges currently allocated to a PublicIpPool object or the deletion will fail.
   * You must specify the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   * If the `ByoipRange` resource is currently in the PROVISIONED or ACTIVE state, it will be de-provisioned and then deleted.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteByoipRangeRequest
   * @return DeleteByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteByoipRange.ts.html |here} to see how to use DeleteByoipRange API.
   */
  public async deleteByoipRange(
    deleteByoipRangeRequest: requests.DeleteByoipRangeRequest
  ): Promise<responses.DeleteByoipRangeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteByoipRange.");
    const operationName = "deleteByoipRange";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ByoipRange/DeleteByoipRange";
    const pathParams = {
      "{byoipRangeId}": deleteByoipRangeRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteByoipRangeRequest.opcRequestId,
      "if-match": deleteByoipRangeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteByoipRangeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteByoipRangeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified VTAP capture filter. This is an asynchronous operation. The VTAP capture filter's `lifecycleState` will
   * change to TERMINATING temporarily until the VTAP capture filter is completely removed.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteCaptureFilterRequest
   * @return DeleteCaptureFilterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteCaptureFilter.ts.html |here} to see how to use DeleteCaptureFilter API.
   */
  public async deleteCaptureFilter(
    deleteCaptureFilterRequest: requests.DeleteCaptureFilterRequest
  ): Promise<responses.DeleteCaptureFilterResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteCaptureFilter.");
    const operationName = "deleteCaptureFilter";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CaptureFilter/DeleteCaptureFilter";
    const pathParams = {
      "{captureFilterId}": deleteCaptureFilterRequest.captureFilterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteCaptureFilterRequest.ifMatch,
      "opc-request-id": deleteCaptureFilterRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCaptureFilterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/captureFilters/{captureFilterId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCaptureFilterResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified CPE object. The CPE must not be connected to a DRG. This is an asynchronous
   * operation. The CPE's `lifecycleState` will change to TERMINATING temporarily until the CPE is completely
   * removed.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteCpeRequest
   * @return DeleteCpeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteCpe.ts.html |here} to see how to use DeleteCpe API.
   */
  public async deleteCpe(
    deleteCpeRequest: requests.DeleteCpeRequest
  ): Promise<responses.DeleteCpeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteCpe.");
    const operationName = "deleteCpe";
    const apiReferenceLink = "";
    const pathParams = {
      "{cpeId}": deleteCpeRequest.cpeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteCpeRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCpeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes/{cpeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCpeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified cross-connect. It must not be mapped to a
   * {@link VirtualCircuit}.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteCrossConnectRequest
   * @return DeleteCrossConnectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteCrossConnect.ts.html |here} to see how to use DeleteCrossConnect API.
   */
  public async deleteCrossConnect(
    deleteCrossConnectRequest: requests.DeleteCrossConnectRequest
  ): Promise<responses.DeleteCrossConnectResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteCrossConnect.");
    const operationName = "deleteCrossConnect";
    const apiReferenceLink = "";
    const pathParams = {
      "{crossConnectId}": deleteCrossConnectRequest.crossConnectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteCrossConnectRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCrossConnectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects/{crossConnectId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCrossConnectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified cross-connect group. It must not contain any
   * cross-connects, and it cannot be mapped to a
   * {@link VirtualCircuit}.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteCrossConnectGroupRequest
   * @return DeleteCrossConnectGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteCrossConnectGroup.ts.html |here} to see how to use DeleteCrossConnectGroup API.
   */
  public async deleteCrossConnectGroup(
    deleteCrossConnectGroupRequest: requests.DeleteCrossConnectGroupRequest
  ): Promise<responses.DeleteCrossConnectGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteCrossConnectGroup.");
    const operationName = "deleteCrossConnectGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{crossConnectGroupId}": deleteCrossConnectGroupRequest.crossConnectGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteCrossConnectGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCrossConnectGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectGroups/{crossConnectGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCrossConnectGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified set of DHCP options, but only if it's not associated with a subnet. You can't delete a
* VCN's default set of DHCP options.
* <p>
This is an asynchronous operation. The state of the set of options will switch to TERMINATING temporarily
* until the set is completely removed.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDhcpOptionsRequest
     * @return DeleteDhcpOptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteDhcpOptions.ts.html |here} to see how to use DeleteDhcpOptions API.
     */
  public async deleteDhcpOptions(
    deleteDhcpOptionsRequest: requests.DeleteDhcpOptionsRequest
  ): Promise<responses.DeleteDhcpOptionsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteDhcpOptions.");
    const operationName = "deleteDhcpOptions";
    const apiReferenceLink = "";
    const pathParams = {
      "{dhcpId}": deleteDhcpOptionsRequest.dhcpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDhcpOptionsRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDhcpOptionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dhcps/{dhcpId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDhcpOptionsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified DRG. The DRG must not be attached to a VCN or be connected to your on-premise
   * network. Also, there must not be a route table that lists the DRG as a target. This is an asynchronous
   * operation. The DRG's `lifecycleState` will change to TERMINATING temporarily until the DRG is completely
   * removed.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDrgRequest
   * @return DeleteDrgResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteDrg.ts.html |here} to see how to use DeleteDrg API.
   */
  public async deleteDrg(
    deleteDrgRequest: requests.DeleteDrgRequest
  ): Promise<responses.DeleteDrgResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteDrg.");
    const operationName = "deleteDrg";
    const apiReferenceLink = "";
    const pathParams = {
      "{drgId}": deleteDrgRequest.drgId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDrgRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDrgRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDrgResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detaches a DRG from a network resource by deleting the corresponding `DrgAttachment` resource. This is an asynchronous
   * operation. The attachment's `lifecycleState` will temporarily change to DETACHING until the attachment
   * is completely removed.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDrgAttachmentRequest
   * @return DeleteDrgAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteDrgAttachment.ts.html |here} to see how to use DeleteDrgAttachment API.
   */
  public async deleteDrgAttachment(
    deleteDrgAttachmentRequest: requests.DeleteDrgAttachmentRequest
  ): Promise<responses.DeleteDrgAttachmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteDrgAttachment.");
    const operationName = "deleteDrgAttachment";
    const apiReferenceLink = "";
    const pathParams = {
      "{drgAttachmentId}": deleteDrgAttachmentRequest.drgAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDrgAttachmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDrgAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgAttachments/{drgAttachmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDrgAttachmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified route distribution. You can't delete a route distribution currently in use by a DRG attachment or DRG route table.
* <p>
Remove the DRG route distribution from a DRG attachment or DRG route table by using the \"RemoveExportDrgRouteDistribution\" or \"RemoveImportDrgRouteDistribution' operations.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDrgRouteDistributionRequest
     * @return DeleteDrgRouteDistributionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteDrgRouteDistribution.ts.html |here} to see how to use DeleteDrgRouteDistribution API.
     */
  public async deleteDrgRouteDistribution(
    deleteDrgRouteDistributionRequest: requests.DeleteDrgRouteDistributionRequest
  ): Promise<responses.DeleteDrgRouteDistributionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteDrgRouteDistribution.");
    const operationName = "deleteDrgRouteDistribution";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteDistributionStatement/DeleteDrgRouteDistribution";
    const pathParams = {
      "{drgRouteDistributionId}": deleteDrgRouteDistributionRequest.drgRouteDistributionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDrgRouteDistributionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDrgRouteDistributionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteDistributions/{drgRouteDistributionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDrgRouteDistributionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified DRG route table. There must not be any DRG attachments assigned.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDrgRouteTableRequest
   * @return DeleteDrgRouteTableResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteDrgRouteTable.ts.html |here} to see how to use DeleteDrgRouteTable API.
   */
  public async deleteDrgRouteTable(
    deleteDrgRouteTableRequest: requests.DeleteDrgRouteTableRequest
  ): Promise<responses.DeleteDrgRouteTableResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteDrgRouteTable.");
    const operationName = "deleteDrgRouteTable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InternalPublicIp/DeleteDrgRouteTable";
    const pathParams = {
      "{drgRouteTableId}": deleteDrgRouteTableRequest.drgRouteTableId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDrgRouteTableRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDrgRouteTableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteTables/{drgRouteTableId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDrgRouteTableResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified IPSec connection. If your goal is to disable the Site-to-Site VPN between your VCN and
* on-premises network, it's easiest to simply detach the DRG but keep all the Site-to-Site VPN components intact.
* If you were to delete all the components and then later need to create an Site-to-Site VPN again, you would
* need to configure your on-premises router again with the new information returned from
* {@link #createIPSecConnection(CreateIPSecConnectionRequest) createIPSecConnection}.
* <p>
This is an asynchronous operation. The connection's `lifecycleState` will change to TERMINATING temporarily
* until the connection is completely removed.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteIPSecConnectionRequest
     * @return DeleteIPSecConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteIPSecConnection.ts.html |here} to see how to use DeleteIPSecConnection API.
     */
  public async deleteIPSecConnection(
    deleteIPSecConnectionRequest: requests.DeleteIPSecConnectionRequest
  ): Promise<responses.DeleteIPSecConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteIPSecConnection.");
    const operationName = "deleteIPSecConnection";
    const apiReferenceLink = "";
    const pathParams = {
      "{ipscId}": deleteIPSecConnectionRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteIPSecConnectionRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteIPSecConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteIPSecConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified internet gateway. The internet gateway does not have to be disabled, but
* there must not be a route table that lists it as a target.
* <p>
This is an asynchronous operation. The gateway's `lifecycleState` will change to TERMINATING temporarily
* until the gateway is completely removed.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteInternetGatewayRequest
     * @return DeleteInternetGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteInternetGateway.ts.html |here} to see how to use DeleteInternetGateway API.
     */
  public async deleteInternetGateway(
    deleteInternetGatewayRequest: requests.DeleteInternetGatewayRequest
  ): Promise<responses.DeleteInternetGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteInternetGateway.");
    const operationName = "deleteInternetGateway";
    const apiReferenceLink = "";
    const pathParams = {
      "{igId}": deleteInternetGatewayRequest.igId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteInternetGatewayRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteInternetGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internetGateways/{igId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteInternetGatewayResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Unassigns and deletes the specified IPv6. You must specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   * The IPv6 address is returned to the subnet's pool of available addresses.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteIpv6Request
   * @return DeleteIpv6Response
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteIpv6.ts.html |here} to see how to use DeleteIpv6 API.
   */
  public async deleteIpv6(
    deleteIpv6Request: requests.DeleteIpv6Request
  ): Promise<responses.DeleteIpv6Response> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteIpv6.");
    const operationName = "deleteIpv6";
    const apiReferenceLink = "";
    const pathParams = {
      "{ipv6Id}": deleteIpv6Request.ipv6Id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteIpv6Request.ifMatch,
      "opc-request-id": deleteIpv6Request.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteIpv6Request.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipv6/{ipv6Id}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteIpv6Response>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified local peering gateway (LPG).
* <p>
This is an asynchronous operation; the local peering gateway's `lifecycleState` changes to TERMINATING temporarily
* until the local peering gateway is completely removed.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteLocalPeeringGatewayRequest
     * @return DeleteLocalPeeringGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteLocalPeeringGateway.ts.html |here} to see how to use DeleteLocalPeeringGateway API.
     */
  public async deleteLocalPeeringGateway(
    deleteLocalPeeringGatewayRequest: requests.DeleteLocalPeeringGatewayRequest
  ): Promise<responses.DeleteLocalPeeringGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteLocalPeeringGateway.");
    const operationName = "deleteLocalPeeringGateway";
    const apiReferenceLink = "";
    const pathParams = {
      "{localPeeringGatewayId}": deleteLocalPeeringGatewayRequest.localPeeringGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteLocalPeeringGatewayRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteLocalPeeringGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways/{localPeeringGatewayId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLocalPeeringGatewayResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified NAT gateway. The NAT gateway does not have to be disabled, but there
* must not be a route rule that lists the NAT gateway as a target.
* <p>
This is an asynchronous operation. The NAT gateway's `lifecycleState` will change to
* TERMINATING temporarily until the NAT gateway is completely removed.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteNatGatewayRequest
     * @return DeleteNatGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteNatGateway.ts.html |here} to see how to use DeleteNatGateway API.
     */
  public async deleteNatGateway(
    deleteNatGatewayRequest: requests.DeleteNatGatewayRequest
  ): Promise<responses.DeleteNatGatewayResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteNatGateway.");
    const operationName = "deleteNatGateway";
    const apiReferenceLink = "";
    const pathParams = {
      "{natGatewayId}": deleteNatGatewayRequest.natGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteNatGatewayRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteNatGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/natGateways/{natGatewayId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteNatGatewayResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified network security group. The group must not contain any VNICs.
* <p>
To get a list of the VNICs in a network security group, use
* {@link #listNetworkSecurityGroupVnics(ListNetworkSecurityGroupVnicsRequest) listNetworkSecurityGroupVnics}.
* Each returned {@link NetworkSecurityGroupVnic} object
* contains both the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC and the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC's parent resource (for example,
* the Compute instance that the VNIC is attached to).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteNetworkSecurityGroupRequest
     * @return DeleteNetworkSecurityGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteNetworkSecurityGroup.ts.html |here} to see how to use DeleteNetworkSecurityGroup API.
     */
  public async deleteNetworkSecurityGroup(
    deleteNetworkSecurityGroupRequest: requests.DeleteNetworkSecurityGroupRequest
  ): Promise<responses.DeleteNetworkSecurityGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteNetworkSecurityGroup.");
    const operationName = "deleteNetworkSecurityGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NetworkSecurityGroup/DeleteNetworkSecurityGroup";
    const pathParams = {
      "{networkSecurityGroupId}": deleteNetworkSecurityGroupRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteNetworkSecurityGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteNetworkSecurityGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteNetworkSecurityGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Unassigns and deletes the specified private IP. You must
* specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). The private IP address is returned to
* the subnet's pool of available addresses.
* <p>
This operation cannot be used with primary private IPs, which are
* automatically unassigned and deleted when the VNIC is terminated.
* <p>
**Important:** If a secondary private IP is the
* [target of a route rule](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm#privateip),
* unassigning it from the VNIC causes that route rule to blackhole and the traffic
* will be dropped.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeletePrivateIpRequest
     * @return DeletePrivateIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeletePrivateIp.ts.html |here} to see how to use DeletePrivateIp API.
     */
  public async deletePrivateIp(
    deletePrivateIpRequest: requests.DeletePrivateIpRequest
  ): Promise<responses.DeletePrivateIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deletePrivateIp.");
    const operationName = "deletePrivateIp";
    const apiReferenceLink = "";
    const pathParams = {
      "{privateIpId}": deletePrivateIpRequest.privateIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePrivateIpRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePrivateIpRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateIps/{privateIpId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePrivateIpResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Unassigns and deletes the specified public IP (either ephemeral or reserved).
* You must specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). The public IP address is returned to the
* Oracle Cloud Infrastructure public IP pool.
* <p>
**Note:** You cannot update, unassign, or delete the public IP that Oracle automatically
* assigned to an entity for you (such as a load balancer or NAT gateway). The public IP is
* automatically deleted if the assigned entity is terminated.
* <p>
For an assigned reserved public IP, the initial unassignment portion of this operation
* is asynchronous. Poll the public IP's `lifecycleState` to determine
* if the operation succeeded.
* <p>
If you want to simply unassign a reserved public IP and return it to your pool
* of reserved public IPs, instead use
* {@link #updatePublicIp(UpdatePublicIpRequest) updatePublicIp}.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeletePublicIpRequest
     * @return DeletePublicIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeletePublicIp.ts.html |here} to see how to use DeletePublicIp API.
     */
  public async deletePublicIp(
    deletePublicIpRequest: requests.DeletePublicIpRequest
  ): Promise<responses.DeletePublicIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deletePublicIp.");
    const operationName = "deletePublicIp";
    const apiReferenceLink = "";
    const pathParams = {
      "{publicIpId}": deletePublicIpRequest.publicIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePublicIpRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePublicIpRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps/{publicIpId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePublicIpResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified public IP pool.
   * To delete a public IP pool it must not have any active IP address allocations.
   * You must specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) when deleting an IP pool.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeletePublicIpPoolRequest
   * @return DeletePublicIpPoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeletePublicIpPool.ts.html |here} to see how to use DeletePublicIpPool API.
   */
  public async deletePublicIpPool(
    deletePublicIpPoolRequest: requests.DeletePublicIpPoolRequest
  ): Promise<responses.DeletePublicIpPoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deletePublicIpPool.");
    const operationName = "deletePublicIpPool";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIpPool/DeletePublicIpPool";
    const pathParams = {
      "{publicIpPoolId}": deletePublicIpPoolRequest.publicIpPoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deletePublicIpPoolRequest.opcRequestId,
      "if-match": deletePublicIpPoolRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePublicIpPoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools/{publicIpPoolId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePublicIpPoolResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the remote peering connection (RPC).
* <p>
This is an asynchronous operation; the RPC's `lifecycleState` changes to TERMINATING temporarily
* until the RPC is completely removed.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteRemotePeeringConnectionRequest
     * @return DeleteRemotePeeringConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteRemotePeeringConnection.ts.html |here} to see how to use DeleteRemotePeeringConnection API.
     */
  public async deleteRemotePeeringConnection(
    deleteRemotePeeringConnectionRequest: requests.DeleteRemotePeeringConnectionRequest
  ): Promise<responses.DeleteRemotePeeringConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteRemotePeeringConnection.");
    const operationName = "deleteRemotePeeringConnection";
    const apiReferenceLink = "";
    const pathParams = {
      "{remotePeeringConnectionId}": deleteRemotePeeringConnectionRequest.remotePeeringConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRemotePeeringConnectionRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteRemotePeeringConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections/{remotePeeringConnectionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRemotePeeringConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified route table, but only if it's not associated with a subnet. You can't delete a
* VCN's default route table.
* <p>
This is an asynchronous operation. The route table's `lifecycleState` will change to TERMINATING temporarily
* until the route table is completely removed.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteRouteTableRequest
     * @return DeleteRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteRouteTable.ts.html |here} to see how to use DeleteRouteTable API.
     */
  public async deleteRouteTable(
    deleteRouteTableRequest: requests.DeleteRouteTableRequest
  ): Promise<responses.DeleteRouteTableResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteRouteTable.");
    const operationName = "deleteRouteTable";
    const apiReferenceLink = "";
    const pathParams = {
      "{rtId}": deleteRouteTableRequest.rtId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRouteTableRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteRouteTableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/routeTables/{rtId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRouteTableResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified security list, but only if it's not associated with a subnet. You can't delete
* a VCN's default security list.
* <p>
This is an asynchronous operation. The security list's `lifecycleState` will change to TERMINATING temporarily
* until the security list is completely removed.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteSecurityListRequest
     * @return DeleteSecurityListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteSecurityList.ts.html |here} to see how to use DeleteSecurityList API.
     */
  public async deleteSecurityList(
    deleteSecurityListRequest: requests.DeleteSecurityListRequest
  ): Promise<responses.DeleteSecurityListResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteSecurityList.");
    const operationName = "deleteSecurityList";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityListId}": deleteSecurityListRequest.securityListId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSecurityListRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSecurityListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityLists/{securityListId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSecurityListResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified service gateway. There must not be a route table that lists the service
   * gateway as a target.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteServiceGatewayRequest
   * @return DeleteServiceGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteServiceGateway.ts.html |here} to see how to use DeleteServiceGateway API.
   */
  public async deleteServiceGateway(
    deleteServiceGatewayRequest: requests.DeleteServiceGatewayRequest
  ): Promise<responses.DeleteServiceGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteServiceGateway.");
    const operationName = "deleteServiceGateway";
    const apiReferenceLink = "";
    const pathParams = {
      "{serviceGatewayId}": deleteServiceGatewayRequest.serviceGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteServiceGatewayRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteServiceGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways/{serviceGatewayId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteServiceGatewayResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified subnet, but only if there are no instances in the subnet. This is an asynchronous
   * operation. The subnet's `lifecycleState` will change to TERMINATING temporarily. If there are any
   * instances in the subnet, the state will instead change back to AVAILABLE.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteSubnetRequest
   * @return DeleteSubnetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteSubnet.ts.html |here} to see how to use DeleteSubnet API.
   */
  public async deleteSubnet(
    deleteSubnetRequest: requests.DeleteSubnetRequest
  ): Promise<responses.DeleteSubnetResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteSubnet.");
    const operationName = "deleteSubnet";
    const apiReferenceLink = "";
    const pathParams = {
      "{subnetId}": deleteSubnetRequest.subnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSubnetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSubnetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets/{subnetId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSubnetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified VCN. The VCN must be completely empty and have no attached gateways. This is an asynchronous
* operation.
* <p>
A deleted VCN's `lifecycleState` changes to TERMINATING and then TERMINATED temporarily until the VCN is completely
* removed. A completely removed VCN does not appear in the results of a `ListVcns` operation and can't be used in a
* `GetVcn` operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteVcnRequest
     * @return DeleteVcnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVcn.ts.html |here} to see how to use DeleteVcn API.
     */
  public async deleteVcn(
    deleteVcnRequest: requests.DeleteVcnRequest
  ): Promise<responses.DeleteVcnResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteVcn.");
    const operationName = "deleteVcn";
    const apiReferenceLink = "";
    const pathParams = {
      "{vcnId}": deleteVcnRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVcnRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVcnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVcnResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified virtual circuit.
   * <p>
   **Important:** If you're using FastConnect via a provider,
   * make sure to also terminate the connection with
   * the provider, or else the provider may continue to bill you.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteVirtualCircuitRequest
   * @return DeleteVirtualCircuitResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVirtualCircuit.ts.html |here} to see how to use DeleteVirtualCircuit API.
   */
  public async deleteVirtualCircuit(
    deleteVirtualCircuitRequest: requests.DeleteVirtualCircuitRequest
  ): Promise<responses.DeleteVirtualCircuitResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteVirtualCircuit.");
    const operationName = "deleteVirtualCircuit";
    const apiReferenceLink = "";
    const pathParams = {
      "{virtualCircuitId}": deleteVirtualCircuitRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVirtualCircuitRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVirtualCircuitRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVirtualCircuitResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified VLAN, but only if there are no VNICs in the VLAN.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteVlanRequest
   * @return DeleteVlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVlan.ts.html |here} to see how to use DeleteVlan API.
   */
  public async deleteVlan(
    deleteVlanRequest: requests.DeleteVlanRequest
  ): Promise<responses.DeleteVlanResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteVlan.");
    const operationName = "deleteVlan";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vlan/DeleteVlan";
    const pathParams = {
      "{vlanId}": deleteVlanRequest.vlanId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVlanRequest.ifMatch,
      "opc-request-id": deleteVlanRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVlanRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vlans/{vlanId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVlanResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified VTAP. This is an asynchronous operation. The VTAP's `lifecycleState` will change to
   * TERMINATING temporarily until the VTAP is completely removed.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteVtapRequest
   * @return DeleteVtapResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVtap.ts.html |here} to see how to use DeleteVtap API.
   */
  public async deleteVtap(
    deleteVtapRequest: requests.DeleteVtapRequest
  ): Promise<responses.DeleteVtapResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteVtap.");
    const operationName = "deleteVtap";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vtap/DeleteVtap";
    const pathParams = {
      "{vtapId}": deleteVtapRequest.vtapId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVtapRequest.ifMatch,
      "opc-request-id": deleteVtapRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVtapRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vtaps/{vtapId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVtapResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the specified {@link Service} from the list of enabled
   * `Service` objects for the specified gateway. You do not need to remove any route
   * rules that specify this `Service` object's `cidrBlock` as the destination CIDR. However, consider
   * removing the rules if your intent is to permanently disable use of the `Service` through this
   * service gateway.
   * <p>
   **Note:** The `DetachServiceId` operation is an easy way to remove an individual `Service` from
   * the service gateway. Compare it with
   * {@link #updateServiceGateway(UpdateServiceGatewayRequest) updateServiceGateway}, which replaces
   * the entire existing list of enabled `Service` objects with the list that you provide in the
   * `Update` call. `UpdateServiceGateway` also lets you block all traffic through the service
   * gateway without having to remove each of the individual `Service` objects.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DetachServiceIdRequest
   * @return DetachServiceIdResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DetachServiceId.ts.html |here} to see how to use DetachServiceId API.
   */
  public async detachServiceId(
    detachServiceIdRequest: requests.DetachServiceIdRequest
  ): Promise<responses.DetachServiceIdResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#detachServiceId.");
    const operationName = "detachServiceId";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ServiceGateway/DetachServiceId";
    const pathParams = {
      "{serviceGatewayId}": detachServiceIdRequest.serviceGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": detachServiceIdRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detachServiceIdRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways/{serviceGatewayId}/actions/detachService",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detachServiceIdRequest.detachServiceDetails,
        "ServiceIdRequestDetails",
        model.ServiceIdRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachServiceIdResponse>{},
        body: await response.json(),
        bodyKey: "serviceGateway",
        bodyModel: model.ServiceGateway,
        type: "model.ServiceGateway",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a complete list of DRG attachments that belong to a particular DRG.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAllDrgAttachmentsRequest
   * @return GetAllDrgAttachmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetAllDrgAttachments.ts.html |here} to see how to use GetAllDrgAttachments API.
   */
  public async getAllDrgAttachments(
    getAllDrgAttachmentsRequest: requests.GetAllDrgAttachmentsRequest
  ): Promise<responses.GetAllDrgAttachmentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getAllDrgAttachments.");
    const operationName = "getAllDrgAttachments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Drg/GetAllDrgAttachments";
    const pathParams = {
      "{drgId}": getAllDrgAttachmentsRequest.drgId
    };

    const queryParams = {
      "limit": getAllDrgAttachmentsRequest.limit,
      "page": getAllDrgAttachmentsRequest.page,
      "attachmentType": getAllDrgAttachmentsRequest.attachmentType,
      "isCrossTenancy": getAllDrgAttachmentsRequest.isCrossTenancy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAllDrgAttachmentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAllDrgAttachmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}/actions/getAllDrgAttachments",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAllDrgAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DrgAttachmentInfo,
        type: "Array<model.DrgAttachmentInfo>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of getAllDrgAttachmentsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DrgAttachmentInfo objects
   * contained in responses from the getAllDrgAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllAllDrgAttachments(
    request: requests.GetAllDrgAttachmentsRequest
  ): AsyncIterableIterator<model.DrgAttachmentInfo> {
    return paginateRecords(request, req => this.getAllDrgAttachments(req));
  }

  /**
   * NOTE: This function is deprecated in favor of getAllDrgAttachmentsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the getAllDrgAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllAllDrgAttachmentsResponses(
    request: requests.GetAllDrgAttachmentsRequest
  ): AsyncIterableIterator<responses.GetAllDrgAttachmentsResponse> {
    return paginateResponses(request, req => this.getAllDrgAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DrgAttachmentInfo objects
   * contained in responses from the getAllDrgAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllDrgAttachmentsRecordIterator(
    request: requests.GetAllDrgAttachmentsRequest
  ): AsyncIterableIterator<model.DrgAttachmentInfo> {
    return paginateRecords(request, req => this.getAllDrgAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the getAllDrgAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllDrgAttachmentsResponseIterator(
    request: requests.GetAllDrgAttachmentsRequest
  ): AsyncIterableIterator<responses.GetAllDrgAttachmentsResponse> {
    return paginateResponses(request, req => this.getAllDrgAttachments(req));
  }

  /**
   * The parameters allowed for IKE IPSec tunnels.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAllowedIkeIPSecParametersRequest
   * @return GetAllowedIkeIPSecParametersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetAllowedIkeIPSecParameters.ts.html |here} to see how to use GetAllowedIkeIPSecParameters API.
   */
  public async getAllowedIkeIPSecParameters(
    getAllowedIkeIPSecParametersRequest: requests.GetAllowedIkeIPSecParametersRequest
  ): Promise<responses.GetAllowedIkeIPSecParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getAllowedIkeIPSecParameters.");
    const operationName = "getAllowedIkeIPSecParameters";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/AllowedIkeIPSecParameters/GetAllowedIkeIPSecParameters";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAllowedIkeIPSecParametersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAllowedIkeIPSecParametersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecAlgorithms",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAllowedIkeIPSecParametersResponse>{},
        body: await response.json(),
        bodyKey: "allowedIkeIPSecParameters",
        bodyModel: model.AllowedIkeIPSecParameters,
        type: "model.AllowedIkeIPSecParameters",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the `ByoipRange` resource. You must specify the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetByoipRangeRequest
   * @return GetByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetByoipRange.ts.html |here} to see how to use GetByoipRange API.
   */
  public async getByoipRange(
    getByoipRangeRequest: requests.GetByoipRangeRequest
  ): Promise<responses.GetByoipRangeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getByoipRange.");
    const operationName = "getByoipRange";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ByoipRange/GetByoipRange";
    const pathParams = {
      "{byoipRangeId}": getByoipRangeRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getByoipRangeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getByoipRangeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetByoipRangeResponse>{},
        body: await response.json(),
        bodyKey: "byoipRange",
        bodyModel: model.ByoipRange,
        type: "model.ByoipRange",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified VTAP capture filter.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetCaptureFilterRequest
   * @return GetCaptureFilterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCaptureFilter.ts.html |here} to see how to use GetCaptureFilter API.
   */
  public async getCaptureFilter(
    getCaptureFilterRequest: requests.GetCaptureFilterRequest
  ): Promise<responses.GetCaptureFilterResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getCaptureFilter.");
    const operationName = "getCaptureFilter";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CaptureFilter/GetCaptureFilter";
    const pathParams = {
      "{captureFilterId}": getCaptureFilterRequest.captureFilterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCaptureFilterRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCaptureFilterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/captureFilters/{captureFilterId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCaptureFilterResponse>{},
        body: await response.json(),
        bodyKey: "captureFilter",
        bodyModel: model.CaptureFilter,
        type: "model.CaptureFilter",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified CPE's information.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCpeRequest
   * @return GetCpeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCpe.ts.html |here} to see how to use GetCpe API.
   */
  public async getCpe(getCpeRequest: requests.GetCpeRequest): Promise<responses.GetCpeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getCpe.");
    const operationName = "getCpe";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Cpe/GetCpe";
    const pathParams = {
      "{cpeId}": getCpeRequest.cpeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCpeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes/{cpeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCpeResponse>{},
        body: await response.json(),
        bodyKey: "cpe",
        bodyModel: model.Cpe,
        type: "model.Cpe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Renders a set of CPE configuration content that can help a network engineer configure the actual
* CPE device (for example, a hardware router) represented by the specified {@link Cpe}
* object.
* <p>
The rendered content is specific to the type of CPE device (for example, Cisco ASA). Therefore the
* {@link Cpe} must have the CPE's device type specified by the `cpeDeviceShapeId`
* attribute. The content optionally includes answers that the customer provides (see
* {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}),
* merged with a template of other information specific to the CPE device type.
* <p>
The operation returns configuration information for *all* of the
* {@link IPSecConnection} objects that use the specified CPE.
* Here are similar operations:
* <p>
  * {@link #getIpsecCpeDeviceConfigContent(GetIpsecCpeDeviceConfigContentRequest) getIpsecCpeDeviceConfigContent}
*   returns CPE configuration content for all IPSec tunnels in a single IPSec connection.
*   * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}
*   returns CPE configuration content for a specific IPSec tunnel in an IPSec connection.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetCpeDeviceConfigContentRequest
     * @return GetCpeDeviceConfigContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCpeDeviceConfigContent.ts.html |here} to see how to use GetCpeDeviceConfigContent API.
     */
  public async getCpeDeviceConfigContent(
    getCpeDeviceConfigContentRequest: requests.GetCpeDeviceConfigContentRequest
  ): Promise<responses.GetCpeDeviceConfigContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getCpeDeviceConfigContent.");
    const operationName = "getCpeDeviceConfigContent";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Cpe/GetCpeDeviceConfigContent";
    const pathParams = {
      "{cpeId}": getCpeDeviceConfigContentRequest.cpeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCpeDeviceConfigContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCpeDeviceConfigContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes/{cpeId}/cpeConfigContent",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCpeDeviceConfigContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the detailed information about the specified CPE device type. This might include a set of questions
   * that are specific to the particular CPE device type. The customer must supply answers to those questions
   * (see {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}).
   * The service merges the answers with a template of other information for the CPE device type. The following
   * operations return the merged content:
   * <p>
   * {@link #getCpeDeviceConfigContent(GetCpeDeviceConfigContentRequest) getCpeDeviceConfigContent}
   *   * {@link #getIpsecCpeDeviceConfigContent(GetIpsecCpeDeviceConfigContentRequest) getIpsecCpeDeviceConfigContent}
   *   * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCpeDeviceShapeRequest
   * @return GetCpeDeviceShapeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCpeDeviceShape.ts.html |here} to see how to use GetCpeDeviceShape API.
   */
  public async getCpeDeviceShape(
    getCpeDeviceShapeRequest: requests.GetCpeDeviceShapeRequest
  ): Promise<responses.GetCpeDeviceShapeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getCpeDeviceShape.");
    const operationName = "getCpeDeviceShape";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CpeDeviceShapeDetail/GetCpeDeviceShape";
    const pathParams = {
      "{cpeDeviceShapeId}": getCpeDeviceShapeRequest.cpeDeviceShapeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCpeDeviceShapeRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCpeDeviceShapeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpeDeviceShapes/{cpeDeviceShapeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCpeDeviceShapeResponse>{},
        body: await response.json(),
        bodyKey: "cpeDeviceShapeDetail",
        bodyModel: model.CpeDeviceShapeDetail,
        type: "model.CpeDeviceShapeDetail",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified cross-connect's information.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCrossConnectRequest
   * @return GetCrossConnectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCrossConnect.ts.html |here} to see how to use GetCrossConnect API.
   */
  public async getCrossConnect(
    getCrossConnectRequest: requests.GetCrossConnectRequest
  ): Promise<responses.GetCrossConnectResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getCrossConnect.");
    const operationName = "getCrossConnect";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnect/GetCrossConnect";
    const pathParams = {
      "{crossConnectId}": getCrossConnectRequest.crossConnectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCrossConnectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects/{crossConnectId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCrossConnectResponse>{},
        body: await response.json(),
        bodyKey: "crossConnect",
        bodyModel: model.CrossConnect,
        type: "model.CrossConnect",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified cross-connect group's information.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCrossConnectGroupRequest
   * @return GetCrossConnectGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCrossConnectGroup.ts.html |here} to see how to use GetCrossConnectGroup API.
   */
  public async getCrossConnectGroup(
    getCrossConnectGroupRequest: requests.GetCrossConnectGroupRequest
  ): Promise<responses.GetCrossConnectGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getCrossConnectGroup.");
    const operationName = "getCrossConnectGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectGroup/GetCrossConnectGroup";
    const pathParams = {
      "{crossConnectGroupId}": getCrossConnectGroupRequest.crossConnectGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCrossConnectGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectGroups/{crossConnectGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCrossConnectGroupResponse>{},
        body: await response.json(),
        bodyKey: "crossConnectGroup",
        bodyModel: model.CrossConnectGroup,
        type: "model.CrossConnectGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Letter of Authority for the specified cross-connect.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCrossConnectLetterOfAuthorityRequest
   * @return GetCrossConnectLetterOfAuthorityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCrossConnectLetterOfAuthority.ts.html |here} to see how to use GetCrossConnectLetterOfAuthority API.
   */
  public async getCrossConnectLetterOfAuthority(
    getCrossConnectLetterOfAuthorityRequest: requests.GetCrossConnectLetterOfAuthorityRequest
  ): Promise<responses.GetCrossConnectLetterOfAuthorityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getCrossConnectLetterOfAuthority.");
    const operationName = "getCrossConnectLetterOfAuthority";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/LetterOfAuthority/GetCrossConnectLetterOfAuthority";
    const pathParams = {
      "{crossConnectId}": getCrossConnectLetterOfAuthorityRequest.crossConnectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCrossConnectLetterOfAuthorityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects/{crossConnectId}/letterOfAuthority",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCrossConnectLetterOfAuthorityResponse>{},
        body: await response.json(),
        bodyKey: "letterOfAuthority",
        bodyModel: model.LetterOfAuthority,
        type: "model.LetterOfAuthority",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the specified cross-connect.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCrossConnectStatusRequest
   * @return GetCrossConnectStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCrossConnectStatus.ts.html |here} to see how to use GetCrossConnectStatus API.
   */
  public async getCrossConnectStatus(
    getCrossConnectStatusRequest: requests.GetCrossConnectStatusRequest
  ): Promise<responses.GetCrossConnectStatusResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getCrossConnectStatus.");
    const operationName = "getCrossConnectStatus";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectStatus/GetCrossConnectStatus";
    const pathParams = {
      "{crossConnectId}": getCrossConnectStatusRequest.crossConnectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCrossConnectStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects/{crossConnectId}/status",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCrossConnectStatusResponse>{},
        body: await response.json(),
        bodyKey: "crossConnectStatus",
        bodyModel: model.CrossConnectStatus,
        type: "model.CrossConnectStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified set of DHCP options.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDhcpOptionsRequest
   * @return GetDhcpOptionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetDhcpOptions.ts.html |here} to see how to use GetDhcpOptions API.
   */
  public async getDhcpOptions(
    getDhcpOptionsRequest: requests.GetDhcpOptionsRequest
  ): Promise<responses.GetDhcpOptionsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getDhcpOptions.");
    const operationName = "getDhcpOptions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DhcpOptions/GetDhcpOptions";
    const pathParams = {
      "{dhcpId}": getDhcpOptionsRequest.dhcpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDhcpOptionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dhcps/{dhcpId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDhcpOptionsResponse>{},
        body: await response.json(),
        bodyKey: "dhcpOptions",
        bodyModel: model.DhcpOptions,
        type: "model.DhcpOptions",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified DRG's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDrgRequest
   * @return GetDrgResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetDrg.ts.html |here} to see how to use GetDrg API.
   */
  public async getDrg(getDrgRequest: requests.GetDrgRequest): Promise<responses.GetDrgResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getDrg.");
    const operationName = "getDrg";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Drg/GetDrg";
    const pathParams = {
      "{drgId}": getDrgRequest.drgId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDrgRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDrgResponse>{},
        body: await response.json(),
        bodyKey: "drg",
        bodyModel: model.Drg,
        type: "model.Drg",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the `DrgAttachment` resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDrgAttachmentRequest
   * @return GetDrgAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetDrgAttachment.ts.html |here} to see how to use GetDrgAttachment API.
   */
  public async getDrgAttachment(
    getDrgAttachmentRequest: requests.GetDrgAttachmentRequest
  ): Promise<responses.GetDrgAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getDrgAttachment.");
    const operationName = "getDrgAttachment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgAttachment/GetDrgAttachment";
    const pathParams = {
      "{drgAttachmentId}": getDrgAttachmentRequest.drgAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDrgAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgAttachments/{drgAttachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDrgAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "drgAttachment",
        bodyModel: model.DrgAttachment,
        type: "model.DrgAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the redundancy status for the specified DRG. For more information, see
   * [Redundancy Remedies](https://docs.cloud.oracle.com/iaas/Content/Network/Troubleshoot/drgredundancy.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDrgRedundancyStatusRequest
   * @return GetDrgRedundancyStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetDrgRedundancyStatus.ts.html |here} to see how to use GetDrgRedundancyStatus API.
   */
  public async getDrgRedundancyStatus(
    getDrgRedundancyStatusRequest: requests.GetDrgRedundancyStatusRequest
  ): Promise<responses.GetDrgRedundancyStatusResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getDrgRedundancyStatus.");
    const operationName = "getDrgRedundancyStatus";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRedundancyStatus/GetDrgRedundancyStatus";
    const pathParams = {
      "{drgId}": getDrgRedundancyStatusRequest.drgId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDrgRedundancyStatusRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDrgRedundancyStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}/redundancyStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDrgRedundancyStatusResponse>{},
        body: await response.json(),
        bodyKey: "drgRedundancyStatus",
        bodyModel: model.DrgRedundancyStatus,
        type: "model.DrgRedundancyStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified route distribution's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDrgRouteDistributionRequest
   * @return GetDrgRouteDistributionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetDrgRouteDistribution.ts.html |here} to see how to use GetDrgRouteDistribution API.
   */
  public async getDrgRouteDistribution(
    getDrgRouteDistributionRequest: requests.GetDrgRouteDistributionRequest
  ): Promise<responses.GetDrgRouteDistributionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getDrgRouteDistribution.");
    const operationName = "getDrgRouteDistribution";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteDistribution/GetDrgRouteDistribution";
    const pathParams = {
      "{drgRouteDistributionId}": getDrgRouteDistributionRequest.drgRouteDistributionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDrgRouteDistributionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteDistributions/{drgRouteDistributionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDrgRouteDistributionResponse>{},
        body: await response.json(),
        bodyKey: "drgRouteDistribution",
        bodyModel: model.DrgRouteDistribution,
        type: "model.DrgRouteDistribution",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified DRG route table's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDrgRouteTableRequest
   * @return GetDrgRouteTableResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetDrgRouteTable.ts.html |here} to see how to use GetDrgRouteTable API.
   */
  public async getDrgRouteTable(
    getDrgRouteTableRequest: requests.GetDrgRouteTableRequest
  ): Promise<responses.GetDrgRouteTableResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getDrgRouteTable.");
    const operationName = "getDrgRouteTable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteTable/GetDrgRouteTable";
    const pathParams = {
      "{drgRouteTableId}": getDrgRouteTableRequest.drgRouteTableId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDrgRouteTableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteTables/{drgRouteTableId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDrgRouteTableResponse>{},
        body: await response.json(),
        bodyKey: "drgRouteTable",
        bodyModel: model.DrgRouteTable,
        type: "model.DrgRouteTable",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified provider service.
   * For more information, see [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFastConnectProviderServiceRequest
   * @return GetFastConnectProviderServiceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetFastConnectProviderService.ts.html |here} to see how to use GetFastConnectProviderService API.
   */
  public async getFastConnectProviderService(
    getFastConnectProviderServiceRequest: requests.GetFastConnectProviderServiceRequest
  ): Promise<responses.GetFastConnectProviderServiceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getFastConnectProviderService.");
    const operationName = "getFastConnectProviderService";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/FastConnectProviderService/GetFastConnectProviderService";
    const pathParams = {
      "{providerServiceId}": getFastConnectProviderServiceRequest.providerServiceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFastConnectProviderServiceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fastConnectProviderServices/{providerServiceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFastConnectProviderServiceResponse>{},
        body: await response.json(),
        bodyKey: "fastConnectProviderService",
        bodyModel: model.FastConnectProviderService,
        type: "model.FastConnectProviderService",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified provider service key's information. Use this operation to validate a
   * provider service key. An invalid key returns a 404 error.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFastConnectProviderServiceKeyRequest
   * @return GetFastConnectProviderServiceKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetFastConnectProviderServiceKey.ts.html |here} to see how to use GetFastConnectProviderServiceKey API.
   */
  public async getFastConnectProviderServiceKey(
    getFastConnectProviderServiceKeyRequest: requests.GetFastConnectProviderServiceKeyRequest
  ): Promise<responses.GetFastConnectProviderServiceKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getFastConnectProviderServiceKey.");
    const operationName = "getFastConnectProviderServiceKey";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/FastConnectProviderServiceKey/GetFastConnectProviderServiceKey";
    const pathParams = {
      "{providerServiceId}": getFastConnectProviderServiceKeyRequest.providerServiceId,
      "{providerServiceKeyName}": getFastConnectProviderServiceKeyRequest.providerServiceKeyName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFastConnectProviderServiceKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/fastConnectProviderServices/{providerServiceId}/providerServiceKeys/{providerServiceKeyName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFastConnectProviderServiceKeyResponse>{},
        body: await response.json(),
        bodyKey: "fastConnectProviderServiceKey",
        bodyModel: model.FastConnectProviderServiceKey,
        type: "model.FastConnectProviderServiceKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified IPSec connection's basic information, including the static routes for the
   * on-premises router. If you want the status of the connection (whether it's up or down), use
   * {@link #getIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest) getIPSecConnectionTunnel}.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetIPSecConnectionRequest
   * @return GetIPSecConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIPSecConnection.ts.html |here} to see how to use GetIPSecConnection API.
   */
  public async getIPSecConnection(
    getIPSecConnectionRequest: requests.GetIPSecConnectionRequest
  ): Promise<responses.GetIPSecConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnection.");
    const operationName = "getIPSecConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnection/GetIPSecConnection";
    const pathParams = {
      "{ipscId}": getIPSecConnectionRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getIPSecConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIPSecConnectionResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnection",
        bodyModel: model.IPSecConnection,
        type: "model.IPSecConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deprecated. To get tunnel information, instead use:
   * <p>
   * {@link #getIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest) getIPSecConnectionTunnel}
   * * {@link #getIPSecConnectionTunnelSharedSecret(GetIPSecConnectionTunnelSharedSecretRequest) getIPSecConnectionTunnelSharedSecret}
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetIPSecConnectionDeviceConfigRequest
   * @return GetIPSecConnectionDeviceConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIPSecConnectionDeviceConfig.ts.html |here} to see how to use GetIPSecConnectionDeviceConfig API.
   */
  public async getIPSecConnectionDeviceConfig(
    getIPSecConnectionDeviceConfigRequest: requests.GetIPSecConnectionDeviceConfigRequest
  ): Promise<responses.GetIPSecConnectionDeviceConfigResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnectionDeviceConfig.");
    const operationName = "getIPSecConnectionDeviceConfig";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionDeviceConfig/GetIPSecConnectionDeviceConfig";
    const pathParams = {
      "{ipscId}": getIPSecConnectionDeviceConfigRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getIPSecConnectionDeviceConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/deviceConfig",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIPSecConnectionDeviceConfigResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionDeviceConfig",
        bodyModel: model.IPSecConnectionDeviceConfig,
        type: "model.IPSecConnectionDeviceConfig",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deprecated. To get the tunnel status, instead use
   * {@link #getIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest) getIPSecConnectionTunnel}.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetIPSecConnectionDeviceStatusRequest
   * @return GetIPSecConnectionDeviceStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIPSecConnectionDeviceStatus.ts.html |here} to see how to use GetIPSecConnectionDeviceStatus API.
   */
  public async getIPSecConnectionDeviceStatus(
    getIPSecConnectionDeviceStatusRequest: requests.GetIPSecConnectionDeviceStatusRequest
  ): Promise<responses.GetIPSecConnectionDeviceStatusResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnectionDeviceStatus.");
    const operationName = "getIPSecConnectionDeviceStatus";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionDeviceStatus/GetIPSecConnectionDeviceStatus";
    const pathParams = {
      "{ipscId}": getIPSecConnectionDeviceStatusRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getIPSecConnectionDeviceStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/deviceStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIPSecConnectionDeviceStatusResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionDeviceStatus",
        bodyModel: model.IPSecConnectionDeviceStatus,
        type: "model.IPSecConnectionDeviceStatus",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified tunnel's information. The resulting object does not include the tunnel's
   * shared secret (pre-shared key). To retrieve that, use
   * {@link #getIPSecConnectionTunnelSharedSecret(GetIPSecConnectionTunnelSharedSecretRequest) getIPSecConnectionTunnelSharedSecret}.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetIPSecConnectionTunnelRequest
   * @return GetIPSecConnectionTunnelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIPSecConnectionTunnel.ts.html |here} to see how to use GetIPSecConnectionTunnel API.
   */
  public async getIPSecConnectionTunnel(
    getIPSecConnectionTunnelRequest: requests.GetIPSecConnectionTunnelRequest
  ): Promise<responses.GetIPSecConnectionTunnelResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnectionTunnel.");
    const operationName = "getIPSecConnectionTunnel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnel/GetIPSecConnectionTunnel";
    const pathParams = {
      "{ipscId}": getIPSecConnectionTunnelRequest.ipscId,
      "{tunnelId}": getIPSecConnectionTunnelRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getIPSecConnectionTunnelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIPSecConnectionTunnelResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionTunnel",
        bodyModel: model.IPSecConnectionTunnel,
        type: "model.IPSecConnectionTunnel",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the identified error for the specified IPSec tunnel ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetIPSecConnectionTunnelErrorRequest
   * @return GetIPSecConnectionTunnelErrorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIPSecConnectionTunnelError.ts.html |here} to see how to use GetIPSecConnectionTunnelError API.
   */
  public async getIPSecConnectionTunnelError(
    getIPSecConnectionTunnelErrorRequest: requests.GetIPSecConnectionTunnelErrorRequest
  ): Promise<responses.GetIPSecConnectionTunnelErrorResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnectionTunnelError.");
    const operationName = "getIPSecConnectionTunnelError";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelErrorDetails/GetIPSecConnectionTunnelError";
    const pathParams = {
      "{ipscId}": getIPSecConnectionTunnelErrorRequest.ipscId,
      "{tunnelId}": getIPSecConnectionTunnelErrorRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getIPSecConnectionTunnelErrorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/error",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIPSecConnectionTunnelErrorResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionTunnelErrorDetails",
        bodyModel: model.IPSecConnectionTunnelErrorDetails,
        type: "model.IPSecConnectionTunnelErrorDetails",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified tunnel's shared secret (pre-shared key). To get other information
   * about the tunnel, use {@link #getIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest) getIPSecConnectionTunnel}.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetIPSecConnectionTunnelSharedSecretRequest
   * @return GetIPSecConnectionTunnelSharedSecretResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIPSecConnectionTunnelSharedSecret.ts.html |here} to see how to use GetIPSecConnectionTunnelSharedSecret API.
   */
  public async getIPSecConnectionTunnelSharedSecret(
    getIPSecConnectionTunnelSharedSecretRequest: requests.GetIPSecConnectionTunnelSharedSecretRequest
  ): Promise<responses.GetIPSecConnectionTunnelSharedSecretResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#getIPSecConnectionTunnelSharedSecret."
      );
    const operationName = "getIPSecConnectionTunnelSharedSecret";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/GetIPSecConnectionTunnelSharedSecret";
    const pathParams = {
      "{ipscId}": getIPSecConnectionTunnelSharedSecretRequest.ipscId,
      "{tunnelId}": getIPSecConnectionTunnelSharedSecretRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getIPSecConnectionTunnelSharedSecretRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/sharedSecret",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIPSecConnectionTunnelSharedSecretResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionTunnelSharedSecret",
        bodyModel: model.IPSecConnectionTunnelSharedSecret,
        type: "model.IPSecConnectionTunnelSharedSecret",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified internet gateway's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetInternetGatewayRequest
   * @return GetInternetGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInternetGateway.ts.html |here} to see how to use GetInternetGateway API.
   */
  public async getInternetGateway(
    getInternetGatewayRequest: requests.GetInternetGatewayRequest
  ): Promise<responses.GetInternetGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getInternetGateway.");
    const operationName = "getInternetGateway";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InternetGateway/GetInternetGateway";
    const pathParams = {
      "{igId}": getInternetGatewayRequest.igId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getInternetGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internetGateways/{igId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInternetGatewayResponse>{},
        body: await response.json(),
        bodyKey: "internetGateway",
        bodyModel: model.InternetGateway,
        type: "model.InternetGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Renders a set of CPE configuration content for the specified IPSec connection (for all the
* tunnels in the connection). The content helps a network engineer configure the actual CPE
* device (for example, a hardware router) that the specified IPSec connection terminates on.
* <p>
The rendered content is specific to the type of CPE device (for example, Cisco ASA). Therefore the
* {@link Cpe} used by the specified {@link IPSecConnection}
* must have the CPE's device type specified by the `cpeDeviceShapeId` attribute. The content
* optionally includes answers that the customer provides (see
* {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}),
* merged with a template of other information specific to the CPE device type.
* <p>
The operation returns configuration information for all tunnels in the single specified
* {@link IPSecConnection} object. Here are other similar
* operations:
* <p>
  * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}
*   returns CPE configuration content for a specific tunnel within an IPSec connection.
*   * {@link #getCpeDeviceConfigContent(GetCpeDeviceConfigContentRequest) getCpeDeviceConfigContent}
*   returns CPE configuration content for *all* IPSec connections that use a specific CPE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetIpsecCpeDeviceConfigContentRequest
     * @return GetIpsecCpeDeviceConfigContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIpsecCpeDeviceConfigContent.ts.html |here} to see how to use GetIpsecCpeDeviceConfigContent API.
     */
  public async getIpsecCpeDeviceConfigContent(
    getIpsecCpeDeviceConfigContentRequest: requests.GetIpsecCpeDeviceConfigContentRequest
  ): Promise<responses.GetIpsecCpeDeviceConfigContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getIpsecCpeDeviceConfigContent.");
    const operationName = "getIpsecCpeDeviceConfigContent";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnection/GetIpsecCpeDeviceConfigContent";
    const pathParams = {
      "{ipscId}": getIpsecCpeDeviceConfigContentRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getIpsecCpeDeviceConfigContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getIpsecCpeDeviceConfigContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/cpeConfigContent",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIpsecCpeDeviceConfigContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified IPv6. You must specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   * Alternatively, you can get the object by using
   * {@link #listIpv6s(ListIpv6sRequest) listIpv6s}
   * with the IPv6 address (for example, 2001:0db8:0123:1111:98fe:dcba:9876:4321) and subnet [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetIpv6Request
   * @return GetIpv6Response
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIpv6.ts.html |here} to see how to use GetIpv6 API.
   */
  public async getIpv6(
    getIpv6Request: requests.GetIpv6Request
  ): Promise<responses.GetIpv6Response> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getIpv6.");
    const operationName = "getIpv6";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Ipv6/GetIpv6";
    const pathParams = {
      "{ipv6Id}": getIpv6Request.ipv6Id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getIpv6Request.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getIpv6Request.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipv6/{ipv6Id}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIpv6Response>{},
        body: await response.json(),
        bodyKey: "ipv6",
        bodyModel: model.Ipv6,
        type: "model.Ipv6",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified local peering gateway's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLocalPeeringGatewayRequest
   * @return GetLocalPeeringGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetLocalPeeringGateway.ts.html |here} to see how to use GetLocalPeeringGateway API.
   */
  public async getLocalPeeringGateway(
    getLocalPeeringGatewayRequest: requests.GetLocalPeeringGatewayRequest
  ): Promise<responses.GetLocalPeeringGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getLocalPeeringGateway.");
    const operationName = "getLocalPeeringGateway";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/LocalPeeringGateway/GetLocalPeeringGateway";
    const pathParams = {
      "{localPeeringGatewayId}": getLocalPeeringGatewayRequest.localPeeringGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLocalPeeringGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways/{localPeeringGatewayId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLocalPeeringGatewayResponse>{},
        body: await response.json(),
        bodyKey: "localPeeringGateway",
        bodyModel: model.LocalPeeringGateway,
        type: "model.LocalPeeringGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified NAT gateway's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetNatGatewayRequest
   * @return GetNatGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetNatGateway.ts.html |here} to see how to use GetNatGateway API.
   */
  public async getNatGateway(
    getNatGatewayRequest: requests.GetNatGatewayRequest
  ): Promise<responses.GetNatGatewayResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getNatGateway.");
    const operationName = "getNatGateway";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NatGateway/GetNatGateway";
    const pathParams = {
      "{natGatewayId}": getNatGatewayRequest.natGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNatGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/natGateways/{natGatewayId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNatGatewayResponse>{},
        body: await response.json(),
        bodyKey: "natGateway",
        bodyModel: model.NatGateway,
        type: "model.NatGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets the specified network security group's information.
* <p>
To list the VNICs in an NSG, see
* {@link #listNetworkSecurityGroupVnics(ListNetworkSecurityGroupVnicsRequest) listNetworkSecurityGroupVnics}.
* <p>
To list the security rules in an NSG, see
* {@link #listNetworkSecurityGroupSecurityRules(ListNetworkSecurityGroupSecurityRulesRequest) listNetworkSecurityGroupSecurityRules}.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetNetworkSecurityGroupRequest
     * @return GetNetworkSecurityGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetNetworkSecurityGroup.ts.html |here} to see how to use GetNetworkSecurityGroup API.
     */
  public async getNetworkSecurityGroup(
    getNetworkSecurityGroupRequest: requests.GetNetworkSecurityGroupRequest
  ): Promise<responses.GetNetworkSecurityGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getNetworkSecurityGroup.");
    const operationName = "getNetworkSecurityGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NetworkSecurityGroup/GetNetworkSecurityGroup";
    const pathParams = {
      "{networkSecurityGroupId}": getNetworkSecurityGroupRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNetworkSecurityGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNetworkSecurityGroupResponse>{},
        body: await response.json(),
        bodyKey: "networkSecurityGroup",
        bodyModel: model.NetworkSecurityGroup,
        type: "model.NetworkSecurityGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a virtual networking topology for the current region.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetNetworkingTopologyRequest
   * @return GetNetworkingTopologyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetNetworkingTopology.ts.html |here} to see how to use GetNetworkingTopology API.
   */
  public async getNetworkingTopology(
    getNetworkingTopologyRequest: requests.GetNetworkingTopologyRequest
  ): Promise<responses.GetNetworkingTopologyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getNetworkingTopology.");
    const operationName = "getNetworkingTopology";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NetworkingTopology/GetNetworkingTopology";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getNetworkingTopologyRequest.compartmentId,
      "accessLevel": getNetworkingTopologyRequest.accessLevel,
      "queryCompartmentSubtree": getNetworkingTopologyRequest.queryCompartmentSubtree
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getNetworkingTopologyRequest.opcRequestId,
      "if-none-match": getNetworkingTopologyRequest.ifNoneMatch,
      "cache-control": getNetworkingTopologyRequest.cacheControl
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNetworkingTopologyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkingTopology",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNetworkingTopologyResponse>{},
        body: await response.json(),
        bodyKey: "networkingTopology",
        bodyModel: model.NetworkingTopology,
        type: "model.NetworkingTopology",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified private IP. You must specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   * Alternatively, you can get the object by using
   * {@link #listPrivateIps(ListPrivateIpsRequest) listPrivateIps}
   * with the private IP address (for example, 10.0.3.3) and subnet [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPrivateIpRequest
   * @return GetPrivateIpResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetPrivateIp.ts.html |here} to see how to use GetPrivateIp API.
   */
  public async getPrivateIp(
    getPrivateIpRequest: requests.GetPrivateIpRequest
  ): Promise<responses.GetPrivateIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getPrivateIp.");
    const operationName = "getPrivateIp";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PrivateIp/GetPrivateIp";
    const pathParams = {
      "{privateIpId}": getPrivateIpRequest.privateIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPrivateIpRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateIps/{privateIpId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPrivateIpResponse>{},
        body: await response.json(),
        bodyKey: "privateIp",
        bodyModel: model.PrivateIp,
        type: "model.PrivateIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets the specified public IP. You must specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
Alternatively, you can get the object by using {@link #getPublicIpByIpAddress(GetPublicIpByIpAddressRequest) getPublicIpByIpAddress}
* with the public IP address (for example, 203.0.113.2).
* <p>
Or you can use {@link #getPublicIpByPrivateIpId(GetPublicIpByPrivateIpIdRequest) getPublicIpByPrivateIpId}
* with the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private IP that the public IP is assigned to.
* <p>
**Note:** If you're fetching a reserved public IP that is in the process of being
* moved to a different private IP, the service returns the public IP object with
* `lifecycleState` = ASSIGNING and `assignedEntityId` = [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target private IP.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetPublicIpRequest
     * @return GetPublicIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetPublicIp.ts.html |here} to see how to use GetPublicIp API.
     */
  public async getPublicIp(
    getPublicIpRequest: requests.GetPublicIpRequest
  ): Promise<responses.GetPublicIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getPublicIp.");
    const operationName = "getPublicIp";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIp/GetPublicIp";
    const pathParams = {
      "{publicIpId}": getPublicIpRequest.publicIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPublicIpRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps/{publicIpId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPublicIpResponse>{},
        body: await response.json(),
        bodyKey: "publicIp",
        bodyModel: model.PublicIp,
        type: "model.PublicIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the public IP based on the public IP address (for example, 203.0.113.2).
   * <p>
   **Note:** If you're fetching a reserved public IP that is in the process of being
   * moved to a different private IP, the service returns the public IP object with
   * `lifecycleState` = ASSIGNING and `assignedEntityId` = [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target private IP.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPublicIpByIpAddressRequest
   * @return GetPublicIpByIpAddressResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetPublicIpByIpAddress.ts.html |here} to see how to use GetPublicIpByIpAddress API.
   */
  public async getPublicIpByIpAddress(
    getPublicIpByIpAddressRequest: requests.GetPublicIpByIpAddressRequest
  ): Promise<responses.GetPublicIpByIpAddressResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getPublicIpByIpAddress.");
    const operationName = "getPublicIpByIpAddress";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIp/GetPublicIpByIpAddress";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPublicIpByIpAddressRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps/actions/getByIpAddress",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        getPublicIpByIpAddressRequest.getPublicIpByIpAddressDetails,
        "GetPublicIpByIpAddressDetails",
        model.GetPublicIpByIpAddressDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPublicIpByIpAddressResponse>{},
        body: await response.json(),
        bodyKey: "publicIp",
        bodyModel: model.PublicIp,
        type: "model.PublicIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the public IP assigned to the specified private IP. You must specify the OCID
   * of the private IP. If no public IP is assigned, a 404 is returned.
   * <p>
   **Note:** If you're fetching a reserved public IP that is in the process of being
   * moved to a different private IP, and you provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the original private
   * IP, this operation returns a 404. If you instead provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target
   * private IP, or if you instead call
   * {@link #getPublicIp(GetPublicIpRequest) getPublicIp} or
   * {@link #getPublicIpByIpAddress(GetPublicIpByIpAddressRequest) getPublicIpByIpAddress}, the
   * service returns the public IP object with `lifecycleState` = ASSIGNING and
   * `assignedEntityId` = [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target private IP.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPublicIpByPrivateIpIdRequest
   * @return GetPublicIpByPrivateIpIdResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetPublicIpByPrivateIpId.ts.html |here} to see how to use GetPublicIpByPrivateIpId API.
   */
  public async getPublicIpByPrivateIpId(
    getPublicIpByPrivateIpIdRequest: requests.GetPublicIpByPrivateIpIdRequest
  ): Promise<responses.GetPublicIpByPrivateIpIdResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getPublicIpByPrivateIpId.");
    const operationName = "getPublicIpByPrivateIpId";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIp/GetPublicIpByPrivateIpId";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPublicIpByPrivateIpIdRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps/actions/getByPrivateIpId",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        getPublicIpByPrivateIpIdRequest.getPublicIpByPrivateIpIdDetails,
        "GetPublicIpByPrivateIpIdDetails",
        model.GetPublicIpByPrivateIpIdDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPublicIpByPrivateIpIdResponse>{},
        body: await response.json(),
        bodyKey: "publicIp",
        bodyModel: model.PublicIp,
        type: "model.PublicIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified `PublicIpPool` object. You must specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPublicIpPoolRequest
   * @return GetPublicIpPoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetPublicIpPool.ts.html |here} to see how to use GetPublicIpPool API.
   */
  public async getPublicIpPool(
    getPublicIpPoolRequest: requests.GetPublicIpPoolRequest
  ): Promise<responses.GetPublicIpPoolResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getPublicIpPool.");
    const operationName = "getPublicIpPool";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIpPool/GetPublicIpPool";
    const pathParams = {
      "{publicIpPoolId}": getPublicIpPoolRequest.publicIpPoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPublicIpPoolRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPublicIpPoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools/{publicIpPoolId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPublicIpPoolResponse>{},
        body: await response.json(),
        bodyKey: "publicIpPool",
        bodyModel: model.PublicIpPool,
        type: "model.PublicIpPool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the specified remote peering connection's information.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetRemotePeeringConnectionRequest
   * @return GetRemotePeeringConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetRemotePeeringConnection.ts.html |here} to see how to use GetRemotePeeringConnection API.
   */
  public async getRemotePeeringConnection(
    getRemotePeeringConnectionRequest: requests.GetRemotePeeringConnectionRequest
  ): Promise<responses.GetRemotePeeringConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getRemotePeeringConnection.");
    const operationName = "getRemotePeeringConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/RemotePeeringConnection/GetRemotePeeringConnection";
    const pathParams = {
      "{remotePeeringConnectionId}": getRemotePeeringConnectionRequest.remotePeeringConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRemotePeeringConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections/{remotePeeringConnectionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRemotePeeringConnectionResponse>{},
        body: await response.json(),
        bodyKey: "remotePeeringConnection",
        bodyModel: model.RemotePeeringConnection,
        type: "model.RemotePeeringConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the `IpInventory` resource.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetResourceIpInventoryRequest
   * @return GetResourceIpInventoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetResourceIpInventory.ts.html |here} to see how to use GetResourceIpInventory API.
   */
  public async getResourceIpInventory(
    getResourceIpInventoryRequest: requests.GetResourceIpInventoryRequest
  ): Promise<responses.GetResourceIpInventoryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getResourceIpInventory.");
    const operationName = "getResourceIpInventory";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IpInventoryCollection/GetResourceIpInventory";
    const pathParams = {
      "{dataRequestId}": getResourceIpInventoryRequest.dataRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getResourceIpInventoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getResourceIpInventoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipinventory/DataRequestId/{dataRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetResourceIpInventoryResponse>{},
        body: await response.json(),
        bodyKey: "ipInventoryCollection",
        bodyModel: model.IpInventoryCollection,
        type: "model.IpInventoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified route table's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetRouteTableRequest
   * @return GetRouteTableResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetRouteTable.ts.html |here} to see how to use GetRouteTable API.
   */
  public async getRouteTable(
    getRouteTableRequest: requests.GetRouteTableRequest
  ): Promise<responses.GetRouteTableResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getRouteTable.");
    const operationName = "getRouteTable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/RouteTable/GetRouteTable";
    const pathParams = {
      "{rtId}": getRouteTableRequest.rtId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRouteTableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/routeTables/{rtId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRouteTableResponse>{},
        body: await response.json(),
        bodyKey: "routeTable",
        bodyModel: model.RouteTable,
        type: "model.RouteTable",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified security list's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSecurityListRequest
   * @return GetSecurityListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetSecurityList.ts.html |here} to see how to use GetSecurityList API.
   */
  public async getSecurityList(
    getSecurityListRequest: requests.GetSecurityListRequest
  ): Promise<responses.GetSecurityListResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getSecurityList.");
    const operationName = "getSecurityList";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/SecurityList/GetSecurityList";
    const pathParams = {
      "{securityListId}": getSecurityListRequest.securityListId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityLists/{securityListId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityListResponse>{},
        body: await response.json(),
        bodyKey: "securityList",
        bodyModel: model.SecurityList,
        type: "model.SecurityList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified {@link Service} object.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetServiceRequest
   * @return GetServiceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetService.ts.html |here} to see how to use GetService API.
   */
  public async getService(
    getServiceRequest: requests.GetServiceRequest
  ): Promise<responses.GetServiceResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getService.");
    const operationName = "getService";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Service/GetService";
    const pathParams = {
      "{serviceId}": getServiceRequest.serviceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getServiceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/services/{serviceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetServiceResponse>{},
        body: await response.json(),
        bodyKey: "service",
        bodyModel: model.Service,
        type: "model.Service",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified service gateway's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetServiceGatewayRequest
   * @return GetServiceGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetServiceGateway.ts.html |here} to see how to use GetServiceGateway API.
   */
  public async getServiceGateway(
    getServiceGatewayRequest: requests.GetServiceGatewayRequest
  ): Promise<responses.GetServiceGatewayResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getServiceGateway.");
    const operationName = "getServiceGateway";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ServiceGateway/GetServiceGateway";
    const pathParams = {
      "{serviceGatewayId}": getServiceGatewayRequest.serviceGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getServiceGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways/{serviceGatewayId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetServiceGatewayResponse>{},
        body: await response.json(),
        bodyKey: "serviceGateway",
        bodyModel: model.ServiceGateway,
        type: "model.ServiceGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified subnet's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSubnetRequest
   * @return GetSubnetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetSubnet.ts.html |here} to see how to use GetSubnet API.
   */
  public async getSubnet(
    getSubnetRequest: requests.GetSubnetRequest
  ): Promise<responses.GetSubnetResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getSubnet.");
    const operationName = "getSubnet";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Subnet/GetSubnet";
    const pathParams = {
      "{subnetId}": getSubnetRequest.subnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSubnetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets/{subnetId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSubnetResponse>{},
        body: await response.json(),
        bodyKey: "subnet",
        bodyModel: model.Subnet,
        type: "model.Subnet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the CIDR utilization data of the specified subnet. Specify the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSubnetCidrUtilizationRequest
   * @return GetSubnetCidrUtilizationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetSubnetCidrUtilization.ts.html |here} to see how to use GetSubnetCidrUtilization API.
   */
  public async getSubnetCidrUtilization(
    getSubnetCidrUtilizationRequest: requests.GetSubnetCidrUtilizationRequest
  ): Promise<responses.GetSubnetCidrUtilizationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getSubnetCidrUtilization.");
    const operationName = "getSubnetCidrUtilization";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IpInventoryCidrUtilizationCollection/GetSubnetCidrUtilization";
    const pathParams = {
      "{subnetId}": getSubnetCidrUtilizationRequest.subnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSubnetCidrUtilizationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSubnetCidrUtilizationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipInventory/subnets/{subnetId}/cidrs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSubnetCidrUtilizationResponse>{},
        body: await response.json(),
        bodyKey: "ipInventoryCidrUtilizationCollection",
        bodyModel: model.IpInventoryCidrUtilizationCollection,
        type: "model.IpInventoryCidrUtilizationCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the IP Inventory data of the specified subnet. Specify the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSubnetIpInventoryRequest
   * @return GetSubnetIpInventoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetSubnetIpInventory.ts.html |here} to see how to use GetSubnetIpInventory API.
   */
  public async getSubnetIpInventory(
    getSubnetIpInventoryRequest: requests.GetSubnetIpInventoryRequest
  ): Promise<responses.GetSubnetIpInventoryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getSubnetIpInventory.");
    const operationName = "getSubnetIpInventory";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IpInventorySubnetResourceCollection/GetSubnetIpInventory";
    const pathParams = {
      "{subnetId}": getSubnetIpInventoryRequest.subnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSubnetIpInventoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSubnetIpInventoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipInventory/subnets/{subnetId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSubnetIpInventoryResponse>{},
        body: await response.json(),
        bodyKey: "ipInventorySubnetResourceCollection",
        bodyModel: model.IpInventorySubnetResourceCollection,
        type: "model.IpInventorySubnetResourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a topology for a given subnet.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSubnetTopologyRequest
   * @return GetSubnetTopologyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetSubnetTopology.ts.html |here} to see how to use GetSubnetTopology API.
   */
  public async getSubnetTopology(
    getSubnetTopologyRequest: requests.GetSubnetTopologyRequest
  ): Promise<responses.GetSubnetTopologyResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getSubnetTopology.");
    const operationName = "getSubnetTopology";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/SubnetTopology/GetSubnetTopology";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getSubnetTopologyRequest.compartmentId,
      "accessLevel": getSubnetTopologyRequest.accessLevel,
      "queryCompartmentSubtree": getSubnetTopologyRequest.queryCompartmentSubtree,
      "subnetId": getSubnetTopologyRequest.subnetId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSubnetTopologyRequest.opcRequestId,
      "if-none-match": getSubnetTopologyRequest.ifNoneMatch,
      "cache-control": getSubnetTopologyRequest.cacheControl
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSubnetTopologyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnetTopology",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSubnetTopologyResponse>{},
        body: await response.json(),
        bodyKey: "subnetTopology",
        bodyModel: model.SubnetTopology,
        type: "model.SubnetTopology",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the set of CPE configuration answers for the tunnel, which the customer provided in
   * {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}.
   * To get the full set of content for the tunnel (any answers merged with the template of other
   * information specific to the CPE device type), use
   * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetTunnelCpeDeviceConfigRequest
   * @return GetTunnelCpeDeviceConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetTunnelCpeDeviceConfig.ts.html |here} to see how to use GetTunnelCpeDeviceConfig API.
   */
  public async getTunnelCpeDeviceConfig(
    getTunnelCpeDeviceConfigRequest: requests.GetTunnelCpeDeviceConfigRequest
  ): Promise<responses.GetTunnelCpeDeviceConfigResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getTunnelCpeDeviceConfig.");
    const operationName = "getTunnelCpeDeviceConfig";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/TunnelCpeDeviceConfig/GetTunnelCpeDeviceConfig";
    const pathParams = {
      "{ipscId}": getTunnelCpeDeviceConfigRequest.ipscId,
      "{tunnelId}": getTunnelCpeDeviceConfigRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTunnelCpeDeviceConfigRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTunnelCpeDeviceConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/tunnelDeviceConfig",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTunnelCpeDeviceConfigResponse>{},
        body: await response.json(),
        bodyKey: "tunnelCpeDeviceConfig",
        bodyModel: model.TunnelCpeDeviceConfig,
        type: "model.TunnelCpeDeviceConfig",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Renders a set of CPE configuration content for the specified IPSec tunnel. The content helps a
* network engineer configure the actual CPE device (for example, a hardware router) that the specified
* IPSec tunnel terminates on.
* <p>
The rendered content is specific to the type of CPE device (for example, Cisco ASA). Therefore the
* {@link Cpe} used by the specified {@link IPSecConnection}
* must have the CPE's device type specified by the `cpeDeviceShapeId` attribute. The content
* optionally includes answers that the customer provides (see
* {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}),
* merged with a template of other information specific to the CPE device type.
* <p>
The operation returns configuration information for only the specified IPSec tunnel.
* Here are other similar operations:
* <p>
  * {@link #getIpsecCpeDeviceConfigContent(GetIpsecCpeDeviceConfigContentRequest) getIpsecCpeDeviceConfigContent}
*   returns CPE configuration content for all tunnels in a single IPSec connection.
*   * {@link #getCpeDeviceConfigContent(GetCpeDeviceConfigContentRequest) getCpeDeviceConfigContent}
*   returns CPE configuration content for *all* IPSec connections that use a specific CPE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTunnelCpeDeviceConfigContentRequest
     * @return GetTunnelCpeDeviceConfigContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetTunnelCpeDeviceConfigContent.ts.html |here} to see how to use GetTunnelCpeDeviceConfigContent API.
     */
  public async getTunnelCpeDeviceConfigContent(
    getTunnelCpeDeviceConfigContentRequest: requests.GetTunnelCpeDeviceConfigContentRequest
  ): Promise<responses.GetTunnelCpeDeviceConfigContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getTunnelCpeDeviceConfigContent.");
    const operationName = "getTunnelCpeDeviceConfigContent";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/TunnelCpeDeviceConfig/GetTunnelCpeDeviceConfigContent";
    const pathParams = {
      "{ipscId}": getTunnelCpeDeviceConfigContentRequest.ipscId,
      "{tunnelId}": getTunnelCpeDeviceConfigContentRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTunnelCpeDeviceConfigContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTunnelCpeDeviceConfigContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/tunnelDeviceConfig/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTunnelCpeDeviceConfigContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the DRG upgrade status. The status can be not updated, in progress, or updated. Also indicates how much of the upgrade is completed.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetUpgradeStatusRequest
   * @return GetUpgradeStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetUpgradeStatus.ts.html |here} to see how to use GetUpgradeStatus API.
   */
  public async getUpgradeStatus(
    getUpgradeStatusRequest: requests.GetUpgradeStatusRequest
  ): Promise<responses.GetUpgradeStatusResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getUpgradeStatus.");
    const operationName = "getUpgradeStatus";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Drg/GetUpgradeStatus";
    const pathParams = {
      "{drgId}": getUpgradeStatusRequest.drgId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUpgradeStatusRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUpgradeStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}/actions/upgradeStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUpgradeStatusResponse>{},
        body: await response.json(),
        bodyKey: "upgradeStatus",
        bodyModel: model.UpgradeStatus,
        type: "model.UpgradeStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified VCN's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVcnRequest
   * @return GetVcnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVcn.ts.html |here} to see how to use GetVcn API.
   */
  public async getVcn(getVcnRequest: requests.GetVcnRequest): Promise<responses.GetVcnResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getVcn.");
    const operationName = "getVcn";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vcn/GetVcn";
    const pathParams = {
      "{vcnId}": getVcnRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVcnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVcnResponse>{},
        body: await response.json(),
        bodyKey: "vcn",
        bodyModel: model.Vcn,
        type: "model.Vcn",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the associated DNS resolver information with a vcn
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVcnDnsResolverAssociationRequest
   * @return GetVcnDnsResolverAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVcnDnsResolverAssociation.ts.html |here} to see how to use GetVcnDnsResolverAssociation API.
   */
  public async getVcnDnsResolverAssociation(
    getVcnDnsResolverAssociationRequest: requests.GetVcnDnsResolverAssociationRequest
  ): Promise<responses.GetVcnDnsResolverAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getVcnDnsResolverAssociation.");
    const operationName = "getVcnDnsResolverAssociation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VcnDnsResolverAssociation/GetVcnDnsResolverAssociation";
    const pathParams = {
      "{vcnId}": getVcnDnsResolverAssociationRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getVcnDnsResolverAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVcnDnsResolverAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}/dnsResolverAssociation",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVcnDnsResolverAssociationResponse>{},
        body: await response.json(),
        bodyKey: "vcnDnsResolverAssociation",
        bodyModel: model.VcnDnsResolverAssociation,
        type: "model.VcnDnsResolverAssociation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the CIDR overlap information of the specified VCN in selected compartments. Specify the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVcnOverlapRequest
   * @return GetVcnOverlapResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVcnOverlap.ts.html |here} to see how to use GetVcnOverlap API.
   */
  public async getVcnOverlap(
    getVcnOverlapRequest: requests.GetVcnOverlapRequest
  ): Promise<responses.GetVcnOverlapResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getVcnOverlap.");
    const operationName = "getVcnOverlap";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IpInventoryVcnOverlapCollection/GetVcnOverlap";
    const pathParams = {
      "{vcnId}": getVcnOverlapRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getVcnOverlapRequest.opcRequestId,
      "opc-retry-token": getVcnOverlapRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVcnOverlapRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipInventory/vcns/{vcnId}/overlaps",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        getVcnOverlapRequest.getVcnOverlapDetails,
        "GetIpInventoryVcnOverlapDetails",
        model.GetIpInventoryVcnOverlapDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVcnOverlapResponse>{},
        body: await response.json(),
        bodyKey: "ipInventoryVcnOverlapCollection",
        bodyModel: model.IpInventoryVcnOverlapCollection,
        type: "model.IpInventoryVcnOverlapCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("lifecycle-state"),
            key: "lifecycleState",
            dataType: "string"
          },
          {
            value: response.headers.get("data-request-id"),
            key: "dataRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a virtual network topology for a given VCN.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVcnTopologyRequest
   * @return GetVcnTopologyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVcnTopology.ts.html |here} to see how to use GetVcnTopology API.
   */
  public async getVcnTopology(
    getVcnTopologyRequest: requests.GetVcnTopologyRequest
  ): Promise<responses.GetVcnTopologyResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getVcnTopology.");
    const operationName = "getVcnTopology";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VcnTopology/GetVcnTopology";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getVcnTopologyRequest.compartmentId,
      "accessLevel": getVcnTopologyRequest.accessLevel,
      "queryCompartmentSubtree": getVcnTopologyRequest.queryCompartmentSubtree,
      "vcnId": getVcnTopologyRequest.vcnId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getVcnTopologyRequest.opcRequestId,
      "if-none-match": getVcnTopologyRequest.ifNoneMatch,
      "cache-control": getVcnTopologyRequest.cacheControl
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVcnTopologyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcnTopology",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVcnTopologyResponse>{},
        body: await response.json(),
        bodyKey: "vcnTopology",
        bodyModel: model.VcnTopology,
        type: "model.VcnTopology",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified virtual circuit's information.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetVirtualCircuitRequest
   * @return GetVirtualCircuitResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVirtualCircuit.ts.html |here} to see how to use GetVirtualCircuit API.
   */
  public async getVirtualCircuit(
    getVirtualCircuitRequest: requests.GetVirtualCircuitRequest
  ): Promise<responses.GetVirtualCircuitResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getVirtualCircuit.");
    const operationName = "getVirtualCircuit";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VirtualCircuit/GetVirtualCircuit";
    const pathParams = {
      "{virtualCircuitId}": getVirtualCircuitRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVirtualCircuitRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVirtualCircuitResponse>{},
        body: await response.json(),
        bodyKey: "virtualCircuit",
        bodyModel: model.VirtualCircuit,
        type: "model.VirtualCircuit",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified VLAN's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVlanRequest
   * @return GetVlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVlan.ts.html |here} to see how to use GetVlan API.
   */
  public async getVlan(
    getVlanRequest: requests.GetVlanRequest
  ): Promise<responses.GetVlanResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getVlan.");
    const operationName = "getVlan";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vlan/GetVlan";
    const pathParams = {
      "{vlanId}": getVlanRequest.vlanId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getVlanRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVlanRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vlans/{vlanId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVlanResponse>{},
        body: await response.json(),
        bodyKey: "vlan",
        bodyModel: model.Vlan,
        type: "model.Vlan",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the information for the specified virtual network interface card (VNIC).
   * You can get the VNIC [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) from the
   * {@link #listVnicAttachments(ListVnicAttachmentsRequest) listVnicAttachments}
   * operation.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVnicRequest
   * @return GetVnicResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVnic.ts.html |here} to see how to use GetVnic API.
   */
  public async getVnic(
    getVnicRequest: requests.GetVnicRequest
  ): Promise<responses.GetVnicResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getVnic.");
    const operationName = "getVnic";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vnic/GetVnic";
    const pathParams = {
      "{vnicId}": getVnicRequest.vnicId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVnicRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vnics/{vnicId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVnicResponse>{},
        body: await response.json(),
        bodyKey: "vnic",
        bodyModel: model.Vnic,
        type: "model.Vnic",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified `Vtap` resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVtapRequest
   * @return GetVtapResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVtap.ts.html |here} to see how to use GetVtap API.
   */
  public async getVtap(
    getVtapRequest: requests.GetVtapRequest
  ): Promise<responses.GetVtapResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getVtap.");
    const operationName = "getVtap";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vtap/GetVtap";
    const pathParams = {
      "{vtapId}": getVtapRequest.vtapId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getVtapRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVtapRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vtaps/{vtapId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVtapResponse>{},
        body: await response.json(),
        bodyKey: "vtap",
        bodyModel: model.Vtap,
        type: "model.Vtap",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the regions that support remote VCN peering (which is peering across regions).
   * For more information, see [VCN Peering](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/VCNpeering.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAllowedPeerRegionsForRemotePeeringRequest
   * @return ListAllowedPeerRegionsForRemotePeeringResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListAllowedPeerRegionsForRemotePeering.ts.html |here} to see how to use ListAllowedPeerRegionsForRemotePeering API.
   */
  public async listAllowedPeerRegionsForRemotePeering(
    listAllowedPeerRegionsForRemotePeeringRequest: requests.ListAllowedPeerRegionsForRemotePeeringRequest
  ): Promise<responses.ListAllowedPeerRegionsForRemotePeeringResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#listAllowedPeerRegionsForRemotePeering."
      );
    const operationName = "listAllowedPeerRegionsForRemotePeering";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PeerRegionForRemotePeering/ListAllowedPeerRegionsForRemotePeering";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAllowedPeerRegionsForRemotePeeringRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/allowedPeerRegionsForRemotePeering",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAllowedPeerRegionsForRemotePeeringResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PeerRegionForRemotePeering,
        type: "Array<model.PeerRegionForRemotePeering>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the subranges of a BYOIP CIDR block currently allocated to an IP pool.
   * Each `ByoipAllocatedRange` object also lists the IP pool where it is allocated.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListByoipAllocatedRangesRequest
   * @return ListByoipAllocatedRangesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListByoipAllocatedRanges.ts.html |here} to see how to use ListByoipAllocatedRanges API.
   */
  public async listByoipAllocatedRanges(
    listByoipAllocatedRangesRequest: requests.ListByoipAllocatedRangesRequest
  ): Promise<responses.ListByoipAllocatedRangesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listByoipAllocatedRanges.");
    const operationName = "listByoipAllocatedRanges";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ByoipAllocatedRangeSummary/ListByoipAllocatedRanges";
    const pathParams = {
      "{byoipRangeId}": listByoipAllocatedRangesRequest.byoipRangeId
    };

    const queryParams = {
      "limit": listByoipAllocatedRangesRequest.limit,
      "page": listByoipAllocatedRangesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listByoipAllocatedRangesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listByoipAllocatedRangesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}/byoipAllocatedRanges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListByoipAllocatedRangesResponse>{},
        body: await response.json(),
        bodyKey: "byoipAllocatedRangeCollection",
        bodyModel: model.ByoipAllocatedRangeCollection,
        type: "model.ByoipAllocatedRangeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the `ByoipRange` resources in the specified compartment.
   * You can filter the list using query parameters.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListByoipRangesRequest
   * @return ListByoipRangesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListByoipRanges.ts.html |here} to see how to use ListByoipRanges API.
   */
  public async listByoipRanges(
    listByoipRangesRequest: requests.ListByoipRangesRequest
  ): Promise<responses.ListByoipRangesResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listByoipRanges.");
    const operationName = "listByoipRanges";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ByoipRange/ListByoipRanges";
    const pathParams = {};

    const queryParams = {
      "limit": listByoipRangesRequest.limit,
      "page": listByoipRangesRequest.page,
      "displayName": listByoipRangesRequest.displayName,
      "lifecycleState": listByoipRangesRequest.lifecycleState,
      "sortBy": listByoipRangesRequest.sortBy,
      "sortOrder": listByoipRangesRequest.sortOrder,
      "compartmentId": listByoipRangesRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listByoipRangesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listByoipRangesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListByoipRangesResponse>{},
        body: await response.json(),
        bodyKey: "byoipRangeCollection",
        bodyModel: model.ByoipRangeCollection,
        type: "model.ByoipRangeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the capture filters in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListCaptureFiltersRequest
   * @return ListCaptureFiltersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCaptureFilters.ts.html |here} to see how to use ListCaptureFilters API.
   */
  public async listCaptureFilters(
    listCaptureFiltersRequest: requests.ListCaptureFiltersRequest
  ): Promise<responses.ListCaptureFiltersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listCaptureFilters.");
    const operationName = "listCaptureFilters";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CaptureFilter/ListCaptureFilters";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCaptureFiltersRequest.compartmentId,
      "limit": listCaptureFiltersRequest.limit,
      "page": listCaptureFiltersRequest.page,
      "sortBy": listCaptureFiltersRequest.sortBy,
      "sortOrder": listCaptureFiltersRequest.sortOrder,
      "displayName": listCaptureFiltersRequest.displayName,
      "lifecycleState": listCaptureFiltersRequest.lifecycleState,
      "filterType": listCaptureFiltersRequest.filterType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCaptureFiltersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCaptureFiltersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/captureFilters",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCaptureFiltersResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.CaptureFilter,
        type: "Array<model.CaptureFilter>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listCaptureFiltersRecordIterator function.
   * Creates a new async iterator which will iterate over the models.CaptureFilter objects
   * contained in responses from the listCaptureFilters operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCaptureFilters(
    request: requests.ListCaptureFiltersRequest
  ): AsyncIterableIterator<model.CaptureFilter> {
    return paginateRecords(request, req => this.listCaptureFilters(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listCaptureFiltersResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listCaptureFilters operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCaptureFiltersResponses(
    request: requests.ListCaptureFiltersRequest
  ): AsyncIterableIterator<responses.ListCaptureFiltersResponse> {
    return paginateResponses(request, req => this.listCaptureFilters(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.CaptureFilter objects
   * contained in responses from the listCaptureFilters operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCaptureFiltersRecordIterator(
    request: requests.ListCaptureFiltersRequest
  ): AsyncIterableIterator<model.CaptureFilter> {
    return paginateRecords(request, req => this.listCaptureFilters(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCaptureFilters operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCaptureFiltersResponseIterator(
    request: requests.ListCaptureFiltersRequest
  ): AsyncIterableIterator<responses.ListCaptureFiltersResponse> {
    return paginateResponses(request, req => this.listCaptureFilters(req));
  }

  /**
     * Lists the CPE device types that the Networking service provides CPE configuration
* content for (example: Cisco ASA). The content helps a network engineer configure
* the actual CPE device represented by a {@link Cpe} object.
* <p>
If you want to generate CPE configuration content for one of the returned CPE device types,
* ensure that the {@link Cpe} object's `cpeDeviceShapeId` attribute is set
* to the CPE device type's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) (returned by this operation).
* <p>
For information about generating CPE configuration content, see these operations:
* <p>
  * {@link #getCpeDeviceConfigContent(GetCpeDeviceConfigContentRequest) getCpeDeviceConfigContent}
*   * {@link #getIpsecCpeDeviceConfigContent(GetIpsecCpeDeviceConfigContentRequest) getIpsecCpeDeviceConfigContent}
*   * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListCpeDeviceShapesRequest
     * @return ListCpeDeviceShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCpeDeviceShapes.ts.html |here} to see how to use ListCpeDeviceShapes API.
     */
  public async listCpeDeviceShapes(
    listCpeDeviceShapesRequest: requests.ListCpeDeviceShapesRequest
  ): Promise<responses.ListCpeDeviceShapesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listCpeDeviceShapes.");
    const operationName = "listCpeDeviceShapes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CpeDeviceShapeSummary/ListCpeDeviceShapes";
    const pathParams = {};

    const queryParams = {
      "limit": listCpeDeviceShapesRequest.limit,
      "page": listCpeDeviceShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCpeDeviceShapesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCpeDeviceShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpeDeviceShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCpeDeviceShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.CpeDeviceShapeSummary,
        type: "Array<model.CpeDeviceShapeSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listCpeDeviceShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.CpeDeviceShapeSummary objects
   * contained in responses from the listCpeDeviceShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCpeDeviceShapes(
    request: requests.ListCpeDeviceShapesRequest
  ): AsyncIterableIterator<model.CpeDeviceShapeSummary> {
    return paginateRecords(request, req => this.listCpeDeviceShapes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listCpeDeviceShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listCpeDeviceShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCpeDeviceShapesResponses(
    request: requests.ListCpeDeviceShapesRequest
  ): AsyncIterableIterator<responses.ListCpeDeviceShapesResponse> {
    return paginateResponses(request, req => this.listCpeDeviceShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.CpeDeviceShapeSummary objects
   * contained in responses from the listCpeDeviceShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCpeDeviceShapesRecordIterator(
    request: requests.ListCpeDeviceShapesRequest
  ): AsyncIterableIterator<model.CpeDeviceShapeSummary> {
    return paginateRecords(request, req => this.listCpeDeviceShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCpeDeviceShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCpeDeviceShapesResponseIterator(
    request: requests.ListCpeDeviceShapesRequest
  ): AsyncIterableIterator<responses.ListCpeDeviceShapesResponse> {
    return paginateResponses(request, req => this.listCpeDeviceShapes(req));
  }

  /**
   * Lists the customer-premises equipment objects (CPEs) in the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCpesRequest
   * @return ListCpesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCpes.ts.html |here} to see how to use ListCpes API.
   */
  public async listCpes(
    listCpesRequest: requests.ListCpesRequest
  ): Promise<responses.ListCpesResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listCpes.");
    const operationName = "listCpes";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Cpe/ListCpes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCpesRequest.compartmentId,
      "limit": listCpesRequest.limit,
      "page": listCpesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCpesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCpesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Cpe,
        type: "Array<model.Cpe>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listCpesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Cpe objects
   * contained in responses from the listCpes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCpes(request: requests.ListCpesRequest): AsyncIterableIterator<model.Cpe> {
    return paginateRecords(request, req => this.listCpes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listCpesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listCpes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCpesResponses(
    request: requests.ListCpesRequest
  ): AsyncIterableIterator<responses.ListCpesResponse> {
    return paginateResponses(request, req => this.listCpes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Cpe objects
   * contained in responses from the listCpes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCpesRecordIterator(
    request: requests.ListCpesRequest
  ): AsyncIterableIterator<model.Cpe> {
    return paginateRecords(request, req => this.listCpes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCpes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCpesResponseIterator(
    request: requests.ListCpesRequest
  ): AsyncIterableIterator<responses.ListCpesResponse> {
    return paginateResponses(request, req => this.listCpes(req));
  }

  /**
   * Lists the cross-connect groups in the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCrossConnectGroupsRequest
   * @return ListCrossConnectGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCrossConnectGroups.ts.html |here} to see how to use ListCrossConnectGroups API.
   */
  public async listCrossConnectGroups(
    listCrossConnectGroupsRequest: requests.ListCrossConnectGroupsRequest
  ): Promise<responses.ListCrossConnectGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listCrossConnectGroups.");
    const operationName = "listCrossConnectGroups";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectGroup/ListCrossConnectGroups";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCrossConnectGroupsRequest.compartmentId,
      "limit": listCrossConnectGroupsRequest.limit,
      "page": listCrossConnectGroupsRequest.page,
      "displayName": listCrossConnectGroupsRequest.displayName,
      "sortBy": listCrossConnectGroupsRequest.sortBy,
      "sortOrder": listCrossConnectGroupsRequest.sortOrder,
      "lifecycleState": listCrossConnectGroupsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCrossConnectGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCrossConnectGroupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.CrossConnectGroup,
        type: "Array<model.CrossConnectGroup>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listCrossConnectGroupsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.CrossConnectGroup objects
   * contained in responses from the listCrossConnectGroups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossConnectGroups(
    request: requests.ListCrossConnectGroupsRequest
  ): AsyncIterableIterator<model.CrossConnectGroup> {
    return paginateRecords(request, req => this.listCrossConnectGroups(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listCrossConnectGroupsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listCrossConnectGroups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossConnectGroupsResponses(
    request: requests.ListCrossConnectGroupsRequest
  ): AsyncIterableIterator<responses.ListCrossConnectGroupsResponse> {
    return paginateResponses(request, req => this.listCrossConnectGroups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.CrossConnectGroup objects
   * contained in responses from the listCrossConnectGroups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCrossConnectGroupsRecordIterator(
    request: requests.ListCrossConnectGroupsRequest
  ): AsyncIterableIterator<model.CrossConnectGroup> {
    return paginateRecords(request, req => this.listCrossConnectGroups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCrossConnectGroups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCrossConnectGroupsResponseIterator(
    request: requests.ListCrossConnectGroupsRequest
  ): AsyncIterableIterator<responses.ListCrossConnectGroupsResponse> {
    return paginateResponses(request, req => this.listCrossConnectGroups(req));
  }

  /**
   * Lists the available FastConnect locations for cross-connect installation. You need
   * this information so you can specify your desired location when you create a cross-connect.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCrossConnectLocationsRequest
   * @return ListCrossConnectLocationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCrossConnectLocations.ts.html |here} to see how to use ListCrossConnectLocations API.
   */
  public async listCrossConnectLocations(
    listCrossConnectLocationsRequest: requests.ListCrossConnectLocationsRequest
  ): Promise<responses.ListCrossConnectLocationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listCrossConnectLocations.");
    const operationName = "listCrossConnectLocations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectLocation/ListCrossConnectLocations";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCrossConnectLocationsRequest.compartmentId,
      "limit": listCrossConnectLocationsRequest.limit,
      "page": listCrossConnectLocationsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCrossConnectLocationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectLocations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCrossConnectLocationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.CrossConnectLocation,
        type: "Array<model.CrossConnectLocation>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listCrossConnectLocationsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.CrossConnectLocation objects
   * contained in responses from the listCrossConnectLocations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossConnectLocations(
    request: requests.ListCrossConnectLocationsRequest
  ): AsyncIterableIterator<model.CrossConnectLocation> {
    return paginateRecords(request, req => this.listCrossConnectLocations(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listCrossConnectLocationsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listCrossConnectLocations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossConnectLocationsResponses(
    request: requests.ListCrossConnectLocationsRequest
  ): AsyncIterableIterator<responses.ListCrossConnectLocationsResponse> {
    return paginateResponses(request, req => this.listCrossConnectLocations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.CrossConnectLocation objects
   * contained in responses from the listCrossConnectLocations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCrossConnectLocationsRecordIterator(
    request: requests.ListCrossConnectLocationsRequest
  ): AsyncIterableIterator<model.CrossConnectLocation> {
    return paginateRecords(request, req => this.listCrossConnectLocations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCrossConnectLocations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCrossConnectLocationsResponseIterator(
    request: requests.ListCrossConnectLocationsRequest
  ): AsyncIterableIterator<responses.ListCrossConnectLocationsResponse> {
    return paginateResponses(request, req => this.listCrossConnectLocations(req));
  }

  /**
   * Lists the Cross Connect mapping Details for the specified
   * virtual circuit.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCrossConnectMappingsRequest
   * @return ListCrossConnectMappingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCrossConnectMappings.ts.html |here} to see how to use ListCrossConnectMappings API.
   */
  public async listCrossConnectMappings(
    listCrossConnectMappingsRequest: requests.ListCrossConnectMappingsRequest
  ): Promise<responses.ListCrossConnectMappingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listCrossConnectMappings.");
    const operationName = "listCrossConnectMappings";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectMappingDetailsCollection/ListCrossConnectMappings";
    const pathParams = {
      "{virtualCircuitId}": listCrossConnectMappingsRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCrossConnectMappingsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCrossConnectMappingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}/crossConnectMappings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCrossConnectMappingsResponse>{},
        body: await response.json(),
        bodyKey: "crossConnectMappingDetailsCollection",
        bodyModel: model.CrossConnectMappingDetailsCollection,
        type: "model.CrossConnectMappingDetailsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the cross-connects in the specified compartment. You can filter the list
   * by specifying the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a cross-connect group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCrossConnectsRequest
   * @return ListCrossConnectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCrossConnects.ts.html |here} to see how to use ListCrossConnects API.
   */
  public async listCrossConnects(
    listCrossConnectsRequest: requests.ListCrossConnectsRequest
  ): Promise<responses.ListCrossConnectsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listCrossConnects.");
    const operationName = "listCrossConnects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnect/ListCrossConnects";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCrossConnectsRequest.compartmentId,
      "crossConnectGroupId": listCrossConnectsRequest.crossConnectGroupId,
      "limit": listCrossConnectsRequest.limit,
      "page": listCrossConnectsRequest.page,
      "displayName": listCrossConnectsRequest.displayName,
      "sortBy": listCrossConnectsRequest.sortBy,
      "sortOrder": listCrossConnectsRequest.sortOrder,
      "lifecycleState": listCrossConnectsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCrossConnectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCrossConnectsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.CrossConnect,
        type: "Array<model.CrossConnect>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listCrossConnectsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.CrossConnect objects
   * contained in responses from the listCrossConnects operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossConnects(
    request: requests.ListCrossConnectsRequest
  ): AsyncIterableIterator<model.CrossConnect> {
    return paginateRecords(request, req => this.listCrossConnects(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listCrossConnectsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listCrossConnects operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossConnectsResponses(
    request: requests.ListCrossConnectsRequest
  ): AsyncIterableIterator<responses.ListCrossConnectsResponse> {
    return paginateResponses(request, req => this.listCrossConnects(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.CrossConnect objects
   * contained in responses from the listCrossConnects operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCrossConnectsRecordIterator(
    request: requests.ListCrossConnectsRequest
  ): AsyncIterableIterator<model.CrossConnect> {
    return paginateRecords(request, req => this.listCrossConnects(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCrossConnects operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCrossConnectsResponseIterator(
    request: requests.ListCrossConnectsRequest
  ): AsyncIterableIterator<responses.ListCrossConnectsResponse> {
    return paginateResponses(request, req => this.listCrossConnects(req));
  }

  /**
   * Lists the available port speeds for cross-connects. You need this information
   * so you can specify your desired port speed (that is, shape) when you create a
   * cross-connect.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCrossconnectPortSpeedShapesRequest
   * @return ListCrossconnectPortSpeedShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCrossconnectPortSpeedShapes.ts.html |here} to see how to use ListCrossconnectPortSpeedShapes API.
   */
  public async listCrossconnectPortSpeedShapes(
    listCrossconnectPortSpeedShapesRequest: requests.ListCrossconnectPortSpeedShapesRequest
  ): Promise<responses.ListCrossconnectPortSpeedShapesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listCrossconnectPortSpeedShapes.");
    const operationName = "listCrossconnectPortSpeedShapes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectPortSpeedShape/ListCrossconnectPortSpeedShapes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCrossconnectPortSpeedShapesRequest.compartmentId,
      "limit": listCrossconnectPortSpeedShapesRequest.limit,
      "page": listCrossconnectPortSpeedShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCrossconnectPortSpeedShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectPortSpeedShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCrossconnectPortSpeedShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.CrossConnectPortSpeedShape,
        type: "Array<model.CrossConnectPortSpeedShape>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listCrossconnectPortSpeedShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.CrossConnectPortSpeedShape objects
   * contained in responses from the listCrossconnectPortSpeedShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossconnectPortSpeedShapes(
    request: requests.ListCrossconnectPortSpeedShapesRequest
  ): AsyncIterableIterator<model.CrossConnectPortSpeedShape> {
    return paginateRecords(request, req => this.listCrossconnectPortSpeedShapes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listCrossconnectPortSpeedShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listCrossconnectPortSpeedShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossconnectPortSpeedShapesResponses(
    request: requests.ListCrossconnectPortSpeedShapesRequest
  ): AsyncIterableIterator<responses.ListCrossconnectPortSpeedShapesResponse> {
    return paginateResponses(request, req => this.listCrossconnectPortSpeedShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.CrossConnectPortSpeedShape objects
   * contained in responses from the listCrossconnectPortSpeedShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCrossconnectPortSpeedShapesRecordIterator(
    request: requests.ListCrossconnectPortSpeedShapesRequest
  ): AsyncIterableIterator<model.CrossConnectPortSpeedShape> {
    return paginateRecords(request, req => this.listCrossconnectPortSpeedShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCrossconnectPortSpeedShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCrossconnectPortSpeedShapesResponseIterator(
    request: requests.ListCrossconnectPortSpeedShapesRequest
  ): AsyncIterableIterator<responses.ListCrossconnectPortSpeedShapesResponse> {
    return paginateResponses(request, req => this.listCrossconnectPortSpeedShapes(req));
  }

  /**
   * Lists the sets of DHCP options in the specified VCN and specified compartment.
   * If the VCN ID is not provided, then the list includes the sets of DHCP options from all VCNs in the specified compartment.
   * The response includes the default set of options that automatically comes with each VCN,
   * plus any other sets you've created.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDhcpOptionsRequest
   * @return ListDhcpOptionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDhcpOptions.ts.html |here} to see how to use ListDhcpOptions API.
   */
  public async listDhcpOptions(
    listDhcpOptionsRequest: requests.ListDhcpOptionsRequest
  ): Promise<responses.ListDhcpOptionsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listDhcpOptions.");
    const operationName = "listDhcpOptions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DhcpOptions/ListDhcpOptions";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDhcpOptionsRequest.compartmentId,
      "vcnId": listDhcpOptionsRequest.vcnId,
      "limit": listDhcpOptionsRequest.limit,
      "page": listDhcpOptionsRequest.page,
      "displayName": listDhcpOptionsRequest.displayName,
      "sortBy": listDhcpOptionsRequest.sortBy,
      "sortOrder": listDhcpOptionsRequest.sortOrder,
      "lifecycleState": listDhcpOptionsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDhcpOptionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dhcps",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDhcpOptionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DhcpOptions,
        type: "Array<model.DhcpOptions>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDhcpOptionsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DhcpOptions objects
   * contained in responses from the listDhcpOptions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDhcpOptions(
    request: requests.ListDhcpOptionsRequest
  ): AsyncIterableIterator<model.DhcpOptions> {
    return paginateRecords(request, req => this.listDhcpOptions(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDhcpOptionsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDhcpOptions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDhcpOptionsResponses(
    request: requests.ListDhcpOptionsRequest
  ): AsyncIterableIterator<responses.ListDhcpOptionsResponse> {
    return paginateResponses(request, req => this.listDhcpOptions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DhcpOptions objects
   * contained in responses from the listDhcpOptions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDhcpOptionsRecordIterator(
    request: requests.ListDhcpOptionsRequest
  ): AsyncIterableIterator<model.DhcpOptions> {
    return paginateRecords(request, req => this.listDhcpOptions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDhcpOptions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDhcpOptionsResponseIterator(
    request: requests.ListDhcpOptionsRequest
  ): AsyncIterableIterator<responses.ListDhcpOptionsResponse> {
    return paginateResponses(request, req => this.listDhcpOptions(req));
  }

  /**
     * Lists the `DrgAttachment` resource for the specified compartment. You can filter the
* results by DRG, attached network, attachment type, DRG route table or
* VCN route table.
* <p>
The LIST API lists DRG attachments by attachment type. It will default to list VCN attachments,
* but you may request to list ALL attachments of ALL types.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDrgAttachmentsRequest
     * @return ListDrgAttachmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDrgAttachments.ts.html |here} to see how to use ListDrgAttachments API.
     */
  public async listDrgAttachments(
    listDrgAttachmentsRequest: requests.ListDrgAttachmentsRequest
  ): Promise<responses.ListDrgAttachmentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listDrgAttachments.");
    const operationName = "listDrgAttachments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgAttachment/ListDrgAttachments";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDrgAttachmentsRequest.compartmentId,
      "vcnId": listDrgAttachmentsRequest.vcnId,
      "drgId": listDrgAttachmentsRequest.drgId,
      "limit": listDrgAttachmentsRequest.limit,
      "page": listDrgAttachmentsRequest.page,
      "networkId": listDrgAttachmentsRequest.networkId,
      "attachmentType": listDrgAttachmentsRequest.attachmentType,
      "drgRouteTableId": listDrgAttachmentsRequest.drgRouteTableId,
      "displayName": listDrgAttachmentsRequest.displayName,
      "sortBy": listDrgAttachmentsRequest.sortBy,
      "sortOrder": listDrgAttachmentsRequest.sortOrder,
      "lifecycleState": listDrgAttachmentsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDrgAttachmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgAttachments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDrgAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DrgAttachment,
        type: "Array<model.DrgAttachment>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDrgAttachmentsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DrgAttachment objects
   * contained in responses from the listDrgAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgAttachments(
    request: requests.ListDrgAttachmentsRequest
  ): AsyncIterableIterator<model.DrgAttachment> {
    return paginateRecords(request, req => this.listDrgAttachments(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDrgAttachmentsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDrgAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgAttachmentsResponses(
    request: requests.ListDrgAttachmentsRequest
  ): AsyncIterableIterator<responses.ListDrgAttachmentsResponse> {
    return paginateResponses(request, req => this.listDrgAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DrgAttachment objects
   * contained in responses from the listDrgAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDrgAttachmentsRecordIterator(
    request: requests.ListDrgAttachmentsRequest
  ): AsyncIterableIterator<model.DrgAttachment> {
    return paginateRecords(request, req => this.listDrgAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDrgAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDrgAttachmentsResponseIterator(
    request: requests.ListDrgAttachmentsRequest
  ): AsyncIterableIterator<responses.ListDrgAttachmentsResponse> {
    return paginateResponses(request, req => this.listDrgAttachments(req));
  }

  /**
   * Lists the statements for the specified route distribution.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDrgRouteDistributionStatementsRequest
   * @return ListDrgRouteDistributionStatementsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDrgRouteDistributionStatements.ts.html |here} to see how to use ListDrgRouteDistributionStatements API.
   */
  public async listDrgRouteDistributionStatements(
    listDrgRouteDistributionStatementsRequest: requests.ListDrgRouteDistributionStatementsRequest
  ): Promise<responses.ListDrgRouteDistributionStatementsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#listDrgRouteDistributionStatements."
      );
    const operationName = "listDrgRouteDistributionStatements";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteDistributionStatement/ListDrgRouteDistributionStatements";
    const pathParams = {
      "{drgRouteDistributionId}": listDrgRouteDistributionStatementsRequest.drgRouteDistributionId
    };

    const queryParams = {
      "limit": listDrgRouteDistributionStatementsRequest.limit,
      "page": listDrgRouteDistributionStatementsRequest.page,
      "sortBy": listDrgRouteDistributionStatementsRequest.sortBy,
      "sortOrder": listDrgRouteDistributionStatementsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDrgRouteDistributionStatementsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteDistributions/{drgRouteDistributionId}/drgRouteDistributionStatements",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDrgRouteDistributionStatementsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DrgRouteDistributionStatement,
        type: "Array<model.DrgRouteDistributionStatement>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDrgRouteDistributionStatementsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DrgRouteDistributionStatement objects
   * contained in responses from the listDrgRouteDistributionStatements operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgRouteDistributionStatements(
    request: requests.ListDrgRouteDistributionStatementsRequest
  ): AsyncIterableIterator<model.DrgRouteDistributionStatement> {
    return paginateRecords(request, req => this.listDrgRouteDistributionStatements(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDrgRouteDistributionStatementsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDrgRouteDistributionStatements operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgRouteDistributionStatementsResponses(
    request: requests.ListDrgRouteDistributionStatementsRequest
  ): AsyncIterableIterator<responses.ListDrgRouteDistributionStatementsResponse> {
    return paginateResponses(request, req => this.listDrgRouteDistributionStatements(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DrgRouteDistributionStatement objects
   * contained in responses from the listDrgRouteDistributionStatements operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDrgRouteDistributionStatementsRecordIterator(
    request: requests.ListDrgRouteDistributionStatementsRequest
  ): AsyncIterableIterator<model.DrgRouteDistributionStatement> {
    return paginateRecords(request, req => this.listDrgRouteDistributionStatements(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDrgRouteDistributionStatements operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDrgRouteDistributionStatementsResponseIterator(
    request: requests.ListDrgRouteDistributionStatementsRequest
  ): AsyncIterableIterator<responses.ListDrgRouteDistributionStatementsResponse> {
    return paginateResponses(request, req => this.listDrgRouteDistributionStatements(req));
  }

  /**
     * Lists the route distributions in the specified DRG.
* <p>
To retrieve the statements in a distribution, use the
* ListDrgRouteDistributionStatements operation.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDrgRouteDistributionsRequest
     * @return ListDrgRouteDistributionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDrgRouteDistributions.ts.html |here} to see how to use ListDrgRouteDistributions API.
     */
  public async listDrgRouteDistributions(
    listDrgRouteDistributionsRequest: requests.ListDrgRouteDistributionsRequest
  ): Promise<responses.ListDrgRouteDistributionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listDrgRouteDistributions.");
    const operationName = "listDrgRouteDistributions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteDistribution/ListDrgRouteDistributions";
    const pathParams = {};

    const queryParams = {
      "drgId": listDrgRouteDistributionsRequest.drgId,
      "limit": listDrgRouteDistributionsRequest.limit,
      "page": listDrgRouteDistributionsRequest.page,
      "displayName": listDrgRouteDistributionsRequest.displayName,
      "sortBy": listDrgRouteDistributionsRequest.sortBy,
      "sortOrder": listDrgRouteDistributionsRequest.sortOrder,
      "lifecycleState": listDrgRouteDistributionsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDrgRouteDistributionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteDistributions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDrgRouteDistributionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DrgRouteDistribution,
        type: "Array<model.DrgRouteDistribution>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDrgRouteDistributionsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DrgRouteDistribution objects
   * contained in responses from the listDrgRouteDistributions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgRouteDistributions(
    request: requests.ListDrgRouteDistributionsRequest
  ): AsyncIterableIterator<model.DrgRouteDistribution> {
    return paginateRecords(request, req => this.listDrgRouteDistributions(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDrgRouteDistributionsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDrgRouteDistributions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgRouteDistributionsResponses(
    request: requests.ListDrgRouteDistributionsRequest
  ): AsyncIterableIterator<responses.ListDrgRouteDistributionsResponse> {
    return paginateResponses(request, req => this.listDrgRouteDistributions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DrgRouteDistribution objects
   * contained in responses from the listDrgRouteDistributions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDrgRouteDistributionsRecordIterator(
    request: requests.ListDrgRouteDistributionsRequest
  ): AsyncIterableIterator<model.DrgRouteDistribution> {
    return paginateRecords(request, req => this.listDrgRouteDistributions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDrgRouteDistributions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDrgRouteDistributionsResponseIterator(
    request: requests.ListDrgRouteDistributionsRequest
  ): AsyncIterableIterator<responses.ListDrgRouteDistributionsResponse> {
    return paginateResponses(request, req => this.listDrgRouteDistributions(req));
  }

  /**
   * Lists the route rules in the specified DRG route table.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDrgRouteRulesRequest
   * @return ListDrgRouteRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDrgRouteRules.ts.html |here} to see how to use ListDrgRouteRules API.
   */
  public async listDrgRouteRules(
    listDrgRouteRulesRequest: requests.ListDrgRouteRulesRequest
  ): Promise<responses.ListDrgRouteRulesResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listDrgRouteRules.");
    const operationName = "listDrgRouteRules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteRule/ListDrgRouteRules";
    const pathParams = {
      "{drgRouteTableId}": listDrgRouteRulesRequest.drgRouteTableId
    };

    const queryParams = {
      "limit": listDrgRouteRulesRequest.limit,
      "page": listDrgRouteRulesRequest.page,
      "routeType": listDrgRouteRulesRequest.routeType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDrgRouteRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteTables/{drgRouteTableId}/drgRouteRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDrgRouteRulesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DrgRouteRule,
        type: "Array<model.DrgRouteRule>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDrgRouteRulesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DrgRouteRule objects
   * contained in responses from the listDrgRouteRules operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgRouteRules(
    request: requests.ListDrgRouteRulesRequest
  ): AsyncIterableIterator<model.DrgRouteRule> {
    return paginateRecords(request, req => this.listDrgRouteRules(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDrgRouteRulesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDrgRouteRules operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgRouteRulesResponses(
    request: requests.ListDrgRouteRulesRequest
  ): AsyncIterableIterator<responses.ListDrgRouteRulesResponse> {
    return paginateResponses(request, req => this.listDrgRouteRules(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DrgRouteRule objects
   * contained in responses from the listDrgRouteRules operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDrgRouteRulesRecordIterator(
    request: requests.ListDrgRouteRulesRequest
  ): AsyncIterableIterator<model.DrgRouteRule> {
    return paginateRecords(request, req => this.listDrgRouteRules(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDrgRouteRules operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDrgRouteRulesResponseIterator(
    request: requests.ListDrgRouteRulesRequest
  ): AsyncIterableIterator<responses.ListDrgRouteRulesResponse> {
    return paginateResponses(request, req => this.listDrgRouteRules(req));
  }

  /**
     * Lists the DRG route tables for the specified DRG.
* <p>
Use the `ListDrgRouteRules` operation to retrieve the route rules in a table.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDrgRouteTablesRequest
     * @return ListDrgRouteTablesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDrgRouteTables.ts.html |here} to see how to use ListDrgRouteTables API.
     */
  public async listDrgRouteTables(
    listDrgRouteTablesRequest: requests.ListDrgRouteTablesRequest
  ): Promise<responses.ListDrgRouteTablesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listDrgRouteTables.");
    const operationName = "listDrgRouteTables";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteTable/ListDrgRouteTables";
    const pathParams = {};

    const queryParams = {
      "drgId": listDrgRouteTablesRequest.drgId,
      "limit": listDrgRouteTablesRequest.limit,
      "page": listDrgRouteTablesRequest.page,
      "displayName": listDrgRouteTablesRequest.displayName,
      "sortBy": listDrgRouteTablesRequest.sortBy,
      "sortOrder": listDrgRouteTablesRequest.sortOrder,
      "importDrgRouteDistributionId": listDrgRouteTablesRequest.importDrgRouteDistributionId,
      "lifecycleState": listDrgRouteTablesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDrgRouteTablesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteTables",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDrgRouteTablesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DrgRouteTable,
        type: "Array<model.DrgRouteTable>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDrgRouteTablesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DrgRouteTable objects
   * contained in responses from the listDrgRouteTables operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgRouteTables(
    request: requests.ListDrgRouteTablesRequest
  ): AsyncIterableIterator<model.DrgRouteTable> {
    return paginateRecords(request, req => this.listDrgRouteTables(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDrgRouteTablesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDrgRouteTables operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgRouteTablesResponses(
    request: requests.ListDrgRouteTablesRequest
  ): AsyncIterableIterator<responses.ListDrgRouteTablesResponse> {
    return paginateResponses(request, req => this.listDrgRouteTables(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DrgRouteTable objects
   * contained in responses from the listDrgRouteTables operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDrgRouteTablesRecordIterator(
    request: requests.ListDrgRouteTablesRequest
  ): AsyncIterableIterator<model.DrgRouteTable> {
    return paginateRecords(request, req => this.listDrgRouteTables(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDrgRouteTables operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDrgRouteTablesResponseIterator(
    request: requests.ListDrgRouteTablesRequest
  ): AsyncIterableIterator<responses.ListDrgRouteTablesResponse> {
    return paginateResponses(request, req => this.listDrgRouteTables(req));
  }

  /**
   * Lists the DRGs in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDrgsRequest
   * @return ListDrgsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDrgs.ts.html |here} to see how to use ListDrgs API.
   */
  public async listDrgs(
    listDrgsRequest: requests.ListDrgsRequest
  ): Promise<responses.ListDrgsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listDrgs.");
    const operationName = "listDrgs";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Drg/ListDrgs";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDrgsRequest.compartmentId,
      "limit": listDrgsRequest.limit,
      "page": listDrgsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDrgsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDrgsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Drg,
        type: "Array<model.Drg>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDrgsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Drg objects
   * contained in responses from the listDrgs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgs(request: requests.ListDrgsRequest): AsyncIterableIterator<model.Drg> {
    return paginateRecords(request, req => this.listDrgs(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDrgsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDrgs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgsResponses(
    request: requests.ListDrgsRequest
  ): AsyncIterableIterator<responses.ListDrgsResponse> {
    return paginateResponses(request, req => this.listDrgs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Drg objects
   * contained in responses from the listDrgs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDrgsRecordIterator(
    request: requests.ListDrgsRequest
  ): AsyncIterableIterator<model.Drg> {
    return paginateRecords(request, req => this.listDrgs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDrgs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDrgsResponseIterator(
    request: requests.ListDrgsRequest
  ): AsyncIterableIterator<responses.ListDrgsResponse> {
    return paginateResponses(request, req => this.listDrgs(req));
  }

  /**
     * Lists the service offerings from supported providers. You need this
* information so you can specify your desired provider and service
* offering when you create a virtual circuit.
* <p>
For the compartment ID, provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of your tenancy (the root compartment).
* <p>
For more information, see [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListFastConnectProviderServicesRequest
     * @return ListFastConnectProviderServicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListFastConnectProviderServices.ts.html |here} to see how to use ListFastConnectProviderServices API.
     */
  public async listFastConnectProviderServices(
    listFastConnectProviderServicesRequest: requests.ListFastConnectProviderServicesRequest
  ): Promise<responses.ListFastConnectProviderServicesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listFastConnectProviderServices.");
    const operationName = "listFastConnectProviderServices";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/FastConnectProviderService/ListFastConnectProviderServices";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listFastConnectProviderServicesRequest.compartmentId,
      "limit": listFastConnectProviderServicesRequest.limit,
      "page": listFastConnectProviderServicesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFastConnectProviderServicesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fastConnectProviderServices",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFastConnectProviderServicesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.FastConnectProviderService,
        type: "Array<model.FastConnectProviderService>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listFastConnectProviderServicesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.FastConnectProviderService objects
   * contained in responses from the listFastConnectProviderServices operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFastConnectProviderServices(
    request: requests.ListFastConnectProviderServicesRequest
  ): AsyncIterableIterator<model.FastConnectProviderService> {
    return paginateRecords(request, req => this.listFastConnectProviderServices(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listFastConnectProviderServicesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listFastConnectProviderServices operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFastConnectProviderServicesResponses(
    request: requests.ListFastConnectProviderServicesRequest
  ): AsyncIterableIterator<responses.ListFastConnectProviderServicesResponse> {
    return paginateResponses(request, req => this.listFastConnectProviderServices(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.FastConnectProviderService objects
   * contained in responses from the listFastConnectProviderServices operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFastConnectProviderServicesRecordIterator(
    request: requests.ListFastConnectProviderServicesRequest
  ): AsyncIterableIterator<model.FastConnectProviderService> {
    return paginateRecords(request, req => this.listFastConnectProviderServices(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listFastConnectProviderServices operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFastConnectProviderServicesResponseIterator(
    request: requests.ListFastConnectProviderServicesRequest
  ): AsyncIterableIterator<responses.ListFastConnectProviderServicesResponse> {
    return paginateResponses(request, req => this.listFastConnectProviderServices(req));
  }

  /**
     * Gets the list of available virtual circuit bandwidth levels for a provider.
* You need this information so you can specify your desired bandwidth level (shape) when you create a virtual circuit.
* <p>
For more information about virtual circuits, see [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListFastConnectProviderVirtualCircuitBandwidthShapesRequest
     * @return ListFastConnectProviderVirtualCircuitBandwidthShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListFastConnectProviderVirtualCircuitBandwidthShapes.ts.html |here} to see how to use ListFastConnectProviderVirtualCircuitBandwidthShapes API.
     */
  public async listFastConnectProviderVirtualCircuitBandwidthShapes(
    listFastConnectProviderVirtualCircuitBandwidthShapesRequest: requests.ListFastConnectProviderVirtualCircuitBandwidthShapesRequest
  ): Promise<responses.ListFastConnectProviderVirtualCircuitBandwidthShapesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#listFastConnectProviderVirtualCircuitBandwidthShapes."
      );
    const operationName = "listFastConnectProviderVirtualCircuitBandwidthShapes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/FastConnectProviderService/ListFastConnectProviderVirtualCircuitBandwidthShapes";
    const pathParams = {
      "{providerServiceId}":
        listFastConnectProviderVirtualCircuitBandwidthShapesRequest.providerServiceId
    };

    const queryParams = {
      "limit": listFastConnectProviderVirtualCircuitBandwidthShapesRequest.limit,
      "page": listFastConnectProviderVirtualCircuitBandwidthShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFastConnectProviderVirtualCircuitBandwidthShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fastConnectProviderServices/{providerServiceId}/virtualCircuitBandwidthShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFastConnectProviderVirtualCircuitBandwidthShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VirtualCircuitBandwidthShape,
        type: "Array<model.VirtualCircuitBandwidthShape>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listFastConnectProviderVirtualCircuitBandwidthShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VirtualCircuitBandwidthShape objects
   * contained in responses from the listFastConnectProviderVirtualCircuitBandwidthShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFastConnectProviderVirtualCircuitBandwidthShapes(
    request: requests.ListFastConnectProviderVirtualCircuitBandwidthShapesRequest
  ): AsyncIterableIterator<model.VirtualCircuitBandwidthShape> {
    return paginateRecords(request, req =>
      this.listFastConnectProviderVirtualCircuitBandwidthShapes(req)
    );
  }

  /**
   * NOTE: This function is deprecated in favor of listFastConnectProviderVirtualCircuitBandwidthShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listFastConnectProviderVirtualCircuitBandwidthShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFastConnectProviderVirtualCircuitBandwidthShapesResponses(
    request: requests.ListFastConnectProviderVirtualCircuitBandwidthShapesRequest
  ): AsyncIterableIterator<responses.ListFastConnectProviderVirtualCircuitBandwidthShapesResponse> {
    return paginateResponses(request, req =>
      this.listFastConnectProviderVirtualCircuitBandwidthShapes(req)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the models.VirtualCircuitBandwidthShape objects
   * contained in responses from the listFastConnectProviderVirtualCircuitBandwidthShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFastConnectProviderVirtualCircuitBandwidthShapesRecordIterator(
    request: requests.ListFastConnectProviderVirtualCircuitBandwidthShapesRequest
  ): AsyncIterableIterator<model.VirtualCircuitBandwidthShape> {
    return paginateRecords(request, req =>
      this.listFastConnectProviderVirtualCircuitBandwidthShapes(req)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listFastConnectProviderVirtualCircuitBandwidthShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFastConnectProviderVirtualCircuitBandwidthShapesResponseIterator(
    request: requests.ListFastConnectProviderVirtualCircuitBandwidthShapesRequest
  ): AsyncIterableIterator<responses.ListFastConnectProviderVirtualCircuitBandwidthShapesResponse> {
    return paginateResponses(request, req =>
      this.listFastConnectProviderVirtualCircuitBandwidthShapes(req)
    );
  }

  /**
   * The routes advertised to the on-premises network and the routes received from the on-premises network.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListIPSecConnectionTunnelRoutesRequest
   * @return ListIPSecConnectionTunnelRoutesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListIPSecConnectionTunnelRoutes.ts.html |here} to see how to use ListIPSecConnectionTunnelRoutes API.
   */
  public async listIPSecConnectionTunnelRoutes(
    listIPSecConnectionTunnelRoutesRequest: requests.ListIPSecConnectionTunnelRoutesRequest
  ): Promise<responses.ListIPSecConnectionTunnelRoutesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listIPSecConnectionTunnelRoutes.");
    const operationName = "listIPSecConnectionTunnelRoutes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/TunnelRouteSummary/ListIPSecConnectionTunnelRoutes";
    const pathParams = {
      "{ipscId}": listIPSecConnectionTunnelRoutesRequest.ipscId,
      "{tunnelId}": listIPSecConnectionTunnelRoutesRequest.tunnelId
    };

    const queryParams = {
      "limit": listIPSecConnectionTunnelRoutesRequest.limit,
      "page": listIPSecConnectionTunnelRoutesRequest.page,
      "advertiser": listIPSecConnectionTunnelRoutesRequest.advertiser
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listIPSecConnectionTunnelRoutesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/routes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListIPSecConnectionTunnelRoutesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.TunnelRouteSummary,
        type: "Array<model.TunnelRouteSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listIPSecConnectionTunnelRoutesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.TunnelRouteSummary objects
   * contained in responses from the listIPSecConnectionTunnelRoutes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIPSecConnectionTunnelRoutes(
    request: requests.ListIPSecConnectionTunnelRoutesRequest
  ): AsyncIterableIterator<model.TunnelRouteSummary> {
    return paginateRecords(request, req => this.listIPSecConnectionTunnelRoutes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listIPSecConnectionTunnelRoutesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listIPSecConnectionTunnelRoutes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIPSecConnectionTunnelRoutesResponses(
    request: requests.ListIPSecConnectionTunnelRoutesRequest
  ): AsyncIterableIterator<responses.ListIPSecConnectionTunnelRoutesResponse> {
    return paginateResponses(request, req => this.listIPSecConnectionTunnelRoutes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.TunnelRouteSummary objects
   * contained in responses from the listIPSecConnectionTunnelRoutes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listIPSecConnectionTunnelRoutesRecordIterator(
    request: requests.ListIPSecConnectionTunnelRoutesRequest
  ): AsyncIterableIterator<model.TunnelRouteSummary> {
    return paginateRecords(request, req => this.listIPSecConnectionTunnelRoutes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listIPSecConnectionTunnelRoutes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listIPSecConnectionTunnelRoutesResponseIterator(
    request: requests.ListIPSecConnectionTunnelRoutesRequest
  ): AsyncIterableIterator<responses.ListIPSecConnectionTunnelRoutesResponse> {
    return paginateResponses(request, req => this.listIPSecConnectionTunnelRoutes(req));
  }

  /**
   * Lists the tunnel security associations information for the specified IPSec tunnel ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListIPSecConnectionTunnelSecurityAssociationsRequest
   * @return ListIPSecConnectionTunnelSecurityAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListIPSecConnectionTunnelSecurityAssociations.ts.html |here} to see how to use ListIPSecConnectionTunnelSecurityAssociations API.
   */
  public async listIPSecConnectionTunnelSecurityAssociations(
    listIPSecConnectionTunnelSecurityAssociationsRequest: requests.ListIPSecConnectionTunnelSecurityAssociationsRequest
  ): Promise<responses.ListIPSecConnectionTunnelSecurityAssociationsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#listIPSecConnectionTunnelSecurityAssociations."
      );
    const operationName = "listIPSecConnectionTunnelSecurityAssociations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/TunnelSecurityAssociationSummary/ListIPSecConnectionTunnelSecurityAssociations";
    const pathParams = {
      "{ipscId}": listIPSecConnectionTunnelSecurityAssociationsRequest.ipscId,
      "{tunnelId}": listIPSecConnectionTunnelSecurityAssociationsRequest.tunnelId
    };

    const queryParams = {
      "limit": listIPSecConnectionTunnelSecurityAssociationsRequest.limit,
      "page": listIPSecConnectionTunnelSecurityAssociationsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listIPSecConnectionTunnelSecurityAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/tunnelSecurityAssociations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListIPSecConnectionTunnelSecurityAssociationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.TunnelSecurityAssociationSummary,
        type: "Array<model.TunnelSecurityAssociationSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listIPSecConnectionTunnelSecurityAssociationsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.TunnelSecurityAssociationSummary objects
   * contained in responses from the listIPSecConnectionTunnelSecurityAssociations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIPSecConnectionTunnelSecurityAssociations(
    request: requests.ListIPSecConnectionTunnelSecurityAssociationsRequest
  ): AsyncIterableIterator<model.TunnelSecurityAssociationSummary> {
    return paginateRecords(request, req => this.listIPSecConnectionTunnelSecurityAssociations(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listIPSecConnectionTunnelSecurityAssociationsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listIPSecConnectionTunnelSecurityAssociations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIPSecConnectionTunnelSecurityAssociationsResponses(
    request: requests.ListIPSecConnectionTunnelSecurityAssociationsRequest
  ): AsyncIterableIterator<responses.ListIPSecConnectionTunnelSecurityAssociationsResponse> {
    return paginateResponses(request, req =>
      this.listIPSecConnectionTunnelSecurityAssociations(req)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the models.TunnelSecurityAssociationSummary objects
   * contained in responses from the listIPSecConnectionTunnelSecurityAssociations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listIPSecConnectionTunnelSecurityAssociationsRecordIterator(
    request: requests.ListIPSecConnectionTunnelSecurityAssociationsRequest
  ): AsyncIterableIterator<model.TunnelSecurityAssociationSummary> {
    return paginateRecords(request, req => this.listIPSecConnectionTunnelSecurityAssociations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listIPSecConnectionTunnelSecurityAssociations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listIPSecConnectionTunnelSecurityAssociationsResponseIterator(
    request: requests.ListIPSecConnectionTunnelSecurityAssociationsRequest
  ): AsyncIterableIterator<responses.ListIPSecConnectionTunnelSecurityAssociationsResponse> {
    return paginateResponses(request, req =>
      this.listIPSecConnectionTunnelSecurityAssociations(req)
    );
  }

  /**
   * Lists the tunnel information for the specified IPSec connection.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListIPSecConnectionTunnelsRequest
   * @return ListIPSecConnectionTunnelsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListIPSecConnectionTunnels.ts.html |here} to see how to use ListIPSecConnectionTunnels API.
   */
  public async listIPSecConnectionTunnels(
    listIPSecConnectionTunnelsRequest: requests.ListIPSecConnectionTunnelsRequest
  ): Promise<responses.ListIPSecConnectionTunnelsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listIPSecConnectionTunnels.");
    const operationName = "listIPSecConnectionTunnels";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnel/ListIPSecConnectionTunnels";
    const pathParams = {
      "{ipscId}": listIPSecConnectionTunnelsRequest.ipscId
    };

    const queryParams = {
      "limit": listIPSecConnectionTunnelsRequest.limit,
      "page": listIPSecConnectionTunnelsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listIPSecConnectionTunnelsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListIPSecConnectionTunnelsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.IPSecConnectionTunnel,
        type: "Array<model.IPSecConnectionTunnel>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listIPSecConnectionTunnelsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.IPSecConnectionTunnel objects
   * contained in responses from the listIPSecConnectionTunnels operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIPSecConnectionTunnels(
    request: requests.ListIPSecConnectionTunnelsRequest
  ): AsyncIterableIterator<model.IPSecConnectionTunnel> {
    return paginateRecords(request, req => this.listIPSecConnectionTunnels(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listIPSecConnectionTunnelsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listIPSecConnectionTunnels operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIPSecConnectionTunnelsResponses(
    request: requests.ListIPSecConnectionTunnelsRequest
  ): AsyncIterableIterator<responses.ListIPSecConnectionTunnelsResponse> {
    return paginateResponses(request, req => this.listIPSecConnectionTunnels(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.IPSecConnectionTunnel objects
   * contained in responses from the listIPSecConnectionTunnels operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listIPSecConnectionTunnelsRecordIterator(
    request: requests.ListIPSecConnectionTunnelsRequest
  ): AsyncIterableIterator<model.IPSecConnectionTunnel> {
    return paginateRecords(request, req => this.listIPSecConnectionTunnels(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listIPSecConnectionTunnels operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listIPSecConnectionTunnelsResponseIterator(
    request: requests.ListIPSecConnectionTunnelsRequest
  ): AsyncIterableIterator<responses.ListIPSecConnectionTunnelsResponse> {
    return paginateResponses(request, req => this.listIPSecConnectionTunnels(req));
  }

  /**
   * Lists the IPSec connections for the specified compartment. You can filter the
   * results by DRG or CPE.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListIPSecConnectionsRequest
   * @return ListIPSecConnectionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListIPSecConnections.ts.html |here} to see how to use ListIPSecConnections API.
   */
  public async listIPSecConnections(
    listIPSecConnectionsRequest: requests.ListIPSecConnectionsRequest
  ): Promise<responses.ListIPSecConnectionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listIPSecConnections.");
    const operationName = "listIPSecConnections";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnection/ListIPSecConnections";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listIPSecConnectionsRequest.compartmentId,
      "drgId": listIPSecConnectionsRequest.drgId,
      "cpeId": listIPSecConnectionsRequest.cpeId,
      "limit": listIPSecConnectionsRequest.limit,
      "page": listIPSecConnectionsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listIPSecConnectionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListIPSecConnectionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.IPSecConnection,
        type: "Array<model.IPSecConnection>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listIPSecConnectionsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.IPSecConnection objects
   * contained in responses from the listIPSecConnections operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIPSecConnections(
    request: requests.ListIPSecConnectionsRequest
  ): AsyncIterableIterator<model.IPSecConnection> {
    return paginateRecords(request, req => this.listIPSecConnections(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listIPSecConnectionsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listIPSecConnections operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIPSecConnectionsResponses(
    request: requests.ListIPSecConnectionsRequest
  ): AsyncIterableIterator<responses.ListIPSecConnectionsResponse> {
    return paginateResponses(request, req => this.listIPSecConnections(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.IPSecConnection objects
   * contained in responses from the listIPSecConnections operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listIPSecConnectionsRecordIterator(
    request: requests.ListIPSecConnectionsRequest
  ): AsyncIterableIterator<model.IPSecConnection> {
    return paginateRecords(request, req => this.listIPSecConnections(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listIPSecConnections operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listIPSecConnectionsResponseIterator(
    request: requests.ListIPSecConnectionsRequest
  ): AsyncIterableIterator<responses.ListIPSecConnectionsResponse> {
    return paginateResponses(request, req => this.listIPSecConnections(req));
  }

  /**
   * Lists the internet gateways in the specified VCN and the specified compartment.
   * If the VCN ID is not provided, then the list includes the internet gateways from all VCNs in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListInternetGatewaysRequest
   * @return ListInternetGatewaysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInternetGateways.ts.html |here} to see how to use ListInternetGateways API.
   */
  public async listInternetGateways(
    listInternetGatewaysRequest: requests.ListInternetGatewaysRequest
  ): Promise<responses.ListInternetGatewaysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listInternetGateways.");
    const operationName = "listInternetGateways";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InternetGateway/ListInternetGateways";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listInternetGatewaysRequest.compartmentId,
      "vcnId": listInternetGatewaysRequest.vcnId,
      "limit": listInternetGatewaysRequest.limit,
      "page": listInternetGatewaysRequest.page,
      "displayName": listInternetGatewaysRequest.displayName,
      "sortBy": listInternetGatewaysRequest.sortBy,
      "sortOrder": listInternetGatewaysRequest.sortOrder,
      "lifecycleState": listInternetGatewaysRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInternetGatewaysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internetGateways",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInternetGatewaysResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.InternetGateway,
        type: "Array<model.InternetGateway>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listInternetGatewaysRecordIterator function.
   * Creates a new async iterator which will iterate over the models.InternetGateway objects
   * contained in responses from the listInternetGateways operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInternetGateways(
    request: requests.ListInternetGatewaysRequest
  ): AsyncIterableIterator<model.InternetGateway> {
    return paginateRecords(request, req => this.listInternetGateways(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listInternetGatewaysResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listInternetGateways operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInternetGatewaysResponses(
    request: requests.ListInternetGatewaysRequest
  ): AsyncIterableIterator<responses.ListInternetGatewaysResponse> {
    return paginateResponses(request, req => this.listInternetGateways(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.InternetGateway objects
   * contained in responses from the listInternetGateways operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInternetGatewaysRecordIterator(
    request: requests.ListInternetGatewaysRequest
  ): AsyncIterableIterator<model.InternetGateway> {
    return paginateRecords(request, req => this.listInternetGateways(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInternetGateways operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listInternetGatewaysResponseIterator(
    request: requests.ListInternetGatewaysRequest
  ): AsyncIterableIterator<responses.ListInternetGatewaysResponse> {
    return paginateResponses(request, req => this.listInternetGateways(req));
  }

  /**
   * Lists the IP Inventory information in the selected compartments.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListIpInventoryRequest
   * @return ListIpInventoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListIpInventory.ts.html |here} to see how to use ListIpInventory API.
   */
  public async listIpInventory(
    listIpInventoryRequest: requests.ListIpInventoryRequest
  ): Promise<responses.ListIpInventoryResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listIpInventory.");
    const operationName = "listIpInventory";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vcn/ListIpInventory";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listIpInventoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listIpInventoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipInventory",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        listIpInventoryRequest.listIpInventoryDetails,
        "ListIpInventoryDetails",
        model.ListIpInventoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListIpInventoryResponse>{},
        body: await response.json(),
        bodyKey: "ipInventoryCollection",
        bodyModel: model.IpInventoryCollection,
        type: "model.IpInventoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("lifecycle-state"),
            key: "lifecycleState",
            dataType: "string"
          },
          {
            value: response.headers.get("data-request-id"),
            key: "dataRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the {@link Ipv6} objects based
   * on one of these filters:
   * <p>
   * Subnet [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *   * VNIC [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *   * Both IPv6 address and subnet OCID: This lets you get an `Ipv6` object based on its private
   *   IPv6 address (for example, 2001:0db8:0123:1111:abcd:ef01:2345:6789) and not its [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). For comparison,
   *   {@link #getIpv6(GetIpv6Request) getIpv6} requires the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListIpv6sRequest
   * @return ListIpv6sResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListIpv6s.ts.html |here} to see how to use ListIpv6s API.
   */
  public async listIpv6s(
    listIpv6sRequest: requests.ListIpv6sRequest
  ): Promise<responses.ListIpv6sResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listIpv6s.");
    const operationName = "listIpv6s";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Ipv6/ListIpv6s";
    const pathParams = {};

    const queryParams = {
      "limit": listIpv6sRequest.limit,
      "page": listIpv6sRequest.page,
      "ipAddress": listIpv6sRequest.ipAddress,
      "subnetId": listIpv6sRequest.subnetId,
      "vnicId": listIpv6sRequest.vnicId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listIpv6sRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listIpv6sRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipv6",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListIpv6sResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Ipv6,
        type: "Array<model.Ipv6>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listIpv6sRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Ipv6 objects
   * contained in responses from the listIpv6s operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIpv6s(request: requests.ListIpv6sRequest): AsyncIterableIterator<model.Ipv6> {
    return paginateRecords(request, req => this.listIpv6s(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listIpv6sResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listIpv6s operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIpv6sResponses(
    request: requests.ListIpv6sRequest
  ): AsyncIterableIterator<responses.ListIpv6sResponse> {
    return paginateResponses(request, req => this.listIpv6s(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Ipv6 objects
   * contained in responses from the listIpv6s operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listIpv6sRecordIterator(
    request: requests.ListIpv6sRequest
  ): AsyncIterableIterator<model.Ipv6> {
    return paginateRecords(request, req => this.listIpv6s(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listIpv6s operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listIpv6sResponseIterator(
    request: requests.ListIpv6sRequest
  ): AsyncIterableIterator<responses.ListIpv6sResponse> {
    return paginateResponses(request, req => this.listIpv6s(req));
  }

  /**
   * Lists the local peering gateways (LPGs) for the specified VCN and specified compartment.
   * If the VCN ID is not provided, then the list includes the LPGs from all VCNs in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLocalPeeringGatewaysRequest
   * @return ListLocalPeeringGatewaysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListLocalPeeringGateways.ts.html |here} to see how to use ListLocalPeeringGateways API.
   */
  public async listLocalPeeringGateways(
    listLocalPeeringGatewaysRequest: requests.ListLocalPeeringGatewaysRequest
  ): Promise<responses.ListLocalPeeringGatewaysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listLocalPeeringGateways.");
    const operationName = "listLocalPeeringGateways";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/LocalPeeringGateway/ListLocalPeeringGateways";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listLocalPeeringGatewaysRequest.compartmentId,
      "limit": listLocalPeeringGatewaysRequest.limit,
      "page": listLocalPeeringGatewaysRequest.page,
      "vcnId": listLocalPeeringGatewaysRequest.vcnId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLocalPeeringGatewaysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLocalPeeringGatewaysResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.LocalPeeringGateway,
        type: "Array<model.LocalPeeringGateway>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listLocalPeeringGatewaysRecordIterator function.
   * Creates a new async iterator which will iterate over the models.LocalPeeringGateway objects
   * contained in responses from the listLocalPeeringGateways operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllLocalPeeringGateways(
    request: requests.ListLocalPeeringGatewaysRequest
  ): AsyncIterableIterator<model.LocalPeeringGateway> {
    return paginateRecords(request, req => this.listLocalPeeringGateways(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listLocalPeeringGatewaysResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listLocalPeeringGateways operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllLocalPeeringGatewaysResponses(
    request: requests.ListLocalPeeringGatewaysRequest
  ): AsyncIterableIterator<responses.ListLocalPeeringGatewaysResponse> {
    return paginateResponses(request, req => this.listLocalPeeringGateways(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.LocalPeeringGateway objects
   * contained in responses from the listLocalPeeringGateways operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listLocalPeeringGatewaysRecordIterator(
    request: requests.ListLocalPeeringGatewaysRequest
  ): AsyncIterableIterator<model.LocalPeeringGateway> {
    return paginateRecords(request, req => this.listLocalPeeringGateways(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listLocalPeeringGateways operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listLocalPeeringGatewaysResponseIterator(
    request: requests.ListLocalPeeringGatewaysRequest
  ): AsyncIterableIterator<responses.ListLocalPeeringGatewaysResponse> {
    return paginateResponses(request, req => this.listLocalPeeringGateways(req));
  }

  /**
   * Lists the NAT gateways in the specified compartment. You may optionally specify a VCN OCID
   * to filter the results by VCN.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListNatGatewaysRequest
   * @return ListNatGatewaysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListNatGateways.ts.html |here} to see how to use ListNatGateways API.
   */
  public async listNatGateways(
    listNatGatewaysRequest: requests.ListNatGatewaysRequest
  ): Promise<responses.ListNatGatewaysResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listNatGateways.");
    const operationName = "listNatGateways";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NatGateway/ListNatGateways";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNatGatewaysRequest.compartmentId,
      "vcnId": listNatGatewaysRequest.vcnId,
      "limit": listNatGatewaysRequest.limit,
      "page": listNatGatewaysRequest.page,
      "displayName": listNatGatewaysRequest.displayName,
      "sortBy": listNatGatewaysRequest.sortBy,
      "sortOrder": listNatGatewaysRequest.sortOrder,
      "lifecycleState": listNatGatewaysRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listNatGatewaysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/natGateways",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNatGatewaysResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.NatGateway,
        type: "Array<model.NatGateway>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listNatGatewaysRecordIterator function.
   * Creates a new async iterator which will iterate over the models.NatGateway objects
   * contained in responses from the listNatGateways operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNatGateways(
    request: requests.ListNatGatewaysRequest
  ): AsyncIterableIterator<model.NatGateway> {
    return paginateRecords(request, req => this.listNatGateways(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listNatGatewaysResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listNatGateways operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNatGatewaysResponses(
    request: requests.ListNatGatewaysRequest
  ): AsyncIterableIterator<responses.ListNatGatewaysResponse> {
    return paginateResponses(request, req => this.listNatGateways(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.NatGateway objects
   * contained in responses from the listNatGateways operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNatGatewaysRecordIterator(
    request: requests.ListNatGatewaysRequest
  ): AsyncIterableIterator<model.NatGateway> {
    return paginateRecords(request, req => this.listNatGateways(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNatGateways operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNatGatewaysResponseIterator(
    request: requests.ListNatGatewaysRequest
  ): AsyncIterableIterator<responses.ListNatGatewaysResponse> {
    return paginateResponses(request, req => this.listNatGateways(req));
  }

  /**
   * Lists the security rules in the specified network security group.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListNetworkSecurityGroupSecurityRulesRequest
   * @return ListNetworkSecurityGroupSecurityRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListNetworkSecurityGroupSecurityRules.ts.html |here} to see how to use ListNetworkSecurityGroupSecurityRules API.
   */
  public async listNetworkSecurityGroupSecurityRules(
    listNetworkSecurityGroupSecurityRulesRequest: requests.ListNetworkSecurityGroupSecurityRulesRequest
  ): Promise<responses.ListNetworkSecurityGroupSecurityRulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#listNetworkSecurityGroupSecurityRules."
      );
    const operationName = "listNetworkSecurityGroupSecurityRules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/SecurityRule/ListNetworkSecurityGroupSecurityRules";
    const pathParams = {
      "{networkSecurityGroupId}":
        listNetworkSecurityGroupSecurityRulesRequest.networkSecurityGroupId
    };

    const queryParams = {
      "direction": listNetworkSecurityGroupSecurityRulesRequest.direction,
      "limit": listNetworkSecurityGroupSecurityRulesRequest.limit,
      "page": listNetworkSecurityGroupSecurityRulesRequest.page,
      "sortBy": listNetworkSecurityGroupSecurityRulesRequest.sortBy,
      "sortOrder": listNetworkSecurityGroupSecurityRulesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listNetworkSecurityGroupSecurityRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}/securityRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkSecurityGroupSecurityRulesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SecurityRule,
        type: "Array<model.SecurityRule>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listNetworkSecurityGroupSecurityRulesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SecurityRule objects
   * contained in responses from the listNetworkSecurityGroupSecurityRules operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNetworkSecurityGroupSecurityRules(
    request: requests.ListNetworkSecurityGroupSecurityRulesRequest
  ): AsyncIterableIterator<model.SecurityRule> {
    return paginateRecords(request, req => this.listNetworkSecurityGroupSecurityRules(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listNetworkSecurityGroupSecurityRulesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listNetworkSecurityGroupSecurityRules operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNetworkSecurityGroupSecurityRulesResponses(
    request: requests.ListNetworkSecurityGroupSecurityRulesRequest
  ): AsyncIterableIterator<responses.ListNetworkSecurityGroupSecurityRulesResponse> {
    return paginateResponses(request, req => this.listNetworkSecurityGroupSecurityRules(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SecurityRule objects
   * contained in responses from the listNetworkSecurityGroupSecurityRules operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNetworkSecurityGroupSecurityRulesRecordIterator(
    request: requests.ListNetworkSecurityGroupSecurityRulesRequest
  ): AsyncIterableIterator<model.SecurityRule> {
    return paginateRecords(request, req => this.listNetworkSecurityGroupSecurityRules(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNetworkSecurityGroupSecurityRules operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNetworkSecurityGroupSecurityRulesResponseIterator(
    request: requests.ListNetworkSecurityGroupSecurityRulesRequest
  ): AsyncIterableIterator<responses.ListNetworkSecurityGroupSecurityRulesResponse> {
    return paginateResponses(request, req => this.listNetworkSecurityGroupSecurityRules(req));
  }

  /**
   * Lists the VNICs in the specified network security group.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListNetworkSecurityGroupVnicsRequest
   * @return ListNetworkSecurityGroupVnicsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListNetworkSecurityGroupVnics.ts.html |here} to see how to use ListNetworkSecurityGroupVnics API.
   */
  public async listNetworkSecurityGroupVnics(
    listNetworkSecurityGroupVnicsRequest: requests.ListNetworkSecurityGroupVnicsRequest
  ): Promise<responses.ListNetworkSecurityGroupVnicsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listNetworkSecurityGroupVnics.");
    const operationName = "listNetworkSecurityGroupVnics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NetworkSecurityGroupVnic/ListNetworkSecurityGroupVnics";
    const pathParams = {
      "{networkSecurityGroupId}": listNetworkSecurityGroupVnicsRequest.networkSecurityGroupId
    };

    const queryParams = {
      "limit": listNetworkSecurityGroupVnicsRequest.limit,
      "page": listNetworkSecurityGroupVnicsRequest.page,
      "sortBy": listNetworkSecurityGroupVnicsRequest.sortBy,
      "sortOrder": listNetworkSecurityGroupVnicsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listNetworkSecurityGroupVnicsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}/vnics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkSecurityGroupVnicsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.NetworkSecurityGroupVnic,
        type: "Array<model.NetworkSecurityGroupVnic>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listNetworkSecurityGroupVnicsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.NetworkSecurityGroupVnic objects
   * contained in responses from the listNetworkSecurityGroupVnics operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNetworkSecurityGroupVnics(
    request: requests.ListNetworkSecurityGroupVnicsRequest
  ): AsyncIterableIterator<model.NetworkSecurityGroupVnic> {
    return paginateRecords(request, req => this.listNetworkSecurityGroupVnics(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listNetworkSecurityGroupVnicsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listNetworkSecurityGroupVnics operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNetworkSecurityGroupVnicsResponses(
    request: requests.ListNetworkSecurityGroupVnicsRequest
  ): AsyncIterableIterator<responses.ListNetworkSecurityGroupVnicsResponse> {
    return paginateResponses(request, req => this.listNetworkSecurityGroupVnics(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.NetworkSecurityGroupVnic objects
   * contained in responses from the listNetworkSecurityGroupVnics operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNetworkSecurityGroupVnicsRecordIterator(
    request: requests.ListNetworkSecurityGroupVnicsRequest
  ): AsyncIterableIterator<model.NetworkSecurityGroupVnic> {
    return paginateRecords(request, req => this.listNetworkSecurityGroupVnics(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNetworkSecurityGroupVnics operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNetworkSecurityGroupVnicsResponseIterator(
    request: requests.ListNetworkSecurityGroupVnicsRequest
  ): AsyncIterableIterator<responses.ListNetworkSecurityGroupVnicsResponse> {
    return paginateResponses(request, req => this.listNetworkSecurityGroupVnics(req));
  }

  /**
   * Lists either the network security groups in the specified compartment, or those associated with the specified VLAN.
   * You must specify either a `vlanId` or a `compartmentId`, but not both. If you specify a `vlanId`, all other parameters are ignored.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListNetworkSecurityGroupsRequest
   * @return ListNetworkSecurityGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListNetworkSecurityGroups.ts.html |here} to see how to use ListNetworkSecurityGroups API.
   */
  public async listNetworkSecurityGroups(
    listNetworkSecurityGroupsRequest: requests.ListNetworkSecurityGroupsRequest
  ): Promise<responses.ListNetworkSecurityGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listNetworkSecurityGroups.");
    const operationName = "listNetworkSecurityGroups";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NetworkSecurityGroup/ListNetworkSecurityGroups";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNetworkSecurityGroupsRequest.compartmentId,
      "vlanId": listNetworkSecurityGroupsRequest.vlanId,
      "vcnId": listNetworkSecurityGroupsRequest.vcnId,
      "limit": listNetworkSecurityGroupsRequest.limit,
      "page": listNetworkSecurityGroupsRequest.page,
      "displayName": listNetworkSecurityGroupsRequest.displayName,
      "sortBy": listNetworkSecurityGroupsRequest.sortBy,
      "sortOrder": listNetworkSecurityGroupsRequest.sortOrder,
      "lifecycleState": listNetworkSecurityGroupsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listNetworkSecurityGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkSecurityGroupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.NetworkSecurityGroup,
        type: "Array<model.NetworkSecurityGroup>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listNetworkSecurityGroupsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.NetworkSecurityGroup objects
   * contained in responses from the listNetworkSecurityGroups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNetworkSecurityGroups(
    request: requests.ListNetworkSecurityGroupsRequest
  ): AsyncIterableIterator<model.NetworkSecurityGroup> {
    return paginateRecords(request, req => this.listNetworkSecurityGroups(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listNetworkSecurityGroupsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listNetworkSecurityGroups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNetworkSecurityGroupsResponses(
    request: requests.ListNetworkSecurityGroupsRequest
  ): AsyncIterableIterator<responses.ListNetworkSecurityGroupsResponse> {
    return paginateResponses(request, req => this.listNetworkSecurityGroups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.NetworkSecurityGroup objects
   * contained in responses from the listNetworkSecurityGroups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNetworkSecurityGroupsRecordIterator(
    request: requests.ListNetworkSecurityGroupsRequest
  ): AsyncIterableIterator<model.NetworkSecurityGroup> {
    return paginateRecords(request, req => this.listNetworkSecurityGroups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNetworkSecurityGroups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNetworkSecurityGroupsResponseIterator(
    request: requests.ListNetworkSecurityGroupsRequest
  ): AsyncIterableIterator<responses.ListNetworkSecurityGroupsResponse> {
    return paginateResponses(request, req => this.listNetworkSecurityGroups(req));
  }

  /**
     * Lists the {@link PrivateIp} objects based
* on one of these filters:
* <p>
  - Subnet [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
*   - VNIC [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
*   - Both private IP address and subnet OCID: This lets
*   you get a `privateIP` object based on its private IP
*   address (for example, 10.0.3.3) and not its [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). For comparison,
*   {@link #getPrivateIp(GetPrivateIpRequest) getPrivateIp}
*   requires the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* <p>
If you're listing all the private IPs associated with a given subnet
* or VNIC, the response includes both primary and secondary private IPs.
* <p>
If you are an Oracle Cloud VMware Solution customer and have VLANs
* in your VCN, you can filter the list by VLAN [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). See {@link Vlan}.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListPrivateIpsRequest
     * @return ListPrivateIpsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListPrivateIps.ts.html |here} to see how to use ListPrivateIps API.
     */
  public async listPrivateIps(
    listPrivateIpsRequest: requests.ListPrivateIpsRequest
  ): Promise<responses.ListPrivateIpsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listPrivateIps.");
    const operationName = "listPrivateIps";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PrivateIp/ListPrivateIps";
    const pathParams = {};

    const queryParams = {
      "limit": listPrivateIpsRequest.limit,
      "page": listPrivateIpsRequest.page,
      "ipAddress": listPrivateIpsRequest.ipAddress,
      "subnetId": listPrivateIpsRequest.subnetId,
      "vnicId": listPrivateIpsRequest.vnicId,
      "vlanId": listPrivateIpsRequest.vlanId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPrivateIpsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateIps",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPrivateIpsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PrivateIp,
        type: "Array<model.PrivateIp>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPrivateIpsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.PrivateIp objects
   * contained in responses from the listPrivateIps operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPrivateIps(
    request: requests.ListPrivateIpsRequest
  ): AsyncIterableIterator<model.PrivateIp> {
    return paginateRecords(request, req => this.listPrivateIps(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPrivateIpsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPrivateIps operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPrivateIpsResponses(
    request: requests.ListPrivateIpsRequest
  ): AsyncIterableIterator<responses.ListPrivateIpsResponse> {
    return paginateResponses(request, req => this.listPrivateIps(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.PrivateIp objects
   * contained in responses from the listPrivateIps operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPrivateIpsRecordIterator(
    request: requests.ListPrivateIpsRequest
  ): AsyncIterableIterator<model.PrivateIp> {
    return paginateRecords(request, req => this.listPrivateIps(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPrivateIps operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPrivateIpsResponseIterator(
    request: requests.ListPrivateIpsRequest
  ): AsyncIterableIterator<responses.ListPrivateIpsResponse> {
    return paginateResponses(request, req => this.listPrivateIps(req));
  }

  /**
   * Lists the public IP pools in the specified compartment.
   * You can filter the list using query parameters.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPublicIpPoolsRequest
   * @return ListPublicIpPoolsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListPublicIpPools.ts.html |here} to see how to use ListPublicIpPools API.
   */
  public async listPublicIpPools(
    listPublicIpPoolsRequest: requests.ListPublicIpPoolsRequest
  ): Promise<responses.ListPublicIpPoolsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listPublicIpPools.");
    const operationName = "listPublicIpPools";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIpPool/ListPublicIpPools";
    const pathParams = {};

    const queryParams = {
      "limit": listPublicIpPoolsRequest.limit,
      "page": listPublicIpPoolsRequest.page,
      "displayName": listPublicIpPoolsRequest.displayName,
      "byoipRangeId": listPublicIpPoolsRequest.byoipRangeId,
      "sortBy": listPublicIpPoolsRequest.sortBy,
      "sortOrder": listPublicIpPoolsRequest.sortOrder,
      "compartmentId": listPublicIpPoolsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPublicIpPoolsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPublicIpPoolsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPublicIpPoolsResponse>{},
        body: await response.json(),
        bodyKey: "publicIpPoolCollection",
        bodyModel: model.PublicIpPoolCollection,
        type: "model.PublicIpPoolCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Lists the {@link PublicIp} objects
* in the specified compartment. You can filter the list by using query parameters.
* <p>
To list your reserved public IPs:
*   * Set `scope` = `REGION`  (required)
*   * Leave the `availabilityDomain` parameter empty
*   * Set `lifetime` = `RESERVED`
* <p>
To list the ephemeral public IPs assigned to a regional entity such as a NAT gateway:
*   * Set `scope` = `REGION`  (required)
*   * Leave the `availabilityDomain` parameter empty
*   * Set `lifetime` = `EPHEMERAL`
* <p>
To list the ephemeral public IPs assigned to private IPs:
*   * Set `scope` = `AVAILABILITY_DOMAIN` (required)
*   * Set the `availabilityDomain` parameter to the desired availability domain (required)
*   * Set `lifetime` = `EPHEMERAL`
* <p>
**Note:** An ephemeral public IP assigned to a private IP
* is always in the same availability domain and compartment as the private IP.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListPublicIpsRequest
     * @return ListPublicIpsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListPublicIps.ts.html |here} to see how to use ListPublicIps API.
     */
  public async listPublicIps(
    listPublicIpsRequest: requests.ListPublicIpsRequest
  ): Promise<responses.ListPublicIpsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listPublicIps.");
    const operationName = "listPublicIps";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIp/ListPublicIps";
    const pathParams = {};

    const queryParams = {
      "limit": listPublicIpsRequest.limit,
      "page": listPublicIpsRequest.page,
      "scope": listPublicIpsRequest.scope,
      "availabilityDomain": listPublicIpsRequest.availabilityDomain,
      "lifetime": listPublicIpsRequest.lifetime,
      "compartmentId": listPublicIpsRequest.compartmentId,
      "publicIpPoolId": listPublicIpsRequest.publicIpPoolId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPublicIpsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPublicIpsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PublicIp,
        type: "Array<model.PublicIp>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPublicIpsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.PublicIp objects
   * contained in responses from the listPublicIps operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPublicIps(
    request: requests.ListPublicIpsRequest
  ): AsyncIterableIterator<model.PublicIp> {
    return paginateRecords(request, req => this.listPublicIps(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPublicIpsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPublicIps operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPublicIpsResponses(
    request: requests.ListPublicIpsRequest
  ): AsyncIterableIterator<responses.ListPublicIpsResponse> {
    return paginateResponses(request, req => this.listPublicIps(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.PublicIp objects
   * contained in responses from the listPublicIps operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPublicIpsRecordIterator(
    request: requests.ListPublicIpsRequest
  ): AsyncIterableIterator<model.PublicIp> {
    return paginateRecords(request, req => this.listPublicIps(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPublicIps operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPublicIpsResponseIterator(
    request: requests.ListPublicIpsRequest
  ): AsyncIterableIterator<responses.ListPublicIpsResponse> {
    return paginateResponses(request, req => this.listPublicIps(req));
  }

  /**
   * Lists the remote peering connections (RPCs) for the specified DRG and compartment
   * (the RPC's compartment).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListRemotePeeringConnectionsRequest
   * @return ListRemotePeeringConnectionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListRemotePeeringConnections.ts.html |here} to see how to use ListRemotePeeringConnections API.
   */
  public async listRemotePeeringConnections(
    listRemotePeeringConnectionsRequest: requests.ListRemotePeeringConnectionsRequest
  ): Promise<responses.ListRemotePeeringConnectionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listRemotePeeringConnections.");
    const operationName = "listRemotePeeringConnections";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/RemotePeeringConnection/ListRemotePeeringConnections";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRemotePeeringConnectionsRequest.compartmentId,
      "drgId": listRemotePeeringConnectionsRequest.drgId,
      "limit": listRemotePeeringConnectionsRequest.limit,
      "page": listRemotePeeringConnectionsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRemotePeeringConnectionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRemotePeeringConnectionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.RemotePeeringConnection,
        type: "Array<model.RemotePeeringConnection>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listRemotePeeringConnectionsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.RemotePeeringConnection objects
   * contained in responses from the listRemotePeeringConnections operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRemotePeeringConnections(
    request: requests.ListRemotePeeringConnectionsRequest
  ): AsyncIterableIterator<model.RemotePeeringConnection> {
    return paginateRecords(request, req => this.listRemotePeeringConnections(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listRemotePeeringConnectionsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listRemotePeeringConnections operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRemotePeeringConnectionsResponses(
    request: requests.ListRemotePeeringConnectionsRequest
  ): AsyncIterableIterator<responses.ListRemotePeeringConnectionsResponse> {
    return paginateResponses(request, req => this.listRemotePeeringConnections(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.RemotePeeringConnection objects
   * contained in responses from the listRemotePeeringConnections operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listRemotePeeringConnectionsRecordIterator(
    request: requests.ListRemotePeeringConnectionsRequest
  ): AsyncIterableIterator<model.RemotePeeringConnection> {
    return paginateRecords(request, req => this.listRemotePeeringConnections(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listRemotePeeringConnections operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listRemotePeeringConnectionsResponseIterator(
    request: requests.ListRemotePeeringConnectionsRequest
  ): AsyncIterableIterator<responses.ListRemotePeeringConnectionsResponse> {
    return paginateResponses(request, req => this.listRemotePeeringConnections(req));
  }

  /**
   * Lists the route tables in the specified VCN and specified compartment.
   * If the VCN ID is not provided, then the list includes the route tables from all VCNs in the specified compartment.
   * The response includes the default route table that automatically comes with
   * each VCN in the specified compartment, plus any route tables you've created.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListRouteTablesRequest
   * @return ListRouteTablesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListRouteTables.ts.html |here} to see how to use ListRouteTables API.
   */
  public async listRouteTables(
    listRouteTablesRequest: requests.ListRouteTablesRequest
  ): Promise<responses.ListRouteTablesResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listRouteTables.");
    const operationName = "listRouteTables";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/RouteTable/ListRouteTables";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRouteTablesRequest.compartmentId,
      "limit": listRouteTablesRequest.limit,
      "page": listRouteTablesRequest.page,
      "vcnId": listRouteTablesRequest.vcnId,
      "displayName": listRouteTablesRequest.displayName,
      "sortBy": listRouteTablesRequest.sortBy,
      "sortOrder": listRouteTablesRequest.sortOrder,
      "lifecycleState": listRouteTablesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRouteTablesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/routeTables",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRouteTablesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.RouteTable,
        type: "Array<model.RouteTable>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listRouteTablesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.RouteTable objects
   * contained in responses from the listRouteTables operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRouteTables(
    request: requests.ListRouteTablesRequest
  ): AsyncIterableIterator<model.RouteTable> {
    return paginateRecords(request, req => this.listRouteTables(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listRouteTablesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listRouteTables operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRouteTablesResponses(
    request: requests.ListRouteTablesRequest
  ): AsyncIterableIterator<responses.ListRouteTablesResponse> {
    return paginateResponses(request, req => this.listRouteTables(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.RouteTable objects
   * contained in responses from the listRouteTables operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listRouteTablesRecordIterator(
    request: requests.ListRouteTablesRequest
  ): AsyncIterableIterator<model.RouteTable> {
    return paginateRecords(request, req => this.listRouteTables(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listRouteTables operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listRouteTablesResponseIterator(
    request: requests.ListRouteTablesRequest
  ): AsyncIterableIterator<responses.ListRouteTablesResponse> {
    return paginateResponses(request, req => this.listRouteTables(req));
  }

  /**
   * Lists the security lists in the specified VCN and compartment.
   * If the VCN ID is not provided, then the list includes the security lists from all VCNs in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSecurityListsRequest
   * @return ListSecurityListsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListSecurityLists.ts.html |here} to see how to use ListSecurityLists API.
   */
  public async listSecurityLists(
    listSecurityListsRequest: requests.ListSecurityListsRequest
  ): Promise<responses.ListSecurityListsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listSecurityLists.");
    const operationName = "listSecurityLists";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/SecurityList/ListSecurityLists";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSecurityListsRequest.compartmentId,
      "limit": listSecurityListsRequest.limit,
      "page": listSecurityListsRequest.page,
      "vcnId": listSecurityListsRequest.vcnId,
      "displayName": listSecurityListsRequest.displayName,
      "sortBy": listSecurityListsRequest.sortBy,
      "sortOrder": listSecurityListsRequest.sortOrder,
      "lifecycleState": listSecurityListsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityListsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityLists",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityListsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SecurityList,
        type: "Array<model.SecurityList>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityListsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SecurityList objects
   * contained in responses from the listSecurityLists operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityLists(
    request: requests.ListSecurityListsRequest
  ): AsyncIterableIterator<model.SecurityList> {
    return paginateRecords(request, req => this.listSecurityLists(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityListsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSecurityLists operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityListsResponses(
    request: requests.ListSecurityListsRequest
  ): AsyncIterableIterator<responses.ListSecurityListsResponse> {
    return paginateResponses(request, req => this.listSecurityLists(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SecurityList objects
   * contained in responses from the listSecurityLists operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityListsRecordIterator(
    request: requests.ListSecurityListsRequest
  ): AsyncIterableIterator<model.SecurityList> {
    return paginateRecords(request, req => this.listSecurityLists(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSecurityLists operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityListsResponseIterator(
    request: requests.ListSecurityListsRequest
  ): AsyncIterableIterator<responses.ListSecurityListsResponse> {
    return paginateResponses(request, req => this.listSecurityLists(req));
  }

  /**
   * Lists the service gateways in the specified compartment. You may optionally specify a VCN OCID
   * to filter the results by VCN.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListServiceGatewaysRequest
   * @return ListServiceGatewaysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListServiceGateways.ts.html |here} to see how to use ListServiceGateways API.
   */
  public async listServiceGateways(
    listServiceGatewaysRequest: requests.ListServiceGatewaysRequest
  ): Promise<responses.ListServiceGatewaysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listServiceGateways.");
    const operationName = "listServiceGateways";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ServiceGateway/ListServiceGateways";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listServiceGatewaysRequest.compartmentId,
      "vcnId": listServiceGatewaysRequest.vcnId,
      "limit": listServiceGatewaysRequest.limit,
      "page": listServiceGatewaysRequest.page,
      "sortBy": listServiceGatewaysRequest.sortBy,
      "sortOrder": listServiceGatewaysRequest.sortOrder,
      "lifecycleState": listServiceGatewaysRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listServiceGatewaysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListServiceGatewaysResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ServiceGateway,
        type: "Array<model.ServiceGateway>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listServiceGatewaysRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ServiceGateway objects
   * contained in responses from the listServiceGateways operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllServiceGateways(
    request: requests.ListServiceGatewaysRequest
  ): AsyncIterableIterator<model.ServiceGateway> {
    return paginateRecords(request, req => this.listServiceGateways(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listServiceGatewaysResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listServiceGateways operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllServiceGatewaysResponses(
    request: requests.ListServiceGatewaysRequest
  ): AsyncIterableIterator<responses.ListServiceGatewaysResponse> {
    return paginateResponses(request, req => this.listServiceGateways(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ServiceGateway objects
   * contained in responses from the listServiceGateways operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listServiceGatewaysRecordIterator(
    request: requests.ListServiceGatewaysRequest
  ): AsyncIterableIterator<model.ServiceGateway> {
    return paginateRecords(request, req => this.listServiceGateways(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listServiceGateways operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listServiceGatewaysResponseIterator(
    request: requests.ListServiceGatewaysRequest
  ): AsyncIterableIterator<responses.ListServiceGatewaysResponse> {
    return paginateResponses(request, req => this.listServiceGateways(req));
  }

  /**
   * Lists the available {@link Service} objects that you can enable for a
   * service gateway in this region.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListServicesRequest
   * @return ListServicesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListServices.ts.html |here} to see how to use ListServices API.
   */
  public async listServices(
    listServicesRequest: requests.ListServicesRequest
  ): Promise<responses.ListServicesResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listServices.");
    const operationName = "listServices";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Service/ListServices";
    const pathParams = {};

    const queryParams = {
      "limit": listServicesRequest.limit,
      "page": listServicesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listServicesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/services",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListServicesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Service,
        type: "Array<model.Service>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listServicesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Service objects
   * contained in responses from the listServices operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllServices(
    request: requests.ListServicesRequest
  ): AsyncIterableIterator<model.Service> {
    return paginateRecords(request, req => this.listServices(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listServicesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listServices operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllServicesResponses(
    request: requests.ListServicesRequest
  ): AsyncIterableIterator<responses.ListServicesResponse> {
    return paginateResponses(request, req => this.listServices(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Service objects
   * contained in responses from the listServices operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listServicesRecordIterator(
    request: requests.ListServicesRequest
  ): AsyncIterableIterator<model.Service> {
    return paginateRecords(request, req => this.listServices(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listServices operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listServicesResponseIterator(
    request: requests.ListServicesRequest
  ): AsyncIterableIterator<responses.ListServicesResponse> {
    return paginateResponses(request, req => this.listServices(req));
  }

  /**
   * Lists the subnets in the specified VCN and the specified compartment.
   * If the VCN ID is not provided, then the list includes the subnets from all VCNs in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSubnetsRequest
   * @return ListSubnetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListSubnets.ts.html |here} to see how to use ListSubnets API.
   */
  public async listSubnets(
    listSubnetsRequest: requests.ListSubnetsRequest
  ): Promise<responses.ListSubnetsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listSubnets.");
    const operationName = "listSubnets";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Subnet/ListSubnets";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSubnetsRequest.compartmentId,
      "limit": listSubnetsRequest.limit,
      "page": listSubnetsRequest.page,
      "vcnId": listSubnetsRequest.vcnId,
      "displayName": listSubnetsRequest.displayName,
      "sortBy": listSubnetsRequest.sortBy,
      "sortOrder": listSubnetsRequest.sortOrder,
      "lifecycleState": listSubnetsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSubnetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSubnetsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Subnet,
        type: "Array<model.Subnet>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSubnetsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Subnet objects
   * contained in responses from the listSubnets operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSubnets(request: requests.ListSubnetsRequest): AsyncIterableIterator<model.Subnet> {
    return paginateRecords(request, req => this.listSubnets(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSubnetsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSubnets operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSubnetsResponses(
    request: requests.ListSubnetsRequest
  ): AsyncIterableIterator<responses.ListSubnetsResponse> {
    return paginateResponses(request, req => this.listSubnets(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Subnet objects
   * contained in responses from the listSubnets operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSubnetsRecordIterator(
    request: requests.ListSubnetsRequest
  ): AsyncIterableIterator<model.Subnet> {
    return paginateRecords(request, req => this.listSubnets(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSubnets operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSubnetsResponseIterator(
    request: requests.ListSubnetsRequest
  ): AsyncIterableIterator<responses.ListSubnetsResponse> {
    return paginateResponses(request, req => this.listSubnets(req));
  }

  /**
   * Lists the virtual cloud networks (VCNs) in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListVcnsRequest
   * @return ListVcnsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVcns.ts.html |here} to see how to use ListVcns API.
   */
  public async listVcns(
    listVcnsRequest: requests.ListVcnsRequest
  ): Promise<responses.ListVcnsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listVcns.");
    const operationName = "listVcns";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vcn/ListVcns";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVcnsRequest.compartmentId,
      "limit": listVcnsRequest.limit,
      "page": listVcnsRequest.page,
      "displayName": listVcnsRequest.displayName,
      "sortBy": listVcnsRequest.sortBy,
      "sortOrder": listVcnsRequest.sortOrder,
      "lifecycleState": listVcnsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVcnsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVcnsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Vcn,
        type: "Array<model.Vcn>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVcnsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Vcn objects
   * contained in responses from the listVcns operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVcns(request: requests.ListVcnsRequest): AsyncIterableIterator<model.Vcn> {
    return paginateRecords(request, req => this.listVcns(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVcnsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVcns operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVcnsResponses(
    request: requests.ListVcnsRequest
  ): AsyncIterableIterator<responses.ListVcnsResponse> {
    return paginateResponses(request, req => this.listVcns(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Vcn objects
   * contained in responses from the listVcns operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVcnsRecordIterator(
    request: requests.ListVcnsRequest
  ): AsyncIterableIterator<model.Vcn> {
    return paginateRecords(request, req => this.listVcns(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVcns operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVcnsResponseIterator(
    request: requests.ListVcnsRequest
  ): AsyncIterableIterator<responses.ListVcnsResponse> {
    return paginateResponses(request, req => this.listVcns(req));
  }

  /**
   * Gets the specified virtual circuit's associatedTunnelsInfo.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListVirtualCircuitAssociatedTunnelsRequest
   * @return ListVirtualCircuitAssociatedTunnelsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVirtualCircuitAssociatedTunnels.ts.html |here} to see how to use ListVirtualCircuitAssociatedTunnels API.
   */
  public async listVirtualCircuitAssociatedTunnels(
    listVirtualCircuitAssociatedTunnelsRequest: requests.ListVirtualCircuitAssociatedTunnelsRequest
  ): Promise<responses.ListVirtualCircuitAssociatedTunnelsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#listVirtualCircuitAssociatedTunnels."
      );
    const operationName = "listVirtualCircuitAssociatedTunnels";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VirtualCircuitAssociatedTunnelDetails/ListVirtualCircuitAssociatedTunnels";
    const pathParams = {
      "{virtualCircuitId}": listVirtualCircuitAssociatedTunnelsRequest.virtualCircuitId
    };

    const queryParams = {
      "limit": listVirtualCircuitAssociatedTunnelsRequest.limit,
      "page": listVirtualCircuitAssociatedTunnelsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVirtualCircuitAssociatedTunnelsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}/associatedTunnels",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVirtualCircuitAssociatedTunnelsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VirtualCircuitAssociatedTunnelDetails,
        type: "Array<model.VirtualCircuitAssociatedTunnelDetails>",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVirtualCircuitAssociatedTunnelsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VirtualCircuitAssociatedTunnelDetails objects
   * contained in responses from the listVirtualCircuitAssociatedTunnels operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualCircuitAssociatedTunnels(
    request: requests.ListVirtualCircuitAssociatedTunnelsRequest
  ): AsyncIterableIterator<model.VirtualCircuitAssociatedTunnelDetails> {
    return paginateRecords(request, req => this.listVirtualCircuitAssociatedTunnels(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVirtualCircuitAssociatedTunnelsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVirtualCircuitAssociatedTunnels operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualCircuitAssociatedTunnelsResponses(
    request: requests.ListVirtualCircuitAssociatedTunnelsRequest
  ): AsyncIterableIterator<responses.ListVirtualCircuitAssociatedTunnelsResponse> {
    return paginateResponses(request, req => this.listVirtualCircuitAssociatedTunnels(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VirtualCircuitAssociatedTunnelDetails objects
   * contained in responses from the listVirtualCircuitAssociatedTunnels operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVirtualCircuitAssociatedTunnelsRecordIterator(
    request: requests.ListVirtualCircuitAssociatedTunnelsRequest
  ): AsyncIterableIterator<model.VirtualCircuitAssociatedTunnelDetails> {
    return paginateRecords(request, req => this.listVirtualCircuitAssociatedTunnels(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVirtualCircuitAssociatedTunnels operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVirtualCircuitAssociatedTunnelsResponseIterator(
    request: requests.ListVirtualCircuitAssociatedTunnelsRequest
  ): AsyncIterableIterator<responses.ListVirtualCircuitAssociatedTunnelsResponse> {
    return paginateResponses(request, req => this.listVirtualCircuitAssociatedTunnels(req));
  }

  /**
   * The deprecated operation lists available bandwidth levels for virtual circuits. For the compartment ID, provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of your tenancy (the root compartment).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListVirtualCircuitBandwidthShapesRequest
   * @return ListVirtualCircuitBandwidthShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVirtualCircuitBandwidthShapes.ts.html |here} to see how to use ListVirtualCircuitBandwidthShapes API.
   */
  public async listVirtualCircuitBandwidthShapes(
    listVirtualCircuitBandwidthShapesRequest: requests.ListVirtualCircuitBandwidthShapesRequest
  ): Promise<responses.ListVirtualCircuitBandwidthShapesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#listVirtualCircuitBandwidthShapes."
      );
    const operationName = "listVirtualCircuitBandwidthShapes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VirtualCircuitBandwidthShape/ListVirtualCircuitBandwidthShapes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVirtualCircuitBandwidthShapesRequest.compartmentId,
      "limit": listVirtualCircuitBandwidthShapesRequest.limit,
      "page": listVirtualCircuitBandwidthShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVirtualCircuitBandwidthShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuitBandwidthShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVirtualCircuitBandwidthShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VirtualCircuitBandwidthShape,
        type: "Array<model.VirtualCircuitBandwidthShape>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVirtualCircuitBandwidthShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VirtualCircuitBandwidthShape objects
   * contained in responses from the listVirtualCircuitBandwidthShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualCircuitBandwidthShapes(
    request: requests.ListVirtualCircuitBandwidthShapesRequest
  ): AsyncIterableIterator<model.VirtualCircuitBandwidthShape> {
    return paginateRecords(request, req => this.listVirtualCircuitBandwidthShapes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVirtualCircuitBandwidthShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVirtualCircuitBandwidthShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualCircuitBandwidthShapesResponses(
    request: requests.ListVirtualCircuitBandwidthShapesRequest
  ): AsyncIterableIterator<responses.ListVirtualCircuitBandwidthShapesResponse> {
    return paginateResponses(request, req => this.listVirtualCircuitBandwidthShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VirtualCircuitBandwidthShape objects
   * contained in responses from the listVirtualCircuitBandwidthShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVirtualCircuitBandwidthShapesRecordIterator(
    request: requests.ListVirtualCircuitBandwidthShapesRequest
  ): AsyncIterableIterator<model.VirtualCircuitBandwidthShape> {
    return paginateRecords(request, req => this.listVirtualCircuitBandwidthShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVirtualCircuitBandwidthShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVirtualCircuitBandwidthShapesResponseIterator(
    request: requests.ListVirtualCircuitBandwidthShapesRequest
  ): AsyncIterableIterator<responses.ListVirtualCircuitBandwidthShapesResponse> {
    return paginateResponses(request, req => this.listVirtualCircuitBandwidthShapes(req));
  }

  /**
   * Lists the public IP prefixes and their details for the specified
   * public virtual circuit.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListVirtualCircuitPublicPrefixesRequest
   * @return ListVirtualCircuitPublicPrefixesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVirtualCircuitPublicPrefixes.ts.html |here} to see how to use ListVirtualCircuitPublicPrefixes API.
   */
  public async listVirtualCircuitPublicPrefixes(
    listVirtualCircuitPublicPrefixesRequest: requests.ListVirtualCircuitPublicPrefixesRequest
  ): Promise<responses.ListVirtualCircuitPublicPrefixesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listVirtualCircuitPublicPrefixes.");
    const operationName = "listVirtualCircuitPublicPrefixes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VirtualCircuitPublicPrefix/ListVirtualCircuitPublicPrefixes";
    const pathParams = {
      "{virtualCircuitId}": listVirtualCircuitPublicPrefixesRequest.virtualCircuitId
    };

    const queryParams = {
      "verificationState": listVirtualCircuitPublicPrefixesRequest.verificationState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVirtualCircuitPublicPrefixesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}/publicPrefixes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVirtualCircuitPublicPrefixesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VirtualCircuitPublicPrefix,
        type: "Array<model.VirtualCircuitPublicPrefix>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the virtual circuits in the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListVirtualCircuitsRequest
   * @return ListVirtualCircuitsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVirtualCircuits.ts.html |here} to see how to use ListVirtualCircuits API.
   */
  public async listVirtualCircuits(
    listVirtualCircuitsRequest: requests.ListVirtualCircuitsRequest
  ): Promise<responses.ListVirtualCircuitsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listVirtualCircuits.");
    const operationName = "listVirtualCircuits";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VirtualCircuit/ListVirtualCircuits";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVirtualCircuitsRequest.compartmentId,
      "limit": listVirtualCircuitsRequest.limit,
      "page": listVirtualCircuitsRequest.page,
      "displayName": listVirtualCircuitsRequest.displayName,
      "sortBy": listVirtualCircuitsRequest.sortBy,
      "sortOrder": listVirtualCircuitsRequest.sortOrder,
      "lifecycleState": listVirtualCircuitsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVirtualCircuitsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVirtualCircuitsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.VirtualCircuit,
        type: "Array<model.VirtualCircuit>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVirtualCircuitsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.VirtualCircuit objects
   * contained in responses from the listVirtualCircuits operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualCircuits(
    request: requests.ListVirtualCircuitsRequest
  ): AsyncIterableIterator<model.VirtualCircuit> {
    return paginateRecords(request, req => this.listVirtualCircuits(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVirtualCircuitsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVirtualCircuits operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualCircuitsResponses(
    request: requests.ListVirtualCircuitsRequest
  ): AsyncIterableIterator<responses.ListVirtualCircuitsResponse> {
    return paginateResponses(request, req => this.listVirtualCircuits(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.VirtualCircuit objects
   * contained in responses from the listVirtualCircuits operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVirtualCircuitsRecordIterator(
    request: requests.ListVirtualCircuitsRequest
  ): AsyncIterableIterator<model.VirtualCircuit> {
    return paginateRecords(request, req => this.listVirtualCircuits(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVirtualCircuits operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVirtualCircuitsResponseIterator(
    request: requests.ListVirtualCircuitsRequest
  ): AsyncIterableIterator<responses.ListVirtualCircuitsResponse> {
    return paginateResponses(request, req => this.listVirtualCircuits(req));
  }

  /**
   * Lists the VLANs in the specified VCN and the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListVlansRequest
   * @return ListVlansResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVlans.ts.html |here} to see how to use ListVlans API.
   */
  public async listVlans(
    listVlansRequest: requests.ListVlansRequest
  ): Promise<responses.ListVlansResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listVlans.");
    const operationName = "listVlans";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vlan/ListVlans";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVlansRequest.compartmentId,
      "limit": listVlansRequest.limit,
      "page": listVlansRequest.page,
      "vcnId": listVlansRequest.vcnId,
      "displayName": listVlansRequest.displayName,
      "sortBy": listVlansRequest.sortBy,
      "sortOrder": listVlansRequest.sortOrder,
      "lifecycleState": listVlansRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listVlansRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVlansRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vlans",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVlansResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Vlan,
        type: "Array<model.Vlan>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVlansRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Vlan objects
   * contained in responses from the listVlans operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVlans(request: requests.ListVlansRequest): AsyncIterableIterator<model.Vlan> {
    return paginateRecords(request, req => this.listVlans(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVlansResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVlans operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVlansResponses(
    request: requests.ListVlansRequest
  ): AsyncIterableIterator<responses.ListVlansResponse> {
    return paginateResponses(request, req => this.listVlans(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Vlan objects
   * contained in responses from the listVlans operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVlansRecordIterator(
    request: requests.ListVlansRequest
  ): AsyncIterableIterator<model.Vlan> {
    return paginateRecords(request, req => this.listVlans(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVlans operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVlansResponseIterator(
    request: requests.ListVlansRequest
  ): AsyncIterableIterator<responses.ListVlansResponse> {
    return paginateResponses(request, req => this.listVlans(req));
  }

  /**
   * Lists the virtual test access points (VTAPs) in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListVtapsRequest
   * @return ListVtapsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVtaps.ts.html |here} to see how to use ListVtaps API.
   */
  public async listVtaps(
    listVtapsRequest: requests.ListVtapsRequest
  ): Promise<responses.ListVtapsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listVtaps.");
    const operationName = "listVtaps";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vtap/ListVtaps";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVtapsRequest.compartmentId,
      "vcnId": listVtapsRequest.vcnId,
      "source": listVtapsRequest.source,
      "targetId": listVtapsRequest.targetId,
      "targetIp": listVtapsRequest.targetIp,
      "isVtapEnabled": listVtapsRequest.isVtapEnabled,
      "limit": listVtapsRequest.limit,
      "page": listVtapsRequest.page,
      "sortBy": listVtapsRequest.sortBy,
      "sortOrder": listVtapsRequest.sortOrder,
      "displayName": listVtapsRequest.displayName,
      "lifecycleState": listVtapsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listVtapsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVtapsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vtaps",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVtapsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Vtap,
        type: "Array<model.Vtap>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listVtapsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Vtap objects
   * contained in responses from the listVtaps operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVtaps(request: requests.ListVtapsRequest): AsyncIterableIterator<model.Vtap> {
    return paginateRecords(request, req => this.listVtaps(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listVtapsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listVtaps operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVtapsResponses(
    request: requests.ListVtapsRequest
  ): AsyncIterableIterator<responses.ListVtapsResponse> {
    return paginateResponses(request, req => this.listVtaps(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Vtap objects
   * contained in responses from the listVtaps operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVtapsRecordIterator(
    request: requests.ListVtapsRequest
  ): AsyncIterableIterator<model.Vtap> {
    return paginateRecords(request, req => this.listVtaps(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVtaps operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listVtapsResponseIterator(
    request: requests.ListVtapsRequest
  ): AsyncIterableIterator<responses.ListVtapsResponse> {
    return paginateResponses(request, req => this.listVtaps(req));
  }

  /**
     * Updates the specified CIDR block of a VCN. The new CIDR IP range must meet the following criteria:
* <p>
- Must be valid.
* - Must not overlap with another CIDR block in the VCN, a CIDR block of a peered VCN, or the on-premises network CIDR block.
* - Must not exceed the limit of CIDR blocks allowed per VCN.
* - Must include IP addresses from the original CIDR block that are used in the VCN's existing route rules.
* - No IP address in an existing subnet should be outside of the new CIDR block range.
* <p>
**Note:** Modifying a CIDR block places your VCN in an updating state until the changes are complete. You cannot create or update the VCN's subnets, VLANs, LPGs, or route tables during this operation. The time to completion can vary depending on the size of your network. Updating a small network could take about a minute, and updating a large network could take up to an hour. You can use the `GetWorkRequest` operation to check the status of the update.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ModifyVcnCidrRequest
     * @return ModifyVcnCidrResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ModifyVcnCidr.ts.html |here} to see how to use ModifyVcnCidr API.
     */
  public async modifyVcnCidr(
    modifyVcnCidrRequest: requests.ModifyVcnCidrRequest
  ): Promise<responses.ModifyVcnCidrResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#modifyVcnCidr.");
    const operationName = "modifyVcnCidr";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vcn/ModifyVcnCidr";
    const pathParams = {
      "{vcnId}": modifyVcnCidrRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": modifyVcnCidrRequest.opcRequestId,
      "opc-retry-token": modifyVcnCidrRequest.opcRetryToken,
      "if-match": modifyVcnCidrRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      modifyVcnCidrRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}/actions/modifyCidr",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        modifyVcnCidrRequest.modifyVcnCidrDetails,
        "ModifyVcnCidrDetails",
        model.ModifyVcnCidrDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ModifyVcnCidrResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes one or more route distribution statements from the specified route distribution's map.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveDrgRouteDistributionStatementsRequest
   * @return RemoveDrgRouteDistributionStatementsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemoveDrgRouteDistributionStatements.ts.html |here} to see how to use RemoveDrgRouteDistributionStatements API.
   */
  public async removeDrgRouteDistributionStatements(
    removeDrgRouteDistributionStatementsRequest: requests.RemoveDrgRouteDistributionStatementsRequest
  ): Promise<responses.RemoveDrgRouteDistributionStatementsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#removeDrgRouteDistributionStatements."
      );
    const operationName = "removeDrgRouteDistributionStatements";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteDistributionStatement/RemoveDrgRouteDistributionStatements";
    const pathParams = {
      "{drgRouteDistributionId}": removeDrgRouteDistributionStatementsRequest.drgRouteDistributionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeDrgRouteDistributionStatementsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/drgRouteDistributions/{drgRouteDistributionId}/actions/removeDrgRouteDistributionStatements",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeDrgRouteDistributionStatementsRequest.removeDrgRouteDistributionStatementsDetails,
        "RemoveDrgRouteDistributionStatementsDetails",
        model.RemoveDrgRouteDistributionStatementsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveDrgRouteDistributionStatementsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes one or more route rules from the specified DRG route table.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveDrgRouteRulesRequest
   * @return RemoveDrgRouteRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemoveDrgRouteRules.ts.html |here} to see how to use RemoveDrgRouteRules API.
   */
  public async removeDrgRouteRules(
    removeDrgRouteRulesRequest: requests.RemoveDrgRouteRulesRequest
  ): Promise<responses.RemoveDrgRouteRulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#removeDrgRouteRules.");
    const operationName = "removeDrgRouteRules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteRule/RemoveDrgRouteRules";
    const pathParams = {
      "{drgRouteTableId}": removeDrgRouteRulesRequest.drgRouteTableId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeDrgRouteRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteTables/{drgRouteTableId}/actions/removeDrgRouteRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeDrgRouteRulesRequest.removeDrgRouteRulesDetails,
        "RemoveDrgRouteRulesDetails",
        model.RemoveDrgRouteRulesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveDrgRouteRulesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the export route distribution from the DRG attachment so no routes are advertised to it.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveExportDrgRouteDistributionRequest
   * @return RemoveExportDrgRouteDistributionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemoveExportDrgRouteDistribution.ts.html |here} to see how to use RemoveExportDrgRouteDistribution API.
   */
  public async removeExportDrgRouteDistribution(
    removeExportDrgRouteDistributionRequest: requests.RemoveExportDrgRouteDistributionRequest
  ): Promise<responses.RemoveExportDrgRouteDistributionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#removeExportDrgRouteDistribution.");
    const operationName = "removeExportDrgRouteDistribution";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgAttachment/RemoveExportDrgRouteDistribution";
    const pathParams = {
      "{drgAttachmentId}": removeExportDrgRouteDistributionRequest.drgAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeExportDrgRouteDistributionRequest.opcRequestId,
      "if-match": removeExportDrgRouteDistributionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeExportDrgRouteDistributionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgAttachments/{drgAttachmentId}/actions/removeExportDrgRouteDistribution",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveExportDrgRouteDistributionResponse>{},
        body: await response.json(),
        bodyKey: "drgAttachment",
        bodyModel: model.DrgAttachment,
        type: "model.DrgAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the import route distribution from the DRG route table so no routes are imported
   * into it.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveImportDrgRouteDistributionRequest
   * @return RemoveImportDrgRouteDistributionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemoveImportDrgRouteDistribution.ts.html |here} to see how to use RemoveImportDrgRouteDistribution API.
   */
  public async removeImportDrgRouteDistribution(
    removeImportDrgRouteDistributionRequest: requests.RemoveImportDrgRouteDistributionRequest
  ): Promise<responses.RemoveImportDrgRouteDistributionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#removeImportDrgRouteDistribution.");
    const operationName = "removeImportDrgRouteDistribution";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteTable/RemoveImportDrgRouteDistribution";
    const pathParams = {
      "{drgRouteTableId}": removeImportDrgRouteDistributionRequest.drgRouteTableId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeImportDrgRouteDistributionRequest.opcRequestId,
      "if-match": removeImportDrgRouteDistributionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeImportDrgRouteDistributionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteTables/{drgRouteTableId}/actions/removeImportDrgRouteDistribution",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveImportDrgRouteDistributionResponse>{},
        body: await response.json(),
        bodyKey: "drgRouteTable",
        bodyModel: model.DrgRouteTable,
        type: "model.DrgRouteTable",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove an IPv6 prefix from a subnet. At least one IPv6 CIDR should remain.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveIpv6SubnetCidrRequest
   * @return RemoveIpv6SubnetCidrResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemoveIpv6SubnetCidr.ts.html |here} to see how to use RemoveIpv6SubnetCidr API.
   */
  public async removeIpv6SubnetCidr(
    removeIpv6SubnetCidrRequest: requests.RemoveIpv6SubnetCidrRequest
  ): Promise<responses.RemoveIpv6SubnetCidrResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#removeIpv6SubnetCidr.");
    const operationName = "removeIpv6SubnetCidr";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Subnet/RemoveIpv6SubnetCidr";
    const pathParams = {
      "{subnetId}": removeIpv6SubnetCidrRequest.subnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": removeIpv6SubnetCidrRequest.opcRetryToken,
      "if-match": removeIpv6SubnetCidrRequest.ifMatch,
      "opc-request-id": removeIpv6SubnetCidrRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeIpv6SubnetCidrRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets/{subnetId}/actions/removeIpv6Cidr",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeIpv6SubnetCidrRequest.removeSubnetIpv6CidrDetails,
        "RemoveSubnetIpv6CidrDetails",
        model.RemoveSubnetIpv6CidrDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveIpv6SubnetCidrResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removing an existing IPv6 prefix from a VCN.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveIpv6VcnCidrRequest
   * @return RemoveIpv6VcnCidrResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemoveIpv6VcnCidr.ts.html |here} to see how to use RemoveIpv6VcnCidr API.
   */
  public async removeIpv6VcnCidr(
    removeIpv6VcnCidrRequest: requests.RemoveIpv6VcnCidrRequest
  ): Promise<responses.RemoveIpv6VcnCidrResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#removeIpv6VcnCidr.");
    const operationName = "removeIpv6VcnCidr";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vcn/RemoveIpv6VcnCidr";
    const pathParams = {
      "{vcnId}": removeIpv6VcnCidrRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeIpv6VcnCidrRequest.opcRequestId,
      "opc-retry-token": removeIpv6VcnCidrRequest.opcRetryToken,
      "if-match": removeIpv6VcnCidrRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeIpv6VcnCidrRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}/actions/removeIpv6Cidr",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeIpv6VcnCidrRequest.removeVcnIpv6CidrDetails,
        "RemoveVcnIpv6CidrDetails",
        model.RemoveVcnIpv6CidrDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveIpv6VcnCidrResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes one or more security rules from the specified network security group.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveNetworkSecurityGroupSecurityRulesRequest
   * @return RemoveNetworkSecurityGroupSecurityRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemoveNetworkSecurityGroupSecurityRules.ts.html |here} to see how to use RemoveNetworkSecurityGroupSecurityRules API.
   */
  public async removeNetworkSecurityGroupSecurityRules(
    removeNetworkSecurityGroupSecurityRulesRequest: requests.RemoveNetworkSecurityGroupSecurityRulesRequest
  ): Promise<responses.RemoveNetworkSecurityGroupSecurityRulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#removeNetworkSecurityGroupSecurityRules."
      );
    const operationName = "removeNetworkSecurityGroupSecurityRules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/SecurityRule/RemoveNetworkSecurityGroupSecurityRules";
    const pathParams = {
      "{networkSecurityGroupId}":
        removeNetworkSecurityGroupSecurityRulesRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeNetworkSecurityGroupSecurityRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}/actions/removeSecurityRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeNetworkSecurityGroupSecurityRulesRequest.removeNetworkSecurityGroupSecurityRulesDetails,
        "RemoveNetworkSecurityGroupSecurityRulesDetails",
        model.RemoveNetworkSecurityGroupSecurityRulesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveNetworkSecurityGroupSecurityRulesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a CIDR block from the referenced public IP pool.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemovePublicIpPoolCapacityRequest
   * @return RemovePublicIpPoolCapacityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemovePublicIpPoolCapacity.ts.html |here} to see how to use RemovePublicIpPoolCapacity API.
   */
  public async removePublicIpPoolCapacity(
    removePublicIpPoolCapacityRequest: requests.RemovePublicIpPoolCapacityRequest
  ): Promise<responses.RemovePublicIpPoolCapacityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#removePublicIpPoolCapacity.");
    const operationName = "removePublicIpPoolCapacity";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIpPool/RemovePublicIpPoolCapacity";
    const pathParams = {
      "{publicIpPoolId}": removePublicIpPoolCapacityRequest.publicIpPoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removePublicIpPoolCapacityRequest.opcRequestId,
      "opc-retry-token": removePublicIpPoolCapacityRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removePublicIpPoolCapacityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools/{publicIpPoolId}/actions/removeCapacity",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removePublicIpPoolCapacityRequest.removePublicIpPoolCapacityDetails,
        "RemovePublicIpPoolCapacityDetails",
        model.RemovePublicIpPoolCapacityDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemovePublicIpPoolCapacityResponse>{},
        body: await response.json(),
        bodyKey: "publicIpPool",
        bodyModel: model.PublicIpPool,
        type: "model.PublicIpPool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a specified CIDR block from a VCN.
   * <p>
   **Notes:**
   * - You cannot remove a CIDR block if an IP address in its range is in use.
   * - Removing a CIDR block places your VCN in an updating state until the changes are complete. You cannot create or update the VCN's subnets, VLANs, LPGs, or route tables during this operation. The time to completion can take a few minutes. You can use the `GetWorkRequest` operation to check the status of the update.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveVcnCidrRequest
   * @return RemoveVcnCidrResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemoveVcnCidr.ts.html |here} to see how to use RemoveVcnCidr API.
   */
  public async removeVcnCidr(
    removeVcnCidrRequest: requests.RemoveVcnCidrRequest
  ): Promise<responses.RemoveVcnCidrResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#removeVcnCidr.");
    const operationName = "removeVcnCidr";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vcn/RemoveVcnCidr";
    const pathParams = {
      "{vcnId}": removeVcnCidrRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeVcnCidrRequest.opcRequestId,
      "opc-retry-token": removeVcnCidrRequest.opcRetryToken,
      "if-match": removeVcnCidrRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeVcnCidrRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}/actions/removeCidr",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeVcnCidrRequest.removeVcnCidrDetails,
        "RemoveVcnCidrDetails",
        model.RemoveVcnCidrDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveVcnCidrResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the tags or display name associated to the specified BYOIP CIDR block.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateByoipRangeRequest
   * @return UpdateByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateByoipRange.ts.html |here} to see how to use UpdateByoipRange API.
   */
  public async updateByoipRange(
    updateByoipRangeRequest: requests.UpdateByoipRangeRequest
  ): Promise<responses.UpdateByoipRangeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateByoipRange.");
    const operationName = "updateByoipRange";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ByoipRange/UpdateByoipRange";
    const pathParams = {
      "{byoipRangeId}": updateByoipRangeRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateByoipRangeRequest.opcRequestId,
      "if-match": updateByoipRangeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateByoipRangeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateByoipRangeRequest.updateByoipRangeDetails,
        "UpdateByoipRangeDetails",
        model.UpdateByoipRangeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateByoipRangeResponse>{},
        body: await response.json(),
        bodyKey: "byoipRange",
        bodyModel: model.ByoipRange,
        type: "model.ByoipRange",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified VTAP capture filter's display name or tags.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateCaptureFilterRequest
   * @return UpdateCaptureFilterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateCaptureFilter.ts.html |here} to see how to use UpdateCaptureFilter API.
   */
  public async updateCaptureFilter(
    updateCaptureFilterRequest: requests.UpdateCaptureFilterRequest
  ): Promise<responses.UpdateCaptureFilterResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateCaptureFilter.");
    const operationName = "updateCaptureFilter";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CaptureFilter/UpdateCaptureFilter";
    const pathParams = {
      "{captureFilterId}": updateCaptureFilterRequest.captureFilterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateCaptureFilterRequest.ifMatch,
      "opc-request-id": updateCaptureFilterRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateCaptureFilterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/captureFilters/{captureFilterId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCaptureFilterRequest.updateCaptureFilterDetails,
        "UpdateCaptureFilterDetails",
        model.UpdateCaptureFilterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCaptureFilterResponse>{},
        body: await response.json(),
        bodyKey: "captureFilter",
        bodyModel: model.CaptureFilter,
        type: "model.CaptureFilter",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified CPE's display name or tags.
   * Avoid entering confidential information.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateCpeRequest
   * @return UpdateCpeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateCpe.ts.html |here} to see how to use UpdateCpe API.
   */
  public async updateCpe(
    updateCpeRequest: requests.UpdateCpeRequest
  ): Promise<responses.UpdateCpeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateCpe.");
    const operationName = "updateCpe";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Cpe/UpdateCpe";
    const pathParams = {
      "{cpeId}": updateCpeRequest.cpeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateCpeRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateCpeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes/{cpeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCpeRequest.updateCpeDetails,
        "UpdateCpeDetails",
        model.UpdateCpeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCpeResponse>{},
        body: await response.json(),
        bodyKey: "cpe",
        bodyModel: model.Cpe,
        type: "model.Cpe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified cross-connect.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateCrossConnectRequest
   * @return UpdateCrossConnectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateCrossConnect.ts.html |here} to see how to use UpdateCrossConnect API.
   */
  public async updateCrossConnect(
    updateCrossConnectRequest: requests.UpdateCrossConnectRequest
  ): Promise<responses.UpdateCrossConnectResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateCrossConnect.");
    const operationName = "updateCrossConnect";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnect/UpdateCrossConnect";
    const pathParams = {
      "{crossConnectId}": updateCrossConnectRequest.crossConnectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateCrossConnectRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateCrossConnectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects/{crossConnectId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCrossConnectRequest.updateCrossConnectDetails,
        "UpdateCrossConnectDetails",
        model.UpdateCrossConnectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCrossConnectResponse>{},
        body: await response.json(),
        bodyKey: "crossConnect",
        bodyModel: model.CrossConnect,
        type: "model.CrossConnect",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified cross-connect group's display name.
   * Avoid entering confidential information.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateCrossConnectGroupRequest
   * @return UpdateCrossConnectGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateCrossConnectGroup.ts.html |here} to see how to use UpdateCrossConnectGroup API.
   */
  public async updateCrossConnectGroup(
    updateCrossConnectGroupRequest: requests.UpdateCrossConnectGroupRequest
  ): Promise<responses.UpdateCrossConnectGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateCrossConnectGroup.");
    const operationName = "updateCrossConnectGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectGroup/UpdateCrossConnectGroup";
    const pathParams = {
      "{crossConnectGroupId}": updateCrossConnectGroupRequest.crossConnectGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateCrossConnectGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateCrossConnectGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectGroups/{crossConnectGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCrossConnectGroupRequest.updateCrossConnectGroupDetails,
        "UpdateCrossConnectGroupDetails",
        model.UpdateCrossConnectGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCrossConnectGroupResponse>{},
        body: await response.json(),
        bodyKey: "crossConnectGroup",
        bodyModel: model.CrossConnectGroup,
        type: "model.CrossConnectGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified set of DHCP options. You can update the display name or the options
* themselves. Avoid entering confidential information.
* <p>
Note that the `options` object you provide replaces the entire existing set of options.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDhcpOptionsRequest
     * @return UpdateDhcpOptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateDhcpOptions.ts.html |here} to see how to use UpdateDhcpOptions API.
     */
  public async updateDhcpOptions(
    updateDhcpOptionsRequest: requests.UpdateDhcpOptionsRequest
  ): Promise<responses.UpdateDhcpOptionsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateDhcpOptions.");
    const operationName = "updateDhcpOptions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DhcpOptions/UpdateDhcpOptions";
    const pathParams = {
      "{dhcpId}": updateDhcpOptionsRequest.dhcpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDhcpOptionsRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDhcpOptionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dhcps/{dhcpId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDhcpOptionsRequest.updateDhcpDetails,
        "UpdateDhcpDetails",
        model.UpdateDhcpDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDhcpOptionsResponse>{},
        body: await response.json(),
        bodyKey: "dhcpOptions",
        bodyModel: model.DhcpOptions,
        type: "model.DhcpOptions",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified DRG's display name or tags. Avoid entering confidential information.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDrgRequest
   * @return UpdateDrgResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateDrg.ts.html |here} to see how to use UpdateDrg API.
   */
  public async updateDrg(
    updateDrgRequest: requests.UpdateDrgRequest
  ): Promise<responses.UpdateDrgResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateDrg.");
    const operationName = "updateDrg";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Drg/UpdateDrg";
    const pathParams = {
      "{drgId}": updateDrgRequest.drgId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDrgRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDrgRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrgRequest.updateDrgDetails,
        "UpdateDrgDetails",
        model.UpdateDrgDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrgResponse>{},
        body: await response.json(),
        bodyKey: "drg",
        bodyModel: model.Drg,
        type: "model.Drg",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the display name and routing information for the specified `DrgAttachment`.
   * Avoid entering confidential information.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDrgAttachmentRequest
   * @return UpdateDrgAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateDrgAttachment.ts.html |here} to see how to use UpdateDrgAttachment API.
   */
  public async updateDrgAttachment(
    updateDrgAttachmentRequest: requests.UpdateDrgAttachmentRequest
  ): Promise<responses.UpdateDrgAttachmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateDrgAttachment.");
    const operationName = "updateDrgAttachment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgAttachment/UpdateDrgAttachment";
    const pathParams = {
      "{drgAttachmentId}": updateDrgAttachmentRequest.drgAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDrgAttachmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDrgAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgAttachments/{drgAttachmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrgAttachmentRequest.updateDrgAttachmentDetails,
        "UpdateDrgAttachmentDetails",
        model.UpdateDrgAttachmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrgAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "drgAttachment",
        bodyModel: model.DrgAttachment,
        type: "model.DrgAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified route distribution
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDrgRouteDistributionRequest
   * @return UpdateDrgRouteDistributionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateDrgRouteDistribution.ts.html |here} to see how to use UpdateDrgRouteDistribution API.
   */
  public async updateDrgRouteDistribution(
    updateDrgRouteDistributionRequest: requests.UpdateDrgRouteDistributionRequest
  ): Promise<responses.UpdateDrgRouteDistributionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateDrgRouteDistribution.");
    const operationName = "updateDrgRouteDistribution";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteDistribution/UpdateDrgRouteDistribution";
    const pathParams = {
      "{drgRouteDistributionId}": updateDrgRouteDistributionRequest.drgRouteDistributionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDrgRouteDistributionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDrgRouteDistributionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteDistributions/{drgRouteDistributionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrgRouteDistributionRequest.updateDrgRouteDistributionDetails,
        "UpdateDrgRouteDistributionDetails",
        model.UpdateDrgRouteDistributionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrgRouteDistributionResponse>{},
        body: await response.json(),
        bodyKey: "drgRouteDistribution",
        bodyModel: model.DrgRouteDistribution,
        type: "model.DrgRouteDistribution",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more route distribution statements in the specified route distribution.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDrgRouteDistributionStatementsRequest
   * @return UpdateDrgRouteDistributionStatementsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateDrgRouteDistributionStatements.ts.html |here} to see how to use UpdateDrgRouteDistributionStatements API.
   */
  public async updateDrgRouteDistributionStatements(
    updateDrgRouteDistributionStatementsRequest: requests.UpdateDrgRouteDistributionStatementsRequest
  ): Promise<responses.UpdateDrgRouteDistributionStatementsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#updateDrgRouteDistributionStatements."
      );
    const operationName = "updateDrgRouteDistributionStatements";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteDistributionStatement/UpdateDrgRouteDistributionStatements";
    const pathParams = {
      "{drgRouteDistributionId}": updateDrgRouteDistributionStatementsRequest.drgRouteDistributionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDrgRouteDistributionStatementsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/drgRouteDistributions/{drgRouteDistributionId}/actions/updateDrgRouteDistributionStatements",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrgRouteDistributionStatementsRequest.updateDrgRouteDistributionStatementsDetails,
        "UpdateDrgRouteDistributionStatementsDetails",
        model.UpdateDrgRouteDistributionStatementsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrgRouteDistributionStatementsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DrgRouteDistributionStatement,
        type: "Array<model.DrgRouteDistributionStatement>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more route rules in the specified DRG route table.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDrgRouteRulesRequest
   * @return UpdateDrgRouteRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateDrgRouteRules.ts.html |here} to see how to use UpdateDrgRouteRules API.
   */
  public async updateDrgRouteRules(
    updateDrgRouteRulesRequest: requests.UpdateDrgRouteRulesRequest
  ): Promise<responses.UpdateDrgRouteRulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateDrgRouteRules.");
    const operationName = "updateDrgRouteRules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteRule/UpdateDrgRouteRules";
    const pathParams = {
      "{drgRouteTableId}": updateDrgRouteRulesRequest.drgRouteTableId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDrgRouteRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteTables/{drgRouteTableId}/actions/updateDrgRouteRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrgRouteRulesRequest.updateDrgRouteRulesDetails,
        "UpdateDrgRouteRulesDetails",
        model.UpdateDrgRouteRulesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrgRouteRulesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DrgRouteRule,
        type: "Array<model.DrgRouteRule>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified DRG route table.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDrgRouteTableRequest
   * @return UpdateDrgRouteTableResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateDrgRouteTable.ts.html |here} to see how to use UpdateDrgRouteTable API.
   */
  public async updateDrgRouteTable(
    updateDrgRouteTableRequest: requests.UpdateDrgRouteTableRequest
  ): Promise<responses.UpdateDrgRouteTableResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateDrgRouteTable.");
    const operationName = "updateDrgRouteTable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/DrgRouteTable/UpdateDrgRouteTable";
    const pathParams = {
      "{drgRouteTableId}": updateDrgRouteTableRequest.drgRouteTableId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDrgRouteTableRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDrgRouteTableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgRouteTables/{drgRouteTableId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrgRouteTableRequest.updateDrgRouteTableDetails,
        "UpdateDrgRouteTableDetails",
        model.UpdateDrgRouteTableDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrgRouteTableResponse>{},
        body: await response.json(),
        bodyKey: "drgRouteTable",
        bodyModel: model.DrgRouteTable,
        type: "model.DrgRouteTable",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified IPSec connection.
* <p>
To update an individual IPSec tunnel's attributes, use
* {@link #updateIPSecConnectionTunnel(UpdateIPSecConnectionTunnelRequest) updateIPSecConnectionTunnel}.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateIPSecConnectionRequest
     * @return UpdateIPSecConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateIPSecConnection.ts.html |here} to see how to use UpdateIPSecConnection API.
     */
  public async updateIPSecConnection(
    updateIPSecConnectionRequest: requests.UpdateIPSecConnectionRequest
  ): Promise<responses.UpdateIPSecConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateIPSecConnection.");
    const operationName = "updateIPSecConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnection/UpdateIPSecConnection";
    const pathParams = {
      "{ipscId}": updateIPSecConnectionRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateIPSecConnectionRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateIPSecConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateIPSecConnectionRequest.updateIPSecConnectionDetails,
        "UpdateIPSecConnectionDetails",
        model.UpdateIPSecConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateIPSecConnectionResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnection",
        bodyModel: model.IPSecConnection,
        type: "model.IPSecConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified tunnel. This operation lets you change tunnel attributes such as the
   * routing type (BGP dynamic routing or static routing). Here are some important notes:
   * <p>
   * If you change the tunnel's routing type or BGP session configuration, the tunnel will go
   *     down while it's reprovisioned.
   * <p>
   * If you want to switch the tunnel's `routing` from `STATIC` to `BGP`, make sure the tunnel's
   *     BGP session configuration attributes have been set ({@link #bgpSessionInfo(BgpSessionInfoRequest) bgpSessionInfo}).
   * <p>
   * If you want to switch the tunnel's `routing` from `BGP` to `STATIC`, make sure the
   *     {@link IPSecConnection} already has at least one valid CIDR
   *     static route.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateIPSecConnectionTunnelRequest
   * @return UpdateIPSecConnectionTunnelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateIPSecConnectionTunnel.ts.html |here} to see how to use UpdateIPSecConnectionTunnel API.
   */
  public async updateIPSecConnectionTunnel(
    updateIPSecConnectionTunnelRequest: requests.UpdateIPSecConnectionTunnelRequest
  ): Promise<responses.UpdateIPSecConnectionTunnelResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateIPSecConnectionTunnel.");
    const operationName = "updateIPSecConnectionTunnel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnel/UpdateIPSecConnectionTunnel";
    const pathParams = {
      "{ipscId}": updateIPSecConnectionTunnelRequest.ipscId,
      "{tunnelId}": updateIPSecConnectionTunnelRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateIPSecConnectionTunnelRequest.ifMatch,
      "opc-request-id": updateIPSecConnectionTunnelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateIPSecConnectionTunnelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateIPSecConnectionTunnelRequest.updateIPSecConnectionTunnelDetails,
        "UpdateIPSecConnectionTunnelDetails",
        model.UpdateIPSecConnectionTunnelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateIPSecConnectionTunnelResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionTunnel",
        bodyModel: model.IPSecConnectionTunnel,
        type: "model.IPSecConnectionTunnel",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the shared secret (pre-shared key) for the specified tunnel.
   * <p>
   **Important:** If you change the shared secret, the tunnel will go down while it's reprovisioned.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateIPSecConnectionTunnelSharedSecretRequest
   * @return UpdateIPSecConnectionTunnelSharedSecretResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateIPSecConnectionTunnelSharedSecret.ts.html |here} to see how to use UpdateIPSecConnectionTunnelSharedSecret API.
   */
  public async updateIPSecConnectionTunnelSharedSecret(
    updateIPSecConnectionTunnelSharedSecretRequest: requests.UpdateIPSecConnectionTunnelSharedSecretRequest
  ): Promise<responses.UpdateIPSecConnectionTunnelSharedSecretResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#updateIPSecConnectionTunnelSharedSecret."
      );
    const operationName = "updateIPSecConnectionTunnelSharedSecret";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret";
    const pathParams = {
      "{ipscId}": updateIPSecConnectionTunnelSharedSecretRequest.ipscId,
      "{tunnelId}": updateIPSecConnectionTunnelSharedSecretRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateIPSecConnectionTunnelSharedSecretRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateIPSecConnectionTunnelSharedSecretRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/sharedSecret",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateIPSecConnectionTunnelSharedSecretRequest.updateIPSecConnectionTunnelSharedSecretDetails,
        "UpdateIPSecConnectionTunnelSharedSecretDetails",
        model.UpdateIPSecConnectionTunnelSharedSecretDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateIPSecConnectionTunnelSharedSecretResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionTunnelSharedSecret",
        bodyModel: model.IPSecConnectionTunnelSharedSecret,
        type: "model.IPSecConnectionTunnelSharedSecret",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified internet gateway. You can disable/enable it, or change its display name
* or tags. Avoid entering confidential information.
* <p>
If the gateway is disabled, that means no traffic will flow to/from the internet even if there's
* a route rule that enables that traffic.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateInternetGatewayRequest
     * @return UpdateInternetGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateInternetGateway.ts.html |here} to see how to use UpdateInternetGateway API.
     */
  public async updateInternetGateway(
    updateInternetGatewayRequest: requests.UpdateInternetGatewayRequest
  ): Promise<responses.UpdateInternetGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateInternetGateway.");
    const operationName = "updateInternetGateway";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/InternetGateway/UpdateInternetGateway";
    const pathParams = {
      "{igId}": updateInternetGatewayRequest.igId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateInternetGatewayRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateInternetGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internetGateways/{igId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateInternetGatewayRequest.updateInternetGatewayDetails,
        "UpdateInternetGatewayDetails",
        model.UpdateInternetGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateInternetGatewayResponse>{},
        body: await response.json(),
        bodyKey: "internetGateway",
        bodyModel: model.InternetGateway,
        type: "model.InternetGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified IPv6. You must specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   * Use this operation if you want to:
   * <p>
   * Move an IPv6 to a different VNIC in the same subnet.
   *   * Enable/disable internet access for an IPv6.
   *   * Change the display name for an IPv6.
   *   * Update resource tags for an IPv6.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateIpv6Request
   * @return UpdateIpv6Response
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateIpv6.ts.html |here} to see how to use UpdateIpv6 API.
   */
  public async updateIpv6(
    updateIpv6Request: requests.UpdateIpv6Request
  ): Promise<responses.UpdateIpv6Response> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateIpv6.");
    const operationName = "updateIpv6";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Ipv6/UpdateIpv6";
    const pathParams = {
      "{ipv6Id}": updateIpv6Request.ipv6Id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateIpv6Request.ifMatch,
      "opc-request-id": updateIpv6Request.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateIpv6Request.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipv6/{ipv6Id}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateIpv6Request.updateIpv6Details,
        "UpdateIpv6Details",
        model.UpdateIpv6Details.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateIpv6Response>{},
        body: await response.json(),
        bodyKey: "ipv6",
        bodyModel: model.Ipv6,
        type: "model.Ipv6",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified local peering gateway (LPG).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateLocalPeeringGatewayRequest
   * @return UpdateLocalPeeringGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateLocalPeeringGateway.ts.html |here} to see how to use UpdateLocalPeeringGateway API.
   */
  public async updateLocalPeeringGateway(
    updateLocalPeeringGatewayRequest: requests.UpdateLocalPeeringGatewayRequest
  ): Promise<responses.UpdateLocalPeeringGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateLocalPeeringGateway.");
    const operationName = "updateLocalPeeringGateway";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/LocalPeeringGateway/UpdateLocalPeeringGateway";
    const pathParams = {
      "{localPeeringGatewayId}": updateLocalPeeringGatewayRequest.localPeeringGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateLocalPeeringGatewayRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLocalPeeringGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways/{localPeeringGatewayId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLocalPeeringGatewayRequest.updateLocalPeeringGatewayDetails,
        "UpdateLocalPeeringGatewayDetails",
        model.UpdateLocalPeeringGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLocalPeeringGatewayResponse>{},
        body: await response.json(),
        bodyKey: "localPeeringGateway",
        bodyModel: model.LocalPeeringGateway,
        type: "model.LocalPeeringGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified NAT gateway.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateNatGatewayRequest
   * @return UpdateNatGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateNatGateway.ts.html |here} to see how to use UpdateNatGateway API.
   */
  public async updateNatGateway(
    updateNatGatewayRequest: requests.UpdateNatGatewayRequest
  ): Promise<responses.UpdateNatGatewayResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateNatGateway.");
    const operationName = "updateNatGateway";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NatGateway/UpdateNatGateway";
    const pathParams = {
      "{natGatewayId}": updateNatGatewayRequest.natGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateNatGatewayRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateNatGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/natGateways/{natGatewayId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNatGatewayRequest.updateNatGatewayDetails,
        "UpdateNatGatewayDetails",
        model.UpdateNatGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNatGatewayResponse>{},
        body: await response.json(),
        bodyKey: "natGateway",
        bodyModel: model.NatGateway,
        type: "model.NatGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified network security group.
* <p>
To add or remove an existing VNIC from the group, use
* {@link #updateVnic(UpdateVnicRequest) updateVnic}.
* <p>
To add a VNIC to the group *when you create the VNIC*, specify the NSG's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) during creation.
* For example, see the `nsgIds` attribute in {@link #createVnicDetails(CreateVnicDetailsRequest) createVnicDetails}.
* <p>
To add or remove security rules from the group, use
* {@link #addNetworkSecurityGroupSecurityRules(AddNetworkSecurityGroupSecurityRulesRequest) addNetworkSecurityGroupSecurityRules}
* or
* {@link #removeNetworkSecurityGroupSecurityRules(RemoveNetworkSecurityGroupSecurityRulesRequest) removeNetworkSecurityGroupSecurityRules}.
* <p>
To edit the contents of existing security rules in the group, use
* {@link #updateNetworkSecurityGroupSecurityRules(UpdateNetworkSecurityGroupSecurityRulesRequest) updateNetworkSecurityGroupSecurityRules}.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateNetworkSecurityGroupRequest
     * @return UpdateNetworkSecurityGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateNetworkSecurityGroup.ts.html |here} to see how to use UpdateNetworkSecurityGroup API.
     */
  public async updateNetworkSecurityGroup(
    updateNetworkSecurityGroupRequest: requests.UpdateNetworkSecurityGroupRequest
  ): Promise<responses.UpdateNetworkSecurityGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateNetworkSecurityGroup.");
    const operationName = "updateNetworkSecurityGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/NetworkSecurityGroup/UpdateNetworkSecurityGroup";
    const pathParams = {
      "{networkSecurityGroupId}": updateNetworkSecurityGroupRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateNetworkSecurityGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateNetworkSecurityGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNetworkSecurityGroupRequest.updateNetworkSecurityGroupDetails,
        "UpdateNetworkSecurityGroupDetails",
        model.UpdateNetworkSecurityGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNetworkSecurityGroupResponse>{},
        body: await response.json(),
        bodyKey: "networkSecurityGroup",
        bodyModel: model.NetworkSecurityGroup,
        type: "model.NetworkSecurityGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more security rules in the specified network security group.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateNetworkSecurityGroupSecurityRulesRequest
   * @return UpdateNetworkSecurityGroupSecurityRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateNetworkSecurityGroupSecurityRules.ts.html |here} to see how to use UpdateNetworkSecurityGroupSecurityRules API.
   */
  public async updateNetworkSecurityGroupSecurityRules(
    updateNetworkSecurityGroupSecurityRulesRequest: requests.UpdateNetworkSecurityGroupSecurityRulesRequest
  ): Promise<responses.UpdateNetworkSecurityGroupSecurityRulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#updateNetworkSecurityGroupSecurityRules."
      );
    const operationName = "updateNetworkSecurityGroupSecurityRules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/SecurityRule/UpdateNetworkSecurityGroupSecurityRules";
    const pathParams = {
      "{networkSecurityGroupId}":
        updateNetworkSecurityGroupSecurityRulesRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateNetworkSecurityGroupSecurityRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}/actions/updateSecurityRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateNetworkSecurityGroupSecurityRulesRequest.updateNetworkSecurityGroupSecurityRulesDetails,
        "UpdateNetworkSecurityGroupSecurityRulesDetails",
        model.UpdateNetworkSecurityGroupSecurityRulesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNetworkSecurityGroupSecurityRulesResponse>{},
        body: await response.json(),
        bodyKey: "updatedNetworkSecurityGroupSecurityRules",
        bodyModel: model.UpdatedNetworkSecurityGroupSecurityRules,
        type: "model.UpdatedNetworkSecurityGroupSecurityRules",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified private IP. You must specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* Use this operation if you want to:
* <p>
  - Move a secondary private IP to a different VNIC in the same subnet.
*   - Change the display name for a secondary private IP.
*   - Change the hostname for a secondary private IP.
* <p>
This operation cannot be used with primary private IPs.
* To update the hostname for the primary IP on a VNIC, use
* {@link #updateVnic(UpdateVnicRequest) updateVnic}.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdatePrivateIpRequest
     * @return UpdatePrivateIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdatePrivateIp.ts.html |here} to see how to use UpdatePrivateIp API.
     */
  public async updatePrivateIp(
    updatePrivateIpRequest: requests.UpdatePrivateIpRequest
  ): Promise<responses.UpdatePrivateIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updatePrivateIp.");
    const operationName = "updatePrivateIp";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PrivateIp/UpdatePrivateIp";
    const pathParams = {
      "{privateIpId}": updatePrivateIpRequest.privateIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updatePrivateIpRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePrivateIpRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateIps/{privateIpId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePrivateIpRequest.updatePrivateIpDetails,
        "UpdatePrivateIpDetails",
        model.UpdatePrivateIpDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePrivateIpResponse>{},
        body: await response.json(),
        bodyKey: "privateIp",
        bodyModel: model.PrivateIp,
        type: "model.PrivateIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified public IP. You must specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Use this operation if you want to:
* <p>
* Assign a reserved public IP in your pool to a private IP.
* * Move a reserved public IP to a different private IP.
* * Unassign a reserved public IP from a private IP (which returns it to your pool
* of reserved public IPs).
* * Change the display name or tags for a public IP.
* <p>
Assigning, moving, and unassigning a reserved public IP are asynchronous
* operations. Poll the public IP's `lifecycleState` to determine if the operation
* succeeded.
* <p>
**Note:** When moving a reserved public IP, the target private IP
* must not already have a public IP with `lifecycleState` = ASSIGNING or ASSIGNED. If it
* does, an error is returned. Also, the initial unassignment from the original
* private IP always succeeds, but the assignment to the target private IP is asynchronous and
* could fail silently (for example, if the target private IP is deleted or has a different public IP
* assigned to it in the interim). If that occurs, the public IP remains unassigned and its
* `lifecycleState` switches to AVAILABLE (it is not reassigned to its original private IP).
* You must poll the public IP's `lifecycleState` to determine if the move succeeded.
* <p>
Regarding ephemeral public IPs:
* <p>
* If you want to assign an ephemeral public IP to a primary private IP, use
* {@link #createPublicIp(CreatePublicIpRequest) createPublicIp}.
* * You can't move an ephemeral public IP to a different private IP.
* * If you want to unassign an ephemeral public IP from its private IP, use
* {@link #deletePublicIp(DeletePublicIpRequest) deletePublicIp}, which
* unassigns and deletes the ephemeral public IP.
* <p>
**Note:** If a public IP is assigned to a secondary private
* IP (see {@link PrivateIp}), and you move that secondary
* private IP to another VNIC, the public IP moves with it.
* <p>
**Note:** There's a limit to the number of {@link PublicIp}
* a VNIC or instance can have. If you try to move a reserved public IP
* to a VNIC or instance that has already reached its public IP limit, an error is
* returned. For information about the public IP limits, see
* [Public IP Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingpublicIPs.htm).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdatePublicIpRequest
     * @return UpdatePublicIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdatePublicIp.ts.html |here} to see how to use UpdatePublicIp API.
     */
  public async updatePublicIp(
    updatePublicIpRequest: requests.UpdatePublicIpRequest
  ): Promise<responses.UpdatePublicIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updatePublicIp.");
    const operationName = "updatePublicIp";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIp/UpdatePublicIp";
    const pathParams = {
      "{publicIpId}": updatePublicIpRequest.publicIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updatePublicIpRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePublicIpRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps/{publicIpId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePublicIpRequest.updatePublicIpDetails,
        "UpdatePublicIpDetails",
        model.UpdatePublicIpDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePublicIpResponse>{},
        body: await response.json(),
        bodyKey: "publicIp",
        bodyModel: model.PublicIp,
        type: "model.PublicIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified public IP pool.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdatePublicIpPoolRequest
   * @return UpdatePublicIpPoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdatePublicIpPool.ts.html |here} to see how to use UpdatePublicIpPool API.
   */
  public async updatePublicIpPool(
    updatePublicIpPoolRequest: requests.UpdatePublicIpPoolRequest
  ): Promise<responses.UpdatePublicIpPoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updatePublicIpPool.");
    const operationName = "updatePublicIpPool";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/PublicIpPool/UpdatePublicIpPool";
    const pathParams = {
      "{publicIpPoolId}": updatePublicIpPoolRequest.publicIpPoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updatePublicIpPoolRequest.opcRequestId,
      "if-match": updatePublicIpPoolRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePublicIpPoolRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools/{publicIpPoolId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePublicIpPoolRequest.updatePublicIpPoolDetails,
        "UpdatePublicIpPoolDetails",
        model.UpdatePublicIpPoolDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePublicIpPoolResponse>{},
        body: await response.json(),
        bodyKey: "publicIpPool",
        bodyModel: model.PublicIpPool,
        type: "model.PublicIpPool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified remote peering connection (RPC).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateRemotePeeringConnectionRequest
   * @return UpdateRemotePeeringConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateRemotePeeringConnection.ts.html |here} to see how to use UpdateRemotePeeringConnection API.
   */
  public async updateRemotePeeringConnection(
    updateRemotePeeringConnectionRequest: requests.UpdateRemotePeeringConnectionRequest
  ): Promise<responses.UpdateRemotePeeringConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateRemotePeeringConnection.");
    const operationName = "updateRemotePeeringConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/RemotePeeringConnection/UpdateRemotePeeringConnection";
    const pathParams = {
      "{remotePeeringConnectionId}": updateRemotePeeringConnectionRequest.remotePeeringConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRemotePeeringConnectionRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateRemotePeeringConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections/{remotePeeringConnectionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRemotePeeringConnectionRequest.updateRemotePeeringConnectionDetails,
        "UpdateRemotePeeringConnectionDetails",
        model.UpdateRemotePeeringConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRemotePeeringConnectionResponse>{},
        body: await response.json(),
        bodyKey: "remotePeeringConnection",
        bodyModel: model.RemotePeeringConnection,
        type: "model.RemotePeeringConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified route table's display name or route rules.
* Avoid entering confidential information.
* <p>
Note that the `routeRules` object you provide replaces the entire existing set of rules.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateRouteTableRequest
     * @return UpdateRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateRouteTable.ts.html |here} to see how to use UpdateRouteTable API.
     */
  public async updateRouteTable(
    updateRouteTableRequest: requests.UpdateRouteTableRequest
  ): Promise<responses.UpdateRouteTableResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateRouteTable.");
    const operationName = "updateRouteTable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/RouteTable/UpdateRouteTable";
    const pathParams = {
      "{rtId}": updateRouteTableRequest.rtId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRouteTableRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateRouteTableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/routeTables/{rtId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRouteTableRequest.updateRouteTableDetails,
        "UpdateRouteTableDetails",
        model.UpdateRouteTableDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRouteTableResponse>{},
        body: await response.json(),
        bodyKey: "routeTable",
        bodyModel: model.RouteTable,
        type: "model.RouteTable",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified security list's display name or rules.
* Avoid entering confidential information.
* <p>
Note that the `egressSecurityRules` or `ingressSecurityRules` objects you provide replace the entire
* existing objects.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateSecurityListRequest
     * @return UpdateSecurityListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateSecurityList.ts.html |here} to see how to use UpdateSecurityList API.
     */
  public async updateSecurityList(
    updateSecurityListRequest: requests.UpdateSecurityListRequest
  ): Promise<responses.UpdateSecurityListResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateSecurityList.");
    const operationName = "updateSecurityList";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/SecurityList/UpdateSecurityList";
    const pathParams = {
      "{securityListId}": updateSecurityListRequest.securityListId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSecurityListRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSecurityListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityLists/{securityListId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSecurityListRequest.updateSecurityListDetails,
        "UpdateSecurityListDetails",
        model.UpdateSecurityListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSecurityListResponse>{},
        body: await response.json(),
        bodyKey: "securityList",
        bodyModel: model.SecurityList,
        type: "model.SecurityList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified service gateway. The information you provide overwrites the existing
   * attributes of the gateway.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateServiceGatewayRequest
   * @return UpdateServiceGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateServiceGateway.ts.html |here} to see how to use UpdateServiceGateway API.
   */
  public async updateServiceGateway(
    updateServiceGatewayRequest: requests.UpdateServiceGatewayRequest
  ): Promise<responses.UpdateServiceGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateServiceGateway.");
    const operationName = "updateServiceGateway";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ServiceGateway/UpdateServiceGateway";
    const pathParams = {
      "{serviceGatewayId}": updateServiceGatewayRequest.serviceGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateServiceGatewayRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateServiceGatewayRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways/{serviceGatewayId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateServiceGatewayRequest.updateServiceGatewayDetails,
        "UpdateServiceGatewayDetails",
        model.UpdateServiceGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateServiceGatewayResponse>{},
        body: await response.json(),
        bodyKey: "serviceGateway",
        bodyModel: model.ServiceGateway,
        type: "model.ServiceGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified subnet.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateSubnetRequest
   * @return UpdateSubnetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateSubnet.ts.html |here} to see how to use UpdateSubnet API.
   */
  public async updateSubnet(
    updateSubnetRequest: requests.UpdateSubnetRequest
  ): Promise<responses.UpdateSubnetResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateSubnet.");
    const operationName = "updateSubnet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Subnet/UpdateSubnet";
    const pathParams = {
      "{subnetId}": updateSubnetRequest.subnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSubnetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSubnetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets/{subnetId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSubnetRequest.updateSubnetDetails,
        "UpdateSubnetDetails",
        model.UpdateSubnetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSubnetResponse>{},
        body: await response.json(),
        bodyKey: "subnet",
        bodyModel: model.Subnet,
        type: "model.Subnet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates or updates the set of CPE configuration answers for the specified tunnel.
   * The answers correlate to the questions that are specific to the CPE device type (see the
   * `parameters` attribute of {@link CpeDeviceShapeDetail}).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateTunnelCpeDeviceConfigRequest
   * @return UpdateTunnelCpeDeviceConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateTunnelCpeDeviceConfig.ts.html |here} to see how to use UpdateTunnelCpeDeviceConfig API.
   */
  public async updateTunnelCpeDeviceConfig(
    updateTunnelCpeDeviceConfigRequest: requests.UpdateTunnelCpeDeviceConfigRequest
  ): Promise<responses.UpdateTunnelCpeDeviceConfigResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateTunnelCpeDeviceConfig.");
    const operationName = "updateTunnelCpeDeviceConfig";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/TunnelCpeDeviceConfig/UpdateTunnelCpeDeviceConfig";
    const pathParams = {
      "{ipscId}": updateTunnelCpeDeviceConfigRequest.ipscId,
      "{tunnelId}": updateTunnelCpeDeviceConfigRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTunnelCpeDeviceConfigRequest.ifMatch,
      "opc-retry-token": updateTunnelCpeDeviceConfigRequest.opcRetryToken,
      "opc-request-id": updateTunnelCpeDeviceConfigRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTunnelCpeDeviceConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/tunnelDeviceConfig",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTunnelCpeDeviceConfigRequest.updateTunnelCpeDeviceConfigDetails,
        "UpdateTunnelCpeDeviceConfigDetails",
        model.UpdateTunnelCpeDeviceConfigDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTunnelCpeDeviceConfigResponse>{},
        body: await response.json(),
        bodyKey: "tunnelCpeDeviceConfig",
        bodyModel: model.TunnelCpeDeviceConfig,
        type: "model.TunnelCpeDeviceConfig",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified VCN.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateVcnRequest
   * @return UpdateVcnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVcn.ts.html |here} to see how to use UpdateVcn API.
   */
  public async updateVcn(
    updateVcnRequest: requests.UpdateVcnRequest
  ): Promise<responses.UpdateVcnResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateVcn.");
    const operationName = "updateVcn";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vcn/UpdateVcn";
    const pathParams = {
      "{vcnId}": updateVcnRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVcnRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVcnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVcnRequest.updateVcnDetails,
        "UpdateVcnDetails",
        model.UpdateVcnDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVcnResponse>{},
        body: await response.json(),
        bodyKey: "vcn",
        bodyModel: model.Vcn,
        type: "model.Vcn",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified virtual circuit. This can be called by
* either the customer who owns the virtual circuit, or the
* provider (when provisioning or de-provisioning the virtual
* circuit from their end). The documentation for
* {@link #updateVirtualCircuitDetails(UpdateVirtualCircuitDetailsRequest) updateVirtualCircuitDetails}
* indicates who can update each property of the virtual circuit.
* <p>
**Important:** If the virtual circuit is working and in the
* PROVISIONED state, updating any of the network-related properties
* (such as the DRG being used, the BGP ASN, and so on) will cause the virtual
* circuit's state to switch to PROVISIONING and the related BGP
* session to go down. After Oracle re-provisions the virtual circuit,
* its state will return to PROVISIONED. Make sure you confirm that
* the associated BGP session is back up. For more information
* about the various states and how to test connectivity, see
* [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
* <p>
To change the list of public IP prefixes for a public virtual circuit,
* use {@link #bulkAddVirtualCircuitPublicPrefixes(BulkAddVirtualCircuitPublicPrefixesRequest) bulkAddVirtualCircuitPublicPrefixes}
* and
* {@link #bulkDeleteVirtualCircuitPublicPrefixes(BulkDeleteVirtualCircuitPublicPrefixesRequest) bulkDeleteVirtualCircuitPublicPrefixes}.
* Updating the list of prefixes does NOT cause the BGP session to go down. However,
* Oracle must verify the customer's ownership of each added prefix before
* traffic for that prefix will flow across the virtual circuit.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateVirtualCircuitRequest
     * @return UpdateVirtualCircuitResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVirtualCircuit.ts.html |here} to see how to use UpdateVirtualCircuit API.
     */
  public async updateVirtualCircuit(
    updateVirtualCircuitRequest: requests.UpdateVirtualCircuitRequest
  ): Promise<responses.UpdateVirtualCircuitResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateVirtualCircuit.");
    const operationName = "updateVirtualCircuit";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/VirtualCircuit/UpdateVirtualCircuit";
    const pathParams = {
      "{virtualCircuitId}": updateVirtualCircuitRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVirtualCircuitRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVirtualCircuitRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVirtualCircuitRequest.updateVirtualCircuitDetails,
        "UpdateVirtualCircuitDetails",
        model.UpdateVirtualCircuitDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVirtualCircuitResponse>{},
        body: await response.json(),
        bodyKey: "virtualCircuit",
        bodyModel: model.VirtualCircuit,
        type: "model.VirtualCircuit",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified VLAN. Note that this operation might require changes to all
   * the VNICs in the VLAN, which can take a while. The VLAN will be in the UPDATING state until the changes are complete.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateVlanRequest
   * @return UpdateVlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVlan.ts.html |here} to see how to use UpdateVlan API.
   */
  public async updateVlan(
    updateVlanRequest: requests.UpdateVlanRequest
  ): Promise<responses.UpdateVlanResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateVlan.");
    const operationName = "updateVlan";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vlan/UpdateVlan";
    const pathParams = {
      "{vlanId}": updateVlanRequest.vlanId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVlanRequest.ifMatch,
      "opc-request-id": updateVlanRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVlanRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vlans/{vlanId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVlanRequest.updateVlanDetails,
        "UpdateVlanDetails",
        model.UpdateVlanDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVlanResponse>{},
        body: await response.json(),
        bodyKey: "vlan",
        bodyModel: model.Vlan,
        type: "model.Vlan",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified VNIC.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateVnicRequest
   * @return UpdateVnicResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVnic.ts.html |here} to see how to use UpdateVnic API.
   */
  public async updateVnic(
    updateVnicRequest: requests.UpdateVnicRequest
  ): Promise<responses.UpdateVnicResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateVnic.");
    const operationName = "updateVnic";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Vnic/UpdateVnic";
    const pathParams = {
      "{vnicId}": updateVnicRequest.vnicId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVnicRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVnicRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vnics/{vnicId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVnicRequest.updateVnicDetails,
        "UpdateVnicDetails",
        model.UpdateVnicDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVnicResponse>{},
        body: await response.json(),
        bodyKey: "vnic",
        bodyModel: model.Vnic,
        type: "model.Vnic",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified VTAP's display name or tags.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateVtapRequest
   * @return UpdateVtapResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVtap.ts.html |here} to see how to use UpdateVtap API.
   */
  public async updateVtap(
    updateVtapRequest: requests.UpdateVtapRequest
  ): Promise<responses.UpdateVtapResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateVtap.");
    const operationName = "updateVtap";
    const apiReferenceLink = "";
    const pathParams = {
      "{vtapId}": updateVtapRequest.vtapId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVtapRequest.ifMatch,
      "opc-request-id": updateVtapRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVtapRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vtaps/{vtapId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVtapRequest.updateVtapDetails,
        "UpdateVtapDetails",
        model.UpdateVtapDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVtapResponse>{},
        body: await response.json(),
        bodyKey: "vtap",
        bodyModel: model.Vtap,
        type: "model.Vtap",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Upgrades the DRG. After upgrade, you can control routing inside your DRG
   * via DRG attachments, route distributions, and DRG route tables.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpgradeDrgRequest
   * @return UpgradeDrgResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpgradeDrg.ts.html |here} to see how to use UpgradeDrg API.
   */
  public async upgradeDrg(
    upgradeDrgRequest: requests.UpgradeDrgRequest
  ): Promise<responses.UpgradeDrgResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#upgradeDrg.");
    const operationName = "upgradeDrg";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/Drg/UpgradeDrg";
    const pathParams = {
      "{drgId}": upgradeDrgRequest.drgId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": upgradeDrgRequest.opcRequestId,
      "opc-retry-token": upgradeDrgRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      upgradeDrgRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}/actions/upgrade",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpgradeDrgResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Submits the BYOIP CIDR block you are importing for validation. Do not submit to Oracle for validation if you have not already
   * modified the information for the BYOIP CIDR block with your Regional Internet Registry. See [To import a CIDR block](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/BYOIP.htm#import_cidr) for details.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ValidateByoipRangeRequest
   * @return ValidateByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ValidateByoipRange.ts.html |here} to see how to use ValidateByoipRange API.
   */
  public async validateByoipRange(
    validateByoipRangeRequest: requests.ValidateByoipRangeRequest
  ): Promise<responses.ValidateByoipRangeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#validateByoipRange.");
    const operationName = "validateByoipRange";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ByoipRange/ValidateByoipRange";
    const pathParams = {
      "{byoipRangeId}": validateByoipRangeRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": validateByoipRangeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      validateByoipRangeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}/actions/validate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateByoipRangeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Withdraws BGP route advertisement for the BYOIP CIDR block.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param WithdrawByoipRangeRequest
   * @return WithdrawByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/WithdrawByoipRange.ts.html |here} to see how to use WithdrawByoipRange API.
   */
  public async withdrawByoipRange(
    withdrawByoipRangeRequest: requests.WithdrawByoipRangeRequest
  ): Promise<responses.WithdrawByoipRangeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#withdrawByoipRange.");
    const operationName = "withdrawByoipRange";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/iaas/20160918/ByoipRange/WithdrawByoipRange";
    const pathParams = {
      "{byoipRangeId}": withdrawByoipRangeRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": withdrawByoipRangeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      withdrawByoipRangeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}/actions/withdraw",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.WithdrawByoipRangeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
