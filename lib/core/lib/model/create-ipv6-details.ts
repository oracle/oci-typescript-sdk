/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](https://docs.oracle.com/iaas/Content/Network/Concepts/overview.htm),
[Compute](https://docs.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](https://docs.oracle.com/iaas/Content/Block/Concepts/overview.htm) services.
The required permissions are documented in the
[Details for the Core Services](https://docs.oracle.com/iaas/Content/Identity/Reference/corepolicyreference.htm) article.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

export interface CreateIpv6Details {
  /**
    * Defined tags for this resource. Each key is predefined and scoped to a
* namespace. For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
* 
    */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * A user-friendly name. Does not have to be unique, and it's changeable.
   * Avoid entering confidential information.
   *
   */
  "displayName"?: string;
  /**
    * Free-form tags for this resource. Each tag is a simple key-value pair with no
* predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Department\": \"Finance\"}}
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
    * An IPv6 address of your choice. Must be an available IP address within
* the subnet's CIDR. If you don't specify a value, Oracle automatically
* assigns an IPv6 address from the subnet. The subnet is the one that
* contains the VNIC you specify in {@code vnicId}.
* <p>
Example: {@code 2001:DB8::}
* 
    */
  "ipAddress"?: string;
  /**
   * Length of cidr range. Optional field to specify flexible cidr. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "cidrPrefixLength"?: number;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC to assign the IPv6 to. The
   * IPv6 will be in the VNIC's subnet.
   *
   */
  "vnicId"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet from which the IPv6 is to be drawn. The IP address,
   * *if supplied*, must be valid for the given subnet, only valid for reserved IPs currently.
   *
   */
  "subnetId"?: string;
  /**
   * Lifetime of the IP address.
   * There are two types of IPs:
   *  - Ephemeral
   *  - Reserved
   *
   */
  "lifetime"?: CreateIpv6Details.Lifetime;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table the IP address or VNIC will use. For more information, see
   * [Per-resource Routing](https://docs.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm#Overview_of_Routing_for_Your_VCN__source_routing).
   *
   */
  "routeTableId"?: string;
  /**
   * The IPv6 prefix allocated to the subnet. This is required if more than one IPv6 prefix exists on the subnet.
   *
   */
  "ipv6SubnetCidr"?: string;
}

export namespace CreateIpv6Details {
  export enum Lifetime {
    Ephemeral = "EPHEMERAL",
    Reserved = "RESERVED"
  }

  export function getJsonObj(obj: CreateIpv6Details): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateIpv6Details): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
