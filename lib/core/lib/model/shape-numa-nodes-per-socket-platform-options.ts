/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](https://docs.oracle.com/iaas/Content/Network/Concepts/overview.htm),
[Compute](https://docs.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](https://docs.oracle.com/iaas/Content/Block/Concepts/overview.htm) services.
The required permissions are documented in the
[Details for the Core Services](https://docs.oracle.com/iaas/Content/Identity/Reference/corepolicyreference.htm) article.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Configuration options for NUMA nodes per socket.
 *
 */
export interface ShapeNumaNodesPerSocketPlatformOptions {
  /**
   * The supported values for this platform configuration property.
   *
   */
  "allowedValues"?: Array<ShapeNumaNodesPerSocketPlatformOptions.AllowedValues>;
  /**
   * The default NUMA nodes per socket configuration.
   *
   */
  "defaultValue"?: string;
}

export namespace ShapeNumaNodesPerSocketPlatformOptions {
  export enum AllowedValues {
    Nps0 = "NPS0",
    Nps1 = "NPS1",
    Nps2 = "NPS2",
    Nps4 = "NPS4",
    Nps6 = "NPS6",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ShapeNumaNodesPerSocketPlatformOptions): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ShapeNumaNodesPerSocketPlatformOptions): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
