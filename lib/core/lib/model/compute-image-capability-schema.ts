/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](https://docs.oracle.com/iaas/Content/Network/Concepts/overview.htm),
[Compute](https://docs.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](https://docs.oracle.com/iaas/Content/Block/Concepts/overview.htm) services.
The required permissions are documented in the
[Details for the Core Services](https://docs.oracle.com/iaas/Content/Identity/Reference/corepolicyreference.htm) article.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Compute Image Capability Schema is a set of capabilities that filter the compute global capability schema
 * version for an image.
 *
 */
export interface ComputeImageCapabilitySchema {
  /**
   * The id of the compute global image capability schema version
   *
   */
  "id": string;
  /**
   * The OCID of the compartment that contains the resource.
   */
  "compartmentId"?: string;
  /**
   * The ocid of the compute global image capability schema
   *
   */
  "computeGlobalImageCapabilitySchemaId": string;
  /**
   * The name of the compute global image capability schema version
   *
   */
  "computeGlobalImageCapabilitySchemaVersionName": string;
  /**
   * The OCID of the image associated with this compute image capability schema
   *
   */
  "imageId": string;
  /**
   * The ComputeImageCapabilitySchema current lifecycle state.
   */
  "lifecycleState"?: ComputeImageCapabilitySchema.LifecycleState;
  /**
    * Defined tags for this resource. Each key is predefined and scoped to a
* namespace. For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
* 
    */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * A user-friendly name. Does not have to be unique, and it's changeable.
   * Avoid entering confidential information.
   *
   */
  "displayName": string;
  /**
    * Free-form tags for this resource. Each tag is a simple key-value pair with no
* predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Department\": \"Finance\"}}
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
   * The map of each capability name to its ImageCapabilityDescriptor.
   */
  "schemaData": { [key: string]: model.ImageCapabilitySchemaDescriptor };
  /**
    * The date and time the compute image capability schema was created, in the format defined by
* [RFC3339](https://tools.ietf.org/html/rfc3339).
* <p>
Example: {@code 2016-08-25T21:10:29.600Z}
* 
    */
  "timeCreated": Date;
}

export namespace ComputeImageCapabilitySchema {
  export enum LifecycleState {
    Creating = "CREATING",
    Active = "ACTIVE",
    Deleted = "DELETED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ComputeImageCapabilitySchema): object {
    const jsonObj = {
      ...obj,
      ...{
        "schemaData": obj.schemaData
          ? common.mapContainer(obj.schemaData, model.ImageCapabilitySchemaDescriptor.getJsonObj)
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ComputeImageCapabilitySchema): object {
    const jsonObj = {
      ...obj,
      ...{
        "schemaData": obj.schemaData
          ? common.mapContainer(
              obj.schemaData,
              model.ImageCapabilitySchemaDescriptor.getDeserializedJsonObj
            )
          : undefined
      }
    };

    return jsonObj;
  }
}
