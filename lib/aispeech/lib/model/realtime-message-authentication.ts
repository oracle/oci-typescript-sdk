/**
 * Speech API
 * The OCI Speech Service harnesses the power of spoken language by allowing developers to easily convert file-based data containing human speech into highly accurate text transcriptions.
 * OpenAPI spec version: 20220101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The payload for authentication.
 */
export interface RealtimeMessageAuthentication {
  /**
   * Compartment ID to be used for authentication/authorization.
   */
  "compartmentId": string;

  "authenticationType": string;
}

export namespace RealtimeMessageAuthentication {
  export function getJsonObj(obj: RealtimeMessageAuthentication): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "authenticationType" in obj && obj.authenticationType) {
      switch (obj.authenticationType) {
        case "TOKEN":
          return model.RealtimeMessageAuthenticationToken.getJsonObj(
            <model.RealtimeMessageAuthenticationToken>(<object>jsonObj),
            true
          );
        case "CREDENTIALS":
          return model.RealtimeMessageAuthenticationCredentials.getJsonObj(
            <model.RealtimeMessageAuthenticationCredentials>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.authenticationType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: RealtimeMessageAuthentication): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "authenticationType" in obj && obj.authenticationType) {
      switch (obj.authenticationType) {
        case "TOKEN":
          return model.RealtimeMessageAuthenticationToken.getDeserializedJsonObj(
            <model.RealtimeMessageAuthenticationToken>(<object>jsonObj),
            true
          );
        case "CREDENTIALS":
          return model.RealtimeMessageAuthenticationCredentials.getDeserializedJsonObj(
            <model.RealtimeMessageAuthenticationCredentials>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.authenticationType}`);
      }
    }
    return jsonObj;
  }
}
