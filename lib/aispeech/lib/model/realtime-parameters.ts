/**
 * Speech API
 * The OCI Speech Service harnesses the power of spoken language by allowing developers to easily convert file-based data containing human speech into highly accurate text transcriptions.
 * OpenAPI spec version: 20220101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Parameters to be sent to the realtime speech service over a websocket connection.
 */
export interface RealtimeParameters {
  /**
   * Audio encoding to use
   * - audio/raw;rate=16000
   * - audio/raw;rate=8000
   * - audio/raw;rate=8000;codec=mulaw
   * - audio/raw;rate=8000;codec=alaw
   *
   */
  "encoding"?: string;
  /**
   * Toggle for ack messages.
   */
  "isAckEnabled"?: boolean;
  /**
   * Silence threshold for Realtime Speech partial results in milliseconds.
   * Currently supported only for Oracle model.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "partialSilenceThresholdInMs"?: number;
  /**
   * Silence threshold for Realtime Speech final results in milliseconds.
   * Currently supported only for Oracle model.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "finalSilenceThresholdInMs"?: number;
  /**
   * When enabled sets the amount of confidence required for latest tokens before returning them as part of a new partial result
   * Currently supported only for Oracle model.
   *
   */
  "stabilizePartialResults"?: RealtimeParameters.StabilizePartialResults;
  /**
   * Select a model to use for generating transcriptions. Currently supported models are:
   * - ORACLE
   * - WHISPER
   *
   */
  "modelType"?: string;
  /**
   * Model Domain.
   */
  "modelDomain"?: RealtimeParameters.ModelDomain;
  /**
   *
   * Oracle model supported language codes are locale specific.
   * Locale value as per given in [https://datatracker.ietf.org/doc/html/rfc5646]
   * - en-US: English - United States (default)
   * - es-ES: Spanish - Spain
   * - pt-BR: Portuguese - Brazil
   * - en-GB: English - Great Britain
   * - en-AU: English - Australia
   * - en-IN: English - India
   * - hi-IN: Hindi - India
   * - fr-FR: French - France
   * - de-DE: German - Germany
   * - it-IT: Italian - Italy
   * Whisper model supported language codes are locale agnostic
   * - auto: Auto-detect language
   * - af: Afrikaans
   * - am: Amharic
   * - ar: Arabic
   * - as: Assamese
   * - az: Azerbaijani
   * - ba: Bashkir
   * - be: Belarusian
   * - bg: Bulgarian
   * - bn: Bengali
   * - bo: Tibetan
   * - br: Breton
   * - bs: Bosnian
   * - ca: Catalan
   * - cs: Czech
   * - cy: Welsh
   * - da: Danish
   * - de: German
   * - el: Greek
   * - en: English (default)
   * - es: Spanish
   * - et: Estonian
   * - eu: Basque
   * - fa: Persian
   * - fi: Finnish
   * - fo: Faroese
   * - fr: French
   * - gl: Galician
   * - gu: Gujarati
   * - ha: Hausa
   * - haw: Hawaiian
   * - he: Hebrew
   * - hi: Hindi
   * - hr: Croatian
   * - ht: Haitian Creole
   * - hu: Hungarian
   * - hy: Armenian
   * - id: Indonesian
   * - is: Icelandic
   * - it: Italian
   * - ja: Japanese
   * - jv: Javanese
   * - ka: Georgian
   * - kk: Kazakh
   * - km: Khmer
   * - kn: Kannada
   * - ko: Korean
   * - la: Latin
   * - lb: Luxembourgish
   * - ln: Lingala
   * - lo: Lao
   * - lt: Lithuanian
   * - lv: Latvian
   * - mg: Malagasy
   * - mi: Maori
   * - mk: Macedonian
   * - ml: Malayalam
   * - mn: Mongolian
   * - mr: Marathi
   * - ms: Malay
   * - mt: Maltese
   * - my: Burmese
   * - ne: Nepali
   * - nl: Dutch
   * - nn: Norwegian Nynorsk
   * - no: Norwegian
   * - oc: Occitan
   * - pa: Punjabi
   * - pl: Polish
   * - ps: Pashto
   * - pt: Portuguese
   * - ro: Romanian
   * - ru: Russian
   * - sa: Sanskrit
   * - sd: Sindhi
   * - si: Sinhala
   * - sk: Slovak
   * - sl: Slovenian
   * - sn: Shona
   * - so: Somali
   * - sq: Albanian
   * - sr: Serbian
   * - su: Sundanese
   * - sv: Swedish
   * - sw: Swahili
   * - ta: Tamil
   * - te: Telugu
   * - tg: Tajik
   * - th: Thai
   * - tk: Turkmen
   * - tl: Tagalog
   * - tr: Turkish
   * - tt: Tatar
   * - uk: Ukrainian
   * - ur: Urdu
   * - uz: Uzbek
   * - vi: Vietnamese
   * - yi: Yiddish
   * - yo: Yoruba
   * - zh: Chinese
   *
   */
  "languageCode"?: string;
  /**
   * If set to true, the service will not fail connection attempt if it encounters any issues that prevent the loading of all specified user customizations. Any invalid customizations will simply be ignored and connection will continue being established with the default base model and any remaining valid customizations.
   * If set to false, if the service is unable to load any of the specified customizations, an error detailing why will be returned and the session will end.
   * Currently supported only for Oracle model.
   *
   */
  "shouldIgnoreInvalidCustomizations"?: boolean;
  /**
   * Array of customization objects.
   * Currently supported only for Oracle model.
   *
   */
  "customizations"?: Array<model.CustomizationInference>;
  /**
   * Configure punctuations in the generated transcriptions. Disabled by default.
   * - NONE: No punctuation in the transcription response
   * - SPOKEN: Punctuations in response only when verbally spoken
   * - AUTO: Automatic punctuation in the response, spoken punctuations are disabled
   * Spoken punctuation is currently supported only for the Oracle model in the Medical domain.
   *
   */
  "punctuation"?: RealtimeParameters.Punctuation;
}

export namespace RealtimeParameters {
  export enum StabilizePartialResults {
    None = "NONE",
    Low = "LOW",
    Medium = "MEDIUM",
    High = "HIGH"
  }

  export enum ModelDomain {
    Generic = "GENERIC",
    Medical = "MEDICAL"
  }

  export enum Punctuation {
    None = "NONE",
    Spoken = "SPOKEN",
    Auto = "AUTO"
  }

  export function getJsonObj(obj: RealtimeParameters): object {
    const jsonObj = {
      ...obj,
      ...{
        "customizations": obj.customizations
          ? obj.customizations.map(item => {
              return model.CustomizationInference.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: RealtimeParameters): object {
    const jsonObj = {
      ...obj,
      ...{
        "customizations": obj.customizations
          ? obj.customizations.map(item => {
              return model.CustomizationInference.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
