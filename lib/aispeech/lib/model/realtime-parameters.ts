/**
 * Speech API
 * The OCI Speech Service harnesses the power of spoken language by allowing developers to easily convert file-based data containing human speech into highly accurate text transcriptions.
 * OpenAPI spec version: 20220101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Parameters to be sent to the realtime speech service over a websocket connection.
 */
export interface RealtimeParameters {
  /**
   * Audio encoding to use
   * - audio/raw;rate=16000
   * - audio/raw;rate=8000
   * - audio/raw;rate=8000;codec=mulaw
   * - audio/raw;rate=8000;codec=alaw
   *
   */
  "encoding"?: string;
  /**
   * Toggle for ack messages.
   */
  "isAckEnabled"?: boolean;
  /**
   * Silence threshold for Realtime Speech partial results in milliseconds. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "partialSilenceThresholdInMs"?: number;
  /**
   * Silence threshold for Realtime Speech final results in milliseconds. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "finalSilenceThresholdInMs"?: number;
  /**
   * When enabled sets the amount of confidence required for latest tokens before returning them as part of a new partial result
   */
  "stabilizePartialResults"?: RealtimeParameters.StabilizePartialResults;
  /**
   * Model Domain.
   */
  "modelDomain"?: RealtimeParameters.ModelDomain;
  /**
   * Locale value as per given in [https://datatracker.ietf.org/doc/html/rfc5646].
   * - en-US: English - United States
   * - es-ES: Spanish - Spain
   * - pt-BR: Portuguese - Brazil
   * - en-GB: English - Great Britain
   * - en-AU: English - Australia
   * - en-IN: English - India
   * - hi-IN: Hindi - India
   * - fr-FR: French - France
   * - de-DE: German - Germany
   * - it-IT: Italian - Italy
   *
   */
  "languageCode"?: string;
  /**
   * If set to true, the service will not fail connection attempt if it encounters any issues that prevent the loading of all specified user customizations. Any invalid customizations will simply be ignored and connection will continue being established with the default base model and any remaining valid customizations.
   * If set to false,  if the service is unable to load any of the specified customizations, an error detailing why will be returned and the session will end.
   *
   */
  "shouldIgnoreInvalidCustomizations"?: boolean;
  /**
   * Array of customization objects.
   */
  "customizations"?: Array<model.CustomizationInference>;
}

export namespace RealtimeParameters {
  export enum StabilizePartialResults {
    None = "NONE",
    Low = "LOW",
    Medium = "MEDIUM",
    High = "HIGH"
  }

  export enum ModelDomain {
    Generic = "GENERIC",
    Medical = "MEDICAL"
  }

  export function getJsonObj(obj: RealtimeParameters): object {
    const jsonObj = {
      ...obj,
      ...{
        "customizations": obj.customizations
          ? obj.customizations.map(item => {
              return model.CustomizationInference.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: RealtimeParameters): object {
    const jsonObj = {
      ...obj,
      ...{
        "customizations": obj.customizations
          ? obj.customizations.map(item => {
              return model.CustomizationInference.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
