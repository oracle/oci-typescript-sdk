/**
 * Full Stack Disaster Recovery API
 * Use the Full Stack Disaster Recovery (DR) API to manage disaster recovery for business applications.
Full Stack DR is an OCI disaster recovery orchestration and management service that provides comprehensive disaster 
recovery capabilities for all layers of an application stack, including infrastructure, middleware, database, 
and application.

 * OpenAPI spec version: 20220125
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The properties for a HeatWave MySQL DB System member of a DR protection group.
 *
 */
export interface DrProtectionGroupMemberMySqlDbSystem extends model.DrProtectionGroupMember {
  /**
    * The OCID of the peer HeatWave MySQL DB System from the peer region.
* <p>
Example: {@code ocid1.mysqldbsystem.oc1..uniqueID}
* 
    */
  "peerDbSystemId"?: string;
  /**
    * The maximum time (in seconds) to wait for the Global Transaction Identifier (GTID) synchronization process to complete before timing out.
* <p>
Example: {@code 600}
*  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
    */
  "gtidReconciliationTimeout"?: number;
  /**
    * A flag indicating whether to continue with DR operation if the Global Transaction Identifier (GTID) reconciliation operation times out.
* <p>
Example: {@code false}
* 
    */
  "isContinueOnGtidReconciliationTimeout"?: boolean;
  "dbSystemAdminUserDetails"?: model.MySqlDbSystemAdminUserDetails;
  "dbSystemReplicationUserDetails"?: model.MySqlDbSystemReplicationUserDetails;

  "memberType": string;
}

export namespace DrProtectionGroupMemberMySqlDbSystem {
  export function getJsonObj(
    obj: DrProtectionGroupMemberMySqlDbSystem,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.DrProtectionGroupMember.getJsonObj(obj) as DrProtectionGroupMemberMySqlDbSystem)),
      ...{
        "dbSystemAdminUserDetails": obj.dbSystemAdminUserDetails
          ? model.MySqlDbSystemAdminUserDetails.getJsonObj(obj.dbSystemAdminUserDetails)
          : undefined,
        "dbSystemReplicationUserDetails": obj.dbSystemReplicationUserDetails
          ? model.MySqlDbSystemReplicationUserDetails.getJsonObj(obj.dbSystemReplicationUserDetails)
          : undefined
      }
    };

    return jsonObj;
  }
  export const memberType = "MYSQL_DB_SYSTEM";
  export function getDeserializedJsonObj(
    obj: DrProtectionGroupMemberMySqlDbSystem,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.DrProtectionGroupMember.getDeserializedJsonObj(
            obj
          ) as DrProtectionGroupMemberMySqlDbSystem)),
      ...{
        "dbSystemAdminUserDetails": obj.dbSystemAdminUserDetails
          ? model.MySqlDbSystemAdminUserDetails.getDeserializedJsonObj(obj.dbSystemAdminUserDetails)
          : undefined,
        "dbSystemReplicationUserDetails": obj.dbSystemReplicationUserDetails
          ? model.MySqlDbSystemReplicationUserDetails.getDeserializedJsonObj(
              obj.dbSystemReplicationUserDetails
            )
          : undefined
      }
    };

    return jsonObj;
  }
}
