/**
 * Full Stack Disaster Recovery API
 * Use the Full Stack Disaster Recovery (DR) API to manage disaster recovery for business applications.
Full Stack DR is an OCI disaster recovery orchestration and management service that provides comprehensive disaster 
recovery capabilities for all layers of an application stack, including infrastructure, middleware, database, 
and application.

 * OpenAPI spec version: 20220125
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Create properties for a volume group member.
 */
export interface CreateDrProtectionGroupMemberVolumeGroupDetails
  extends model.CreateDrProtectionGroupMemberDetails {
  /**
    * The OCID of the backup policy to use in the destination region. This policy will be used to create backups 
* for this volume group after it moves the destination region.
* <p>
Example: {@code ocid1.volumebackuppolicy.oc1..uniqueID}
* 
    */
  "destinationBackupPolicyId"?: string;
  /**
    * A list of mappings between source volume IDs in the volume group and customer-managed encryption keys in the 
* destination region which will be used to encrypt the volume after it moves to the destination region.
* <p>
If you add the entry for source volumes and its corresponding vault and encryption keys here, you can not use 
* 'commonDestinationKey' for encrypting all volumes with common encryption key. Similarly, if you specify common
* vault and encryption key using 'commonDestinationKey', you cannot specify vaults and encryption keys individually 
* for each volume using 'sourceVolumeToDestinationEncryptionKeyMappings'.
* <p>
An entry for each volume in volume group should be added in this list. The encryption key will not be updated 
* for the volumes that are part of volume group but missing in this list.
* 
    */
  "sourceVolumeToDestinationEncryptionKeyMappings"?: Array<
    model.CreateSourceVolumeToDestinationEncryptionKeyMappingDetails
  >;
  "commonDestinationKey"?: model.CreateVaultAndEncryptionKeyDetails;
  /**
    * The OCID of a compartment in the destination region in which the volume group should be launched.
* <p>
Example: {@code ocid1.compartment.oc1..uniqueID}
* 
    */
  "destinationCompartmentId"?: string;

  "memberType": string;
}

export namespace CreateDrProtectionGroupMemberVolumeGroupDetails {
  export function getJsonObj(
    obj: CreateDrProtectionGroupMemberVolumeGroupDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.CreateDrProtectionGroupMemberDetails.getJsonObj(
            obj
          ) as CreateDrProtectionGroupMemberVolumeGroupDetails)),
      ...{
        "sourceVolumeToDestinationEncryptionKeyMappings": obj.sourceVolumeToDestinationEncryptionKeyMappings
          ? obj.sourceVolumeToDestinationEncryptionKeyMappings.map(item => {
              return model.CreateSourceVolumeToDestinationEncryptionKeyMappingDetails.getJsonObj(
                item
              );
            })
          : undefined,
        "commonDestinationKey": obj.commonDestinationKey
          ? model.CreateVaultAndEncryptionKeyDetails.getJsonObj(obj.commonDestinationKey)
          : undefined
      }
    };

    return jsonObj;
  }
  export const memberType = "VOLUME_GROUP";
  export function getDeserializedJsonObj(
    obj: CreateDrProtectionGroupMemberVolumeGroupDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.CreateDrProtectionGroupMemberDetails.getDeserializedJsonObj(
            obj
          ) as CreateDrProtectionGroupMemberVolumeGroupDetails)),
      ...{
        "sourceVolumeToDestinationEncryptionKeyMappings": obj.sourceVolumeToDestinationEncryptionKeyMappings
          ? obj.sourceVolumeToDestinationEncryptionKeyMappings.map(item => {
              return model.CreateSourceVolumeToDestinationEncryptionKeyMappingDetails.getDeserializedJsonObj(
                item
              );
            })
          : undefined,
        "commonDestinationKey": obj.commonDestinationKey
          ? model.CreateVaultAndEncryptionKeyDetails.getDeserializedJsonObj(
              obj.commonDestinationKey
            )
          : undefined
      }
    };

    return jsonObj;
  }
}
