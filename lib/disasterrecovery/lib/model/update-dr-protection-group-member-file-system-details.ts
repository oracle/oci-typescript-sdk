/**
 * Full Stack Disaster Recovery API
 * Use the Full Stack Disaster Recovery (DR) API to manage disaster recovery for business applications.
Full Stack DR is an OCI disaster recovery orchestration and management service that provides comprehensive disaster 
recovery capabilities for all layers of an application stack, including infrastructure, middleware, database, 
and application.

 * OpenAPI spec version: 20220125
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Update properties for a file system member.
 */
export interface UpdateDrProtectionGroupMemberFileSystemDetails
  extends model.UpdateDrProtectionGroupMemberDetails {
  /**
    * The availability domain of the destination mount target.
* <p>
Example: {@code BBTh:region-AD}
* 
    */
  "destinationAvailabilityDomain"?: string;
  /**
   * A list of mappings between file system exports in the primary region and mount targets in the standby region.
   *
   */
  "exportMappings"?: Array<model.FileSystemExportMappingDetails>;
  "destinationEncryptionKey"?: model.UpdateVaultAndEncryptionKeyDetails;
  /**
    * The OCID of the snapshot policy to use in the destination region. This policy will be attached to the file system after it moves to the destination region.
* <p>
Example: {@code ocid1.filesystemsnapshotpolicy.oc1..uniqueID}
* 
    */
  "destinationSnapshotPolicyId"?: string;
  /**
    * The OCID of a compartment in the destination region in which the file system should be launched.
* <p>
Example: {@code ocid1.compartment.oc1..uniqueID}
* 
    */
  "destinationCompartmentId"?: string;

  "memberType": string;
}

export namespace UpdateDrProtectionGroupMemberFileSystemDetails {
  export function getJsonObj(
    obj: UpdateDrProtectionGroupMemberFileSystemDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.UpdateDrProtectionGroupMemberDetails.getJsonObj(
            obj
          ) as UpdateDrProtectionGroupMemberFileSystemDetails)),
      ...{
        "exportMappings": obj.exportMappings
          ? obj.exportMappings.map(item => {
              return model.FileSystemExportMappingDetails.getJsonObj(item);
            })
          : undefined,
        "destinationEncryptionKey": obj.destinationEncryptionKey
          ? model.UpdateVaultAndEncryptionKeyDetails.getJsonObj(obj.destinationEncryptionKey)
          : undefined
      }
    };

    return jsonObj;
  }
  export const memberType = "FILE_SYSTEM";
  export function getDeserializedJsonObj(
    obj: UpdateDrProtectionGroupMemberFileSystemDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.UpdateDrProtectionGroupMemberDetails.getDeserializedJsonObj(
            obj
          ) as UpdateDrProtectionGroupMemberFileSystemDetails)),
      ...{
        "exportMappings": obj.exportMappings
          ? obj.exportMappings.map(item => {
              return model.FileSystemExportMappingDetails.getDeserializedJsonObj(item);
            })
          : undefined,
        "destinationEncryptionKey": obj.destinationEncryptionKey
          ? model.UpdateVaultAndEncryptionKeyDetails.getDeserializedJsonObj(
              obj.destinationEncryptionKey
            )
          : undefined
      }
    };

    return jsonObj;
  }
}
