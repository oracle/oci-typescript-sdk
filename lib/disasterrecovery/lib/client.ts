/**
 * Full Stack Disaster Recovery API
 * Use the Full Stack Disaster Recovery (DR) API to manage disaster recovery for business applications.
Full Stack DR is an OCI disaster recovery orchestration and management service that provides comprehensive disaster 
recovery capabilities for all layers of an application stack, including infrastructure, middleware, database, 
and application.

 * OpenAPI spec version: 20220125
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { DisasterRecoveryWaiter } from "./disasterrecovery-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DisasterRecoveryApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DisasterRecoveryClient {
  protected static serviceEndpointTemplate =
    "https://disaster-recovery.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DisasterRecoveryWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "DisasterRecovery";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("disasterrecovery")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("disasterrecovery");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220125";
    if (this.logger) this.logger.info(`DisasterRecoveryClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        DisasterRecoveryClient.serviceEndpointTemplate,
        this._region,
        DisasterRecoveryClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        DisasterRecoveryClient.serviceEndpointTemplate,
        this._regionId,
        DisasterRecoveryClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DisasterRecoveryClient.serviceEndpointTemplate,
      region,
      DisasterRecoveryClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DisasterRecoveryClient.serviceEndpointTemplate,
      regionId,
      DisasterRecoveryClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new DisasterRecoveryWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DisasterRecoveryWaiter {
    this._waiters = new DisasterRecoveryWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DisasterRecoveryWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Create an association between the DR protection group identified by *drProtectionGroupId* and
   * another DR protection group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AssociateDrProtectionGroupRequest
   * @return AssociateDrProtectionGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/AssociateDrProtectionGroup.ts.html |here} to see how to use AssociateDrProtectionGroup API.
   */
  public async associateDrProtectionGroup(
    associateDrProtectionGroupRequest: requests.AssociateDrProtectionGroupRequest
  ): Promise<responses.AssociateDrProtectionGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#associateDrProtectionGroup.");
    const operationName = "associateDrProtectionGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{drProtectionGroupId}": associateDrProtectionGroupRequest.drProtectionGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": associateDrProtectionGroupRequest.ifMatch,
      "opc-retry-token": associateDrProtectionGroupRequest.opcRetryToken,
      "opc-request-id": associateDrProtectionGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      associateDrProtectionGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drProtectionGroups/{drProtectionGroupId}/actions/associate",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        associateDrProtectionGroupRequest.associateDrProtectionGroupDetails,
        "AssociateDrProtectionGroupDetails",
        model.AssociateDrProtectionGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AssociateDrProtectionGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancel the DR plan execution identified by *drPlanExecutionId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelDrPlanExecutionRequest
   * @return CancelDrPlanExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/CancelDrPlanExecution.ts.html |here} to see how to use CancelDrPlanExecution API.
   */
  public async cancelDrPlanExecution(
    cancelDrPlanExecutionRequest: requests.CancelDrPlanExecutionRequest
  ): Promise<responses.CancelDrPlanExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#cancelDrPlanExecution.");
    const operationName = "cancelDrPlanExecution";
    const apiReferenceLink = "";
    const pathParams = {
      "{drPlanExecutionId}": cancelDrPlanExecutionRequest.drPlanExecutionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelDrPlanExecutionRequest.ifMatch,
      "opc-retry-token": cancelDrPlanExecutionRequest.opcRetryToken,
      "opc-request-id": cancelDrPlanExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelDrPlanExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlanExecutions/{drPlanExecutionId}/actions/cancel",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        cancelDrPlanExecutionRequest.cancelDrPlanExecutionDetails,
        "CancelDrPlanExecutionDetails",
        model.CancelDrPlanExecutionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelDrPlanExecutionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancel the work request identified by *workRequestId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#cancelWorkRequest.");
    const operationName = "cancelWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelWorkRequestRequest.ifMatch,
      "opc-request-id": cancelWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Move the DR protection group identified by *drProtectionGroupId* to a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDrProtectionGroupCompartmentRequest
   * @return ChangeDrProtectionGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/ChangeDrProtectionGroupCompartment.ts.html |here} to see how to use ChangeDrProtectionGroupCompartment API.
   */
  public async changeDrProtectionGroupCompartment(
    changeDrProtectionGroupCompartmentRequest: requests.ChangeDrProtectionGroupCompartmentRequest
  ): Promise<responses.ChangeDrProtectionGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DisasterRecoveryClient#changeDrProtectionGroupCompartment."
      );
    const operationName = "changeDrProtectionGroupCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{drProtectionGroupId}": changeDrProtectionGroupCompartmentRequest.drProtectionGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDrProtectionGroupCompartmentRequest.ifMatch,
      "opc-retry-token": changeDrProtectionGroupCompartmentRequest.opcRetryToken,
      "opc-request-id": changeDrProtectionGroupCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDrProtectionGroupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drProtectionGroups/{drProtectionGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDrProtectionGroupCompartmentRequest.changeDrProtectionGroupCompartmentDetails,
        "ChangeDrProtectionGroupCompartmentDetails",
        model.ChangeDrProtectionGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDrProtectionGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a DR plan of the specified DR plan type.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDrPlanRequest
   * @return CreateDrPlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/CreateDrPlan.ts.html |here} to see how to use CreateDrPlan API.
   */
  public async createDrPlan(
    createDrPlanRequest: requests.CreateDrPlanRequest
  ): Promise<responses.CreateDrPlanResponse> {
    if (this.logger) this.logger.debug("Calling operation DisasterRecoveryClient#createDrPlan.");
    const operationName = "createDrPlan";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDrPlanRequest.opcRetryToken,
      "opc-request-id": createDrPlanRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDrPlanRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlans",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDrPlanRequest.createDrPlanDetails,
        "CreateDrPlanDetails",
        model.CreateDrPlanDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDrPlanResponse>{},
        body: await response.json(),
        bodyKey: "drPlan",
        bodyModel: model.DrPlan,
        type: "model.DrPlan",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Execute a DR plan for a DR protection group.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDrPlanExecutionRequest
   * @return CreateDrPlanExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/CreateDrPlanExecution.ts.html |here} to see how to use CreateDrPlanExecution API.
   */
  public async createDrPlanExecution(
    createDrPlanExecutionRequest: requests.CreateDrPlanExecutionRequest
  ): Promise<responses.CreateDrPlanExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#createDrPlanExecution.");
    const operationName = "createDrPlanExecution";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDrPlanExecutionRequest.opcRetryToken,
      "opc-request-id": createDrPlanExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDrPlanExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlanExecutions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDrPlanExecutionRequest.createDrPlanExecutionDetails,
        "CreateDrPlanExecutionDetails",
        model.CreateDrPlanExecutionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDrPlanExecutionResponse>{},
        body: await response.json(),
        bodyKey: "drPlanExecution",
        bodyModel: model.DrPlanExecution,
        type: "model.DrPlanExecution",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a DR protection group.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDrProtectionGroupRequest
   * @return CreateDrProtectionGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/CreateDrProtectionGroup.ts.html |here} to see how to use CreateDrProtectionGroup API.
   */
  public async createDrProtectionGroup(
    createDrProtectionGroupRequest: requests.CreateDrProtectionGroupRequest
  ): Promise<responses.CreateDrProtectionGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#createDrProtectionGroup.");
    const operationName = "createDrProtectionGroup";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDrProtectionGroupRequest.opcRetryToken,
      "opc-request-id": createDrProtectionGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDrProtectionGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drProtectionGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDrProtectionGroupRequest.createDrProtectionGroupDetails,
        "CreateDrProtectionGroupDetails",
        model.CreateDrProtectionGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDrProtectionGroupResponse>{},
        body: await response.json(),
        bodyKey: "drProtectionGroup",
        bodyModel: model.DrProtectionGroup,
        type: "model.DrProtectionGroup",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the DR plan identified by *drPlanId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDrPlanRequest
   * @return DeleteDrPlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/DeleteDrPlan.ts.html |here} to see how to use DeleteDrPlan API.
   */
  public async deleteDrPlan(
    deleteDrPlanRequest: requests.DeleteDrPlanRequest
  ): Promise<responses.DeleteDrPlanResponse> {
    if (this.logger) this.logger.debug("Calling operation DisasterRecoveryClient#deleteDrPlan.");
    const operationName = "deleteDrPlan";
    const apiReferenceLink = "";
    const pathParams = {
      "{drPlanId}": deleteDrPlanRequest.drPlanId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDrPlanRequest.ifMatch,
      "opc-request-id": deleteDrPlanRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDrPlanRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlans/{drPlanId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDrPlanResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the DR plan execution identified by *drPlanExecutionId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDrPlanExecutionRequest
   * @return DeleteDrPlanExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/DeleteDrPlanExecution.ts.html |here} to see how to use DeleteDrPlanExecution API.
   */
  public async deleteDrPlanExecution(
    deleteDrPlanExecutionRequest: requests.DeleteDrPlanExecutionRequest
  ): Promise<responses.DeleteDrPlanExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#deleteDrPlanExecution.");
    const operationName = "deleteDrPlanExecution";
    const apiReferenceLink = "";
    const pathParams = {
      "{drPlanExecutionId}": deleteDrPlanExecutionRequest.drPlanExecutionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDrPlanExecutionRequest.ifMatch,
      "opc-request-id": deleteDrPlanExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDrPlanExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlanExecutions/{drPlanExecutionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDrPlanExecutionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the DR protection group identified by *drProtectionGroupId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDrProtectionGroupRequest
   * @return DeleteDrProtectionGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/DeleteDrProtectionGroup.ts.html |here} to see how to use DeleteDrProtectionGroup API.
   */
  public async deleteDrProtectionGroup(
    deleteDrProtectionGroupRequest: requests.DeleteDrProtectionGroupRequest
  ): Promise<responses.DeleteDrProtectionGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#deleteDrProtectionGroup.");
    const operationName = "deleteDrProtectionGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{drProtectionGroupId}": deleteDrProtectionGroupRequest.drProtectionGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDrProtectionGroupRequest.ifMatch,
      "opc-request-id": deleteDrProtectionGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDrProtectionGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drProtectionGroups/{drProtectionGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDrProtectionGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the association between the DR protection group identified by *drProtectionGroupId*.
   * and its peer DR protection group.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DisassociateDrProtectionGroupRequest
   * @return DisassociateDrProtectionGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/DisassociateDrProtectionGroup.ts.html |here} to see how to use DisassociateDrProtectionGroup API.
   */
  public async disassociateDrProtectionGroup(
    disassociateDrProtectionGroupRequest: requests.DisassociateDrProtectionGroupRequest
  ): Promise<responses.DisassociateDrProtectionGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#disassociateDrProtectionGroup.");
    const operationName = "disassociateDrProtectionGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{drProtectionGroupId}": disassociateDrProtectionGroupRequest.drProtectionGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": disassociateDrProtectionGroupRequest.ifMatch,
      "opc-retry-token": disassociateDrProtectionGroupRequest.opcRetryToken,
      "opc-request-id": disassociateDrProtectionGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      disassociateDrProtectionGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drProtectionGroups/{drProtectionGroupId}/actions/disassociate",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        disassociateDrProtectionGroupRequest.disassociateDrProtectionGroupDetails,
        "DisassociateDrProtectionGroupDetails",
        model.DisassociateDrProtectionGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DisassociateDrProtectionGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get details for the DR plan identified by *drPlanId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDrPlanRequest
   * @return GetDrPlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/GetDrPlan.ts.html |here} to see how to use GetDrPlan API.
   */
  public async getDrPlan(
    getDrPlanRequest: requests.GetDrPlanRequest
  ): Promise<responses.GetDrPlanResponse> {
    if (this.logger) this.logger.debug("Calling operation DisasterRecoveryClient#getDrPlan.");
    const operationName = "getDrPlan";
    const apiReferenceLink = "";
    const pathParams = {
      "{drPlanId}": getDrPlanRequest.drPlanId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDrPlanRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDrPlanRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlans/{drPlanId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDrPlanResponse>{},
        body: await response.json(),
        bodyKey: "drPlan",
        bodyModel: model.DrPlan,
        type: "model.DrPlan",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get details for the DR plan execution identified by *drPlanExecutionId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDrPlanExecutionRequest
   * @return GetDrPlanExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/GetDrPlanExecution.ts.html |here} to see how to use GetDrPlanExecution API.
   */
  public async getDrPlanExecution(
    getDrPlanExecutionRequest: requests.GetDrPlanExecutionRequest
  ): Promise<responses.GetDrPlanExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#getDrPlanExecution.");
    const operationName = "getDrPlanExecution";
    const apiReferenceLink = "";
    const pathParams = {
      "{drPlanExecutionId}": getDrPlanExecutionRequest.drPlanExecutionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDrPlanExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDrPlanExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlanExecutions/{drPlanExecutionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDrPlanExecutionResponse>{},
        body: await response.json(),
        bodyKey: "drPlanExecution",
        bodyModel: model.DrPlanExecution,
        type: "model.DrPlanExecution",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the DR protection group identified by *drProtectionGroupId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDrProtectionGroupRequest
   * @return GetDrProtectionGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/GetDrProtectionGroup.ts.html |here} to see how to use GetDrProtectionGroup API.
   */
  public async getDrProtectionGroup(
    getDrProtectionGroupRequest: requests.GetDrProtectionGroupRequest
  ): Promise<responses.GetDrProtectionGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#getDrProtectionGroup.");
    const operationName = "getDrProtectionGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{drProtectionGroupId}": getDrProtectionGroupRequest.drProtectionGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDrProtectionGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDrProtectionGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drProtectionGroups/{drProtectionGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDrProtectionGroupResponse>{},
        body: await response.json(),
        bodyKey: "drProtectionGroup",
        bodyModel: model.DrProtectionGroup,
        type: "model.DrProtectionGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the status of the work request identified by *workRequestId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DisasterRecoveryClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Ignore the failed group or step in DR plan execution identified by *drPlanExecutionId* and resume execution.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param IgnoreDrPlanExecutionRequest
   * @return IgnoreDrPlanExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/IgnoreDrPlanExecution.ts.html |here} to see how to use IgnoreDrPlanExecution API.
   */
  public async ignoreDrPlanExecution(
    ignoreDrPlanExecutionRequest: requests.IgnoreDrPlanExecutionRequest
  ): Promise<responses.IgnoreDrPlanExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#ignoreDrPlanExecution.");
    const operationName = "ignoreDrPlanExecution";
    const apiReferenceLink = "";
    const pathParams = {
      "{drPlanExecutionId}": ignoreDrPlanExecutionRequest.drPlanExecutionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": ignoreDrPlanExecutionRequest.ifMatch,
      "opc-retry-token": ignoreDrPlanExecutionRequest.opcRetryToken,
      "opc-request-id": ignoreDrPlanExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      ignoreDrPlanExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlanExecutions/{drPlanExecutionId}/actions/ignore",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        ignoreDrPlanExecutionRequest.ignoreDrPlanExecutionDetails,
        "IgnoreDrPlanExecutionDetails",
        model.IgnoreDrPlanExecutionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.IgnoreDrPlanExecutionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a summary list of all DR plan executions for a DR protection group.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDrPlanExecutionsRequest
   * @return ListDrPlanExecutionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/ListDrPlanExecutions.ts.html |here} to see how to use ListDrPlanExecutions API.
   */
  public async listDrPlanExecutions(
    listDrPlanExecutionsRequest: requests.ListDrPlanExecutionsRequest
  ): Promise<responses.ListDrPlanExecutionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#listDrPlanExecutions.");
    const operationName = "listDrPlanExecutions";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "drProtectionGroupId": listDrPlanExecutionsRequest.drProtectionGroupId,
      "lifecycleState": listDrPlanExecutionsRequest.lifecycleState,
      "drPlanExecutionId": listDrPlanExecutionsRequest.drPlanExecutionId,
      "displayName": listDrPlanExecutionsRequest.displayName,
      "limit": listDrPlanExecutionsRequest.limit,
      "page": listDrPlanExecutionsRequest.page,
      "sortOrder": listDrPlanExecutionsRequest.sortOrder,
      "sortBy": listDrPlanExecutionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDrPlanExecutionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDrPlanExecutionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlanExecutions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDrPlanExecutionsResponse>{},
        body: await response.json(),
        bodyKey: "drPlanExecutionCollection",
        bodyModel: model.DrPlanExecutionCollection,
        type: "model.DrPlanExecutionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a summary list of all DR plans for a DR protection group.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDrPlansRequest
   * @return ListDrPlansResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/ListDrPlans.ts.html |here} to see how to use ListDrPlans API.
   */
  public async listDrPlans(
    listDrPlansRequest: requests.ListDrPlansRequest
  ): Promise<responses.ListDrPlansResponse> {
    if (this.logger) this.logger.debug("Calling operation DisasterRecoveryClient#listDrPlans.");
    const operationName = "listDrPlans";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "drProtectionGroupId": listDrPlansRequest.drProtectionGroupId,
      "lifecycleState": listDrPlansRequest.lifecycleState,
      "drPlanId": listDrPlansRequest.drPlanId,
      "drPlanType": listDrPlansRequest.drPlanType,
      "displayName": listDrPlansRequest.displayName,
      "limit": listDrPlansRequest.limit,
      "page": listDrPlansRequest.page,
      "sortOrder": listDrPlansRequest.sortOrder,
      "sortBy": listDrPlansRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDrPlansRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDrPlansRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlans",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDrPlansResponse>{},
        body: await response.json(),
        bodyKey: "drPlanCollection",
        bodyModel: model.DrPlanCollection,
        type: "model.DrPlanCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a summary list of all DR protection groups in a compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDrProtectionGroupsRequest
   * @return ListDrProtectionGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/ListDrProtectionGroups.ts.html |here} to see how to use ListDrProtectionGroups API.
   */
  public async listDrProtectionGroups(
    listDrProtectionGroupsRequest: requests.ListDrProtectionGroupsRequest
  ): Promise<responses.ListDrProtectionGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#listDrProtectionGroups.");
    const operationName = "listDrProtectionGroups";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDrProtectionGroupsRequest.compartmentId,
      "lifecycleState": listDrProtectionGroupsRequest.lifecycleState,
      "drProtectionGroupId": listDrProtectionGroupsRequest.drProtectionGroupId,
      "displayName": listDrProtectionGroupsRequest.displayName,
      "limit": listDrProtectionGroupsRequest.limit,
      "page": listDrProtectionGroupsRequest.page,
      "sortOrder": listDrProtectionGroupsRequest.sortOrder,
      "sortBy": listDrProtectionGroupsRequest.sortBy,
      "role": listDrProtectionGroupsRequest.role,
      "lifecycleSubState": listDrProtectionGroupsRequest.lifecycleSubState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDrProtectionGroupsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDrProtectionGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drProtectionGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDrProtectionGroupsResponse>{},
        body: await response.json(),
        bodyKey: "drProtectionGroupCollection",
        bodyModel: model.DrProtectionGroupCollection,
        type: "model.DrProtectionGroupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a list of work request errors for the work request identified by *workRequestId*.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a list of logs for the work request identified by *workRequestId*.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Pause the DR plan execution identified by *drPlanExecutionId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PauseDrPlanExecutionRequest
   * @return PauseDrPlanExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/PauseDrPlanExecution.ts.html |here} to see how to use PauseDrPlanExecution API.
   */
  public async pauseDrPlanExecution(
    pauseDrPlanExecutionRequest: requests.PauseDrPlanExecutionRequest
  ): Promise<responses.PauseDrPlanExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#pauseDrPlanExecution.");
    const operationName = "pauseDrPlanExecution";
    const apiReferenceLink = "";
    const pathParams = {
      "{drPlanExecutionId}": pauseDrPlanExecutionRequest.drPlanExecutionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": pauseDrPlanExecutionRequest.ifMatch,
      "opc-retry-token": pauseDrPlanExecutionRequest.opcRetryToken,
      "opc-request-id": pauseDrPlanExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      pauseDrPlanExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlanExecutions/{drPlanExecutionId}/actions/pause",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        pauseDrPlanExecutionRequest.pauseDrPlanExecutionDetails,
        "PauseDrPlanExecutionDetails",
        model.PauseDrPlanExecutionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PauseDrPlanExecutionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Resume the DR plan execution identified by *drPlanExecutionId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ResumeDrPlanExecutionRequest
   * @return ResumeDrPlanExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/ResumeDrPlanExecution.ts.html |here} to see how to use ResumeDrPlanExecution API.
   */
  public async resumeDrPlanExecution(
    resumeDrPlanExecutionRequest: requests.ResumeDrPlanExecutionRequest
  ): Promise<responses.ResumeDrPlanExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#resumeDrPlanExecution.");
    const operationName = "resumeDrPlanExecution";
    const apiReferenceLink = "";
    const pathParams = {
      "{drPlanExecutionId}": resumeDrPlanExecutionRequest.drPlanExecutionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": resumeDrPlanExecutionRequest.ifMatch,
      "opc-retry-token": resumeDrPlanExecutionRequest.opcRetryToken,
      "opc-request-id": resumeDrPlanExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      resumeDrPlanExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlanExecutions/{drPlanExecutionId}/actions/resume",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        resumeDrPlanExecutionRequest.resumeDrPlanExecutionDetails,
        "ResumeDrPlanExecutionDetails",
        model.ResumeDrPlanExecutionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ResumeDrPlanExecutionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retry the failed group or step in DR plan execution identified by *drPlanExecutionId* and resume execution.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RetryDrPlanExecutionRequest
   * @return RetryDrPlanExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/RetryDrPlanExecution.ts.html |here} to see how to use RetryDrPlanExecution API.
   */
  public async retryDrPlanExecution(
    retryDrPlanExecutionRequest: requests.RetryDrPlanExecutionRequest
  ): Promise<responses.RetryDrPlanExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#retryDrPlanExecution.");
    const operationName = "retryDrPlanExecution";
    const apiReferenceLink = "";
    const pathParams = {
      "{drPlanExecutionId}": retryDrPlanExecutionRequest.drPlanExecutionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": retryDrPlanExecutionRequest.ifMatch,
      "opc-retry-token": retryDrPlanExecutionRequest.opcRetryToken,
      "opc-request-id": retryDrPlanExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      retryDrPlanExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlanExecutions/{drPlanExecutionId}/actions/retry",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        retryDrPlanExecutionRequest.retryDrPlanExecutionDetails,
        "RetryDrPlanExecutionDetails",
        model.RetryDrPlanExecutionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RetryDrPlanExecutionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the DR plan identified by *drPlanId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDrPlanRequest
   * @return UpdateDrPlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/UpdateDrPlan.ts.html |here} to see how to use UpdateDrPlan API.
   */
  public async updateDrPlan(
    updateDrPlanRequest: requests.UpdateDrPlanRequest
  ): Promise<responses.UpdateDrPlanResponse> {
    if (this.logger) this.logger.debug("Calling operation DisasterRecoveryClient#updateDrPlan.");
    const operationName = "updateDrPlan";
    const apiReferenceLink = "";
    const pathParams = {
      "{drPlanId}": updateDrPlanRequest.drPlanId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDrPlanRequest.ifMatch,
      "opc-request-id": updateDrPlanRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDrPlanRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlans/{drPlanId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrPlanRequest.updateDrPlanDetails,
        "UpdateDrPlanDetails",
        model.UpdateDrPlanDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrPlanResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the DR plan execution identified by *drPlanExecutionId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDrPlanExecutionRequest
   * @return UpdateDrPlanExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/UpdateDrPlanExecution.ts.html |here} to see how to use UpdateDrPlanExecution API.
   */
  public async updateDrPlanExecution(
    updateDrPlanExecutionRequest: requests.UpdateDrPlanExecutionRequest
  ): Promise<responses.UpdateDrPlanExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#updateDrPlanExecution.");
    const operationName = "updateDrPlanExecution";
    const apiReferenceLink = "";
    const pathParams = {
      "{drPlanExecutionId}": updateDrPlanExecutionRequest.drPlanExecutionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDrPlanExecutionRequest.ifMatch,
      "opc-request-id": updateDrPlanExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDrPlanExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drPlanExecutions/{drPlanExecutionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrPlanExecutionRequest.updateDrPlanExecutionDetails,
        "UpdateDrPlanExecutionDetails",
        model.UpdateDrPlanExecutionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrPlanExecutionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the DR protection group identified by *drProtectionGroupId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDrProtectionGroupRequest
   * @return UpdateDrProtectionGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/UpdateDrProtectionGroup.ts.html |here} to see how to use UpdateDrProtectionGroup API.
   */
  public async updateDrProtectionGroup(
    updateDrProtectionGroupRequest: requests.UpdateDrProtectionGroupRequest
  ): Promise<responses.UpdateDrProtectionGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#updateDrProtectionGroup.");
    const operationName = "updateDrProtectionGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{drProtectionGroupId}": updateDrProtectionGroupRequest.drProtectionGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDrProtectionGroupRequest.ifMatch,
      "opc-request-id": updateDrProtectionGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDrProtectionGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drProtectionGroups/{drProtectionGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrProtectionGroupRequest.updateDrProtectionGroupDetails,
        "UpdateDrProtectionGroupDetails",
        model.UpdateDrProtectionGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrProtectionGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the role of the DR protection group identified by *drProtectionGroupId*.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDrProtectionGroupRoleRequest
   * @return UpdateDrProtectionGroupRoleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/disasterrecovery/UpdateDrProtectionGroupRole.ts.html |here} to see how to use UpdateDrProtectionGroupRole API.
   */
  public async updateDrProtectionGroupRole(
    updateDrProtectionGroupRoleRequest: requests.UpdateDrProtectionGroupRoleRequest
  ): Promise<responses.UpdateDrProtectionGroupRoleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DisasterRecoveryClient#updateDrProtectionGroupRole.");
    const operationName = "updateDrProtectionGroupRole";
    const apiReferenceLink = "";
    const pathParams = {
      "{drProtectionGroupId}": updateDrProtectionGroupRoleRequest.drProtectionGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDrProtectionGroupRoleRequest.ifMatch,
      "opc-retry-token": updateDrProtectionGroupRoleRequest.opcRetryToken,
      "opc-request-id": updateDrProtectionGroupRoleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDrProtectionGroupRoleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drProtectionGroups/{drProtectionGroupId}/actions/updateRole",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrProtectionGroupRoleRequest.updateDrProtectionGroupRoleDetails,
        "UpdateDrProtectionGroupRoleDetails",
        model.UpdateDrProtectionGroupRoleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrProtectionGroupRoleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
