/**
 * Object Storage Service API
 * Use Object Storage and Archive Storage APIs to manage buckets, objects, and related resources.
For more information, see [Overview of Object Storage](/Content/Object/Concepts/objectstorageoverview.htm) and
[Overview of Archive Storage](/Content/Archive/Concepts/archivestorageoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: opc_casper_users_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import {
  paginateRecords,
  paginateResponses,
  genericPaginateRecords,
  genericPaginateResponses
} from "oci-common";
import { ObjectStorageWaiter } from "./objectstorage-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ObjectStorageApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ObjectStorageClient {
  protected static serviceEndpointTemplate = "https://objectstorage.{region}.{secondLevelDomain}";
  protected static endpointServiceName = "objectstorage";
  protected static serviceEndpointTemplatePerRealm = {
    "oc1": "https://{namespaceName+Dot}objectstorage.{region}.oci.customer-oci.com"
  };
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ObjectStorageWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "ObjectStorage";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("objectstorage")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("objectstorage");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    if (this.logger) this.logger.info(`ObjectStorageClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        ObjectStorageClient.serviceEndpointTemplate,
        this._region,
        ObjectStorageClient.endpointServiceName,
        ObjectStorageClient.serviceEndpointTemplatePerRealm,
        this._realmSpecificEndpointTemplateEnabled
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        ObjectStorageClient.serviceEndpointTemplate,
        this._regionId,
        ObjectStorageClient.endpointServiceName,
        ObjectStorageClient.serviceEndpointTemplatePerRealm,
        this._realmSpecificEndpointTemplateEnabled
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ObjectStorageClient.serviceEndpointTemplate,
      region,
      ObjectStorageClient.endpointServiceName,
      ObjectStorageClient.serviceEndpointTemplatePerRealm,
      this._realmSpecificEndpointTemplateEnabled
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ObjectStorageClient.serviceEndpointTemplate,
      regionId,
      ObjectStorageClient.endpointServiceName,
      ObjectStorageClient.serviceEndpointTemplatePerRealm,
      this._realmSpecificEndpointTemplateEnabled
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new ObjectStorageWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ObjectStorageWaiter {
    this._waiters = new ObjectStorageWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ObjectStorageWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Aborts an in-progress multipart upload and deletes all parts that have been uploaded.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AbortMultipartUploadRequest
   * @return AbortMultipartUploadResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/AbortMultipartUpload.ts.html |here} to see how to use AbortMultipartUpload API.
   */
  public async abortMultipartUpload(
    abortMultipartUploadRequest: requests.AbortMultipartUploadRequest
  ): Promise<responses.AbortMultipartUploadResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#abortMultipartUpload.");
    const operationName = "abortMultipartUpload";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/MultipartUpload/AbortMultipartUpload";
    const pathParams = {
      "{namespaceName}": abortMultipartUploadRequest.namespaceName,
      "{bucketName}": abortMultipartUploadRequest.bucketName,
      "{objectName}": abortMultipartUploadRequest.objectName
    };

    const queryParams = {
      "uploadId": abortMultipartUploadRequest.uploadId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": abortMultipartUploadRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>([
      "namespaceName",
      "bucketName",
      "objectName",
      "uploadId"
    ]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      abortMultipartUploadRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/u/{objectName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AbortMultipartUploadResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancels a work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#cancelWorkRequest.");
    const operationName = "cancelWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/WorkRequest/CancelWorkRequest";
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": cancelWorkRequestRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["workRequestId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Commits a multipart upload, which involves checking part numbers and entity tags (ETags) of the parts, to create an aggregate object.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CommitMultipartUploadRequest
   * @return CommitMultipartUploadResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CommitMultipartUpload.ts.html |here} to see how to use CommitMultipartUpload API.
   */
  public async commitMultipartUpload(
    commitMultipartUploadRequest: requests.CommitMultipartUploadRequest
  ): Promise<responses.CommitMultipartUploadResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#commitMultipartUpload.");
    const operationName = "commitMultipartUpload";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/MultipartUpload/CommitMultipartUpload";
    const pathParams = {
      "{namespaceName}": commitMultipartUploadRequest.namespaceName,
      "{bucketName}": commitMultipartUploadRequest.bucketName,
      "{objectName}": commitMultipartUploadRequest.objectName
    };

    const queryParams = {
      "uploadId": commitMultipartUploadRequest.uploadId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": commitMultipartUploadRequest.ifMatch,
      "if-none-match": commitMultipartUploadRequest.ifNoneMatch,
      "opc-client-request-id": commitMultipartUploadRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>([
      "namespaceName",
      "bucketName",
      "objectName",
      "uploadId"
    ]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      commitMultipartUploadRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/u/{objectName}",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        commitMultipartUploadRequest.commitMultipartUploadDetails,
        "CommitMultipartUploadDetails",
        model.CommitMultipartUploadDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CommitMultipartUploadResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-multipart-md5"),
            key: "opcMultipartMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          },
          {
            value: response.headers.get("version-id"),
            key: "versionId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a request to copy an object within a region or to another region.
* <p>
See [Object Names](https://docs.cloud.oracle.com/Content/Object/Tasks/managingobjects.htm#namerequirements)
* for object naming requirements.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CopyObjectRequest
     * @return CopyObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CopyObject.ts.html |here} to see how to use CopyObject API.
     */
  public async copyObject(
    copyObjectRequest: requests.CopyObjectRequest
  ): Promise<responses.CopyObjectResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#copyObject.");
    const operationName = "copyObject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Object/CopyObject";
    const pathParams = {
      "{namespaceName}": copyObjectRequest.namespaceName,
      "{bucketName}": copyObjectRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": copyObjectRequest.opcClientRequestId,
      "opc-sse-customer-algorithm": copyObjectRequest.opcSseCustomerAlgorithm,
      "opc-sse-customer-key": copyObjectRequest.opcSseCustomerKey,
      "opc-sse-customer-key-sha256": copyObjectRequest.opcSseCustomerKeySha256,
      "opc-source-sse-customer-algorithm": copyObjectRequest.opcSourceSseCustomerAlgorithm,
      "opc-source-sse-customer-key": copyObjectRequest.opcSourceSseCustomerKey,
      "opc-source-sse-customer-key-sha256": copyObjectRequest.opcSourceSseCustomerKeySha256,
      "opc-sse-kms-key-id": copyObjectRequest.opcSseKmsKeyId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      copyObjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/actions/copyObject",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        copyObjectRequest.copyObjectDetails,
        "CopyObjectDetails",
        model.CopyObjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CopyObjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a bucket in the given namespace with a bucket name and optional user-defined metadata. Avoid entering
   * confidential information in bucket names.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateBucketRequest
   * @return CreateBucketResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CreateBucket.ts.html |here} to see how to use CreateBucket API.
   */
  public async createBucket(
    createBucketRequest: requests.CreateBucketRequest
  ): Promise<responses.CreateBucketResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#createBucket.");
    const operationName = "createBucket";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Bucket/CreateBucket";
    const pathParams = {
      "{namespaceName}": createBucketRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": createBucketRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBucketRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBucketRequest.createBucketDetails,
        "CreateBucketDetails",
        model.CreateBucketDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBucketResponse>{},
        body: await response.json(),
        bodyKey: "bucket",
        bodyModel: model.Bucket,
        type: "model.Bucket",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Starts a new multipart upload to a specific object in the given bucket in the given namespace.
* <p>
See [Object Names](https://docs.cloud.oracle.com/Content/Object/Tasks/managingobjects.htm#namerequirements)
* for object naming requirements.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMultipartUploadRequest
     * @return CreateMultipartUploadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CreateMultipartUpload.ts.html |here} to see how to use CreateMultipartUpload API.
     */
  public async createMultipartUpload(
    createMultipartUploadRequest: requests.CreateMultipartUploadRequest
  ): Promise<responses.CreateMultipartUploadResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#createMultipartUpload.");
    const operationName = "createMultipartUpload";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/MultipartUpload/CreateMultipartUpload";
    const pathParams = {
      "{namespaceName}": createMultipartUploadRequest.namespaceName,
      "{bucketName}": createMultipartUploadRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": createMultipartUploadRequest.ifMatch,
      "if-none-match": createMultipartUploadRequest.ifNoneMatch,
      "opc-client-request-id": createMultipartUploadRequest.opcClientRequestId,
      "opc-sse-customer-algorithm": createMultipartUploadRequest.opcSseCustomerAlgorithm,
      "opc-sse-customer-key": createMultipartUploadRequest.opcSseCustomerKey,
      "opc-sse-customer-key-sha256": createMultipartUploadRequest.opcSseCustomerKeySha256,
      "opc-sse-kms-key-id": createMultipartUploadRequest.opcSseKmsKeyId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMultipartUploadRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/u",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMultipartUploadRequest.createMultipartUploadDetails,
        "CreateMultipartUploadDetails",
        model.CreateMultipartUploadDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMultipartUploadResponse>{},
        body: await response.json(),
        bodyKey: "multipartUpload",
        bodyModel: model.MultipartUpload,
        type: "model.MultipartUpload",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a pre-authenticated request specific to the bucket.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreatePreauthenticatedRequestRequest
   * @return CreatePreauthenticatedRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CreatePreauthenticatedRequest.ts.html |here} to see how to use CreatePreauthenticatedRequest API.
   */
  public async createPreauthenticatedRequest(
    createPreauthenticatedRequestRequest: requests.CreatePreauthenticatedRequestRequest
  ): Promise<responses.CreatePreauthenticatedRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#createPreauthenticatedRequest.");
    const operationName = "createPreauthenticatedRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/PreauthenticatedRequest/CreatePreauthenticatedRequest";
    const pathParams = {
      "{namespaceName}": createPreauthenticatedRequestRequest.namespaceName,
      "{bucketName}": createPreauthenticatedRequestRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": createPreauthenticatedRequestRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPreauthenticatedRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/p",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPreauthenticatedRequestRequest.createPreauthenticatedRequestDetails,
        "CreatePreauthenticatedRequestDetails",
        model.CreatePreauthenticatedRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePreauthenticatedRequestResponse>{},
        body: await response.json(),
        bodyKey: "preauthenticatedRequest",
        bodyModel: model.PreauthenticatedRequest,
        type: "model.PreauthenticatedRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a PrivateEndpoint.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreatePrivateEndpointRequest
   * @return CreatePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CreatePrivateEndpoint.ts.html |here} to see how to use CreatePrivateEndpoint API.
   */
  public async createPrivateEndpoint(
    createPrivateEndpointRequest: requests.CreatePrivateEndpointRequest
  ): Promise<responses.CreatePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#createPrivateEndpoint.");
    const operationName = "createPrivateEndpoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/PrivateEndpoint/CreatePrivateEndpoint";
    const pathParams = {
      "{namespaceName}": createPrivateEndpointRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": createPrivateEndpointRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/pe",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPrivateEndpointRequest.createPrivateEndpointDetails,
        "CreatePrivateEndpointDetails",
        model.CreatePrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a replication policy for the specified bucket.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateReplicationPolicyRequest
   * @return CreateReplicationPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CreateReplicationPolicy.ts.html |here} to see how to use CreateReplicationPolicy API.
   */
  public async createReplicationPolicy(
    createReplicationPolicyRequest: requests.CreateReplicationPolicyRequest
  ): Promise<responses.CreateReplicationPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#createReplicationPolicy.");
    const operationName = "createReplicationPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Replication/CreateReplicationPolicy";
    const pathParams = {
      "{namespaceName}": createReplicationPolicyRequest.namespaceName,
      "{bucketName}": createReplicationPolicyRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": createReplicationPolicyRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createReplicationPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/replicationPolicies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createReplicationPolicyRequest.createReplicationPolicyDetails,
        "CreateReplicationPolicyDetails",
        model.CreateReplicationPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateReplicationPolicyResponse>{},
        body: await response.json(),
        bodyKey: "replicationPolicy",
        bodyModel: model.ReplicationPolicy,
        type: "model.ReplicationPolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new retention rule in the specified bucket. The new rule will take effect typically within 30 seconds.
   * Note that a maximum of 100 rules are supported on a bucket.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateRetentionRuleRequest
   * @return CreateRetentionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CreateRetentionRule.ts.html |here} to see how to use CreateRetentionRule API.
   */
  public async createRetentionRule(
    createRetentionRuleRequest: requests.CreateRetentionRuleRequest
  ): Promise<responses.CreateRetentionRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#createRetentionRule.");
    const operationName = "createRetentionRule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/RetentionRule/CreateRetentionRule";
    const pathParams = {
      "{namespaceName}": createRetentionRuleRequest.namespaceName,
      "{bucketName}": createRetentionRuleRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": createRetentionRuleRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createRetentionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/retentionRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRetentionRuleRequest.createRetentionRuleDetails,
        "CreateRetentionRuleDetails",
        model.CreateRetentionRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRetentionRuleResponse>{},
        body: await response.json(),
        bodyKey: "retentionRule",
        bodyModel: model.RetentionRule,
        type: "model.RetentionRule",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a bucket if the bucket is already empty. If the bucket is not empty, use
   * {@link #deleteObject(DeleteObjectRequest) deleteObject} first. In addition,
   * you cannot delete a bucket that has a multipart upload in progress or a pre-authenticated
   * request associated with that bucket.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteBucketRequest
   * @return DeleteBucketResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeleteBucket.ts.html |here} to see how to use DeleteBucket API.
   */
  public async deleteBucket(
    deleteBucketRequest: requests.DeleteBucketRequest
  ): Promise<responses.DeleteBucketResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#deleteBucket.");
    const operationName = "deleteBucket";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Bucket/DeleteBucket";
    const pathParams = {
      "{namespaceName}": deleteBucketRequest.namespaceName,
      "{bucketName}": deleteBucketRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteBucketRequest.ifMatch,
      "opc-client-request-id": deleteBucketRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBucketRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBucketResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an object.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteObjectRequest
   * @return DeleteObjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeleteObject.ts.html |here} to see how to use DeleteObject API.
   */
  public async deleteObject(
    deleteObjectRequest: requests.DeleteObjectRequest
  ): Promise<responses.DeleteObjectResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#deleteObject.");
    const operationName = "deleteObject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Object/DeleteObject";
    const pathParams = {
      "{namespaceName}": deleteObjectRequest.namespaceName,
      "{bucketName}": deleteObjectRequest.bucketName,
      "{objectName}": deleteObjectRequest.objectName
    };

    const queryParams = {
      "versionId": deleteObjectRequest.versionId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteObjectRequest.ifMatch,
      "opc-client-request-id": deleteObjectRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName", "objectName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteObjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/o/{objectName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteObjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          },
          {
            value: response.headers.get("version-id"),
            key: "versionId",
            dataType: "string"
          },
          {
            value: response.headers.get("is-delete-marker"),
            key: "isDeleteMarker",
            dataType: "boolean"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the object lifecycle policy for the bucket.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteObjectLifecyclePolicyRequest
   * @return DeleteObjectLifecyclePolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeleteObjectLifecyclePolicy.ts.html |here} to see how to use DeleteObjectLifecyclePolicy API.
   */
  public async deleteObjectLifecyclePolicy(
    deleteObjectLifecyclePolicyRequest: requests.DeleteObjectLifecyclePolicyRequest
  ): Promise<responses.DeleteObjectLifecyclePolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#deleteObjectLifecyclePolicy.");
    const operationName = "deleteObjectLifecyclePolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/ObjectLifecyclePolicy/DeleteObjectLifecyclePolicy";
    const pathParams = {
      "{namespaceName}": deleteObjectLifecyclePolicyRequest.namespaceName,
      "{bucketName}": deleteObjectLifecyclePolicyRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": deleteObjectLifecyclePolicyRequest.opcClientRequestId,
      "if-match": deleteObjectLifecyclePolicyRequest.ifMatch
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteObjectLifecyclePolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/l",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteObjectLifecyclePolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the pre-authenticated request for the bucket.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeletePreauthenticatedRequestRequest
   * @return DeletePreauthenticatedRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeletePreauthenticatedRequest.ts.html |here} to see how to use DeletePreauthenticatedRequest API.
   */
  public async deletePreauthenticatedRequest(
    deletePreauthenticatedRequestRequest: requests.DeletePreauthenticatedRequestRequest
  ): Promise<responses.DeletePreauthenticatedRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#deletePreauthenticatedRequest.");
    const operationName = "deletePreauthenticatedRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/PreauthenticatedRequest/DeletePreauthenticatedRequest";
    const pathParams = {
      "{namespaceName}": deletePreauthenticatedRequestRequest.namespaceName,
      "{bucketName}": deletePreauthenticatedRequestRequest.bucketName,
      "{parId}": deletePreauthenticatedRequestRequest.parId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": deletePreauthenticatedRequestRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName", "parId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePreauthenticatedRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/p/{parId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePreauthenticatedRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Private Endpoint if it exists in the given namespace.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeletePrivateEndpointRequest
   * @return DeletePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeletePrivateEndpoint.ts.html |here} to see how to use DeletePrivateEndpoint API.
   */
  public async deletePrivateEndpoint(
    deletePrivateEndpointRequest: requests.DeletePrivateEndpointRequest
  ): Promise<responses.DeletePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#deletePrivateEndpoint.");
    const operationName = "deletePrivateEndpoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/PrivateEndpoint/DeletePrivateEndpoint";
    const pathParams = {
      "{namespaceName}": deletePrivateEndpointRequest.namespaceName,
      "{peName}": deletePrivateEndpointRequest.peName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePrivateEndpointRequest.ifMatch,
      "opc-client-request-id": deletePrivateEndpointRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "peName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/pe/{peName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the replication policy associated with the source bucket.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteReplicationPolicyRequest
   * @return DeleteReplicationPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeleteReplicationPolicy.ts.html |here} to see how to use DeleteReplicationPolicy API.
   */
  public async deleteReplicationPolicy(
    deleteReplicationPolicyRequest: requests.DeleteReplicationPolicyRequest
  ): Promise<responses.DeleteReplicationPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#deleteReplicationPolicy.");
    const operationName = "deleteReplicationPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Replication/DeleteReplicationPolicy";
    const pathParams = {
      "{namespaceName}": deleteReplicationPolicyRequest.namespaceName,
      "{bucketName}": deleteReplicationPolicyRequest.bucketName,
      "{replicationId}": deleteReplicationPolicyRequest.replicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": deleteReplicationPolicyRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName", "replicationId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteReplicationPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/replicationPolicies/{replicationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteReplicationPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified rule. The deletion takes effect typically within 30 seconds.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteRetentionRuleRequest
   * @return DeleteRetentionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeleteRetentionRule.ts.html |here} to see how to use DeleteRetentionRule API.
   */
  public async deleteRetentionRule(
    deleteRetentionRuleRequest: requests.DeleteRetentionRuleRequest
  ): Promise<responses.DeleteRetentionRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#deleteRetentionRule.");
    const operationName = "deleteRetentionRule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/RetentionRule/DeleteRetentionRule";
    const pathParams = {
      "{namespaceName}": deleteRetentionRuleRequest.namespaceName,
      "{bucketName}": deleteRetentionRuleRequest.bucketName,
      "{retentionRuleId}": deleteRetentionRuleRequest.retentionRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRetentionRuleRequest.ifMatch,
      "opc-client-request-id": deleteRetentionRuleRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName", "retentionRuleId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteRetentionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/retentionRules/{retentionRuleId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRetentionRuleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the current representation of the given bucket in the given Object Storage namespace.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetBucketRequest
   * @return GetBucketResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetBucket.ts.html |here} to see how to use GetBucket API.
   */
  public async getBucket(
    getBucketRequest: requests.GetBucketRequest
  ): Promise<responses.GetBucketResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#getBucket.");
    const operationName = "getBucket";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Bucket/GetBucket";
    const pathParams = {
      "{namespaceName}": getBucketRequest.namespaceName,
      "{bucketName}": getBucketRequest.bucketName
    };

    const queryParams = {
      "fields": getBucketRequest.fields
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": getBucketRequest.ifMatch,
      "if-none-match": getBucketRequest.ifNoneMatch,
      "opc-client-request-id": getBucketRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBucketRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBucketResponse>{},
        body: await response.json(),
        bodyKey: "bucket",
        bodyModel: model.Bucket,
        type: "model.Bucket",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Each Oracle Cloud Infrastructure tenant is assigned one unique and uneditable Object Storage namespace. The namespace
* is a system-generated string assigned during account creation. For some older tenancies, the namespace string may be
* the tenancy name in all lower-case letters. You cannot edit a namespace.
* <p>
GetNamespace returns the name of the Object Storage namespace for the user making the request.
* If an optional compartmentId query parameter is provided, GetNamespace returns the namespace name of the corresponding
* tenancy, provided the user has access to it.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetNamespaceRequest
     * @return GetNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetNamespace.ts.html |here} to see how to use GetNamespace API.
     */
  public async getNamespace(
    getNamespaceRequest: requests.GetNamespaceRequest
  ): Promise<responses.GetNamespaceResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#getNamespace.");
    const operationName = "getNamespace";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Namespace/GetNamespace";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getNamespaceRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": getNamespaceRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>([]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNamespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNamespaceResponse>{},
        body: await response.json(),
        bodyKey: "value",
        bodyModel: "string",
        type: "string",
        responseHeaders: []
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets the metadata for the Object Storage namespace, which contains defaultS3CompartmentId and
* defaultSwiftCompartmentId.
* <p>
Any user with the OBJECTSTORAGE_NAMESPACE_READ permission will be able to see the current metadata. If you are
* not authorized, talk to an administrator. If you are an administrator who needs to write policies
* to give users access, see
* [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetNamespaceMetadataRequest
     * @return GetNamespaceMetadataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetNamespaceMetadata.ts.html |here} to see how to use GetNamespaceMetadata API.
     */
  public async getNamespaceMetadata(
    getNamespaceMetadataRequest: requests.GetNamespaceMetadataRequest
  ): Promise<responses.GetNamespaceMetadataResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#getNamespaceMetadata.");
    const operationName = "getNamespaceMetadata";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Namespace/GetNamespaceMetadata";
    const pathParams = {
      "{namespaceName}": getNamespaceMetadataRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": getNamespaceMetadataRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNamespaceMetadataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNamespaceMetadataResponse>{},
        body: await response.json(),
        bodyKey: "namespaceMetadata",
        bodyModel: model.NamespaceMetadata,
        type: "model.NamespaceMetadata",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the metadata and body of an object.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetObjectRequest
   * @return GetObjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetObject.ts.html |here} to see how to use GetObject API.
   */
  public async getObject(
    getObjectRequest: requests.GetObjectRequest
  ): Promise<responses.GetObjectResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#getObject.");
    const operationName = "getObject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Object/GetObject";
    const pathParams = {
      "{namespaceName}": getObjectRequest.namespaceName,
      "{bucketName}": getObjectRequest.bucketName,
      "{objectName}": getObjectRequest.objectName
    };

    const queryParams = {
      "versionId": getObjectRequest.versionId,
      "httpResponseContentDisposition": getObjectRequest.httpResponseContentDisposition,
      "httpResponseCacheControl": getObjectRequest.httpResponseCacheControl,
      "httpResponseContentType": getObjectRequest.httpResponseContentType,
      "httpResponseContentLanguage": getObjectRequest.httpResponseContentLanguage,
      "httpResponseContentEncoding": getObjectRequest.httpResponseContentEncoding,
      "httpResponseExpires": getObjectRequest.httpResponseExpires
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": getObjectRequest.ifMatch,
      "if-none-match": getObjectRequest.ifNoneMatch,
      "opc-client-request-id": getObjectRequest.opcClientRequestId,
      "range": getObjectRequest.range,
      "opc-sse-customer-algorithm": getObjectRequest.opcSseCustomerAlgorithm,
      "opc-sse-customer-key": getObjectRequest.opcSseCustomerKey,
      "opc-sse-customer-key-sha256": getObjectRequest.opcSseCustomerKeySha256
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName", "objectName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getObjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/o/{objectName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetObjectResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("content-range"),
            key: "contentRange",
            dataType: "common.Range"
          },
          {
            value: response.headers.get("content-md5"),
            key: "contentMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-multipart-md5"),
            key: "opcMultipartMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("content-type"),
            key: "contentType",
            dataType: "string"
          },
          {
            value: response.headers.get("content-language"),
            key: "contentLanguage",
            dataType: "string"
          },
          {
            value: response.headers.get("content-encoding"),
            key: "contentEncoding",
            dataType: "string"
          },
          {
            value: response.headers.get("cache-control"),
            key: "cacheControl",
            dataType: "string"
          },
          {
            value: response.headers.get("content-disposition"),
            key: "contentDisposition",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          },
          {
            value: response.headers.get("storage-tier"),
            key: "storageTier",
            dataType: "string"
          },
          {
            value: response.headers.get("archival-state"),
            key: "archivalState",
            dataType: "string"
          },
          {
            value: response.headers.get("time-of-archival"),
            key: "timeOfArchival",
            dataType: "Date"
          },
          {
            value: response.headers.get("version-id"),
            key: "versionId",
            dataType: "string"
          },
          {
            value: response.headers.get("expires"),
            key: "expires",
            dataType: "Date"
          }
        ]
      });
      const opcMeta = {};
      const pattern: string = "opc-meta-";
      response.headers.forEach((v, k) => {
        if (k.startsWith(pattern)) {
          Object.assign(opcMeta, { [k]: v });
        }
      });
      sdkResponse.opcMeta = opcMeta;

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the object lifecycle policy for the bucket.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetObjectLifecyclePolicyRequest
   * @return GetObjectLifecyclePolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetObjectLifecyclePolicy.ts.html |here} to see how to use GetObjectLifecyclePolicy API.
   */
  public async getObjectLifecyclePolicy(
    getObjectLifecyclePolicyRequest: requests.GetObjectLifecyclePolicyRequest
  ): Promise<responses.GetObjectLifecyclePolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#getObjectLifecyclePolicy.");
    const operationName = "getObjectLifecyclePolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/ObjectLifecyclePolicy/GetObjectLifecyclePolicy";
    const pathParams = {
      "{namespaceName}": getObjectLifecyclePolicyRequest.namespaceName,
      "{bucketName}": getObjectLifecyclePolicyRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": getObjectLifecyclePolicyRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getObjectLifecyclePolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/l",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetObjectLifecyclePolicyResponse>{},
        body: await response.json(),
        bodyKey: "objectLifecyclePolicy",
        bodyModel: model.ObjectLifecyclePolicy,
        type: "model.ObjectLifecyclePolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the pre-authenticated request for the bucket.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPreauthenticatedRequestRequest
   * @return GetPreauthenticatedRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetPreauthenticatedRequest.ts.html |here} to see how to use GetPreauthenticatedRequest API.
   */
  public async getPreauthenticatedRequest(
    getPreauthenticatedRequestRequest: requests.GetPreauthenticatedRequestRequest
  ): Promise<responses.GetPreauthenticatedRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#getPreauthenticatedRequest.");
    const operationName = "getPreauthenticatedRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/PreauthenticatedRequest/GetPreauthenticatedRequest";
    const pathParams = {
      "{namespaceName}": getPreauthenticatedRequestRequest.namespaceName,
      "{bucketName}": getPreauthenticatedRequestRequest.bucketName,
      "{parId}": getPreauthenticatedRequestRequest.parId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": getPreauthenticatedRequestRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName", "parId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPreauthenticatedRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/p/{parId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPreauthenticatedRequestResponse>{},
        body: await response.json(),
        bodyKey: "preauthenticatedRequestSummary",
        bodyModel: model.PreauthenticatedRequestSummary,
        type: "model.PreauthenticatedRequestSummary",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the current representation of the given Private Endpoint in the given Object Storage namespace.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPrivateEndpointRequest
   * @return GetPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetPrivateEndpoint.ts.html |here} to see how to use GetPrivateEndpoint API.
   */
  public async getPrivateEndpoint(
    getPrivateEndpointRequest: requests.GetPrivateEndpointRequest
  ): Promise<responses.GetPrivateEndpointResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#getPrivateEndpoint.");
    const operationName = "getPrivateEndpoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/PrivateEndpoint/GetPrivateEndpoint";
    const pathParams = {
      "{namespaceName}": getPrivateEndpointRequest.namespaceName,
      "{peName}": getPrivateEndpointRequest.peName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": getPrivateEndpointRequest.ifMatch,
      "if-none-match": getPrivateEndpointRequest.ifNoneMatch,
      "opc-client-request-id": getPrivateEndpointRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "peName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/pe/{peName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "privateEndpoint",
        bodyModel: model.PrivateEndpoint,
        type: "model.PrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("eTag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the replication policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetReplicationPolicyRequest
   * @return GetReplicationPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetReplicationPolicy.ts.html |here} to see how to use GetReplicationPolicy API.
   */
  public async getReplicationPolicy(
    getReplicationPolicyRequest: requests.GetReplicationPolicyRequest
  ): Promise<responses.GetReplicationPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#getReplicationPolicy.");
    const operationName = "getReplicationPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Replication/GetReplicationPolicy";
    const pathParams = {
      "{namespaceName}": getReplicationPolicyRequest.namespaceName,
      "{bucketName}": getReplicationPolicyRequest.bucketName,
      "{replicationId}": getReplicationPolicyRequest.replicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": getReplicationPolicyRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName", "replicationId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getReplicationPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/replicationPolicies/{replicationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetReplicationPolicyResponse>{},
        body: await response.json(),
        bodyKey: "replicationPolicy",
        bodyModel: model.ReplicationPolicy,
        type: "model.ReplicationPolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the specified retention rule.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetRetentionRuleRequest
   * @return GetRetentionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetRetentionRule.ts.html |here} to see how to use GetRetentionRule API.
   */
  public async getRetentionRule(
    getRetentionRuleRequest: requests.GetRetentionRuleRequest
  ): Promise<responses.GetRetentionRuleResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#getRetentionRule.");
    const operationName = "getRetentionRule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/RetentionRule/GetRetentionRule";
    const pathParams = {
      "{namespaceName}": getRetentionRuleRequest.namespaceName,
      "{bucketName}": getRetentionRuleRequest.bucketName,
      "{retentionRuleId}": getRetentionRuleRequest.retentionRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": getRetentionRuleRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName", "retentionRuleId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRetentionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/retentionRules/{retentionRuleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRetentionRuleResponse>{},
        body: await response.json(),
        bodyKey: "retentionRule",
        bodyModel: model.RetentionRule,
        type: "model.RetentionRule",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request for the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": getWorkRequestRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["workRequestId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Efficiently checks to see if a bucket exists and gets the current entity tag (ETag) for the bucket.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param HeadBucketRequest
   * @return HeadBucketResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/HeadBucket.ts.html |here} to see how to use HeadBucket API.
   */
  public async headBucket(
    headBucketRequest: requests.HeadBucketRequest
  ): Promise<responses.HeadBucketResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#headBucket.");
    const operationName = "headBucket";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Bucket/HeadBucket";
    const pathParams = {
      "{namespaceName}": headBucketRequest.namespaceName,
      "{bucketName}": headBucketRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": headBucketRequest.ifMatch,
      "if-none-match": headBucketRequest.ifNoneMatch,
      "opc-client-request-id": headBucketRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      headBucketRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}",
      method: "HEAD",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.HeadBucketResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the user-defined metadata and entity tag (ETag) for an object.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param HeadObjectRequest
   * @return HeadObjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/HeadObject.ts.html |here} to see how to use HeadObject API.
   */
  public async headObject(
    headObjectRequest: requests.HeadObjectRequest
  ): Promise<responses.HeadObjectResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#headObject.");
    const operationName = "headObject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Object/HeadObject";
    const pathParams = {
      "{namespaceName}": headObjectRequest.namespaceName,
      "{bucketName}": headObjectRequest.bucketName,
      "{objectName}": headObjectRequest.objectName
    };

    const queryParams = {
      "versionId": headObjectRequest.versionId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": headObjectRequest.ifMatch,
      "if-none-match": headObjectRequest.ifNoneMatch,
      "opc-client-request-id": headObjectRequest.opcClientRequestId,
      "opc-sse-customer-algorithm": headObjectRequest.opcSseCustomerAlgorithm,
      "opc-sse-customer-key": headObjectRequest.opcSseCustomerKey,
      "opc-sse-customer-key-sha256": headObjectRequest.opcSseCustomerKeySha256
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName", "objectName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      headObjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/o/{objectName}",
      method: "HEAD",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.HeadObjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("content-md5"),
            key: "contentMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-multipart-md5"),
            key: "opcMultipartMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("content-type"),
            key: "contentType",
            dataType: "string"
          },
          {
            value: response.headers.get("content-language"),
            key: "contentLanguage",
            dataType: "string"
          },
          {
            value: response.headers.get("content-encoding"),
            key: "contentEncoding",
            dataType: "string"
          },
          {
            value: response.headers.get("cache-control"),
            key: "cacheControl",
            dataType: "string"
          },
          {
            value: response.headers.get("content-disposition"),
            key: "contentDisposition",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          },
          {
            value: response.headers.get("storage-tier"),
            key: "storageTier",
            dataType: "string"
          },
          {
            value: response.headers.get("archival-state"),
            key: "archivalState",
            dataType: "string"
          },
          {
            value: response.headers.get("time-of-archival"),
            key: "timeOfArchival",
            dataType: "Date"
          },
          {
            value: response.headers.get("version-id"),
            key: "versionId",
            dataType: "string"
          }
        ]
      });
      const opcMeta = {};
      const pattern: string = "opc-meta-";
      response.headers.forEach((v, k) => {
        if (k.startsWith(pattern)) {
          Object.assign(opcMeta, { [k]: v });
        }
      });
      sdkResponse.opcMeta = opcMeta;

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets a list of all BucketSummary items in a compartment. A BucketSummary contains only summary fields for the bucket
* and does not contain fields like the user-defined metadata.
* <p>
ListBuckets returns a BucketSummary containing at most 1000 buckets. To paginate through more buckets, use the returned
* `opc-next-page` value with the `page` request parameter.
* <p>
To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
* talk to an administrator. If you are an administrator who needs to write policies to give users access, see
* [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListBucketsRequest
     * @return ListBucketsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListBuckets.ts.html |here} to see how to use ListBuckets API.
     */
  public async listBuckets(
    listBucketsRequest: requests.ListBucketsRequest
  ): Promise<responses.ListBucketsResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#listBuckets.");
    const operationName = "listBuckets";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Bucket/ListBuckets";
    const pathParams = {
      "{namespaceName}": listBucketsRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": listBucketsRequest.compartmentId,
      "limit": listBucketsRequest.limit,
      "page": listBucketsRequest.page,
      "fields": listBucketsRequest.fields
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": listBucketsRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "compartmentId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBucketsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBucketsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.BucketSummary,
        type: "Array<model.BucketSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listBucketsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.BucketSummary objects
   * contained in responses from the listBuckets operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBuckets(
    request: requests.ListBucketsRequest
  ): AsyncIterableIterator<model.BucketSummary> {
    return paginateRecords(request, req => this.listBuckets(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listBucketsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listBuckets operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBucketsResponses(
    request: requests.ListBucketsRequest
  ): AsyncIterableIterator<responses.ListBucketsResponse> {
    return paginateResponses(request, req => this.listBuckets(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.BucketSummary objects
   * contained in responses from the listBuckets operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBucketsRecordIterator(
    request: requests.ListBucketsRequest
  ): AsyncIterableIterator<model.BucketSummary> {
    return paginateRecords(request, req => this.listBuckets(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listBuckets operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBucketsResponseIterator(
    request: requests.ListBucketsRequest
  ): AsyncIterableIterator<responses.ListBucketsResponse> {
    return paginateResponses(request, req => this.listBuckets(req));
  }

  /**
   * Lists the parts of an in-progress multipart upload.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMultipartUploadPartsRequest
   * @return ListMultipartUploadPartsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListMultipartUploadParts.ts.html |here} to see how to use ListMultipartUploadParts API.
   */
  public async listMultipartUploadParts(
    listMultipartUploadPartsRequest: requests.ListMultipartUploadPartsRequest
  ): Promise<responses.ListMultipartUploadPartsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#listMultipartUploadParts.");
    const operationName = "listMultipartUploadParts";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/MultipartUpload/ListMultipartUploadParts";
    const pathParams = {
      "{namespaceName}": listMultipartUploadPartsRequest.namespaceName,
      "{bucketName}": listMultipartUploadPartsRequest.bucketName,
      "{objectName}": listMultipartUploadPartsRequest.objectName
    };

    const queryParams = {
      "uploadId": listMultipartUploadPartsRequest.uploadId,
      "limit": listMultipartUploadPartsRequest.limit,
      "page": listMultipartUploadPartsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": listMultipartUploadPartsRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>([
      "namespaceName",
      "bucketName",
      "objectName",
      "uploadId"
    ]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMultipartUploadPartsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/u/{objectName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMultipartUploadPartsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.MultipartUploadPartSummary,
        type: "Array<model.MultipartUploadPartSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listMultipartUploadPartsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.MultipartUploadPartSummary objects
   * contained in responses from the listMultipartUploadParts operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllMultipartUploadParts(
    request: requests.ListMultipartUploadPartsRequest
  ): AsyncIterableIterator<model.MultipartUploadPartSummary> {
    return paginateRecords(request, req => this.listMultipartUploadParts(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listMultipartUploadPartsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listMultipartUploadParts operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllMultipartUploadPartsResponses(
    request: requests.ListMultipartUploadPartsRequest
  ): AsyncIterableIterator<responses.ListMultipartUploadPartsResponse> {
    return paginateResponses(request, req => this.listMultipartUploadParts(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.MultipartUploadPartSummary objects
   * contained in responses from the listMultipartUploadParts operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listMultipartUploadPartsRecordIterator(
    request: requests.ListMultipartUploadPartsRequest
  ): AsyncIterableIterator<model.MultipartUploadPartSummary> {
    return paginateRecords(request, req => this.listMultipartUploadParts(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listMultipartUploadParts operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listMultipartUploadPartsResponseIterator(
    request: requests.ListMultipartUploadPartsRequest
  ): AsyncIterableIterator<responses.ListMultipartUploadPartsResponse> {
    return paginateResponses(request, req => this.listMultipartUploadParts(req));
  }

  /**
   * Lists all of the in-progress multipart uploads for the given bucket in the given Object Storage namespace.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMultipartUploadsRequest
   * @return ListMultipartUploadsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListMultipartUploads.ts.html |here} to see how to use ListMultipartUploads API.
   */
  public async listMultipartUploads(
    listMultipartUploadsRequest: requests.ListMultipartUploadsRequest
  ): Promise<responses.ListMultipartUploadsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#listMultipartUploads.");
    const operationName = "listMultipartUploads";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/MultipartUpload/ListMultipartUploads";
    const pathParams = {
      "{namespaceName}": listMultipartUploadsRequest.namespaceName,
      "{bucketName}": listMultipartUploadsRequest.bucketName
    };

    const queryParams = {
      "limit": listMultipartUploadsRequest.limit,
      "page": listMultipartUploadsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": listMultipartUploadsRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMultipartUploadsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/u",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMultipartUploadsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.MultipartUpload,
        type: "Array<model.MultipartUpload>",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listMultipartUploadsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.MultipartUpload objects
   * contained in responses from the listMultipartUploads operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllMultipartUploads(
    request: requests.ListMultipartUploadsRequest
  ): AsyncIterableIterator<model.MultipartUpload> {
    return paginateRecords(request, req => this.listMultipartUploads(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listMultipartUploadsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listMultipartUploads operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllMultipartUploadsResponses(
    request: requests.ListMultipartUploadsRequest
  ): AsyncIterableIterator<responses.ListMultipartUploadsResponse> {
    return paginateResponses(request, req => this.listMultipartUploads(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.MultipartUpload objects
   * contained in responses from the listMultipartUploads operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listMultipartUploadsRecordIterator(
    request: requests.ListMultipartUploadsRequest
  ): AsyncIterableIterator<model.MultipartUpload> {
    return paginateRecords(request, req => this.listMultipartUploads(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listMultipartUploads operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listMultipartUploadsResponseIterator(
    request: requests.ListMultipartUploadsRequest
  ): AsyncIterableIterator<responses.ListMultipartUploadsResponse> {
    return paginateResponses(request, req => this.listMultipartUploads(req));
  }

  /**
     * Lists the object versions in a bucket.
* <p>
ListObjectVersions returns an ObjectVersionCollection containing at most 1000 object versions. To paginate through
* more object versions, use the returned `opc-next-page` value with the `page` request parameter.
* <p>
To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
* talk to an administrator. If you are an administrator who needs to write policies to give users access, see
* [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListObjectVersionsRequest
     * @return ListObjectVersionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListObjectVersions.ts.html |here} to see how to use ListObjectVersions API.
     */
  public async listObjectVersions(
    listObjectVersionsRequest: requests.ListObjectVersionsRequest
  ): Promise<responses.ListObjectVersionsResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#listObjectVersions.");
    const operationName = "listObjectVersions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Object/ListObjectVersions";
    const pathParams = {
      "{namespaceName}": listObjectVersionsRequest.namespaceName,
      "{bucketName}": listObjectVersionsRequest.bucketName
    };

    const queryParams = {
      "prefix": listObjectVersionsRequest.prefix,
      "start": listObjectVersionsRequest.start,
      "end": listObjectVersionsRequest.end,
      "limit": listObjectVersionsRequest.limit,
      "delimiter": listObjectVersionsRequest.delimiter,
      "fields": listObjectVersionsRequest.fields,
      "startAfter": listObjectVersionsRequest.startAfter,
      "page": listObjectVersionsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": listObjectVersionsRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listObjectVersionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/objectversions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListObjectVersionsResponse>{},
        body: await response.json(),
        bodyKey: "objectVersionCollection",
        bodyModel: model.ObjectVersionCollection,
        type: "model.ObjectVersionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Lists the objects in a bucket. By default, ListObjects returns object names only. See the `fields`
* parameter for other fields that you can optionally include in ListObjects response.
* <p>
ListObjects returns at most 1000 objects. To paginate through more objects, use the returned 'nextStartWith'
* value with the 'start' parameter. To filter which objects ListObjects returns, use the 'start' and 'end'
* parameters.
* <p>
To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
* talk to an administrator. If you are an administrator who needs to write policies to give users access, see
* [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListObjectsRequest
     * @return ListObjectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListObjects.ts.html |here} to see how to use ListObjects API.
     */
  public async listObjects(
    listObjectsRequest: requests.ListObjectsRequest
  ): Promise<responses.ListObjectsResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#listObjects.");
    const operationName = "listObjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Object/ListObjects";
    const pathParams = {
      "{namespaceName}": listObjectsRequest.namespaceName,
      "{bucketName}": listObjectsRequest.bucketName
    };

    const queryParams = {
      "prefix": listObjectsRequest.prefix,
      "start": listObjectsRequest.start,
      "end": listObjectsRequest.end,
      "limit": listObjectsRequest.limit,
      "delimiter": listObjectsRequest.delimiter,
      "fields": listObjectsRequest.fields,
      "startAfter": listObjectsRequest.startAfter
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": listObjectsRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listObjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/o",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListObjectsResponse>{},
        body: await response.json(),
        bodyKey: "listObjects",
        bodyModel: model.ListObjects,
        type: "model.ListObjects",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listObjectsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ObjectSummary objects
   * contained in responses from the listObjects operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllObjects(
    request: requests.ListObjectsRequest
  ): AsyncIterableIterator<model.ObjectSummary> {
    return genericPaginateRecords(
      request,
      req => this.listObjects(req),
      res => res.listObjects.nextStartWith,
      (req, nextPageToken) => (req.start = nextPageToken),
      res => res.listObjects.objects
    );
  }

  /**
   * NOTE: This function is deprecated in favor of listObjectsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listObjects operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllObjectsResponses(
    request: requests.ListObjectsRequest
  ): AsyncIterableIterator<responses.ListObjectsResponse> {
    return genericPaginateResponses(
      request,
      req => this.listObjects(req),
      res => res.listObjects.nextStartWith,
      (req, nextPageToken) => (req.start = nextPageToken)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the models.ObjectSummary objects
   * contained in responses from the listObjects operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listObjectsRecordIterator(
    request: requests.ListObjectsRequest
  ): AsyncIterableIterator<model.ObjectSummary> {
    return genericPaginateRecords(
      request,
      req => this.listObjects(req),
      res => res.listObjects.nextStartWith,
      (req, nextPageToken) => (req.start = nextPageToken),
      res => res.listObjects.objects
    );
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listObjects operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listObjectsResponseIterator(
    request: requests.ListObjectsRequest
  ): AsyncIterableIterator<responses.ListObjectsResponse> {
    return genericPaginateResponses(
      request,
      req => this.listObjects(req),
      res => res.listObjects.nextStartWith,
      (req, nextPageToken) => (req.start = nextPageToken)
    );
  }

  /**
   * Lists pre-authenticated requests for the bucket.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPreauthenticatedRequestsRequest
   * @return ListPreauthenticatedRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListPreauthenticatedRequests.ts.html |here} to see how to use ListPreauthenticatedRequests API.
   */
  public async listPreauthenticatedRequests(
    listPreauthenticatedRequestsRequest: requests.ListPreauthenticatedRequestsRequest
  ): Promise<responses.ListPreauthenticatedRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#listPreauthenticatedRequests.");
    const operationName = "listPreauthenticatedRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/PreauthenticatedRequest/ListPreauthenticatedRequests";
    const pathParams = {
      "{namespaceName}": listPreauthenticatedRequestsRequest.namespaceName,
      "{bucketName}": listPreauthenticatedRequestsRequest.bucketName
    };

    const queryParams = {
      "objectNamePrefix": listPreauthenticatedRequestsRequest.objectNamePrefix,
      "limit": listPreauthenticatedRequestsRequest.limit,
      "page": listPreauthenticatedRequestsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": listPreauthenticatedRequestsRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPreauthenticatedRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/p",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPreauthenticatedRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PreauthenticatedRequestSummary,
        type: "Array<model.PreauthenticatedRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPreauthenticatedRequestsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.PreauthenticatedRequestSummary objects
   * contained in responses from the listPreauthenticatedRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPreauthenticatedRequests(
    request: requests.ListPreauthenticatedRequestsRequest
  ): AsyncIterableIterator<model.PreauthenticatedRequestSummary> {
    return paginateRecords(request, req => this.listPreauthenticatedRequests(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPreauthenticatedRequestsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPreauthenticatedRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPreauthenticatedRequestsResponses(
    request: requests.ListPreauthenticatedRequestsRequest
  ): AsyncIterableIterator<responses.ListPreauthenticatedRequestsResponse> {
    return paginateResponses(request, req => this.listPreauthenticatedRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.PreauthenticatedRequestSummary objects
   * contained in responses from the listPreauthenticatedRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPreauthenticatedRequestsRecordIterator(
    request: requests.ListPreauthenticatedRequestsRequest
  ): AsyncIterableIterator<model.PreauthenticatedRequestSummary> {
    return paginateRecords(request, req => this.listPreauthenticatedRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPreauthenticatedRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPreauthenticatedRequestsResponseIterator(
    request: requests.ListPreauthenticatedRequestsRequest
  ): AsyncIterableIterator<responses.ListPreauthenticatedRequestsResponse> {
    return paginateResponses(request, req => this.listPreauthenticatedRequests(req));
  }

  /**
   * Gets a list of all PrivateEndpointSummary in a compartment associated with a namespace.
   * To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
   * talk to an administrator. If you are an administrator who needs to write policies to give users access, see
   * [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPrivateEndpointsRequest
   * @return ListPrivateEndpointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListPrivateEndpoints.ts.html |here} to see how to use ListPrivateEndpoints API.
   */
  public async listPrivateEndpoints(
    listPrivateEndpointsRequest: requests.ListPrivateEndpointsRequest
  ): Promise<responses.ListPrivateEndpointsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#listPrivateEndpoints.");
    const operationName = "listPrivateEndpoints";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/PrivateEndpointSummary/ListPrivateEndpoints";
    const pathParams = {
      "{namespaceName}": listPrivateEndpointsRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": listPrivateEndpointsRequest.compartmentId,
      "limit": listPrivateEndpointsRequest.limit,
      "page": listPrivateEndpointsRequest.page,
      "fields": listPrivateEndpointsRequest.fields,
      "lifecycleState": listPrivateEndpointsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": listPrivateEndpointsRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "compartmentId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPrivateEndpointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/pe",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPrivateEndpointsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PrivateEndpointSummary,
        type: "Array<model.PrivateEndpointSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPrivateEndpointsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.PrivateEndpointSummary objects
   * contained in responses from the listPrivateEndpoints operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPrivateEndpoints(
    request: requests.ListPrivateEndpointsRequest
  ): AsyncIterableIterator<model.PrivateEndpointSummary> {
    return paginateRecords(request, req => this.listPrivateEndpoints(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPrivateEndpointsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPrivateEndpoints operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPrivateEndpointsResponses(
    request: requests.ListPrivateEndpointsRequest
  ): AsyncIterableIterator<responses.ListPrivateEndpointsResponse> {
    return paginateResponses(request, req => this.listPrivateEndpoints(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.PrivateEndpointSummary objects
   * contained in responses from the listPrivateEndpoints operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPrivateEndpointsRecordIterator(
    request: requests.ListPrivateEndpointsRequest
  ): AsyncIterableIterator<model.PrivateEndpointSummary> {
    return paginateRecords(request, req => this.listPrivateEndpoints(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPrivateEndpoints operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPrivateEndpointsResponseIterator(
    request: requests.ListPrivateEndpointsRequest
  ): AsyncIterableIterator<responses.ListPrivateEndpointsResponse> {
    return paginateResponses(request, req => this.listPrivateEndpoints(req));
  }

  /**
   * List the replication policies associated with a bucket.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListReplicationPoliciesRequest
   * @return ListReplicationPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListReplicationPolicies.ts.html |here} to see how to use ListReplicationPolicies API.
   */
  public async listReplicationPolicies(
    listReplicationPoliciesRequest: requests.ListReplicationPoliciesRequest
  ): Promise<responses.ListReplicationPoliciesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#listReplicationPolicies.");
    const operationName = "listReplicationPolicies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Replication/ListReplicationPolicies";
    const pathParams = {
      "{namespaceName}": listReplicationPoliciesRequest.namespaceName,
      "{bucketName}": listReplicationPoliciesRequest.bucketName
    };

    const queryParams = {
      "page": listReplicationPoliciesRequest.page,
      "limit": listReplicationPoliciesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": listReplicationPoliciesRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listReplicationPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/replicationPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListReplicationPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ReplicationPolicySummary,
        type: "Array<model.ReplicationPolicySummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listReplicationPoliciesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ReplicationPolicySummary objects
   * contained in responses from the listReplicationPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllReplicationPolicies(
    request: requests.ListReplicationPoliciesRequest
  ): AsyncIterableIterator<model.ReplicationPolicySummary> {
    return paginateRecords(request, req => this.listReplicationPolicies(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listReplicationPoliciesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listReplicationPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllReplicationPoliciesResponses(
    request: requests.ListReplicationPoliciesRequest
  ): AsyncIterableIterator<responses.ListReplicationPoliciesResponse> {
    return paginateResponses(request, req => this.listReplicationPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ReplicationPolicySummary objects
   * contained in responses from the listReplicationPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listReplicationPoliciesRecordIterator(
    request: requests.ListReplicationPoliciesRequest
  ): AsyncIterableIterator<model.ReplicationPolicySummary> {
    return paginateRecords(request, req => this.listReplicationPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listReplicationPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listReplicationPoliciesResponseIterator(
    request: requests.ListReplicationPoliciesRequest
  ): AsyncIterableIterator<responses.ListReplicationPoliciesResponse> {
    return paginateResponses(request, req => this.listReplicationPolicies(req));
  }

  /**
   * List the replication sources of a destination bucket.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListReplicationSourcesRequest
   * @return ListReplicationSourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListReplicationSources.ts.html |here} to see how to use ListReplicationSources API.
   */
  public async listReplicationSources(
    listReplicationSourcesRequest: requests.ListReplicationSourcesRequest
  ): Promise<responses.ListReplicationSourcesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#listReplicationSources.");
    const operationName = "listReplicationSources";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Replication/ListReplicationSources";
    const pathParams = {
      "{namespaceName}": listReplicationSourcesRequest.namespaceName,
      "{bucketName}": listReplicationSourcesRequest.bucketName
    };

    const queryParams = {
      "page": listReplicationSourcesRequest.page,
      "limit": listReplicationSourcesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": listReplicationSourcesRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listReplicationSourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/replicationSources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListReplicationSourcesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ReplicationSource,
        type: "Array<model.ReplicationSource>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listReplicationSourcesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ReplicationSource objects
   * contained in responses from the listReplicationSources operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllReplicationSources(
    request: requests.ListReplicationSourcesRequest
  ): AsyncIterableIterator<model.ReplicationSource> {
    return paginateRecords(request, req => this.listReplicationSources(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listReplicationSourcesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listReplicationSources operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllReplicationSourcesResponses(
    request: requests.ListReplicationSourcesRequest
  ): AsyncIterableIterator<responses.ListReplicationSourcesResponse> {
    return paginateResponses(request, req => this.listReplicationSources(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ReplicationSource objects
   * contained in responses from the listReplicationSources operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listReplicationSourcesRecordIterator(
    request: requests.ListReplicationSourcesRequest
  ): AsyncIterableIterator<model.ReplicationSource> {
    return paginateRecords(request, req => this.listReplicationSources(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listReplicationSources operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listReplicationSourcesResponseIterator(
    request: requests.ListReplicationSourcesRequest
  ): AsyncIterableIterator<responses.ListReplicationSourcesResponse> {
    return paginateResponses(request, req => this.listReplicationSources(req));
  }

  /**
   * List the retention rules for a bucket. The retention rules are sorted based on creation time,
   * with the most recently created retention rule returned first.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListRetentionRulesRequest
   * @return ListRetentionRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListRetentionRules.ts.html |here} to see how to use ListRetentionRules API.
   */
  public async listRetentionRules(
    listRetentionRulesRequest: requests.ListRetentionRulesRequest
  ): Promise<responses.ListRetentionRulesResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#listRetentionRules.");
    const operationName = "listRetentionRules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/RetentionRule/ListRetentionRules";
    const pathParams = {
      "{namespaceName}": listRetentionRulesRequest.namespaceName,
      "{bucketName}": listRetentionRulesRequest.bucketName
    };

    const queryParams = {
      "page": listRetentionRulesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRetentionRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/retentionRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRetentionRulesResponse>{},
        body: await response.json(),
        bodyKey: "retentionRuleCollection",
        bodyModel: model.RetentionRuleCollection,
        type: "model.RetentionRuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the errors of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/WorkRequestError/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": listWorkRequestErrorsRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["workRequestId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsRecordIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsResponseIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Lists the logs of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/WorkRequestLogEntry/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": listWorkRequestLogsRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["workRequestId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLogEntry,
        type: "Array<model.WorkRequestLogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsRecordIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsResponseIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/WorkRequest/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "privateEndpointName": listWorkRequestsRequest.privateEndpointName,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": listWorkRequestsRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["compartmentId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestSummary,
        type: "Array<model.WorkRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsRecordIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsResponseIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Stops replication to the destination bucket and removes the replication policy. When the replication
   * policy was created, this destination bucket became read-only except for new and changed objects replicated
   * automatically from the source bucket. MakeBucketWritable removes the replication policy. This bucket is no
   * longer the target for replication and is now writable, allowing users to make changes to bucket contents.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param MakeBucketWritableRequest
   * @return MakeBucketWritableResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/MakeBucketWritable.ts.html |here} to see how to use MakeBucketWritable API.
   */
  public async makeBucketWritable(
    makeBucketWritableRequest: requests.MakeBucketWritableRequest
  ): Promise<responses.MakeBucketWritableResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#makeBucketWritable.");
    const operationName = "makeBucketWritable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Replication/MakeBucketWritable";
    const pathParams = {
      "{namespaceName}": makeBucketWritableRequest.namespaceName,
      "{bucketName}": makeBucketWritableRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": makeBucketWritableRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      makeBucketWritableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/actions/makeBucketWritable",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.MakeBucketWritableResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new object or overwrites an existing object with the same name. The maximum object size allowed by
* PutObject is 50 GiB.
* <p>
See [Object Names](https://docs.cloud.oracle.com/Content/Object/Tasks/managingobjects.htm#namerequirements)
* for object naming requirements. 
* <p>
See [Special Instructions for Object Storage PUT](https://docs.cloud.oracle.com/Content/API/Concepts/signingrequests.htm#ObjectStoragePut)
* for request signature requirements.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PutObjectRequest
     * @return PutObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/PutObject.ts.html |here} to see how to use PutObject API.
     */
  public async putObject(
    putObjectRequest: requests.PutObjectRequest
  ): Promise<responses.PutObjectResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#putObject.");
    const operationName = "putObject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Object/PutObject";
    const pathParams = {
      "{namespaceName}": putObjectRequest.namespaceName,
      "{bucketName}": putObjectRequest.bucketName,
      "{objectName}": putObjectRequest.objectName
    };

    const queryParams = {};

    let headerParams = {
      "if-match": putObjectRequest.ifMatch,
      "if-none-match": putObjectRequest.ifNoneMatch,
      "opc-client-request-id": putObjectRequest.opcClientRequestId,
      "Expect": putObjectRequest.expect,
      "Content-Length": putObjectRequest.contentLength,
      "Content-MD5": putObjectRequest.contentMD5,
      "Content-Type": putObjectRequest.contentType,
      "Content-Language": putObjectRequest.contentLanguage,
      "Content-Encoding": putObjectRequest.contentEncoding,
      "Content-Disposition": putObjectRequest.contentDisposition,
      "Cache-Control": putObjectRequest.cacheControl,
      "opc-sse-customer-algorithm": putObjectRequest.opcSseCustomerAlgorithm,
      "opc-sse-customer-key": putObjectRequest.opcSseCustomerKey,
      "opc-sse-customer-key-sha256": putObjectRequest.opcSseCustomerKeySha256,
      "opc-sse-kms-key-id": putObjectRequest.opcSseKmsKeyId,
      "storage-tier": putObjectRequest.storageTier
    };

    if (putObjectRequest.opcMeta) {
      Object.entries(putObjectRequest.opcMeta).forEach(([key, value]) => {
        Object.assign(headerParams, { ["opc-meta-" + key]: value });
      });
    }
    const requiredParams = new Set<string>(["namespaceName", "bucketName", "objectName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putObjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/o/{objectName}",
      method: "PUT",
      bodyContent: putObjectRequest.putObjectBody,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink,
        true
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutObjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-content-md5"),
            key: "opcContentMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          },
          {
            value: response.headers.get("version-id"),
            key: "versionId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates or replaces the object lifecycle policy for the bucket.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PutObjectLifecyclePolicyRequest
   * @return PutObjectLifecyclePolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/PutObjectLifecyclePolicy.ts.html |here} to see how to use PutObjectLifecyclePolicy API.
   */
  public async putObjectLifecyclePolicy(
    putObjectLifecyclePolicyRequest: requests.PutObjectLifecyclePolicyRequest
  ): Promise<responses.PutObjectLifecyclePolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#putObjectLifecyclePolicy.");
    const operationName = "putObjectLifecyclePolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/ObjectLifecyclePolicy/PutObjectLifecyclePolicy";
    const pathParams = {
      "{namespaceName}": putObjectLifecyclePolicyRequest.namespaceName,
      "{bucketName}": putObjectLifecyclePolicyRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": putObjectLifecyclePolicyRequest.opcClientRequestId,
      "if-match": putObjectLifecyclePolicyRequest.ifMatch,
      "if-none-match": putObjectLifecyclePolicyRequest.ifNoneMatch
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putObjectLifecyclePolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/l",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putObjectLifecyclePolicyRequest.putObjectLifecyclePolicyDetails,
        "PutObjectLifecyclePolicyDetails",
        model.PutObjectLifecyclePolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutObjectLifecyclePolicyResponse>{},
        body: await response.json(),
        bodyKey: "objectLifecyclePolicy",
        bodyModel: model.ObjectLifecyclePolicy,
        type: "model.ObjectLifecyclePolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Re-encrypts the unique data encryption key that encrypts each object written to the bucket by using the most recent 
* version of the master encryption key assigned to the bucket. (All data encryption keys are encrypted by a master 
* encryption key. Master encryption keys are assigned to buckets and managed by Oracle by default, but you can assign 
* a key that you created and control through the Oracle Cloud Infrastructure Key Management service.) The kmsKeyId property 
* of the bucket determines which master encryption key is assigned to the bucket. If you assigned a different Key Management 
* master encryption key to the bucket, you can call this API to re-encrypt all data encryption keys with the newly 
* assigned key. Similarly, you might want to re-encrypt all data encryption keys if the assigned key has been rotated to 
* a new key version since objects were last added to the bucket. If you call this API and there is no kmsKeyId associated 
* with the bucket, the call will fail.
* <p>
Calling this API starts a work request task to re-encrypt the data encryption key of all objects in the bucket. Only 
* objects created before the time of the API call will be re-encrypted. The call can take a long time, depending on how many 
* objects are in the bucket and how big they are. This API returns a work request ID that you can use to retrieve the status 
* of the work request task.
* All the versions of objects will be re-encrypted whether versioning is enabled or suspended at the bucket.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ReencryptBucketRequest
     * @return ReencryptBucketResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ReencryptBucket.ts.html |here} to see how to use ReencryptBucket API.
     */
  public async reencryptBucket(
    reencryptBucketRequest: requests.ReencryptBucketRequest
  ): Promise<responses.ReencryptBucketResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#reencryptBucket.");
    const operationName = "reencryptBucket";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Bucket/ReencryptBucket";
    const pathParams = {
      "{namespaceName}": reencryptBucketRequest.namespaceName,
      "{bucketName}": reencryptBucketRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": reencryptBucketRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      reencryptBucketRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/actions/reencrypt",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ReencryptBucketResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Re-encrypts the data encryption keys that encrypt the object and its chunks. By default, when you create a bucket, the Object Storage
* service manages the master encryption key used to encrypt each object's data encryption keys. The encryption mechanism that you specify for
* the bucket applies to the objects it contains.
* <p>
You can alternatively employ one of these encryption strategies for an object:
* <p>
- You can assign a key that you created and control through the Oracle Cloud Infrastructure Vault service.
* <p>
- You can encrypt an object using your own encryption key. The key you supply is known as a customer-provided encryption key (SSE-C).
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ReencryptObjectRequest
     * @return ReencryptObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ReencryptObject.ts.html |here} to see how to use ReencryptObject API.
     */
  public async reencryptObject(
    reencryptObjectRequest: requests.ReencryptObjectRequest
  ): Promise<responses.ReencryptObjectResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#reencryptObject.");
    const operationName = "reencryptObject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Object/ReencryptObject";
    const pathParams = {
      "{namespaceName}": reencryptObjectRequest.namespaceName,
      "{bucketName}": reencryptObjectRequest.bucketName,
      "{objectName}": reencryptObjectRequest.objectName
    };

    const queryParams = {
      "versionId": reencryptObjectRequest.versionId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": reencryptObjectRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName", "objectName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      reencryptObjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/actions/reencrypt/{objectName}",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        reencryptObjectRequest.reencryptObjectDetails,
        "ReencryptObjectDetails",
        model.ReencryptObjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ReencryptObjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Rename an object in the given Object Storage namespace.
* <p>
See [Object Names](https://docs.cloud.oracle.com/Content/Object/Tasks/managingobjects.htm#namerequirements)
* for object naming requirements.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RenameObjectRequest
     * @return RenameObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/RenameObject.ts.html |here} to see how to use RenameObject API.
     */
  public async renameObject(
    renameObjectRequest: requests.RenameObjectRequest
  ): Promise<responses.RenameObjectResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#renameObject.");
    const operationName = "renameObject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Object/RenameObject";
    const pathParams = {
      "{namespaceName}": renameObjectRequest.namespaceName,
      "{bucketName}": renameObjectRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": renameObjectRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      renameObjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/actions/renameObject",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        renameObjectRequest.renameObjectDetails,
        "RenameObjectDetails",
        model.RenameObjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RenameObjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          },
          {
            value: response.headers.get("version-id"),
            key: "versionId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Restores the object specified by the objectName parameter.
   * By default object will be restored for 24 hours. Duration can be configured using the hours parameter.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RestoreObjectsRequest
   * @return RestoreObjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/RestoreObjects.ts.html |here} to see how to use RestoreObjects API.
   */
  public async restoreObjects(
    restoreObjectsRequest: requests.RestoreObjectsRequest
  ): Promise<responses.RestoreObjectsResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#restoreObjects.");
    const operationName = "restoreObjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Object/RestoreObjects";
    const pathParams = {
      "{namespaceName}": restoreObjectsRequest.namespaceName,
      "{bucketName}": restoreObjectsRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": restoreObjectsRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      restoreObjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/actions/restoreObjects",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        restoreObjectsRequest.restoreObjectsDetails,
        "RestoreObjectsDetails",
        model.RestoreObjectsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RestoreObjectsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Performs a partial or full update of a bucket's user-defined metadata.
* <p>
Use UpdateBucket to move a bucket from one compartment to another within the same tenancy. Supply the compartmentID
* of the compartment that you want to move the bucket to. For more information about moving resources between compartments,
* see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateBucketRequest
     * @return UpdateBucketResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/UpdateBucket.ts.html |here} to see how to use UpdateBucket API.
     */
  public async updateBucket(
    updateBucketRequest: requests.UpdateBucketRequest
  ): Promise<responses.UpdateBucketResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#updateBucket.");
    const operationName = "updateBucket";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Bucket/UpdateBucket";
    const pathParams = {
      "{namespaceName}": updateBucketRequest.namespaceName,
      "{bucketName}": updateBucketRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateBucketRequest.ifMatch,
      "opc-client-request-id": updateBucketRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBucketRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateBucketRequest.updateBucketDetails,
        "UpdateBucketDetails",
        model.UpdateBucketDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBucketResponse>{},
        body: await response.json(),
        bodyKey: "bucket",
        bodyModel: model.Bucket,
        type: "model.Bucket",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * By default, buckets created using the Amazon S3 Compatibility API or the Swift API are created in the root
* compartment of the Oracle Cloud Infrastructure tenancy.
* <p>
You can change the default Swift/Amazon S3 compartmentId designation to a different compartmentId. All
* subsequent bucket creations will use the new default compartment, but no previously created
* buckets will be modified. A user must have OBJECTSTORAGE_NAMESPACE_UPDATE permission to make changes to the default
* compartments for Amazon S3 and Swift.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateNamespaceMetadataRequest
     * @return UpdateNamespaceMetadataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/UpdateNamespaceMetadata.ts.html |here} to see how to use UpdateNamespaceMetadata API.
     */
  public async updateNamespaceMetadata(
    updateNamespaceMetadataRequest: requests.UpdateNamespaceMetadataRequest
  ): Promise<responses.UpdateNamespaceMetadataResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#updateNamespaceMetadata.");
    const operationName = "updateNamespaceMetadata";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Namespace/UpdateNamespaceMetadata";
    const pathParams = {
      "{namespaceName}": updateNamespaceMetadataRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": updateNamespaceMetadataRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateNamespaceMetadataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNamespaceMetadataRequest.updateNamespaceMetadataDetails,
        "UpdateNamespaceMetadataDetails",
        model.UpdateNamespaceMetadataDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNamespaceMetadataResponse>{},
        body: await response.json(),
        bodyKey: "namespaceMetadata",
        bodyModel: model.NamespaceMetadata,
        type: "model.NamespaceMetadata",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Changes the storage tier of the object specified by the objectName parameter.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateObjectStorageTierRequest
   * @return UpdateObjectStorageTierResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/UpdateObjectStorageTier.ts.html |here} to see how to use UpdateObjectStorageTier API.
   */
  public async updateObjectStorageTier(
    updateObjectStorageTierRequest: requests.UpdateObjectStorageTierRequest
  ): Promise<responses.UpdateObjectStorageTierResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#updateObjectStorageTier.");
    const operationName = "updateObjectStorageTier";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/Object/UpdateObjectStorageTier";
    const pathParams = {
      "{namespaceName}": updateObjectStorageTierRequest.namespaceName,
      "{bucketName}": updateObjectStorageTierRequest.bucketName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": updateObjectStorageTierRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateObjectStorageTierRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/actions/updateObjectStorageTier",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateObjectStorageTierRequest.updateObjectStorageTierDetails,
        "UpdateObjectStorageTierDetails",
        model.UpdateObjectStorageTierDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateObjectStorageTierResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Performs a partial or full update of a user-defined data associated with the Private Endpoint.
* <p>
Use UpdatePrivateEndpoint to move a Private Endpoint from one compartment to another within the same tenancy. Supply the compartmentID
* of the compartment that you want to move the Private Endpoint to. Or use it to update the name, subnetId, endpointFqdn or privateEndpointIp or accessTargets of the Private Endpoint.
* For more information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* <p>
This API follows replace semantics (rather than merge semantics). That means if the body provides values for 
* parameters and the resource has exisiting ones, this operation will replace those existing values.  
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdatePrivateEndpointRequest
     * @return UpdatePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/UpdatePrivateEndpoint.ts.html |here} to see how to use UpdatePrivateEndpoint API.
     */
  public async updatePrivateEndpoint(
    updatePrivateEndpointRequest: requests.UpdatePrivateEndpointRequest
  ): Promise<responses.UpdatePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#updatePrivateEndpoint.");
    const operationName = "updatePrivateEndpoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/PrivateEndpoint/UpdatePrivateEndpoint";
    const pathParams = {
      "{namespaceName}": updatePrivateEndpointRequest.namespaceName,
      "{peName}": updatePrivateEndpointRequest.peName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-client-request-id": updatePrivateEndpointRequest.opcClientRequestId,
      "if-match": updatePrivateEndpointRequest.ifMatch
    };

    const requiredParams = new Set<string>(["namespaceName", "peName"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/pe/{peName}",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updatePrivateEndpointRequest.updatePrivateEndpointDetails,
        "UpdatePrivateEndpointDetails",
        model.UpdatePrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified retention rule. Rule changes take effect typically within 30 seconds.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateRetentionRuleRequest
   * @return UpdateRetentionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/UpdateRetentionRule.ts.html |here} to see how to use UpdateRetentionRule API.
   */
  public async updateRetentionRule(
    updateRetentionRuleRequest: requests.UpdateRetentionRuleRequest
  ): Promise<responses.UpdateRetentionRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ObjectStorageClient#updateRetentionRule.");
    const operationName = "updateRetentionRule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/RetentionRule/UpdateRetentionRule";
    const pathParams = {
      "{namespaceName}": updateRetentionRuleRequest.namespaceName,
      "{bucketName}": updateRetentionRuleRequest.bucketName,
      "{retentionRuleId}": updateRetentionRuleRequest.retentionRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRetentionRuleRequest.ifMatch,
      "opc-client-request-id": updateRetentionRuleRequest.opcClientRequestId
    };

    const requiredParams = new Set<string>(["namespaceName", "bucketName", "retentionRuleId"]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateRetentionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/retentionRules/{retentionRuleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRetentionRuleRequest.updateRetentionRuleDetails,
        "UpdateRetentionRuleDetails",
        model.UpdateRetentionRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRetentionRuleResponse>{},
        body: await response.json(),
        bodyKey: "retentionRule",
        bodyModel: model.RetentionRule,
        type: "model.RetentionRule",
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Uploads a single part of a multipart upload.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UploadPartRequest
   * @return UploadPartResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/UploadPart.ts.html |here} to see how to use UploadPart API.
   */
  public async uploadPart(
    uploadPartRequest: requests.UploadPartRequest
  ): Promise<responses.UploadPartResponse> {
    if (this.logger) this.logger.debug("Calling operation ObjectStorageClient#uploadPart.");
    const operationName = "uploadPart";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/objectstorage/20160918/MultipartUpload/UploadPart";
    const pathParams = {
      "{namespaceName}": uploadPartRequest.namespaceName,
      "{bucketName}": uploadPartRequest.bucketName,
      "{objectName}": uploadPartRequest.objectName
    };

    const queryParams = {
      "uploadId": uploadPartRequest.uploadId,
      "uploadPartNum": uploadPartRequest.uploadPartNum
    };

    let headerParams = {
      "opc-client-request-id": uploadPartRequest.opcClientRequestId,
      "if-match": uploadPartRequest.ifMatch,
      "if-none-match": uploadPartRequest.ifNoneMatch,
      "Expect": uploadPartRequest.expect,
      "Content-Length": uploadPartRequest.contentLength,
      "Content-MD5": uploadPartRequest.contentMD5,
      "opc-sse-customer-algorithm": uploadPartRequest.opcSseCustomerAlgorithm,
      "opc-sse-customer-key": uploadPartRequest.opcSseCustomerKey,
      "opc-sse-customer-key-sha256": uploadPartRequest.opcSseCustomerKeySha256,
      "opc-sse-kms-key-id": uploadPartRequest.opcSseKmsKeyId
    };

    const requiredParams = new Set<string>([
      "namespaceName",
      "bucketName",
      "objectName",
      "uploadId",
      "uploadPartNum"
    ]);
    let endpoint = common.EndpointBuilder.populateServiceParamsInEndpoint(
      this.endpoint,
      pathParams,
      queryParams,
      requiredParams
    );
    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      uploadPartRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/n/{namespaceName}/b/{bucketName}/u/{objectName}",
      method: "PUT",
      bodyContent: uploadPartRequest.uploadPartBody,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink,
        true
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UploadPartResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-client-request-id"),
            key: "opcClientRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-content-md5"),
            key: "opcContentMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
