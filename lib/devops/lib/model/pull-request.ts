/**
 * DevOps API
 * Use the DevOps API to create DevOps projects, configure code repositories,  add artifacts to deploy, build and test software applications, configure  target deployment environments, and deploy software applications.  For more information, see [DevOps](https://docs.oracle.com/iaas/Content/devops/using/home.htm).
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Pull Request containing the diff between a review branch and a destination branch
 */
export interface PullRequest {
  /**
   * Unique identifier that is immutable on creation
   */
  "id": string;
  /**
   * PullRequest title, can be renamed
   */
  "displayName": string;
  /**
   * Details of the pull request. Avoid entering confidential information.
   */
  "description"?: string;
  /**
   * Compartment Identifier
   */
  "compartmentId": string;
  /**
   * DevOps Repository Identifier tells which repository this pull request belongs to
   */
  "repositoryId": string;
  /**
   * The source branch which contains the changes to be reviewed. Example: \"feature/JIRA-123\"
   */
  "sourceBranch": string;
  /**
   * The destination branch against which the changes are to be reviewed. Example: \"main\".
   */
  "destinationBranch": string;
  /**
   * The source branch commit ID when the Pull Request status was last changed to merged or closed
   */
  "sourceCommitIdAtTermination"?: string;
  /**
   * The merge base commit ID when the Pull Request status was last changed to merged or closed
   */
  "mergeBaseCommitIdAtTermination"?: string;
  /**
   * The time the PullRequest was created. An RFC3339 formatted datetime string
   */
  "timeCreated": Date;
  /**
   * The time the PullRequest was updated. An RFC3339 formatted datetime string
   */
  "timeUpdated"?: Date;
  /**
   * The current state of the PullRequest.
   */
  "lifecycleState": PullRequest.LifecycleState;
  /**
   * The status of the Pull Request.
   */
  "lifecycleDetails": PullRequest.LifecycleDetails;
  /**
   * List of Reviewers.
   */
  "reviewers"?: Array<model.Reviewer>;
  /**
   * The commit ID when the Pull Request was merged.
   */
  "mergedCommitId"?: string;
  "mergeChecks"?: model.MergeCheckCollection;
  "createdBy": model.PrincipalDetails;
  "mergedBy"?: model.PrincipalDetails;
  /**
   * The OCID of the forked repository that will act as the source of the changes to be included in the pull request against the parent repository.
   */
  "sourceRepositoryId"?: string;
  /**
   * The total number of comments on the pull request. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "totalComments": number;
  /**
   * The total number of reviewers on the pull request. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "totalReviewers": number;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: {@code {\"bar-key\": \"value\"}}
   */
  "freeformTags": { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   */
  "definedTags": { [key: string]: { [key: string]: any } };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   */
  "systemTags": { [key: string]: { [key: string]: any } };
}

export namespace PullRequest {
  export enum LifecycleState {
    Creating = "CREATING",
    Updating = "UPDATING",
    Active = "ACTIVE",
    Deleting = "DELETING",
    Deleted = "DELETED",
    Failed = "FAILED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum LifecycleDetails {
    Open = "OPEN",
    Conflict = "CONFLICT",
    Closed = "CLOSED",
    Merging = "MERGING",
    Merged = "MERGED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: PullRequest): object {
    const jsonObj = {
      ...obj,
      ...{
        "reviewers": obj.reviewers
          ? obj.reviewers.map(item => {
              return model.Reviewer.getJsonObj(item);
            })
          : undefined,

        "mergeChecks": obj.mergeChecks
          ? model.MergeCheckCollection.getJsonObj(obj.mergeChecks)
          : undefined,
        "createdBy": obj.createdBy ? model.PrincipalDetails.getJsonObj(obj.createdBy) : undefined,
        "mergedBy": obj.mergedBy ? model.PrincipalDetails.getJsonObj(obj.mergedBy) : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: PullRequest): object {
    const jsonObj = {
      ...obj,
      ...{
        "reviewers": obj.reviewers
          ? obj.reviewers.map(item => {
              return model.Reviewer.getDeserializedJsonObj(item);
            })
          : undefined,

        "mergeChecks": obj.mergeChecks
          ? model.MergeCheckCollection.getDeserializedJsonObj(obj.mergeChecks)
          : undefined,
        "createdBy": obj.createdBy
          ? model.PrincipalDetails.getDeserializedJsonObj(obj.createdBy)
          : undefined,
        "mergedBy": obj.mergedBy
          ? model.PrincipalDetails.getDeserializedJsonObj(obj.mergedBy)
          : undefined
      }
    };

    return jsonObj;
  }
}
