/**
 * Oracle Multicloud API
 * Use the Oracle Multicloud API to retrieve resource anchors and network anchors, and the metadata mappings related a Cloud Service Provider. For more information, see <link to docs>.
 * OpenAPI spec version: 20180828
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { OmhubNetworkAnchorWaiter } from "./omhubnetworkanchor-waiter";
import { OmhubResourceAnchorWaiter } from "./omhubresourceanchor-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum MetadataApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class MetadataClient {
  protected static serviceEndpointTemplate = "https://multicloud.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Metadata";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("multicloud")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("multicloud");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20180828";
    if (this.logger) this.logger.info(`MetadataClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        MetadataClient.serviceEndpointTemplate,
        this._region,
        MetadataClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        MetadataClient.serviceEndpointTemplate,
        this._regionId,
        MetadataClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      MetadataClient.serviceEndpointTemplate,
      region,
      MetadataClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      MetadataClient.serviceEndpointTemplate,
      regionId,
      MetadataClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * List externalLocationDetail metadata from OCI to Cloud  Service Provider for regions, Availability Zones, and Cluster Placement Group ID.
   * examples:
   *   application-json: |
   *     [
   *       {
   *           \"externalLocation\": {
   *             \"cspRegion\": \"East US\",
   *             \"cspPhysicalAz\": \"az1-xyz\",
   *             \"cspPhysicalAzDisplayName\": \"(US) East US 2\",
   *             \"cspLogicalAz\": \"az1\",
   *             \"serviceName\": \"ORACLEDBATAZURE\",
   *             \"cspZoneKeyReferenceId\": {
   *               \"keyName\": \"AzureSubscriptionId or AwsAccountId, GcpProjectName\",
   *               \"keyValue\": \"azure-subscriptionId-1 or aws-account-id-1, gcp-project-id-1\"
   *             }
   *           },
   *           \"ociPhysicalAd\": \"ad1-xyb\",
   *           \"ociLogicalAd\": \"ad2\",
   *           \"ociRegion\": \"us-ashburn-1\",
   *           \"cpgId\": \"cpg-1\"
   *       },
   *         {
   *           \"externalLocation\": {
   *             \"cspRegion\": \"East US\",
   *             \"cspPhysicalAz\": \"az2-abc\",
   *             \"cspPhysicalAzDisplayName\": \"(US) East US 2\",
   *             \"cspLogicalAz\": \"az2\",
   *             \"serviceName\": \"ORACLEDBATAZURE\",
   *             \"cspZoneKeyReferenceId\": {
   *               \"keyName\": \"AzureSubscriptionId or AwsAccountId, GcpProjectName\",
   *               \"keyValue\": \"azure-subscriptionId-2 or aws-account-id-2, gcp-project-id-2\"
   *             }
   *           },
   *           \"ociPhysicalAd\": \"ad2-xby\",
   *           \"ociLogicalAd\": \"ad1\",
   *           \"ociRegion\": \"us-ashburn-1\",
   *           \"cpgId\": \"cpg-2\"
   *         },
   *         {
   *           \"externalLocation\": {
   *             \"cspRegion\": \"East US\",
   *             \"cspPhysicalAz\": \"az3-abz\",
   *             \"cspPhysicalAzDisplayName\": \"(US) East US 2\",
   *             \"cspLogicalAz\": \"az3\",
   *             \"serviceName\": \"ORACLEDBATAZURE\",
   *             \"cspZoneKeyReferenceId\": {
   *               \"keyName\": \"AzureSubscriptionId or AwsAccountId, GcpProjectName\",
   *               \"keyValue\": \"azure-subscriptionId-3 or aws-account-id-3, gcp-project-id-3\"
   *             }
   *           },
   *           \"ociPhysicalAd\": \"ad3-cde\",
   *           \"ociLogicalAd\": \"ad3\",
   *           \"ociRegion\": \"us-ashburn-1\",
   *           \"cpgId\": \"cpg-3\"
   *         },
   *         {
   *           \"externalLocation\": {
   *             \"cspRegion\": \"East US 2\",
   *             \"cspPhysicalAz\": \"az1-def\",
   *             \"cspPhysicalAzDisplayName\": \"(US) East US 2\",
   *             \"cspLogicalAz\": \"az1\",
   *             \"serviceName\": \"ORACLEDBATAZURE\",
   *             \"cspZoneKeyReferenceId\": {
   *               \"keyName\": \"AzureSubscriptionId or AwsAccountId, GcpProjectName\",
   *               \"keyValue\": \"azure-subscriptionId-4 or aws-account-id-4, gcp-project-id-4\"
   *             }
   *           },
   *           \"ociPhysicalAd\": \"ad1-bce\",
   *           \"ociLogicalAd\": \"ad2\",
   *           \"ociRegion\": \"us-ashburn-1\",
   *           \"cpgId\": \"cpg-4\"
   *         },
   *         {
   *           \"externalLocation\": {
   *             \"cspRegion\": \"East US 2\",
   *             \"cspPhysicalAz\": \"az2-uvw\",
   *             \"cspPhysicalAzDisplayName\": \"(US) East US 2\",
   *             \"cspLogicalAz\": \"az2\",
   *             \"serviceName\": \"ORACLEDBATAZURE\",
   *             \"cspZoneKeyReferenceId\": {
   *               \"keyName\": \"AzureSubscriptionId or AwsAccountId, GcpProjectName\",
   *               \"keyValue\": \"azure-subscriptionId-3 or aws-account-id-3, gcp-project-id-3\"
   *             }
   *           },
   *           \"ociPhysicalAd\": \"ad2-ftc\",
   *           \"ociLogicalAd\": \"ad1\",
   *           \"ociRegion\": \"us-ashburn-1\",
   *           \"cpgId\": \"cpg-5\"
   *         },
   *         {
   *           \"externalLocation\": {
   *             \"cspRegion\": \"East US 2\",
   *             \"cspPhysicalAz\": \"az3-uvw\",
   *             \"cspPhysicalAzDisplayName\": \"(US) East US 2\",
   *             \"cspLogicalAz\": \"az3\",
   *             \"serviceName\": \"ORACLEDBATAZURE\",
   *             \"cspZoneKeyReferenceId\": {
   *               \"keyName\": \"AzureSubscriptionId or AwsAccountId, GcpProjectName\",
   *               \"keyValue\": \"azure-subscriptionId-3 or aws-account-id-3, gcp-project-id-3\"
   *             }
   *           },
   *           \"ociPhysicalAd\": \"ad3-stc\",
   *           \"ociLogicalAd\": \"ad3\",
   *           \"ociRegion\": \"us-ashburn-1\",
   *           \"cpgId\": \"cpg-6\"
   *         }
   *       ]
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListExternalLocationDetailsMetadataRequest
   * @return ListExternalLocationDetailsMetadataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/multicloud/ListExternalLocationDetailsMetadata.ts.html |here} to see how to use ListExternalLocationDetailsMetadata API.
   */
  public async listExternalLocationDetailsMetadata(
    listExternalLocationDetailsMetadataRequest: requests.ListExternalLocationDetailsMetadataRequest
  ): Promise<responses.ListExternalLocationDetailsMetadataResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MetadataClient#listExternalLocationDetailsMetadata.");
    const operationName = "listExternalLocationDetailsMetadata";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "subscriptionId": listExternalLocationDetailsMetadataRequest.subscriptionId,
      "entityType": listExternalLocationDetailsMetadataRequest.entityType,
      "compartmentId": listExternalLocationDetailsMetadataRequest.compartmentId,
      "linkedCompartmentId": listExternalLocationDetailsMetadataRequest.linkedCompartmentId,
      "subscriptionServiceName": listExternalLocationDetailsMetadataRequest.subscriptionServiceName,
      "limit": listExternalLocationDetailsMetadataRequest.limit,
      "page": listExternalLocationDetailsMetadataRequest.page,
      "sortOrder": listExternalLocationDetailsMetadataRequest.sortOrder,
      "sortBy": listExternalLocationDetailsMetadataRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listExternalLocationDetailsMetadataRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listExternalLocationDetailsMetadataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/externalLocationsMetadata",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListExternalLocationDetailsMetadataResponse>{},
        body: await response.json(),
        bodyKey: "externalLocationsMetadatumCollection",
        bodyModel: model.ExternalLocationsMetadatumCollection,
        type: "model.ExternalLocationsMetadatumCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List externalLocation metadata from OCI to the Cloud Service Provider for regions, Physical Availability Zones.
   * examples:
   *   application-json: |
   *     [
   *       {
   *         \"externalLocation\": {
   *           \"cspRegion\": \"eastus\",
   *           \"cspPhysicalAz\": \"eastus-az1\",
   *           \"cspPhysicalAzDisplayName\": \"(US) East US 1\",
   *           \"serviceName\": \"ORACLEDBATAZURE\"
   *         },
   *         \"ociPhysicalAd\": \"iad-ad-1\",
   *         \"ociLogicalAd\": \"ad1\",
   *         \"ociRegion\": \"us-ashburn-1\"
   *     },
   *       {
   *         \"externalLocation\": {
   *           \"cspRegion\": \"eastus\",
   *           \"cspPhysicalAz\": \"eastus-az1\",
   *           \"cspPhysicalAzDisplayName\": \"(US) East US 1\",
   *           \"serviceName\": \"ORACLEDBATAZURE\"
   *         },
   *         \"ociPhysicalAd\": \"iad-ad-1\",
   *         \"ociLogicalAd\": \"ad1\",
   *         \"ociRegion\": \"us-ashburn-1\"
   *       },
   *       {
   *         \"externalLocation\": {
   *           \"cspRegion\": \"eastus2\",
   *           \"cspPhysicalAz\": \"eastus2-az3\",
   *           \"cspPhysicalAzDisplayName\": \"(US) East US 1\",
   *           \"serviceName\": \"ORACLEDBATAZURE\"
   *         },
   *         \"ociPhysicalAd\": \"iad-ad-2\",
   *         \"ociLogicalAd\": \"ad1\",
   *         \"ociRegion\": \"us-ashburn-1\"
   *       },
   *       {
   *         \"externalLocation\": {
   *           \"cspRegion\": \"eastus\",
   *           \"cspPhysicalAz\": \"eastus-az3\"
   *           \"cspPhysicalAzDisplayName\": \"(US) East US 1\",
   *           \"serviceName\": \"ORACLEDBATAZURE\"
   *         },
   *         \"ociPhysicalAd\": \"iad-ad-333\",
   *         \"ociLogicalAd\": \"ad1\",
   *         \"ociRegion\": \"us-ashburn-1\"
   *       }
   *     ]
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListExternalLocationMappingMetadataRequest
   * @return ListExternalLocationMappingMetadataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/multicloud/ListExternalLocationMappingMetadata.ts.html |here} to see how to use ListExternalLocationMappingMetadata API.
   */
  public async listExternalLocationMappingMetadata(
    listExternalLocationMappingMetadataRequest: requests.ListExternalLocationMappingMetadataRequest
  ): Promise<responses.ListExternalLocationMappingMetadataResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MetadataClient#listExternalLocationMappingMetadata.");
    const operationName = "listExternalLocationMappingMetadata";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "subscriptionId": listExternalLocationMappingMetadataRequest.subscriptionId,
      "subscriptionServiceName": listExternalLocationMappingMetadataRequest.subscriptionServiceName,
      "compartmentId": listExternalLocationMappingMetadataRequest.compartmentId,
      "limit": listExternalLocationMappingMetadataRequest.limit,
      "page": listExternalLocationMappingMetadataRequest.page,
      "sortOrder": listExternalLocationMappingMetadataRequest.sortOrder,
      "sortBy": listExternalLocationMappingMetadataRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listExternalLocationMappingMetadataRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listExternalLocationMappingMetadataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/externalLocationMappingMetadata",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListExternalLocationMappingMetadataResponse>{},
        body: await response.json(),
        bodyKey: "externalLocationMappingMetadatumSummaryCollection",
        bodyModel: model.ExternalLocationMappingMetadatumSummaryCollection,
        type: "model.ExternalLocationMappingMetadatumSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List externalLocationSummary metadata from OCI Region to the Cloud Service Provider region across all regions.
   * examples:
   *   application-json: |
   *     [
   *       {
   *           \"externalLocation\": {
   *             \"cspRegion\": \"East US\"
   *           },
   *           \"ociRegion\": \"us-ashburn-1\"
   *       },
   *         {
   *           \"externalLocation\": {
   *             \"cspRegion\": \"East US 2\"
   *           },
   *           \"ociRegion\": \"us-ashburn-1\"
   *         },
   *         {
   *           \"externalLocation\": {
   *             \"cspRegion\": \"Germany West Central\"
   *           },
   *           \"ociRegion\": \"eu-frankfurt-1\",
   *         }
   *       ]
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListExternalLocationSummariesMetadataRequest
   * @return ListExternalLocationSummariesMetadataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/multicloud/ListExternalLocationSummariesMetadata.ts.html |here} to see how to use ListExternalLocationSummariesMetadata API.
   */
  public async listExternalLocationSummariesMetadata(
    listExternalLocationSummariesMetadataRequest: requests.ListExternalLocationSummariesMetadataRequest
  ): Promise<responses.ListExternalLocationSummariesMetadataResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MetadataClient#listExternalLocationSummariesMetadata.");
    const operationName = "listExternalLocationSummariesMetadata";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "subscriptionId": listExternalLocationSummariesMetadataRequest.subscriptionId,
      "subscriptionServiceName":
        listExternalLocationSummariesMetadataRequest.subscriptionServiceName,
      "entityType": listExternalLocationSummariesMetadataRequest.entityType,
      "compartmentId": listExternalLocationSummariesMetadataRequest.compartmentId,
      "limit": listExternalLocationSummariesMetadataRequest.limit,
      "page": listExternalLocationSummariesMetadataRequest.page,
      "sortOrder": listExternalLocationSummariesMetadataRequest.sortOrder,
      "sortBy": listExternalLocationSummariesMetadataRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listExternalLocationSummariesMetadataRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listExternalLocationSummariesMetadataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/externalLocationSummariesMetadata",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListExternalLocationSummariesMetadataResponse>{},
        body: await response.json(),
        bodyKey: "externalLocationSummariesMetadatumSummaryCollection",
        bodyModel: model.ExternalLocationSummariesMetadatumSummaryCollection,
        type: "model.ExternalLocationSummariesMetadatumSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum MultiCloudsMetadataApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class MultiCloudsMetadataClient {
  protected static serviceEndpointTemplate = "https://multicloud.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "MultiCloudsMetadata";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("multicloud")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("multicloud");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20180828";
    if (this.logger)
      this.logger.info(`MultiCloudsMetadataClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        MultiCloudsMetadataClient.serviceEndpointTemplate,
        this._region,
        MultiCloudsMetadataClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        MultiCloudsMetadataClient.serviceEndpointTemplate,
        this._regionId,
        MultiCloudsMetadataClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      MultiCloudsMetadataClient.serviceEndpointTemplate,
      region,
      MultiCloudsMetadataClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      MultiCloudsMetadataClient.serviceEndpointTemplate,
      regionId,
      MultiCloudsMetadataClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Gets information about multicloud base compartment
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMultiCloudMetadataRequest
   * @return GetMultiCloudMetadataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/multicloud/GetMultiCloudMetadata.ts.html |here} to see how to use GetMultiCloudMetadata API.
   */
  public async getMultiCloudMetadata(
    getMultiCloudMetadataRequest: requests.GetMultiCloudMetadataRequest
  ): Promise<responses.GetMultiCloudMetadataResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MultiCloudsMetadataClient#getMultiCloudMetadata.");
    const operationName = "getMultiCloudMetadata";
    const apiReferenceLink = "";
    const pathParams = {
      "{subscriptionId}": getMultiCloudMetadataRequest.subscriptionId
    };

    const queryParams = {
      "compartmentId": getMultiCloudMetadataRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMultiCloudMetadataRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMultiCloudMetadataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/omHub/multiCloudsMetadata/{subscriptionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMultiCloudMetadataResponse>{},
        body: await response.json(),
        bodyKey: "multiCloudMetadata",
        bodyModel: model.MultiCloudMetadata,
        type: "model.MultiCloudMetadata",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of multicloud metadata with multicloud base compartment and subscription across Cloud Service Providers.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMultiCloudMetadataRequest
   * @return ListMultiCloudMetadataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/multicloud/ListMultiCloudMetadata.ts.html |here} to see how to use ListMultiCloudMetadata API.
   */
  public async listMultiCloudMetadata(
    listMultiCloudMetadataRequest: requests.ListMultiCloudMetadataRequest
  ): Promise<responses.ListMultiCloudMetadataResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MultiCloudsMetadataClient#listMultiCloudMetadata.");
    const operationName = "listMultiCloudMetadata";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listMultiCloudMetadataRequest.compartmentId,
      "limit": listMultiCloudMetadataRequest.limit,
      "page": listMultiCloudMetadataRequest.page,
      "sortOrder": listMultiCloudMetadataRequest.sortOrder,
      "sortBy": listMultiCloudMetadataRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMultiCloudMetadataRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMultiCloudMetadataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/omHub/multiCloudsMetadata",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMultiCloudMetadataResponse>{},
        body: await response.json(),
        bodyKey: "multiCloudMetadataCollection",
        bodyModel: model.MultiCloudMetadataCollection,
        type: "model.MultiCloudMetadataCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum OmhubNetworkAnchorApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OmhubNetworkAnchorClient {
  protected static serviceEndpointTemplate = "https://multicloud.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OmhubNetworkAnchorWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "OmhubNetworkAnchor";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("multicloud")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("multicloud");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20180828";
    if (this.logger) this.logger.info(`OmhubNetworkAnchorClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        OmhubNetworkAnchorClient.serviceEndpointTemplate,
        this._region,
        OmhubNetworkAnchorClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        OmhubNetworkAnchorClient.serviceEndpointTemplate,
        this._regionId,
        OmhubNetworkAnchorClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OmhubNetworkAnchorClient.serviceEndpointTemplate,
      region,
      OmhubNetworkAnchorClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OmhubNetworkAnchorClient.serviceEndpointTemplate,
      regionId,
      OmhubNetworkAnchorClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new OmhubNetworkAnchorWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OmhubNetworkAnchorWaiter {
    this._waiters = new OmhubNetworkAnchorWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OmhubNetworkAnchorWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Gets information about a NetworkAnchor.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetNetworkAnchorRequest
   * @return GetNetworkAnchorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/multicloud/GetNetworkAnchor.ts.html |here} to see how to use GetNetworkAnchor API.
   */
  public async getNetworkAnchor(
    getNetworkAnchorRequest: requests.GetNetworkAnchorRequest
  ): Promise<responses.GetNetworkAnchorResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OmhubNetworkAnchorClient#getNetworkAnchor.");
    const operationName = "getNetworkAnchor";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkAnchorId}": getNetworkAnchorRequest.networkAnchorId
    };

    const queryParams = {
      "subscriptionServiceName": getNetworkAnchorRequest.subscriptionServiceName,
      "subscriptionId": getNetworkAnchorRequest.subscriptionId,
      "externalLocation": getNetworkAnchorRequest.externalLocation
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getNetworkAnchorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNetworkAnchorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkAnchors/{networkAnchorId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNetworkAnchorResponse>{},
        body: await response.json(),
        bodyKey: "networkAnchor",
        bodyModel: model.NetworkAnchor,
        type: "model.NetworkAnchor",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of NetworkAnchors.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListNetworkAnchorsRequest
   * @return ListNetworkAnchorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/multicloud/ListNetworkAnchors.ts.html |here} to see how to use ListNetworkAnchors API.
   */
  public async listNetworkAnchors(
    listNetworkAnchorsRequest: requests.ListNetworkAnchorsRequest
  ): Promise<responses.ListNetworkAnchorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OmhubNetworkAnchorClient#listNetworkAnchors.");
    const operationName = "listNetworkAnchors";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNetworkAnchorsRequest.compartmentId,
      "subscriptionId": listNetworkAnchorsRequest.subscriptionId,
      "subscriptionServiceName": listNetworkAnchorsRequest.subscriptionServiceName,
      "lifecycleState": listNetworkAnchorsRequest.lifecycleState,
      "displayName": listNetworkAnchorsRequest.displayName,
      "externalLocation": listNetworkAnchorsRequest.externalLocation,
      "networkAnchorOciSubnetId": listNetworkAnchorsRequest.networkAnchorOciSubnetId,
      "networkAnchorOciVcnId": listNetworkAnchorsRequest.networkAnchorOciVcnId,
      "id": listNetworkAnchorsRequest.id,
      "limit": listNetworkAnchorsRequest.limit,
      "page": listNetworkAnchorsRequest.page,
      "sortOrder": listNetworkAnchorsRequest.sortOrder,
      "sortBy": listNetworkAnchorsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNetworkAnchorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listNetworkAnchorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkAnchors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkAnchorsResponse>{},
        body: await response.json(),
        bodyKey: "networkAnchorCollection",
        bodyModel: model.NetworkAnchorCollection,
        type: "model.NetworkAnchorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum OmhubResourceAnchorApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OmhubResourceAnchorClient {
  protected static serviceEndpointTemplate = "https://multicloud.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OmhubResourceAnchorWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "OmhubResourceAnchor";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("multicloud")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("multicloud");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20180828";
    if (this.logger)
      this.logger.info(`OmhubResourceAnchorClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        OmhubResourceAnchorClient.serviceEndpointTemplate,
        this._region,
        OmhubResourceAnchorClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        OmhubResourceAnchorClient.serviceEndpointTemplate,
        this._regionId,
        OmhubResourceAnchorClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OmhubResourceAnchorClient.serviceEndpointTemplate,
      region,
      OmhubResourceAnchorClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OmhubResourceAnchorClient.serviceEndpointTemplate,
      regionId,
      OmhubResourceAnchorClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new OmhubResourceAnchorWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OmhubResourceAnchorWaiter {
    this._waiters = new OmhubResourceAnchorWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OmhubResourceAnchorWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Gets information about a ResourceAnchor.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetResourceAnchorRequest
   * @return GetResourceAnchorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/multicloud/GetResourceAnchor.ts.html |here} to see how to use GetResourceAnchor API.
   */
  public async getResourceAnchor(
    getResourceAnchorRequest: requests.GetResourceAnchorRequest
  ): Promise<responses.GetResourceAnchorResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OmhubResourceAnchorClient#getResourceAnchor.");
    const operationName = "getResourceAnchor";
    const apiReferenceLink = "";
    const pathParams = {
      "{resourceAnchorId}": getResourceAnchorRequest.resourceAnchorId
    };

    const queryParams = {
      "subscriptionServiceName": getResourceAnchorRequest.subscriptionServiceName,
      "subscriptionId": getResourceAnchorRequest.subscriptionId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getResourceAnchorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getResourceAnchorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resourceAnchors/{resourceAnchorId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetResourceAnchorResponse>{},
        body: await response.json(),
        bodyKey: "resourceAnchor",
        bodyModel: model.ResourceAnchor,
        type: "model.ResourceAnchor",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of ResourceAnchors.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListResourceAnchorsRequest
   * @return ListResourceAnchorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/multicloud/ListResourceAnchors.ts.html |here} to see how to use ListResourceAnchors API.
   */
  public async listResourceAnchors(
    listResourceAnchorsRequest: requests.ListResourceAnchorsRequest
  ): Promise<responses.ListResourceAnchorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OmhubResourceAnchorClient#listResourceAnchors.");
    const operationName = "listResourceAnchors";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listResourceAnchorsRequest.compartmentId,
      "linkedCompartmentId": listResourceAnchorsRequest.linkedCompartmentId,
      "lifecycleState": listResourceAnchorsRequest.lifecycleState,
      "displayName": listResourceAnchorsRequest.displayName,
      "id": listResourceAnchorsRequest.id,
      "limit": listResourceAnchorsRequest.limit,
      "page": listResourceAnchorsRequest.page,
      "sortOrder": listResourceAnchorsRequest.sortOrder,
      "sortBy": listResourceAnchorsRequest.sortBy,
      "isCompartmentIdInSubtree": listResourceAnchorsRequest.isCompartmentIdInSubtree,
      "subscriptionServiceName": listResourceAnchorsRequest.subscriptionServiceName,
      "subscriptionId": listResourceAnchorsRequest.subscriptionId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResourceAnchorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listResourceAnchorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resourceAnchors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResourceAnchorsResponse>{},
        body: await response.json(),
        bodyKey: "resourceAnchorCollection",
        bodyModel: model.ResourceAnchorCollection,
        type: "model.ResourceAnchorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
