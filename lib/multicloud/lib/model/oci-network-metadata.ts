/**
 * Oracle Multicloud API
 * Use the Oracle Multicloud API to retrieve resource anchors and network anchors, and the metadata mappings related a Cloud Service Provider. For more information, see <link to docs>.
 * OpenAPI spec version: 20180828
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Oracle Cloud Infrastructure network anchor related meta data items
 */
export interface OciNetworkMetadata {
  /**
   * This can be merge to lifecycleState
   * CONNECTED - Partner and CSI information is assigned and MulticloudLink provisioned.
   * DISCONNECTED - Only partner cloud information is assigned.
   * CONNECTING - Oracle Cloud Infrastructure information is assigned and the control plane is provisioning resources.
   * ACTIVE - Network anchor is connected and resources (VNICs) exist within a subnet.
   * ERROR - DRG attach fails during connection.
   * FAILED - Network anchor creation failed
   * NEEDS_ATTENTION - Network anchor is in temporary bad state
   * UPDATING - Network anchor is getting updated.
   * DELETING - Network anchor is getting deleted
   * DELETED - A connected network anchor is deleted.
   *
   */
  "networkAnchorConnectionStatus": OciNetworkMetadata.NetworkAnchorConnectionStatus;
  "vcn"?: model.OciVcn;
  "dns"?: model.OciDns;
  /**
   * Network subnets
   */
  "subnets"?: Array<model.OciNetworkSubnet>;
  /**
   * The DNS Listener Endpoint Address.
   */
  "dnsListeningEndpointIpAddress"?: string;
  /**
   * The DNS Listener Forwarding Address.
   */
  "dnsForwardingEndpointIpAddress"?: string;
  /**
   * DNS forward configuration
   */
  "dnsForwardingConfig"?: Array<{ [key: string]: string }>;
}

export namespace OciNetworkMetadata {
  export enum NetworkAnchorConnectionStatus {
    Connected = "CONNECTED",
    Disconnected = "DISCONNECTED",
    Connecting = "CONNECTING",
    Active = "ACTIVE",
    Error = "ERROR",
    Updating = "UPDATING",
    NeedsAttention = "NEEDS_ATTENTION",
    Failed = "FAILED",
    Deleting = "DELETING",
    Deleted = "DELETED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: OciNetworkMetadata): object {
    const jsonObj = {
      ...obj,
      ...{
        "vcn": obj.vcn ? model.OciVcn.getJsonObj(obj.vcn) : undefined,
        "dns": obj.dns ? model.OciDns.getJsonObj(obj.dns) : undefined,
        "subnets": obj.subnets
          ? obj.subnets.map(item => {
              return model.OciNetworkSubnet.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: OciNetworkMetadata): object {
    const jsonObj = {
      ...obj,
      ...{
        "vcn": obj.vcn ? model.OciVcn.getDeserializedJsonObj(obj.vcn) : undefined,
        "dns": obj.dns ? model.OciDns.getDeserializedJsonObj(obj.dns) : undefined,
        "subnets": obj.subnets
          ? obj.subnets.map(item => {
              return model.OciNetworkSubnet.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
