/**
 * Oracle Multicloud API
 * Use the Oracle Multicloud API to retrieve resource anchors and network anchors, and the metadata mappings related a Cloud Service Provider. For more information, see <link to docs>.
 * OpenAPI spec version: 20180828
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Cloud Service Provider metadata item.
 * Warning - In future this object can change to generic object with future Cloud Service Provider based on
 * CloudServiceProvider field. This can be one of CSP provider type Azure, GCP and AWS.
 *
 */
export interface CloudServiceProviderMetadataItem {
  /**
   * The Azure, AWS or GCP region.
   */
  "region"?: string;
  /**
   * CSP resource anchor ID or name.
   */
  "resourceAnchorName": string;
  /**
   * CSP resource anchor Uri.
   */
  "resourceAnchorUri"?: string;

  "subscriptionType": string;
}

export namespace CloudServiceProviderMetadataItem {
  export function getJsonObj(obj: CloudServiceProviderMetadataItem): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "subscriptionType" in obj && obj.subscriptionType) {
      switch (obj.subscriptionType) {
        case "ORACLEDBATAZURE":
          return model.AzureCloudServiceProviderMetadataItem.getJsonObj(
            <model.AzureCloudServiceProviderMetadataItem>(<object>jsonObj),
            true
          );
        case "ORACLEDBATGOOGLE":
          return model.GcpCloudServiceProviderMetadataItem.getJsonObj(
            <model.GcpCloudServiceProviderMetadataItem>(<object>jsonObj),
            true
          );
        case "ORACLEDBATAWS":
          return model.AwsCloudServiceProviderMetadataItem.getJsonObj(
            <model.AwsCloudServiceProviderMetadataItem>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.subscriptionType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CloudServiceProviderMetadataItem): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "subscriptionType" in obj && obj.subscriptionType) {
      switch (obj.subscriptionType) {
        case "ORACLEDBATAZURE":
          return model.AzureCloudServiceProviderMetadataItem.getDeserializedJsonObj(
            <model.AzureCloudServiceProviderMetadataItem>(<object>jsonObj),
            true
          );
        case "ORACLEDBATGOOGLE":
          return model.GcpCloudServiceProviderMetadataItem.getDeserializedJsonObj(
            <model.GcpCloudServiceProviderMetadataItem>(<object>jsonObj),
            true
          );
        case "ORACLEDBATAWS":
          return model.AwsCloudServiceProviderMetadataItem.getDeserializedJsonObj(
            <model.AwsCloudServiceProviderMetadataItem>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.subscriptionType}`);
      }
    }
    return jsonObj;
  }
}
