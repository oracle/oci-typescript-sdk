/**
 * Oracle Cloud VMware Solution API
 * Use the Oracle Cloud VMware API to create SDDCs and manage ESXi hosts and software. 
For more information, see [Oracle Cloud VMware Solution](https://docs.oracle.com/iaas/Content/VMware/Concepts/ocvsoverview.htm).

 * OpenAPI spec version: 20230701
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
* An [Oracle Cloud VMware Solution](https://docs.oracle.com/iaas/Content/VMware/Concepts/ocvsoverview.htm) Datastore for software-defined data center. 
* <p>
The Datastore can be attached to multiple ESXi hosts.
* 
*/
export interface DatastoreSummary {
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Datastore.
   *
   */
  "id": string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VMware Cluster that Datastore is attached to.
   *
   */
  "clusterId"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SDDC that Datastore is associated with.
   *
   */
  "sddcId"?: string;
  /**
   * The List of Block volume [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s that belong to the Datastore.
   *
   */
  "blockVolumeIds": Array<string>;
  /**
   * The list of Block Volume details that belong to the datastore.
   *
   */
  "blockVolumeDetails": Array<model.BlockVolumeDetails>;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that
   * contains the Datastore.
   *
   */
  "compartmentId": string;
  /**
   * A descriptive name for the Datastore. It must be unique within a SDDC, start with a letter, and contain only letters, digits,
   * whitespaces, dashes and underscores.
   * Avoid entering confidential information.
   *
   */
  "displayName": string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the datastore cluster that
   * Datastore belongs to.
   *
   */
  "datastoreClusterId"?: string;
  /**
   * The current state of the Datastore.
   */
  "lifecycleState": model.LifecycleStates;
  /**
    * The date and time the SDDC was created, in the format defined by
* [RFC3339](https://tools.ietf.org/html/rfc3339).
* <p>
Example: {@code 2016-08-25T21:10:29.600Z}
* 
    */
  "timeCreated": Date;
  /**
   * The availability domain of the Datastore.
   *
   */
  "availabilityDomain": string;
  /**
   * Total size of the datastore in GB. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "capacityInGBs"?: number;
  /**
    * Free-form tags for this resource. Each tag is a simple key-value pair with no
* predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Department\": \"Finance\"}}
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
    * Defined tags for this resource. Each key is predefined and scoped to a
* namespace. For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
* 
    */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces.
   * Example: {@code {orcl-cloud: {free-tier-retain: true}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
}

export namespace DatastoreSummary {
  export function getJsonObj(obj: DatastoreSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "blockVolumeDetails": obj.blockVolumeDetails
          ? obj.blockVolumeDetails.map(item => {
              return model.BlockVolumeDetails.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DatastoreSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "blockVolumeDetails": obj.blockVolumeDetails
          ? obj.blockVolumeDetails.map(item => {
              return model.BlockVolumeDetails.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
