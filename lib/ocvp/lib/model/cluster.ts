/**
 * Oracle Cloud VMware Solution API
 * Use the Oracle Cloud VMware API to create SDDCs and manage ESXi hosts and software. 
For more information, see [Oracle Cloud VMware Solution](/iaas/Content/VMware/Concepts/ocvsoverview.htm).

 * OpenAPI spec version: 20230701
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
* An [Oracle Cloud VMware Solution](https://docs.cloud.oracle.com/iaas/Content/VMware/Concepts/ocvsoverview.htm) Cluster contains the resources required for a
* functional VMware environment. Instances in a Cluster
* (see {@link EsxiHost}) run in a virtual cloud network (VCN)
* and are preconfigured with VMware and storage. Use the vCenter utility to manage
* and deploy VMware virtual machines (VMs) in the Cluster.
* <p>
The Cluster uses a single management subnet for provisioning the Cluster. It also uses a
* set of VLANs for various components of the VMware environment (vSphere, vMotion,
* vSAN, and so on). See the Core Services API for information about VCN subnets and VLANs.
* 
*/
export interface Cluster {
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Cluster.
   *
   */
  "id": string;
  /**
    * The availability domain the ESXi hosts are running in. For Multi-AD Cluster, it is {@code multi-AD}.
* <p>
Example: {@code Uocm:PHX-AD-1}, {@code multi-AD}
* 
    */
  "computeAvailabilityDomain": string;
  /**
   * A descriptive name for the Cluster. It must be unique, start with a letter, and contain only letters, digits,
   * whitespaces, dashes and underscores.
   * Avoid entering confidential information.
   *
   */
  "displayName": string;
  /**
    * A prefix used in the name of each ESXi host and Compute instance in the Cluster.
* If this isn't set, the Cluster's {@code displayName} is used as the prefix.
* <p>
For example, if the value is {@code MyCluster}, the ESXi hosts are named {@code MyCluster-1},
* {@code MyCluster-2}, and so on.
* 
    */
  "instanceDisplayNamePrefix"?: string;
  /**
    * In general, this is a specific version of bundled VMware software supported by
* Oracle Cloud VMware Solution (see
* {@link #listSupportedVmwareSoftwareVersions(ListSupportedVmwareSoftwareVersionsRequest) listSupportedVmwareSoftwareVersions}).
* <p>
This attribute is not guaranteed to reflect the version of
* software currently installed on the ESXi hosts in the Cluster. The purpose
* of this attribute is to show the version of software that the Oracle
* Cloud VMware Solution will install on any new ESXi hosts that you *add to this
* Cluster in the future* with {@link #createEsxiHost(CreateEsxiHostRequest) createEsxiHost}.
* <p>
Therefore, if you upgrade the existing ESXi hosts in the Cluster to use a newer
* version of bundled VMware software supported by the Oracle Cloud VMware Solution, you
* should use {@link #updateCluster(UpdateClusterRequest) updateCluster} to update the Cluster's
* {@code vmwareSoftwareVersion} with that new version.
* 
    */
  "vmwareSoftwareVersion": string;
  /**
    * In general, this is a specific version of bundled ESXi software supported by
* Oracle Cloud VMware Solution (see
* {@link #listSupportedVmwareSoftwareVersions(ListSupportedVmwareSoftwareVersionsRequest) listSupportedVmwareSoftwareVersions}).
* <p>
This attribute is not guaranteed to reflect the version of
* software currently installed on the ESXi hosts in the SDDC. The purpose
* of this attribute is to show the version of software that the Oracle
* Cloud VMware Solution will install on any new ESXi hosts that you *add to this
* SDDC in the future* with {@link #createEsxiHost(CreateEsxiHostRequest) createEsxiHost} 
* unless a different version is configured on the ESXi host level.
* <p>
Therefore, if you upgrade the existing ESXi hosts in the Cluster to use a newer
* version of bundled ESXi software supported by the Oracle Cloud VMware Solution, you
* should use {@link #updateCluster(UpdateClusterRequest) updateCluster} to update the Cluster's
* {@code esxiSoftwareVersion} with that new version.
* 
    */
  "esxiSoftwareVersion"?: string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment that
   * contains the Cluster.
   *
   */
  "compartmentId": string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the SDDC that the
   * Cluster belongs to.
   *
   */
  "sddcId": string;
  /**
   * The number of ESXi hosts in the Cluster. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "esxiHostsCount": number;
  /**
   * The billing option selected during Cluster creation.
   * {@link #listSupportedCommitments(ListSupportedCommitmentsRequest) listSupportedCommitments}.
   *
   */
  "initialCommitment"?: model.Commitment;
  /**
   * The CIDR block for the IP addresses that VMware VMs in the SDDC use to run application
   * workloads.
   *
   */
  "workloadNetworkCidr"?: string;
  "networkConfiguration": model.NetworkConfiguration;
  /**
    * The date and time the Cluster was created, in the format defined by
* [RFC3339](https://tools.ietf.org/html/rfc3339).
* <p>
Example: {@code 2016-08-25T21:10:29.600Z}
* 
    */
  "timeCreated": Date;
  /**
   * The date and time the Cluster was updated, in the format defined by
   * [RFC3339](https://tools.ietf.org/html/rfc3339).
   *
   */
  "timeUpdated"?: Date;
  /**
   * The current state of the Cluster.
   */
  "lifecycleState"?: model.LifecycleStates;
  /**
   * The vSphere licenses to use when upgrading the Cluster.
   *
   */
  "upgradeLicenses"?: Array<model.VsphereLicense>;
  /**
   * The links to binary objects needed to upgrade vSphere.
   *
   */
  "vsphereUpgradeObjects"?: Array<model.VsphereUpgradeObject>;
  /**
   * The initial compute shape of the Cluster's ESXi hosts.
   * {@link #listSupportedHostShapes(ListSupportedHostShapesRequest) listSupportedHostShapes}.
   *
   */
  "initialHostShapeName": string;
  /**
   * The initial OCPU count of the Cluster's ESXi hosts.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "initialHostOcpuCount"?: number;
  /**
   * Indicates whether shielded instance is enabled at the Cluster level.
   *
   */
  "isShieldedInstanceEnabled"?: boolean;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Capacity Reservation.
   *
   */
  "capacityReservationId"?: string;
  /**
   * Datastores used for the Cluster.
   *
   */
  "datastores"?: Array<model.DatastoreDetails>;
  /**
   * vSphere Cluster types.
   *
   */
  "vsphereType": model.VsphereTypes;
  /**
    * Free-form tags for this resource. Each tag is a simple key-value pair with no
* predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Department\": \"Finance\"}}
* 
    */
  "freeformTags": { [key: string]: string };
  /**
    * Defined tags for this resource. Each key is predefined and scoped to a
* namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
* 
    */
  "definedTags": { [key: string]: { [key: string]: any } };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces.
   * Example: {@code {orcl-cloud: {free-tier-retain: true}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
}

export namespace Cluster {
  export function getJsonObj(obj: Cluster): object {
    const jsonObj = {
      ...obj,
      ...{
        "networkConfiguration": obj.networkConfiguration
          ? model.NetworkConfiguration.getJsonObj(obj.networkConfiguration)
          : undefined,

        "upgradeLicenses": obj.upgradeLicenses
          ? obj.upgradeLicenses.map(item => {
              return model.VsphereLicense.getJsonObj(item);
            })
          : undefined,
        "vsphereUpgradeObjects": obj.vsphereUpgradeObjects
          ? obj.vsphereUpgradeObjects.map(item => {
              return model.VsphereUpgradeObject.getJsonObj(item);
            })
          : undefined,

        "datastores": obj.datastores
          ? obj.datastores.map(item => {
              return model.DatastoreDetails.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: Cluster): object {
    const jsonObj = {
      ...obj,
      ...{
        "networkConfiguration": obj.networkConfiguration
          ? model.NetworkConfiguration.getDeserializedJsonObj(obj.networkConfiguration)
          : undefined,

        "upgradeLicenses": obj.upgradeLicenses
          ? obj.upgradeLicenses.map(item => {
              return model.VsphereLicense.getDeserializedJsonObj(item);
            })
          : undefined,
        "vsphereUpgradeObjects": obj.vsphereUpgradeObjects
          ? obj.vsphereUpgradeObjects.map(item => {
              return model.VsphereUpgradeObject.getDeserializedJsonObj(item);
            })
          : undefined,

        "datastores": obj.datastores
          ? obj.datastores.map(item => {
              return model.DatastoreDetails.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
