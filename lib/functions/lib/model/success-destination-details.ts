/**
 * Functions Service API
 * API for the Functions service.

 * OpenAPI spec version: 20181201
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
* An object that represents the destination to which Oracle Functions will send an invocation record with the details of the successful detached function invocation.
* A stream is an example of a success destination.
* <p>
Example: {@code {\"kind\": \"STREAM\", \"streamId\": \"stream_OCID\"}}
* 
*/
export interface SuccessDestinationDetails {
  "kind": string;
}

export namespace SuccessDestinationDetails {
  export function getJsonObj(obj: SuccessDestinationDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "kind" in obj && obj.kind) {
      switch (obj.kind) {
        case "STREAM":
          return model.StreamSuccessDestinationDetails.getJsonObj(
            <model.StreamSuccessDestinationDetails>(<object>jsonObj),
            true
          );
        case "NOTIFICATION":
          return model.NotificationSuccessDestinationDetails.getJsonObj(
            <model.NotificationSuccessDestinationDetails>(<object>jsonObj),
            true
          );
        case "QUEUE":
          return model.QueueSuccessDestinationDetails.getJsonObj(
            <model.QueueSuccessDestinationDetails>(<object>jsonObj),
            true
          );
        case "NONE":
          return model.NoneSuccessDestinationDetails.getJsonObj(
            <model.NoneSuccessDestinationDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.kind}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: SuccessDestinationDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "kind" in obj && obj.kind) {
      switch (obj.kind) {
        case "STREAM":
          return model.StreamSuccessDestinationDetails.getDeserializedJsonObj(
            <model.StreamSuccessDestinationDetails>(<object>jsonObj),
            true
          );
        case "NOTIFICATION":
          return model.NotificationSuccessDestinationDetails.getDeserializedJsonObj(
            <model.NotificationSuccessDestinationDetails>(<object>jsonObj),
            true
          );
        case "QUEUE":
          return model.QueueSuccessDestinationDetails.getDeserializedJsonObj(
            <model.QueueSuccessDestinationDetails>(<object>jsonObj),
            true
          );
        case "NONE":
          return model.NoneSuccessDestinationDetails.getDeserializedJsonObj(
            <model.NoneSuccessDestinationDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.kind}`);
      }
    }
    return jsonObj;
  }
}
