/**
 * OpenSearch Service API
 * The OpenSearch service API provides access to OCI Search Service with OpenSearch.
 * OpenAPI spec version: 20180828
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The summary of information about an OpenSearch cluster Pipeline.
 */
export interface OpensearchClusterPipelineSummary {
  /**
   * The OCID of the cluster pipeline.
   */
  "id": string;
  /**
   * The name of the cluster pipeline. Avoid entering confidential information.
   */
  "displayName": string;
  /**
   * The OCID of the compartment where the cluster pipeline is located.
   */
  "compartmentId": string;
  /**
   * The OCID of the pipeline's VCN.
   */
  "vcnId"?: string;
  /**
   * The OCID of the pipeline's subnet.
   */
  "subnetId"?: string;
  /**
   * The number of OCPUs configured for each pipeline node. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "ocpuCount": number;
  /**
   * The amount of memory in GB, for each pipeline node. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "memoryGB": number;
  /**
   * The number of nodes configured for the pipeline. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "nodeCount": number;
  /**
   * The pipeline node shape.
   */
  "nodeShape"?: string;
  /**
   * The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \\.
   *
   */
  "pipelineConfigurationBody": string;
  /**
   * The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \\.
   *
   */
  "dataPrepperConfigurationBody": string;
  /**
   * The current state of the cluster pipeline.
   */
  "lifecycleState": string;
  /**
   * The current state of the pipeline.
   */
  "pipelineMode": string;
  /**
   * The date and time the cluster pipeline was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   */
  "timeCreated"?: Date;
  /**
   * The date and time the cluster pipeline was updated. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   */
  "timeUpdated"?: Date;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
}

export namespace OpensearchClusterPipelineSummary {
  export function getJsonObj(obj: OpensearchClusterPipelineSummary): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: OpensearchClusterPipelineSummary): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
