/**
 * Generative AI Service Management API
 * OCI Generative AI is a fully managed service that provides a set of state-of-the-art, customizable large language models (LLMs) that cover a wide range of use cases for text generation, summarization, and text embeddings. 

Use the Generative AI service management API to create and manage {@link DedicatedAiCluster}, {@link Endpoint}, {@link Model}, and {@link WorkRequest} in the Generative AI service. For example, create a custom model by fine-tuning an out-of-the-box model using your own data, on a fine-tuning dedicated AI cluster. Then, create a hosting dedicated AI cluster with an endpoint to host your custom model. 

To access your custom model endpoints, or to try the out-of-the-box models to generate text, summarize, and create text embeddings see the [Generative AI Inference API](https://docs.oracle.com/iaas/api/#/en/generative-ai-inference/latest/).

To learn more about the service, see the [Generative AI documentation](https://docs.oracle.com/iaas/Content/generative-ai/home.htm).

 * OpenAPI spec version: 20231130
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { GenerativeAiWaiter } from "./generativeai-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum GenerativeAiApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class GenerativeAiClient {
  protected static serviceEndpointTemplate =
    "https://generativeai.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": GenerativeAiWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "GenerativeAi";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("generativeai")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("generativeai");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20231130";
    if (this.logger) this.logger.info(`GenerativeAiClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        GenerativeAiClient.serviceEndpointTemplate,
        this._region,
        GenerativeAiClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        GenerativeAiClient.serviceEndpointTemplate,
        this._regionId,
        GenerativeAiClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      GenerativeAiClient.serviceEndpointTemplate,
      region,
      GenerativeAiClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      GenerativeAiClient.serviceEndpointTemplate,
      regionId,
      GenerativeAiClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new GenerativeAiWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): GenerativeAiWaiter {
    this._waiters = new GenerativeAiWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): GenerativeAiWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves a dedicated AI cluster into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDedicatedAiClusterCompartmentRequest
   * @return ChangeDedicatedAiClusterCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/ChangeDedicatedAiClusterCompartment.ts.html |here} to see how to use ChangeDedicatedAiClusterCompartment API.
   */
  public async changeDedicatedAiClusterCompartment(
    changeDedicatedAiClusterCompartmentRequest: requests.ChangeDedicatedAiClusterCompartmentRequest
  ): Promise<responses.ChangeDedicatedAiClusterCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation GenerativeAiClient#changeDedicatedAiClusterCompartment."
      );
    const operationName = "changeDedicatedAiClusterCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{dedicatedAiClusterId}": changeDedicatedAiClusterCompartmentRequest.dedicatedAiClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDedicatedAiClusterCompartmentRequest.ifMatch,
      "opc-request-id": changeDedicatedAiClusterCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDedicatedAiClusterCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDedicatedAiClusterCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedAiClusters/{dedicatedAiClusterId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDedicatedAiClusterCompartmentRequest.changeDedicatedAiClusterCompartmentDetails,
        "ChangeDedicatedAiClusterCompartmentDetails",
        model.ChangeDedicatedAiClusterCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDedicatedAiClusterCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves an endpoint into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeEndpointCompartmentRequest
   * @return ChangeEndpointCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/ChangeEndpointCompartment.ts.html |here} to see how to use ChangeEndpointCompartment API.
   */
  public async changeEndpointCompartment(
    changeEndpointCompartmentRequest: requests.ChangeEndpointCompartmentRequest
  ): Promise<responses.ChangeEndpointCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#changeEndpointCompartment.");
    const operationName = "changeEndpointCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{endpointId}": changeEndpointCompartmentRequest.endpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeEndpointCompartmentRequest.ifMatch,
      "opc-request-id": changeEndpointCompartmentRequest.opcRequestId,
      "opc-retry-token": changeEndpointCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeEndpointCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints/{endpointId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeEndpointCompartmentRequest.changeEndpointCompartmentDetails,
        "ChangeEndpointCompartmentDetails",
        model.ChangeEndpointCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeEndpointCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Generative AI private endpoint into a different compartment. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeGenerativeAiPrivateEndpointCompartmentRequest
   * @return ChangeGenerativeAiPrivateEndpointCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/ChangeGenerativeAiPrivateEndpointCompartment.ts.html |here} to see how to use ChangeGenerativeAiPrivateEndpointCompartment API.
   */
  public async changeGenerativeAiPrivateEndpointCompartment(
    changeGenerativeAiPrivateEndpointCompartmentRequest: requests.ChangeGenerativeAiPrivateEndpointCompartmentRequest
  ): Promise<responses.ChangeGenerativeAiPrivateEndpointCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation GenerativeAiClient#changeGenerativeAiPrivateEndpointCompartment."
      );
    const operationName = "changeGenerativeAiPrivateEndpointCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{generativeAiPrivateEndpointId}":
        changeGenerativeAiPrivateEndpointCompartmentRequest.generativeAiPrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeGenerativeAiPrivateEndpointCompartmentRequest.opcRequestId,
      "if-match": changeGenerativeAiPrivateEndpointCompartmentRequest.ifMatch,
      "opc-retry-token": changeGenerativeAiPrivateEndpointCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeGenerativeAiPrivateEndpointCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/generativeAiPrivateEndpoints/{generativeAiPrivateEndpointId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeGenerativeAiPrivateEndpointCompartmentRequest.changeGenerativeAiPrivateEndpointCompartmentDetails,
        "ChangeGenerativeAiPrivateEndpointCompartmentDetails",
        model.ChangeGenerativeAiPrivateEndpointCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeGenerativeAiPrivateEndpointCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a custom model into a different compartment. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeModelCompartmentRequest
   * @return ChangeModelCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/ChangeModelCompartment.ts.html |here} to see how to use ChangeModelCompartment API.
   */
  public async changeModelCompartment(
    changeModelCompartmentRequest: requests.ChangeModelCompartmentRequest
  ): Promise<responses.ChangeModelCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#changeModelCompartment.");
    const operationName = "changeModelCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{modelId}": changeModelCompartmentRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeModelCompartmentRequest.ifMatch,
      "opc-request-id": changeModelCompartmentRequest.opcRequestId,
      "opc-retry-token": changeModelCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeModelCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeModelCompartmentRequest.changeModelCompartmentDetails,
        "ChangeModelCompartmentDetails",
        model.ChangeModelCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeModelCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a dedicated AI cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDedicatedAiClusterRequest
   * @return CreateDedicatedAiClusterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/CreateDedicatedAiCluster.ts.html |here} to see how to use CreateDedicatedAiCluster API.
   */
  public async createDedicatedAiCluster(
    createDedicatedAiClusterRequest: requests.CreateDedicatedAiClusterRequest
  ): Promise<responses.CreateDedicatedAiClusterResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#createDedicatedAiCluster.");
    const operationName = "createDedicatedAiCluster";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDedicatedAiClusterRequest.opcRetryToken,
      "opc-request-id": createDedicatedAiClusterRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDedicatedAiClusterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedAiClusters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDedicatedAiClusterRequest.createDedicatedAiClusterDetails,
        "CreateDedicatedAiClusterDetails",
        model.CreateDedicatedAiClusterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDedicatedAiClusterResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedAiCluster",
        bodyModel: model.DedicatedAiCluster,
        type: "model.DedicatedAiCluster",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("model-deprecation-info"),
            key: "modelDeprecationInfo",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates an endpoint.
* <p>
The header contains an opc-work-request-id, which is the id for the WorkRequest that tracks the endpoint creation progress.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateEndpointRequest
     * @return CreateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/CreateEndpoint.ts.html |here} to see how to use CreateEndpoint API.
     */
  public async createEndpoint(
    createEndpointRequest: requests.CreateEndpointRequest
  ): Promise<responses.CreateEndpointResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#createEndpoint.");
    const operationName = "createEndpoint";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createEndpointRequest.opcRetryToken,
      "opc-request-id": createEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createEndpointRequest.createEndpointDetails,
        "CreateEndpointDetails",
        model.CreateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "endpoint",
        bodyModel: model.Endpoint,
        type: "model.Endpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("model-deprecation-info"),
            key: "modelDeprecationInfo",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a Generative AI private endpoint.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateGenerativeAiPrivateEndpointRequest
   * @return CreateGenerativeAiPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/CreateGenerativeAiPrivateEndpoint.ts.html |here} to see how to use CreateGenerativeAiPrivateEndpoint API.
   */
  public async createGenerativeAiPrivateEndpoint(
    createGenerativeAiPrivateEndpointRequest: requests.CreateGenerativeAiPrivateEndpointRequest
  ): Promise<responses.CreateGenerativeAiPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#createGenerativeAiPrivateEndpoint.");
    const operationName = "createGenerativeAiPrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createGenerativeAiPrivateEndpointRequest.opcRetryToken,
      "opc-request-id": createGenerativeAiPrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createGenerativeAiPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/generativeAiPrivateEndpoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createGenerativeAiPrivateEndpointRequest.createGenerativeAiPrivateEndpointDetails,
        "CreateGenerativeAiPrivateEndpointDetails",
        model.CreateGenerativeAiPrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateGenerativeAiPrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "generativeAiPrivateEndpoint",
        bodyModel: model.GenerativeAiPrivateEndpoint,
        type: "model.GenerativeAiPrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a custom model by fine-tuning a base model with your own dataset. You can create a new custom models or create a new version of existing custom model..
* <p>
The header contains an opc-work-request-id, which is the id for the WorkRequest that tracks the model creation progress.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateModelRequest
     * @return CreateModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/CreateModel.ts.html |here} to see how to use CreateModel API.
     */
  public async createModel(
    createModelRequest: requests.CreateModelRequest
  ): Promise<responses.CreateModelResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#createModel.");
    const operationName = "createModel";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createModelRequest.opcRetryToken,
      "opc-request-id": createModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createModelRequest.createModelDetails,
        "CreateModelDetails",
        model.CreateModelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("model-deprecation-info"),
            key: "modelDeprecationInfo",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes a dedicated AI cluster.
* <p>
You can only delete clusters without attached resources. Before you delete a hosting dedicated AI cluster, you must delete the endpoints associated to that cluster. Before you delete a fine-tuning dedicated AI cluster, you must delete the custom model on that cluster. The delete action permanently deletes the cluster. This action can't be undone.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDedicatedAiClusterRequest
     * @return DeleteDedicatedAiClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/DeleteDedicatedAiCluster.ts.html |here} to see how to use DeleteDedicatedAiCluster API.
     */
  public async deleteDedicatedAiCluster(
    deleteDedicatedAiClusterRequest: requests.DeleteDedicatedAiClusterRequest
  ): Promise<responses.DeleteDedicatedAiClusterResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#deleteDedicatedAiCluster.");
    const operationName = "deleteDedicatedAiCluster";
    const apiReferenceLink = "";
    const pathParams = {
      "{dedicatedAiClusterId}": deleteDedicatedAiClusterRequest.dedicatedAiClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDedicatedAiClusterRequest.ifMatch,
      "opc-request-id": deleteDedicatedAiClusterRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDedicatedAiClusterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedAiClusters/{dedicatedAiClusterId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDedicatedAiClusterResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an endpoint.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteEndpointRequest
   * @return DeleteEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/DeleteEndpoint.ts.html |here} to see how to use DeleteEndpoint API.
   */
  public async deleteEndpoint(
    deleteEndpointRequest: requests.DeleteEndpointRequest
  ): Promise<responses.DeleteEndpointResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#deleteEndpoint.");
    const operationName = "deleteEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{endpointId}": deleteEndpointRequest.endpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteEndpointRequest.ifMatch,
      "opc-request-id": deleteEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints/{endpointId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Generative AI  private endpoint using `privateEndpointId`.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteGenerativeAiPrivateEndpointRequest
   * @return DeleteGenerativeAiPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/DeleteGenerativeAiPrivateEndpoint.ts.html |here} to see how to use DeleteGenerativeAiPrivateEndpoint API.
   */
  public async deleteGenerativeAiPrivateEndpoint(
    deleteGenerativeAiPrivateEndpointRequest: requests.DeleteGenerativeAiPrivateEndpointRequest
  ): Promise<responses.DeleteGenerativeAiPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#deleteGenerativeAiPrivateEndpoint.");
    const operationName = "deleteGenerativeAiPrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{generativeAiPrivateEndpointId}":
        deleteGenerativeAiPrivateEndpointRequest.generativeAiPrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteGenerativeAiPrivateEndpointRequest.opcRequestId,
      "if-match": deleteGenerativeAiPrivateEndpointRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteGenerativeAiPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/generativeAiPrivateEndpoints/{generativeAiPrivateEndpointId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteGenerativeAiPrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a custom model. A model shouldn't be deleted if there's one or more active endpoints associated with that model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteModelRequest
   * @return DeleteModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/DeleteModel.ts.html |here} to see how to use DeleteModel API.
   */
  public async deleteModel(
    deleteModelRequest: requests.DeleteModelRequest
  ): Promise<responses.DeleteModelResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#deleteModel.");
    const operationName = "deleteModel";
    const apiReferenceLink = "";
    const pathParams = {
      "{modelId}": deleteModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteModelRequest.ifMatch,
      "opc-request-id": deleteModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteModelResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a dedicated AI cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDedicatedAiClusterRequest
   * @return GetDedicatedAiClusterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/GetDedicatedAiCluster.ts.html |here} to see how to use GetDedicatedAiCluster API.
   */
  public async getDedicatedAiCluster(
    getDedicatedAiClusterRequest: requests.GetDedicatedAiClusterRequest
  ): Promise<responses.GetDedicatedAiClusterResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#getDedicatedAiCluster.");
    const operationName = "getDedicatedAiCluster";
    const apiReferenceLink = "";
    const pathParams = {
      "{dedicatedAiClusterId}": getDedicatedAiClusterRequest.dedicatedAiClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDedicatedAiClusterRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDedicatedAiClusterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedAiClusters/{dedicatedAiClusterId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDedicatedAiClusterResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedAiCluster",
        bodyModel: model.DedicatedAiCluster,
        type: "model.DedicatedAiCluster",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about an endpoint.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetEndpointRequest
   * @return GetEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/GetEndpoint.ts.html |here} to see how to use GetEndpoint API.
   */
  public async getEndpoint(
    getEndpointRequest: requests.GetEndpointRequest
  ): Promise<responses.GetEndpointResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#getEndpoint.");
    const operationName = "getEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{endpointId}": getEndpointRequest.endpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints/{endpointId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetEndpointResponse>{},
        body: await response.json(),
        bodyKey: "endpoint",
        bodyModel: model.Endpoint,
        type: "model.Endpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves an Generative AI private endpoint using a `privateEndpointId`.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetGenerativeAiPrivateEndpointRequest
   * @return GetGenerativeAiPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/GetGenerativeAiPrivateEndpoint.ts.html |here} to see how to use GetGenerativeAiPrivateEndpoint API.
   */
  public async getGenerativeAiPrivateEndpoint(
    getGenerativeAiPrivateEndpointRequest: requests.GetGenerativeAiPrivateEndpointRequest
  ): Promise<responses.GetGenerativeAiPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#getGenerativeAiPrivateEndpoint.");
    const operationName = "getGenerativeAiPrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{generativeAiPrivateEndpointId}":
        getGenerativeAiPrivateEndpointRequest.generativeAiPrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getGenerativeAiPrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getGenerativeAiPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/generativeAiPrivateEndpoints/{generativeAiPrivateEndpointId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetGenerativeAiPrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "generativeAiPrivateEndpoint",
        bodyModel: model.GenerativeAiPrivateEndpoint,
        type: "model.GenerativeAiPrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a custom model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetModelRequest
   * @return GetModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/GetModel.ts.html |here} to see how to use GetModel API.
   */
  public async getModel(
    getModelRequest: requests.GetModelRequest
  ): Promise<responses.GetModelResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#getModel.");
    const operationName = "getModel";
    const apiReferenceLink = "";
    const pathParams = {
      "{modelId}": getModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of a work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the dedicated AI clusters in a specific compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDedicatedAiClustersRequest
   * @return ListDedicatedAiClustersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/ListDedicatedAiClusters.ts.html |here} to see how to use ListDedicatedAiClusters API.
   */
  public async listDedicatedAiClusters(
    listDedicatedAiClustersRequest: requests.ListDedicatedAiClustersRequest
  ): Promise<responses.ListDedicatedAiClustersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#listDedicatedAiClusters.");
    const operationName = "listDedicatedAiClusters";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDedicatedAiClustersRequest.compartmentId,
      "lifecycleState": listDedicatedAiClustersRequest.lifecycleState,
      "displayName": listDedicatedAiClustersRequest.displayName,
      "id": listDedicatedAiClustersRequest.id,
      "limit": listDedicatedAiClustersRequest.limit,
      "page": listDedicatedAiClustersRequest.page,
      "sortOrder": listDedicatedAiClustersRequest.sortOrder,
      "sortBy": listDedicatedAiClustersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDedicatedAiClustersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDedicatedAiClustersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedAiClusters",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDedicatedAiClustersResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedAiClusterCollection",
        bodyModel: model.DedicatedAiClusterCollection,
        type: "model.DedicatedAiClusterCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the endpoints of a specific compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListEndpointsRequest
   * @return ListEndpointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/ListEndpoints.ts.html |here} to see how to use ListEndpoints API.
   */
  public async listEndpoints(
    listEndpointsRequest: requests.ListEndpointsRequest
  ): Promise<responses.ListEndpointsResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#listEndpoints.");
    const operationName = "listEndpoints";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listEndpointsRequest.compartmentId,
      "lifecycleState": listEndpointsRequest.lifecycleState,
      "displayName": listEndpointsRequest.displayName,
      "id": listEndpointsRequest.id,
      "generativeAiPrivateEndpointId": listEndpointsRequest.generativeAiPrivateEndpointId,
      "limit": listEndpointsRequest.limit,
      "page": listEndpointsRequest.page,
      "sortOrder": listEndpointsRequest.sortOrder,
      "sortBy": listEndpointsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listEndpointsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listEndpointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEndpointsResponse>{},
        body: await response.json(),
        bodyKey: "endpointCollection",
        bodyModel: model.EndpointCollection,
        type: "model.EndpointCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all Generative AI private endpoints in the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListGenerativeAiPrivateEndpointsRequest
   * @return ListGenerativeAiPrivateEndpointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/ListGenerativeAiPrivateEndpoints.ts.html |here} to see how to use ListGenerativeAiPrivateEndpoints API.
   */
  public async listGenerativeAiPrivateEndpoints(
    listGenerativeAiPrivateEndpointsRequest: requests.ListGenerativeAiPrivateEndpointsRequest
  ): Promise<responses.ListGenerativeAiPrivateEndpointsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#listGenerativeAiPrivateEndpoints.");
    const operationName = "listGenerativeAiPrivateEndpoints";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "id": listGenerativeAiPrivateEndpointsRequest.id,
      "compartmentId": listGenerativeAiPrivateEndpointsRequest.compartmentId,
      "lifecycleState": listGenerativeAiPrivateEndpointsRequest.lifecycleState,
      "sortBy": listGenerativeAiPrivateEndpointsRequest.sortBy,
      "displayName": listGenerativeAiPrivateEndpointsRequest.displayName,
      "limit": listGenerativeAiPrivateEndpointsRequest.limit,
      "page": listGenerativeAiPrivateEndpointsRequest.page,
      "sortOrder": listGenerativeAiPrivateEndpointsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listGenerativeAiPrivateEndpointsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listGenerativeAiPrivateEndpointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/generativeAiPrivateEndpoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListGenerativeAiPrivateEndpointsResponse>{},
        body: await response.json(),
        bodyKey: "generativeAiPrivateEndpointCollection",
        bodyModel: model.GenerativeAiPrivateEndpointCollection,
        type: "model.GenerativeAiPrivateEndpointCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the models in a specific compartment. Includes pretrained base models and fine-tuned custom models.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListModelsRequest
   * @return ListModelsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/ListModels.ts.html |here} to see how to use ListModels API.
   */
  public async listModels(
    listModelsRequest: requests.ListModelsRequest
  ): Promise<responses.ListModelsResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#listModels.");
    const operationName = "listModels";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "vendor": listModelsRequest.vendor,
      "capability": listModelsRequest.capability,
      "compartmentId": listModelsRequest.compartmentId,
      "lifecycleState": listModelsRequest.lifecycleState,
      "displayName": listModelsRequest.displayName,
      "id": listModelsRequest.id,
      "limit": listModelsRequest.limit,
      "page": listModelsRequest.page,
      "sortOrder": listModelsRequest.sortOrder,
      "sortBy": listModelsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listModelsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listModelsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListModelsResponse>{},
        body: await response.json(),
        bodyKey: "modelCollection",
        bodyModel: model.ModelCollection,
        type: "model.ModelCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the errors for a work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the logs for a work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a dedicated AI cluster.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDedicatedAiClusterRequest
   * @return UpdateDedicatedAiClusterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/UpdateDedicatedAiCluster.ts.html |here} to see how to use UpdateDedicatedAiCluster API.
   */
  public async updateDedicatedAiCluster(
    updateDedicatedAiClusterRequest: requests.UpdateDedicatedAiClusterRequest
  ): Promise<responses.UpdateDedicatedAiClusterResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#updateDedicatedAiCluster.");
    const operationName = "updateDedicatedAiCluster";
    const apiReferenceLink = "";
    const pathParams = {
      "{dedicatedAiClusterId}": updateDedicatedAiClusterRequest.dedicatedAiClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDedicatedAiClusterRequest.ifMatch,
      "opc-request-id": updateDedicatedAiClusterRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDedicatedAiClusterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedAiClusters/{dedicatedAiClusterId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDedicatedAiClusterRequest.updateDedicatedAiClusterDetails,
        "UpdateDedicatedAiClusterDetails",
        model.UpdateDedicatedAiClusterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDedicatedAiClusterResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedAiCluster",
        bodyModel: model.DedicatedAiCluster,
        type: "model.DedicatedAiCluster",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the properties of an endpoint.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateEndpointRequest
   * @return UpdateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/UpdateEndpoint.ts.html |here} to see how to use UpdateEndpoint API.
   */
  public async updateEndpoint(
    updateEndpointRequest: requests.UpdateEndpointRequest
  ): Promise<responses.UpdateEndpointResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#updateEndpoint.");
    const operationName = "updateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{endpointId}": updateEndpointRequest.endpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateEndpointRequest.ifMatch,
      "opc-request-id": updateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints/{endpointId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateEndpointRequest.updateEndpointDetails,
        "UpdateEndpointDetails",
        model.UpdateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "endpoint",
        bodyModel: model.Endpoint,
        type: "model.Endpoint",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a Generative AI private endpoint using a `privateEndpointId`.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateGenerativeAiPrivateEndpointRequest
   * @return UpdateGenerativeAiPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/UpdateGenerativeAiPrivateEndpoint.ts.html |here} to see how to use UpdateGenerativeAiPrivateEndpoint API.
   */
  public async updateGenerativeAiPrivateEndpoint(
    updateGenerativeAiPrivateEndpointRequest: requests.UpdateGenerativeAiPrivateEndpointRequest
  ): Promise<responses.UpdateGenerativeAiPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GenerativeAiClient#updateGenerativeAiPrivateEndpoint.");
    const operationName = "updateGenerativeAiPrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{generativeAiPrivateEndpointId}":
        updateGenerativeAiPrivateEndpointRequest.generativeAiPrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateGenerativeAiPrivateEndpointRequest.opcRequestId,
      "if-match": updateGenerativeAiPrivateEndpointRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateGenerativeAiPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/generativeAiPrivateEndpoints/{generativeAiPrivateEndpointId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateGenerativeAiPrivateEndpointRequest.updateGenerativeAiPrivateEndpointDetails,
        "UpdateGenerativeAiPrivateEndpointDetails",
        model.UpdateGenerativeAiPrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateGenerativeAiPrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "generativeAiPrivateEndpoint",
        bodyModel: model.GenerativeAiPrivateEndpoint,
        type: "model.GenerativeAiPrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the properties of a custom model such as name, description, version, freeform tags, and defined tags.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateModelRequest
   * @return UpdateModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/generativeai/UpdateModel.ts.html |here} to see how to use UpdateModel API.
   */
  public async updateModel(
    updateModelRequest: requests.UpdateModelRequest
  ): Promise<responses.UpdateModelResponse> {
    if (this.logger) this.logger.debug("Calling operation GenerativeAiClient#updateModel.");
    const operationName = "updateModel";
    const apiReferenceLink = "";
    const pathParams = {
      "{modelId}": updateModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateModelRequest.ifMatch,
      "opc-request-id": updateModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateModelRequest.updateModelDetails,
        "UpdateModelDetails",
        model.UpdateModelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
