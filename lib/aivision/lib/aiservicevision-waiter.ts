/**
 * Vision API
 * Using Vision, you can upload images to detect and classify objects in them. If you have lots of images, you can process them in batch using asynchronous API endpoints. Vision's features are thematically split between Document AI for document-centric images, and Image Analysis for object and scene-based images. Pretrained models and custom models are supported.
 * OpenAPI spec version: 20220125
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { AIServiceVisionClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class AIServiceVisionWaiter {
  public constructor(
    private client: AIServiceVisionClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forDocumentJob till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDocumentJobResponse
   */
  public async forDocumentJob(
    request: serviceRequests.GetDocumentJobRequest,
    ...targetStates: models.DocumentJob.LifecycleState[]
  ): Promise<serviceResponses.GetDocumentJobResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getDocumentJob(request),
      response => targetStates.includes(response.documentJob.lifecycleState!)
    );
  }

  /**
   * Waits forImageJob till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetImageJobResponse
   */
  public async forImageJob(
    request: serviceRequests.GetImageJobRequest,
    ...targetStates: models.ImageJob.LifecycleState[]
  ): Promise<serviceResponses.GetImageJobResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getImageJob(request),
      response => targetStates.includes(response.imageJob.lifecycleState!)
    );
  }

  /**
   * Waits forModel till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetModelResponse | null (null in case of 404 response)
   */
  public async forModel(
    request: serviceRequests.GetModelRequest,
    ...targetStates: models.Model.LifecycleState[]
  ): Promise<serviceResponses.GetModelResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getModel(request),
      response => targetStates.includes(response.model.lifecycleState!),
      targetStates.includes(models.Model.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forProject till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetProjectResponse | null (null in case of 404 response)
   */
  public async forProject(
    request: serviceRequests.GetProjectRequest,
    ...targetStates: models.Project.LifecycleState[]
  ): Promise<serviceResponses.GetProjectResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getProject(request),
      response => targetStates.includes(response.project.lifecycleState!),
      targetStates.includes(models.Project.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forStreamGroup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetStreamGroupResponse | null (null in case of 404 response)
   */
  public async forStreamGroup(
    request: serviceRequests.GetStreamGroupRequest,
    ...targetStates: models.StreamGroup.LifecycleState[]
  ): Promise<serviceResponses.GetStreamGroupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getStreamGroup(request),
      response => targetStates.includes(response.streamGroup.lifecycleState!),
      targetStates.includes(models.StreamGroup.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forStreamJob till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetStreamJobResponse | null (null in case of 404 response)
   */
  public async forStreamJob(
    request: serviceRequests.GetStreamJobRequest,
    ...targetStates: models.StreamJob.LifecycleState[]
  ): Promise<serviceResponses.GetStreamJobResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getStreamJob(request),
      response => targetStates.includes(response.streamJob.lifecycleState!),
      targetStates.includes(models.StreamJob.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forStreamSource till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetStreamSourceResponse | null (null in case of 404 response)
   */
  public async forStreamSource(
    request: serviceRequests.GetStreamSourceRequest,
    ...targetStates: models.StreamSource.LifecycleState[]
  ): Promise<serviceResponses.GetStreamSourceResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getStreamSource(request),
      response => targetStates.includes(response.streamSource.lifecycleState!),
      targetStates.includes(models.StreamSource.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forVideoJob till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVideoJobResponse
   */
  public async forVideoJob(
    request: serviceRequests.GetVideoJobRequest,
    ...targetStates: models.VideoJob.LifecycleState[]
  ): Promise<serviceResponses.GetVideoJobResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getVideoJob(request),
      response => targetStates.includes(response.videoJob.lifecycleState!)
    );
  }

  /**
   * Waits forVisionPrivateEndpoint till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVisionPrivateEndpointResponse | null (null in case of 404 response)
   */
  public async forVisionPrivateEndpoint(
    request: serviceRequests.GetVisionPrivateEndpointRequest,
    ...targetStates: models.VisionPrivateEndpoint.LifecycleState[]
  ): Promise<serviceResponses.GetVisionPrivateEndpointResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVisionPrivateEndpoint(request),
      response => targetStates.includes(response.visionPrivateEndpoint.lifecycleState!),
      targetStates.includes(models.VisionPrivateEndpoint.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
