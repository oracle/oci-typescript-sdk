/**
 * Vision API
 * Using Vision, you can upload images to detect and classify objects in them. If you have lots of images, you can process them in batch using asynchronous API endpoints. Vision's features are thematically split between Document AI for document-centric images, and Image Analysis for object and scene-based images. Pretrained models and custom models are supported.
 * OpenAPI spec version: 20220125
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { AIServiceVisionWaiter } from "./aiservicevision-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AIServiceVisionApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class AIServiceVisionClient {
  protected static serviceEndpointTemplate =
    "https://vision.aiservice.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": AIServiceVisionWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "AIServiceVision";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("aivision")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("aivision");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220125";
    if (this.logger) this.logger.info(`AIServiceVisionClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        AIServiceVisionClient.serviceEndpointTemplate,
        this._region,
        AIServiceVisionClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        AIServiceVisionClient.serviceEndpointTemplate,
        this._regionId,
        AIServiceVisionClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      AIServiceVisionClient.serviceEndpointTemplate,
      region,
      AIServiceVisionClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      AIServiceVisionClient.serviceEndpointTemplate,
      regionId,
      AIServiceVisionClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new AIServiceVisionWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): AIServiceVisionWaiter {
    this._waiters = new AIServiceVisionWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): AIServiceVisionWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Perform different types of image analysis.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AnalyzeDocumentRequest
   * @return AnalyzeDocumentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/AnalyzeDocument.ts.html |here} to see how to use AnalyzeDocument API.
   */
  public async analyzeDocument(
    analyzeDocumentRequest: requests.AnalyzeDocumentRequest
  ): Promise<responses.AnalyzeDocumentResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#analyzeDocument.");
    const operationName = "analyzeDocument";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/AnalyzeDocumentResult/AnalyzeDocument";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": analyzeDocumentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      analyzeDocumentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/analyzeDocument",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        analyzeDocumentRequest.analyzeDocumentDetails,
        "AnalyzeDocumentDetails",
        model.AnalyzeDocumentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AnalyzeDocumentResponse>{},
        body: await response.json(),
        bodyKey: "analyzeDocumentResult",
        bodyModel: model.AnalyzeDocumentResult,
        type: "model.AnalyzeDocumentResult",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Perform different types of image analysis.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AnalyzeImageRequest
   * @return AnalyzeImageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/AnalyzeImage.ts.html |here} to see how to use AnalyzeImage API.
   */
  public async analyzeImage(
    analyzeImageRequest: requests.AnalyzeImageRequest
  ): Promise<responses.AnalyzeImageResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#analyzeImage.");
    const operationName = "analyzeImage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/AnalyzeImageResult/AnalyzeImage";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": analyzeImageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      analyzeImageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/analyzeImage",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        analyzeImageRequest.analyzeImageDetails,
        "AnalyzeImageDetails",
        model.AnalyzeImageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AnalyzeImageResponse>{},
        body: await response.json(),
        bodyKey: "analyzeImageResult",
        bodyModel: model.AnalyzeImageResult,
        type: "model.AnalyzeImageResult",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancel a document batch job.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CancelDocumentJobRequest
   * @return CancelDocumentJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CancelDocumentJob.ts.html |here} to see how to use CancelDocumentJob API.
   */
  public async cancelDocumentJob(
    cancelDocumentJobRequest: requests.CancelDocumentJobRequest
  ): Promise<responses.CancelDocumentJobResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#cancelDocumentJob.");
    const operationName = "cancelDocumentJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/DocumentJob/CancelDocumentJob";
    const pathParams = {
      "{documentJobId}": cancelDocumentJobRequest.documentJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelDocumentJobRequest.ifMatch,
      "opc-request-id": cancelDocumentJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelDocumentJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/documentJobs/{documentJobId}/actions/cancel",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelDocumentJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancel an image batch job.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CancelImageJobRequest
   * @return CancelImageJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CancelImageJob.ts.html |here} to see how to use CancelImageJob API.
   */
  public async cancelImageJob(
    cancelImageJobRequest: requests.CancelImageJobRequest
  ): Promise<responses.CancelImageJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#cancelImageJob.");
    const operationName = "cancelImageJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/ImageJob/CancelImageJob";
    const pathParams = {
      "{imageJobId}": cancelImageJobRequest.imageJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelImageJobRequest.ifMatch,
      "opc-request-id": cancelImageJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelImageJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/imageJobs/{imageJobId}/actions/cancel",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelImageJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancel a video analysis job.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CancelVideoJobRequest
   * @return CancelVideoJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CancelVideoJob.ts.html |here} to see how to use CancelVideoJob API.
   */
  public async cancelVideoJob(
    cancelVideoJobRequest: requests.CancelVideoJobRequest
  ): Promise<responses.CancelVideoJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#cancelVideoJob.");
    const operationName = "cancelVideoJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/VideoJob/CancelVideoJob";
    const pathParams = {
      "{videoJobId}": cancelVideoJobRequest.videoJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelVideoJobRequest.ifMatch,
      "opc-request-id": cancelVideoJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelVideoJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/videoJobs/{videoJobId}/actions/cancel",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelVideoJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancel the work request with the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#cancelWorkRequest.");
    const operationName = "cancelWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/WorkRequest/CancelWorkRequest";
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelWorkRequestRequest.ifMatch,
      "opc-request-id": cancelWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a model from one compartment to another. When provided, If-Match is checked against the ETag values of the resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeModelCompartmentRequest
   * @return ChangeModelCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ChangeModelCompartment.ts.html |here} to see how to use ChangeModelCompartment API.
   */
  public async changeModelCompartment(
    changeModelCompartmentRequest: requests.ChangeModelCompartmentRequest
  ): Promise<responses.ChangeModelCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#changeModelCompartment.");
    const operationName = "changeModelCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/Model/ChangeModelCompartment";
    const pathParams = {
      "{modelId}": changeModelCompartmentRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeModelCompartmentRequest.ifMatch,
      "opc-request-id": changeModelCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeModelCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeModelCompartmentRequest.changeModelCompartmentDetails,
        "ChangeModelCompartmentDetails",
        model.ChangeModelCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeModelCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Move a project from one compartment to another. When provided, If-Match is checked against the ETag values of the resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeProjectCompartmentRequest
   * @return ChangeProjectCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ChangeProjectCompartment.ts.html |here} to see how to use ChangeProjectCompartment API.
   */
  public async changeProjectCompartment(
    changeProjectCompartmentRequest: requests.ChangeProjectCompartmentRequest
  ): Promise<responses.ChangeProjectCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#changeProjectCompartment.");
    const operationName = "changeProjectCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/Project/ChangeProjectCompartment";
    const pathParams = {
      "{projectId}": changeProjectCompartmentRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeProjectCompartmentRequest.ifMatch,
      "opc-request-id": changeProjectCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeProjectCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeProjectCompartmentRequest.changeProjectCompartmentDetails,
        "ChangeProjectCompartmentDetails",
        model.ChangeProjectCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeProjectCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Move a streamGroup from one compartment to another. When provided, If-Match is checked against the ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeStreamGroupCompartmentRequest
   * @return ChangeStreamGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ChangeStreamGroupCompartment.ts.html |here} to see how to use ChangeStreamGroupCompartment API.
   */
  public async changeStreamGroupCompartment(
    changeStreamGroupCompartmentRequest: requests.ChangeStreamGroupCompartmentRequest
  ): Promise<responses.ChangeStreamGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#changeStreamGroupCompartment.");
    const operationName = "changeStreamGroupCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamGroup/ChangeStreamGroupCompartment";
    const pathParams = {
      "{streamGroupId}": changeStreamGroupCompartmentRequest.streamGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeStreamGroupCompartmentRequest.ifMatch,
      "opc-retry-token": changeStreamGroupCompartmentRequest.opcRetryToken,
      "opc-request-id": changeStreamGroupCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeStreamGroupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamGroups/{streamGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeStreamGroupCompartmentRequest.changeStreamGroupCompartmentDetails,
        "ChangeStreamGroupCompartmentDetails",
        model.ChangeStreamGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeStreamGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Move a streamJob from one compartment to another. When provided, If-Match is checked against the ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeStreamJobCompartmentRequest
   * @return ChangeStreamJobCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ChangeStreamJobCompartment.ts.html |here} to see how to use ChangeStreamJobCompartment API.
   */
  public async changeStreamJobCompartment(
    changeStreamJobCompartmentRequest: requests.ChangeStreamJobCompartmentRequest
  ): Promise<responses.ChangeStreamJobCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#changeStreamJobCompartment.");
    const operationName = "changeStreamJobCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamJob/ChangeStreamJobCompartment";
    const pathParams = {
      "{streamJobId}": changeStreamJobCompartmentRequest.streamJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeStreamJobCompartmentRequest.ifMatch,
      "opc-retry-token": changeStreamJobCompartmentRequest.opcRetryToken,
      "opc-request-id": changeStreamJobCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeStreamJobCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamJobs/{streamJobId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeStreamJobCompartmentRequest.changeStreamJobCompartmentDetails,
        "ChangeStreamJobCompartmentDetails",
        model.ChangeStreamJobCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeStreamJobCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Move a streamSource from one compartment to another. When provided, If-Match is checked against the ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeStreamSourceCompartmentRequest
   * @return ChangeStreamSourceCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ChangeStreamSourceCompartment.ts.html |here} to see how to use ChangeStreamSourceCompartment API.
   */
  public async changeStreamSourceCompartment(
    changeStreamSourceCompartmentRequest: requests.ChangeStreamSourceCompartmentRequest
  ): Promise<responses.ChangeStreamSourceCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#changeStreamSourceCompartment.");
    const operationName = "changeStreamSourceCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamSource/ChangeStreamSourceCompartment";
    const pathParams = {
      "{streamSourceId}": changeStreamSourceCompartmentRequest.streamSourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeStreamSourceCompartmentRequest.ifMatch,
      "opc-retry-token": changeStreamSourceCompartmentRequest.opcRetryToken,
      "opc-request-id": changeStreamSourceCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeStreamSourceCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamSources/{streamSourceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeStreamSourceCompartmentRequest.changeStreamSourceCompartmentDetails,
        "ChangeStreamSourceCompartmentDetails",
        model.ChangeStreamSourceCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeStreamSourceCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Move a visionPrivateEndpoint from one compartment to another. When provided, If-Match is checked against the ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeVisionPrivateEndpointCompartmentRequest
   * @return ChangeVisionPrivateEndpointCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ChangeVisionPrivateEndpointCompartment.ts.html |here} to see how to use ChangeVisionPrivateEndpointCompartment API.
   */
  public async changeVisionPrivateEndpointCompartment(
    changeVisionPrivateEndpointCompartmentRequest: requests.ChangeVisionPrivateEndpointCompartmentRequest
  ): Promise<responses.ChangeVisionPrivateEndpointCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation AIServiceVisionClient#changeVisionPrivateEndpointCompartment."
      );
    const operationName = "changeVisionPrivateEndpointCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/VisionPrivateEndpoint/ChangeVisionPrivateEndpointCompartment";
    const pathParams = {
      "{visionPrivateEndpointId}":
        changeVisionPrivateEndpointCompartmentRequest.visionPrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeVisionPrivateEndpointCompartmentRequest.ifMatch,
      "opc-retry-token": changeVisionPrivateEndpointCompartmentRequest.opcRetryToken,
      "opc-request-id": changeVisionPrivateEndpointCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeVisionPrivateEndpointCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/visionPrivateEndpoints/{visionPrivateEndpointId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVisionPrivateEndpointCompartmentRequest.changeVisionPrivateEndpointCompartmentDetails,
        "ChangeVisionPrivateEndpointCompartmentDetails",
        model.ChangeVisionPrivateEndpointCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVisionPrivateEndpointCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a document analysis batch job.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDocumentJobRequest
   * @return CreateDocumentJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CreateDocumentJob.ts.html |here} to see how to use CreateDocumentJob API.
   */
  public async createDocumentJob(
    createDocumentJobRequest: requests.CreateDocumentJobRequest
  ): Promise<responses.CreateDocumentJobResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#createDocumentJob.");
    const operationName = "createDocumentJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/DocumentJob/CreateDocumentJob";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDocumentJobRequest.opcRetryToken,
      "opc-request-id": createDocumentJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDocumentJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/documentJobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDocumentJobRequest.createDocumentJobDetails,
        "CreateDocumentJobDetails",
        model.CreateDocumentJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDocumentJobResponse>{},
        body: await response.json(),
        bodyKey: "documentJob",
        bodyModel: model.DocumentJob,
        type: "model.DocumentJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create an image analysis batch job.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateImageJobRequest
   * @return CreateImageJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CreateImageJob.ts.html |here} to see how to use CreateImageJob API.
   */
  public async createImageJob(
    createImageJobRequest: requests.CreateImageJobRequest
  ): Promise<responses.CreateImageJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#createImageJob.");
    const operationName = "createImageJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/ImageJob/CreateImageJob";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createImageJobRequest.opcRetryToken,
      "opc-request-id": createImageJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createImageJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/imageJobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createImageJobRequest.createImageJobDetails,
        "CreateImageJobDetails",
        model.CreateImageJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateImageJobResponse>{},
        body: await response.json(),
        bodyKey: "imageJob",
        bodyModel: model.ImageJob,
        type: "model.ImageJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new model.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateModelRequest
   * @return CreateModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CreateModel.ts.html |here} to see how to use CreateModel API.
   */
  public async createModel(
    createModelRequest: requests.CreateModelRequest
  ): Promise<responses.CreateModelResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#createModel.");
    const operationName = "createModel";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createModelRequest.opcRetryToken,
      "opc-request-id": createModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createModelRequest.createModelDetails,
        "CreateModelDetails",
        model.CreateModelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new project.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateProjectRequest
   * @return CreateProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CreateProject.ts.html |here} to see how to use CreateProject API.
   */
  public async createProject(
    createProjectRequest: requests.CreateProjectRequest
  ): Promise<responses.CreateProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#createProject.");
    const operationName = "createProject";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createProjectRequest.opcRetryToken,
      "opc-request-id": createProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProjectRequest.createProjectDetails,
        "CreateProjectDetails",
        model.CreateProjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Registration of new streamGroup
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateStreamGroupRequest
   * @return CreateStreamGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CreateStreamGroup.ts.html |here} to see how to use CreateStreamGroup API.
   */
  public async createStreamGroup(
    createStreamGroupRequest: requests.CreateStreamGroupRequest
  ): Promise<responses.CreateStreamGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#createStreamGroup.");
    const operationName = "createStreamGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamGroup/CreateStreamGroup";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createStreamGroupRequest.opcRetryToken,
      "opc-request-id": createStreamGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createStreamGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createStreamGroupRequest.createStreamGroupDetails,
        "CreateStreamGroupDetails",
        model.CreateStreamGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateStreamGroupResponse>{},
        body: await response.json(),
        bodyKey: "streamGroup",
        bodyModel: model.StreamGroup,
        type: "model.StreamGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a stream analysis job with given inputs and features.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateStreamJobRequest
   * @return CreateStreamJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CreateStreamJob.ts.html |here} to see how to use CreateStreamJob API.
   */
  public async createStreamJob(
    createStreamJobRequest: requests.CreateStreamJobRequest
  ): Promise<responses.CreateStreamJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#createStreamJob.");
    const operationName = "createStreamJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamJob/CreateStreamJob";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createStreamJobRequest.opcRetryToken,
      "opc-request-id": createStreamJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createStreamJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamJobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createStreamJobRequest.createStreamJobDetails,
        "CreateStreamJobDetails",
        model.CreateStreamJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateStreamJobResponse>{},
        body: await response.json(),
        bodyKey: "streamJob",
        bodyModel: model.StreamJob,
        type: "model.StreamJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Registration of new streamSource
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateStreamSourceRequest
   * @return CreateStreamSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CreateStreamSource.ts.html |here} to see how to use CreateStreamSource API.
   */
  public async createStreamSource(
    createStreamSourceRequest: requests.CreateStreamSourceRequest
  ): Promise<responses.CreateStreamSourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#createStreamSource.");
    const operationName = "createStreamSource";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamSource/CreateStreamSource";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createStreamSourceRequest.opcRetryToken,
      "opc-request-id": createStreamSourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createStreamSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamSources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createStreamSourceRequest.createStreamSourceDetails,
        "CreateStreamSourceDetails",
        model.CreateStreamSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateStreamSourceResponse>{},
        body: await response.json(),
        bodyKey: "streamSource",
        bodyModel: model.StreamSource,
        type: "model.StreamSource",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a video analysis job with given inputs and features.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateVideoJobRequest
   * @return CreateVideoJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CreateVideoJob.ts.html |here} to see how to use CreateVideoJob API.
   */
  public async createVideoJob(
    createVideoJobRequest: requests.CreateVideoJobRequest
  ): Promise<responses.CreateVideoJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#createVideoJob.");
    const operationName = "createVideoJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/VideoJob/CreateVideoJob";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVideoJobRequest.opcRetryToken,
      "opc-request-id": createVideoJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVideoJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/videoJobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVideoJobRequest.createVideoJobDetails,
        "CreateVideoJobDetails",
        model.CreateVideoJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVideoJobResponse>{},
        body: await response.json(),
        bodyKey: "videoJob",
        bodyModel: model.VideoJob,
        type: "model.VideoJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new visionPrivateEndpoint.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateVisionPrivateEndpointRequest
   * @return CreateVisionPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/CreateVisionPrivateEndpoint.ts.html |here} to see how to use CreateVisionPrivateEndpoint API.
   */
  public async createVisionPrivateEndpoint(
    createVisionPrivateEndpointRequest: requests.CreateVisionPrivateEndpointRequest
  ): Promise<responses.CreateVisionPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#createVisionPrivateEndpoint.");
    const operationName = "createVisionPrivateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVisionPrivateEndpointRequest.opcRetryToken,
      "opc-request-id": createVisionPrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVisionPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/visionPrivateEndpoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVisionPrivateEndpointRequest.createVisionPrivateEndpointDetails,
        "CreateVisionPrivateEndpointDetails",
        model.CreateVisionPrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVisionPrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "visionPrivateEndpoint",
        bodyModel: model.VisionPrivateEndpoint,
        type: "model.VisionPrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a model by identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteModelRequest
   * @return DeleteModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/DeleteModel.ts.html |here} to see how to use DeleteModel API.
   */
  public async deleteModel(
    deleteModelRequest: requests.DeleteModelRequest
  ): Promise<responses.DeleteModelResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#deleteModel.");
    const operationName = "deleteModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/Model/DeleteModel";
    const pathParams = {
      "{modelId}": deleteModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteModelRequest.ifMatch,
      "opc-request-id": deleteModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteModelResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a project by identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteProjectRequest
   * @return DeleteProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/DeleteProject.ts.html |here} to see how to use DeleteProject API.
   */
  public async deleteProject(
    deleteProjectRequest: requests.DeleteProjectRequest
  ): Promise<responses.DeleteProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#deleteProject.");
    const operationName = "deleteProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/Project/DeleteProject";
    const pathParams = {
      "{projectId}": deleteProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteProjectRequest.ifMatch,
      "opc-request-id": deleteProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a  streamGroup
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteStreamGroupRequest
   * @return DeleteStreamGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/DeleteStreamGroup.ts.html |here} to see how to use DeleteStreamGroup API.
   */
  public async deleteStreamGroup(
    deleteStreamGroupRequest: requests.DeleteStreamGroupRequest
  ): Promise<responses.DeleteStreamGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#deleteStreamGroup.");
    const operationName = "deleteStreamGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamGroup/DeleteStreamGroup";
    const pathParams = {
      "{streamGroupId}": deleteStreamGroupRequest.streamGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteStreamGroupRequest.opcRequestId,
      "if-match": deleteStreamGroupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteStreamGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamGroups/{streamGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteStreamGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get details of a stream analysis job.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteStreamJobRequest
   * @return DeleteStreamJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/DeleteStreamJob.ts.html |here} to see how to use DeleteStreamJob API.
   */
  public async deleteStreamJob(
    deleteStreamJobRequest: requests.DeleteStreamJobRequest
  ): Promise<responses.DeleteStreamJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#deleteStreamJob.");
    const operationName = "deleteStreamJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamJob/DeleteStreamJob";
    const pathParams = {
      "{streamJobId}": deleteStreamJobRequest.streamJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteStreamJobRequest.opcRequestId,
      "if-match": deleteStreamJobRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteStreamJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamJobs/{streamJobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteStreamJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a  streamSource
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteStreamSourceRequest
   * @return DeleteStreamSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/DeleteStreamSource.ts.html |here} to see how to use DeleteStreamSource API.
   */
  public async deleteStreamSource(
    deleteStreamSourceRequest: requests.DeleteStreamSourceRequest
  ): Promise<responses.DeleteStreamSourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#deleteStreamSource.");
    const operationName = "deleteStreamSource";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamSource/DeleteStreamSource";
    const pathParams = {
      "{streamSourceId}": deleteStreamSourceRequest.streamSourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteStreamSourceRequest.opcRequestId,
      "if-match": deleteStreamSourceRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteStreamSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamSources/{streamSourceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteStreamSourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a visionPrivateEndpoint by identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteVisionPrivateEndpointRequest
   * @return DeleteVisionPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/DeleteVisionPrivateEndpoint.ts.html |here} to see how to use DeleteVisionPrivateEndpoint API.
   */
  public async deleteVisionPrivateEndpoint(
    deleteVisionPrivateEndpointRequest: requests.DeleteVisionPrivateEndpointRequest
  ): Promise<responses.DeleteVisionPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#deleteVisionPrivateEndpoint.");
    const operationName = "deleteVisionPrivateEndpoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/VisionPrivateEndpoint/DeleteVisionPrivateEndpoint";
    const pathParams = {
      "{visionPrivateEndpointId}": deleteVisionPrivateEndpointRequest.visionPrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVisionPrivateEndpointRequest.ifMatch,
      "opc-request-id": deleteVisionPrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVisionPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/visionPrivateEndpoints/{visionPrivateEndpointId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVisionPrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get details of a document batch job.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDocumentJobRequest
   * @return GetDocumentJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/GetDocumentJob.ts.html |here} to see how to use GetDocumentJob API.
   */
  public async getDocumentJob(
    getDocumentJobRequest: requests.GetDocumentJobRequest
  ): Promise<responses.GetDocumentJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#getDocumentJob.");
    const operationName = "getDocumentJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/DocumentJob/GetDocumentJob";
    const pathParams = {
      "{documentJobId}": getDocumentJobRequest.documentJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDocumentJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDocumentJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/documentJobs/{documentJobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDocumentJobResponse>{},
        body: await response.json(),
        bodyKey: "documentJob",
        bodyModel: model.DocumentJob,
        type: "model.DocumentJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get details of an image batch job.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetImageJobRequest
   * @return GetImageJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/GetImageJob.ts.html |here} to see how to use GetImageJob API.
   */
  public async getImageJob(
    getImageJobRequest: requests.GetImageJobRequest
  ): Promise<responses.GetImageJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#getImageJob.");
    const operationName = "getImageJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/ImageJob/GetImageJob";
    const pathParams = {
      "{imageJobId}": getImageJobRequest.imageJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getImageJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getImageJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/imageJobs/{imageJobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetImageJobResponse>{},
        body: await response.json(),
        bodyKey: "imageJob",
        bodyModel: model.ImageJob,
        type: "model.ImageJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a model by identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetModelRequest
   * @return GetModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/GetModel.ts.html |here} to see how to use GetModel API.
   */
  public async getModel(
    getModelRequest: requests.GetModelRequest
  ): Promise<responses.GetModelResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#getModel.");
    const operationName = "getModel";
    const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/vision/20220125/Model/GetModel";
    const pathParams = {
      "{modelId}": getModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a project by identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetProjectRequest
   * @return GetProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/GetProject.ts.html |here} to see how to use GetProject API.
   */
  public async getProject(
    getProjectRequest: requests.GetProjectRequest
  ): Promise<responses.GetProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#getProject.");
    const operationName = "getProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/Project/GetProject";
    const pathParams = {
      "{projectId}": getProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a  streamGroup
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetStreamGroupRequest
   * @return GetStreamGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/GetStreamGroup.ts.html |here} to see how to use GetStreamGroup API.
   */
  public async getStreamGroup(
    getStreamGroupRequest: requests.GetStreamGroupRequest
  ): Promise<responses.GetStreamGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#getStreamGroup.");
    const operationName = "getStreamGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamGroup/GetStreamGroup";
    const pathParams = {
      "{streamGroupId}": getStreamGroupRequest.streamGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getStreamGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getStreamGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamGroups/{streamGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetStreamGroupResponse>{},
        body: await response.json(),
        bodyKey: "streamGroup",
        bodyModel: model.StreamGroup,
        type: "model.StreamGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get details of a stream analysis job.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetStreamJobRequest
   * @return GetStreamJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/GetStreamJob.ts.html |here} to see how to use GetStreamJob API.
   */
  public async getStreamJob(
    getStreamJobRequest: requests.GetStreamJobRequest
  ): Promise<responses.GetStreamJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#getStreamJob.");
    const operationName = "getStreamJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamJob/GetStreamJob";
    const pathParams = {
      "{streamJobId}": getStreamJobRequest.streamJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getStreamJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getStreamJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamJobs/{streamJobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetStreamJobResponse>{},
        body: await response.json(),
        bodyKey: "streamJob",
        bodyModel: model.StreamJob,
        type: "model.StreamJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a  streamSource
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetStreamSourceRequest
   * @return GetStreamSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/GetStreamSource.ts.html |here} to see how to use GetStreamSource API.
   */
  public async getStreamSource(
    getStreamSourceRequest: requests.GetStreamSourceRequest
  ): Promise<responses.GetStreamSourceResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#getStreamSource.");
    const operationName = "getStreamSource";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamSource/GetStreamSource";
    const pathParams = {
      "{streamSourceId}": getStreamSourceRequest.streamSourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getStreamSourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getStreamSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamSources/{streamSourceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetStreamSourceResponse>{},
        body: await response.json(),
        bodyKey: "streamSource",
        bodyModel: model.StreamSource,
        type: "model.StreamSource",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get details of a video analysis job.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetVideoJobRequest
   * @return GetVideoJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/GetVideoJob.ts.html |here} to see how to use GetVideoJob API.
   */
  public async getVideoJob(
    getVideoJobRequest: requests.GetVideoJobRequest
  ): Promise<responses.GetVideoJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#getVideoJob.");
    const operationName = "getVideoJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/VideoJob/GetVideoJob";
    const pathParams = {
      "{videoJobId}": getVideoJobRequest.videoJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getVideoJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVideoJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/videoJobs/{videoJobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVideoJobResponse>{},
        body: await response.json(),
        bodyKey: "videoJob",
        bodyModel: model.VideoJob,
        type: "model.VideoJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a visionPrivateEndpoint by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetVisionPrivateEndpointRequest
   * @return GetVisionPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/GetVisionPrivateEndpoint.ts.html |here} to see how to use GetVisionPrivateEndpoint API.
   */
  public async getVisionPrivateEndpoint(
    getVisionPrivateEndpointRequest: requests.GetVisionPrivateEndpointRequest
  ): Promise<responses.GetVisionPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#getVisionPrivateEndpoint.");
    const operationName = "getVisionPrivateEndpoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/VisionPrivateEndpoint/GetVisionPrivateEndpoint";
    const pathParams = {
      "{visionPrivateEndpointId}": getVisionPrivateEndpointRequest.visionPrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getVisionPrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVisionPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/visionPrivateEndpoints/{visionPrivateEndpointId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVisionPrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "visionPrivateEndpoint",
        bodyModel: model.VisionPrivateEndpoint,
        type: "model.VisionPrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request with the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of models in a compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListModelsRequest
   * @return ListModelsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ListModels.ts.html |here} to see how to use ListModels API.
   */
  public async listModels(
    listModelsRequest: requests.ListModelsRequest
  ): Promise<responses.ListModelsResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#listModels.");
    const operationName = "listModels";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/ModelCollection/ListModels";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listModelsRequest.compartmentId,
      "projectId": listModelsRequest.projectId,
      "lifecycleState": listModelsRequest.lifecycleState,
      "displayName": listModelsRequest.displayName,
      "id": listModelsRequest.id,
      "limit": listModelsRequest.limit,
      "page": listModelsRequest.page,
      "sortOrder": listModelsRequest.sortOrder,
      "sortBy": listModelsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listModelsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listModelsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListModelsResponse>{},
        body: await response.json(),
        bodyKey: "modelCollection",
        bodyModel: model.ModelCollection,
        type: "model.ModelCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of projects.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListProjectsRequest
   * @return ListProjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ListProjects.ts.html |here} to see how to use ListProjects API.
   */
  public async listProjects(
    listProjectsRequest: requests.ListProjectsRequest
  ): Promise<responses.ListProjectsResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#listProjects.");
    const operationName = "listProjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/ProjectCollection/ListProjects";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listProjectsRequest.compartmentId,
      "lifecycleState": listProjectsRequest.lifecycleState,
      "displayName": listProjectsRequest.displayName,
      "id": listProjectsRequest.id,
      "limit": listProjectsRequest.limit,
      "page": listProjectsRequest.page,
      "sortOrder": listProjectsRequest.sortOrder,
      "sortBy": listProjectsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProjectsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProjectsResponse>{},
        body: await response.json(),
        bodyKey: "projectCollection",
        bodyModel: model.ProjectCollection,
        type: "model.ProjectCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of the streamGroups in the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListStreamGroupsRequest
   * @return ListStreamGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ListStreamGroups.ts.html |here} to see how to use ListStreamGroups API.
   */
  public async listStreamGroups(
    listStreamGroupsRequest: requests.ListStreamGroupsRequest
  ): Promise<responses.ListStreamGroupsResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#listStreamGroups.");
    const operationName = "listStreamGroups";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamGroupCollection/ListStreamGroups";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listStreamGroupsRequest.compartmentId,
      "id": listStreamGroupsRequest.id,
      "displayName": listStreamGroupsRequest.displayName,
      "limit": listStreamGroupsRequest.limit,
      "page": listStreamGroupsRequest.page,
      "sortOrder": listStreamGroupsRequest.sortOrder,
      "sortBy": listStreamGroupsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listStreamGroupsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listStreamGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListStreamGroupsResponse>{},
        body: await response.json(),
        bodyKey: "streamGroupCollection",
        bodyModel: model.StreamGroupCollection,
        type: "model.StreamGroupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get list of stream jobs
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListStreamJobsRequest
   * @return ListStreamJobsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ListStreamJobs.ts.html |here} to see how to use ListStreamJobs API.
   */
  public async listStreamJobs(
    listStreamJobsRequest: requests.ListStreamJobsRequest
  ): Promise<responses.ListStreamJobsResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#listStreamJobs.");
    const operationName = "listStreamJobs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamJobCollection/ListStreamJobs";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listStreamJobsRequest.compartmentId,
      "lifecycleState": listStreamJobsRequest.lifecycleState,
      "id": listStreamJobsRequest.id,
      "displayName": listStreamJobsRequest.displayName,
      "limit": listStreamJobsRequest.limit,
      "page": listStreamJobsRequest.page,
      "sortOrder": listStreamJobsRequest.sortOrder,
      "sortBy": listStreamJobsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listStreamJobsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listStreamJobsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamJobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListStreamJobsResponse>{},
        body: await response.json(),
        bodyKey: "streamJobCollection",
        bodyModel: model.StreamJobCollection,
        type: "model.StreamJobCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of the streamSources in the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListStreamSourcesRequest
   * @return ListStreamSourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ListStreamSources.ts.html |here} to see how to use ListStreamSources API.
   */
  public async listStreamSources(
    listStreamSourcesRequest: requests.ListStreamSourcesRequest
  ): Promise<responses.ListStreamSourcesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#listStreamSources.");
    const operationName = "listStreamSources";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamSourceCollection/ListStreamSources";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listStreamSourcesRequest.compartmentId,
      "lifecycleState": listStreamSourcesRequest.lifecycleState,
      "id": listStreamSourcesRequest.id,
      "displayName": listStreamSourcesRequest.displayName,
      "limit": listStreamSourcesRequest.limit,
      "page": listStreamSourcesRequest.page,
      "sortOrder": listStreamSourcesRequest.sortOrder,
      "sortBy": listStreamSourcesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listStreamSourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listStreamSourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamSources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListStreamSourcesResponse>{},
        body: await response.json(),
        bodyKey: "streamSourceCollection",
        bodyModel: model.StreamSourceCollection,
        type: "model.StreamSourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of visionPrivateEndpoints.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListVisionPrivateEndpointsRequest
   * @return ListVisionPrivateEndpointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ListVisionPrivateEndpoints.ts.html |here} to see how to use ListVisionPrivateEndpoints API.
   */
  public async listVisionPrivateEndpoints(
    listVisionPrivateEndpointsRequest: requests.ListVisionPrivateEndpointsRequest
  ): Promise<responses.ListVisionPrivateEndpointsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#listVisionPrivateEndpoints.");
    const operationName = "listVisionPrivateEndpoints";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/VisionPrivateEndpointCollection/ListVisionPrivateEndpoints";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVisionPrivateEndpointsRequest.compartmentId,
      "lifecycleState": listVisionPrivateEndpointsRequest.lifecycleState,
      "displayName": listVisionPrivateEndpointsRequest.displayName,
      "id": listVisionPrivateEndpointsRequest.id,
      "limit": listVisionPrivateEndpointsRequest.limit,
      "page": listVisionPrivateEndpointsRequest.page,
      "sortOrder": listVisionPrivateEndpointsRequest.sortOrder,
      "sortBy": listVisionPrivateEndpointsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listVisionPrivateEndpointsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVisionPrivateEndpointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/visionPrivateEndpoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVisionPrivateEndpointsResponse>{},
        body: await response.json(),
        bodyKey: "visionPrivateEndpointCollection",
        bodyModel: model.VisionPrivateEndpointCollection,
        type: "model.VisionPrivateEndpointCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of errors for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/WorkRequestError/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of logs for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/WorkRequestLogEntry/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/WorkRequest/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * End a stream analysis Run.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StartStreamJobRequest
   * @return StartStreamJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/StartStreamJob.ts.html |here} to see how to use StartStreamJob API.
   */
  public async startStreamJob(
    startStreamJobRequest: requests.StartStreamJobRequest
  ): Promise<responses.StartStreamJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#startStreamJob.");
    const operationName = "startStreamJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamJob/StartStreamJob";
    const pathParams = {
      "{streamJobId}": startStreamJobRequest.streamJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": startStreamJobRequest.opcRetryToken,
      "opc-request-id": startStreamJobRequest.opcRequestId,
      "if-match": startStreamJobRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startStreamJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamJobs/{streamJobId}/actions/start",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartStreamJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * End a stream analysis Run.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StopStreamJobRequest
   * @return StopStreamJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/StopStreamJob.ts.html |here} to see how to use StopStreamJob API.
   */
  public async stopStreamJob(
    stopStreamJobRequest: requests.StopStreamJobRequest
  ): Promise<responses.StopStreamJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#stopStreamJob.");
    const operationName = "stopStreamJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamJob/StopStreamJob";
    const pathParams = {
      "{streamJobId}": stopStreamJobRequest.streamJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": stopStreamJobRequest.opcRetryToken,
      "if-match": stopStreamJobRequest.ifMatch,
      "opc-request-id": stopStreamJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopStreamJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamJobs/{streamJobId}/actions/stop",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopStreamJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the model metadata.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateModelRequest
   * @return UpdateModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/UpdateModel.ts.html |here} to see how to use UpdateModel API.
   */
  public async updateModel(
    updateModelRequest: requests.UpdateModelRequest
  ): Promise<responses.UpdateModelResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#updateModel.");
    const operationName = "updateModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/Model/UpdateModel";
    const pathParams = {
      "{modelId}": updateModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateModelRequest.ifMatch,
      "opc-request-id": updateModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateModelRequest.updateModelDetails,
        "UpdateModelDetails",
        model.UpdateModelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateModelResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the project metadata.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateProjectRequest
   * @return UpdateProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/UpdateProject.ts.html |here} to see how to use UpdateProject API.
   */
  public async updateProject(
    updateProjectRequest: requests.UpdateProjectRequest
  ): Promise<responses.UpdateProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#updateProject.");
    const operationName = "updateProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/Project/UpdateProject";
    const pathParams = {
      "{projectId}": updateProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateProjectRequest.ifMatch,
      "opc-request-id": updateProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProjectRequest.updateProjectDetails,
        "UpdateProjectDetails",
        model.UpdateProjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a streamGroup
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateStreamGroupRequest
   * @return UpdateStreamGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/UpdateStreamGroup.ts.html |here} to see how to use UpdateStreamGroup API.
   */
  public async updateStreamGroup(
    updateStreamGroupRequest: requests.UpdateStreamGroupRequest
  ): Promise<responses.UpdateStreamGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#updateStreamGroup.");
    const operationName = "updateStreamGroup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamGroup/UpdateStreamGroup";
    const pathParams = {
      "{streamGroupId}": updateStreamGroupRequest.streamGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateStreamGroupRequest.ifMatch,
      "opc-request-id": updateStreamGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateStreamGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamGroups/{streamGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateStreamGroupRequest.updateStreamGroupDetails,
        "UpdateStreamGroupDetails",
        model.UpdateStreamGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateStreamGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a stream analysis job with given inputs and features.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateStreamJobRequest
   * @return UpdateStreamJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/UpdateStreamJob.ts.html |here} to see how to use UpdateStreamJob API.
   */
  public async updateStreamJob(
    updateStreamJobRequest: requests.UpdateStreamJobRequest
  ): Promise<responses.UpdateStreamJobResponse> {
    if (this.logger) this.logger.debug("Calling operation AIServiceVisionClient#updateStreamJob.");
    const operationName = "updateStreamJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamJob/UpdateStreamJob";
    const pathParams = {
      "{streamJobId}": updateStreamJobRequest.streamJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateStreamJobRequest.opcRequestId,
      "if-match": updateStreamJobRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateStreamJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamJobs/{streamJobId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateStreamJobRequest.updateStreamJobDetails,
        "UpdateStreamJobDetails",
        model.UpdateStreamJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateStreamJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a streamSource
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateStreamSourceRequest
   * @return UpdateStreamSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/UpdateStreamSource.ts.html |here} to see how to use UpdateStreamSource API.
   */
  public async updateStreamSource(
    updateStreamSourceRequest: requests.UpdateStreamSourceRequest
  ): Promise<responses.UpdateStreamSourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#updateStreamSource.");
    const operationName = "updateStreamSource";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/StreamSource/UpdateStreamSource";
    const pathParams = {
      "{streamSourceId}": updateStreamSourceRequest.streamSourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateStreamSourceRequest.ifMatch,
      "opc-request-id": updateStreamSourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateStreamSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/streamSources/{streamSourceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateStreamSourceRequest.updateStreamSourceDetails,
        "UpdateStreamSourceDetails",
        model.UpdateStreamSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateStreamSourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the visionPrivateEndpoint metadata.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateVisionPrivateEndpointRequest
   * @return UpdateVisionPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/aivision/UpdateVisionPrivateEndpoint.ts.html |here} to see how to use UpdateVisionPrivateEndpoint API.
   */
  public async updateVisionPrivateEndpoint(
    updateVisionPrivateEndpointRequest: requests.UpdateVisionPrivateEndpointRequest
  ): Promise<responses.UpdateVisionPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceVisionClient#updateVisionPrivateEndpoint.");
    const operationName = "updateVisionPrivateEndpoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/vision/20220125/VisionPrivateEndpoint/UpdateVisionPrivateEndpoint";
    const pathParams = {
      "{visionPrivateEndpointId}": updateVisionPrivateEndpointRequest.visionPrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVisionPrivateEndpointRequest.ifMatch,
      "opc-request-id": updateVisionPrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVisionPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/visionPrivateEndpoints/{visionPrivateEndpointId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVisionPrivateEndpointRequest.updateVisionPrivateEndpointDetails,
        "UpdateVisionPrivateEndpointDetails",
        model.UpdateVisionPrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVisionPrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
