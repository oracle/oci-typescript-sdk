/**
 * Vision API
 * Using Vision, you can upload images to detect and classify objects in them. If you have lots of images, you can process them in batch using asynchronous API endpoints. Vision's features are thematically split between Document AI for document-centric images, and Image Analysis for object and scene-based images. Pretrained models and custom models are supported.
 * OpenAPI spec version: 20220125
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Job details for a stream analysis.
 */
export interface StreamJobSummary {
  /**
   * [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamJob.
   *
   */
  "id": string;
  /**
   * [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamSource
   *
   */
  "streamSourceId": string;
  /**
   * [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
   *
   */
  "compartmentId": string;
  /**
   * Stream job display name.
   */
  "displayName"?: string;
  /**
   * List of document analysis features.
   */
  "features": Array<model.VideoStreamFeature>;
  "streamOutputLocation"?: model.ObjectStorageOutputLocation;
  /**
   * The current state of the Stream job.
   */
  "lifecycleState": string;
  /**
   * Additional Details of the state of streamJob
   */
  "lifecycleDetails": string;
  /**
   * When the streamJob was created, as an RFC3339 datetime string.
   */
  "timeCreated": Date;
  /**
   * When the streamJob was updated, as an RFC3339 datetime string.
   */
  "timeUpdated"?: Date;
  /**
   * A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only.
   * For example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * For example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces.
   * For example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
}

export namespace StreamJobSummary {
  export function getJsonObj(obj: StreamJobSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "features": obj.features
          ? obj.features.map(item => {
              return model.VideoStreamFeature.getJsonObj(item);
            })
          : undefined,
        "streamOutputLocation": obj.streamOutputLocation
          ? model.StreamOutputLocation.getJsonObj(obj.streamOutputLocation)
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: StreamJobSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "features": obj.features
          ? obj.features.map(item => {
              return model.VideoStreamFeature.getDeserializedJsonObj(item);
            })
          : undefined,
        "streamOutputLocation": obj.streamOutputLocation
          ? model.StreamOutputLocation.getDeserializedJsonObj(obj.streamOutputLocation)
          : undefined
      }
    };

    return jsonObj;
  }
}
