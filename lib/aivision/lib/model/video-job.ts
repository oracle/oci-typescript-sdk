/**
 * Vision API
 * Using Vision, you can upload images to detect and classify objects in them. If you have lots of images, you can process them in batch using asynchronous API endpoints. Vision's features are thematically split between Document AI for document-centric images, and Image Analysis for object and scene-based images. Pretrained models and custom models are supported.
 * OpenAPI spec version: 20220125
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Job details for a video analysis.
 */
export interface VideoJob {
  /**
   * Id of the job.
   */
  "id": string;
  /**
   * The ocid of the compartment that starts the job.
   */
  "compartmentId": string;
  /**
   * Video job display name.
   */
  "displayName"?: string;
  /**
   * a list of document analysis features.
   */
  "features": Array<model.VideoFeature>;
  "inputLocation"?: model.ObjectListInlineInputLocation;
  /**
   * Job accepted time.
   */
  "timeAccepted": Date;
  /**
   * Job started time.
   */
  "timeStarted"?: Date;
  /**
   * Job finished time.
   */
  "timeFinished"?: Date;
  /**
   * How much progress the operation has made, vs the total amount of work that must be performed. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "percentComplete"?: number;
  "outputLocation": model.OutputLocation;
  /**
   * The current state of the video job.
   */
  "lifecycleState": VideoJob.LifecycleState;
  /**
   * Detailed status of FAILED state.
   */
  "lifecycleDetails"?: VideoJob.LifecycleDetails;
  /**
   * A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only.
   * For example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * For example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces.
   * For example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
}

export namespace VideoJob {
  export enum LifecycleState {
    Succeeded = "SUCCEEDED",
    Failed = "FAILED",
    Accepted = "ACCEPTED",
    Canceled = "CANCELED",
    InProgress = "IN_PROGRESS",
    Canceling = "CANCELING",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum LifecycleDetails {
    PartiallySucceeded = "PARTIALLY_SUCCEEDED",
    CompletelyFailed = "COMPLETELY_FAILED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: VideoJob): object {
    const jsonObj = {
      ...obj,
      ...{
        "features": obj.features
          ? obj.features.map(item => {
              return model.VideoFeature.getJsonObj(item);
            })
          : undefined,
        "inputLocation": obj.inputLocation
          ? model.InputLocation.getJsonObj(obj.inputLocation)
          : undefined,

        "outputLocation": obj.outputLocation
          ? model.OutputLocation.getJsonObj(obj.outputLocation)
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: VideoJob): object {
    const jsonObj = {
      ...obj,
      ...{
        "features": obj.features
          ? obj.features.map(item => {
              return model.VideoFeature.getDeserializedJsonObj(item);
            })
          : undefined,
        "inputLocation": obj.inputLocation
          ? model.InputLocation.getDeserializedJsonObj(obj.inputLocation)
          : undefined,

        "outputLocation": obj.outputLocation
          ? model.OutputLocation.getDeserializedJsonObj(obj.outputLocation)
          : undefined
      }
    };

    return jsonObj;
  }
}
