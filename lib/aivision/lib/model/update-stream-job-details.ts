/**
 * Vision API
 * Using Vision, you can upload images to detect and classify objects in them. If you have lots of images, you can process them in batch using asynchronous API endpoints. Vision's features are thematically split between Document AI for document-centric images, and Image Analysis for object and scene-based images. Pretrained models and custom models are supported.
 * OpenAPI spec version: 20220125
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The information needed to update streamjob
 */
export interface UpdateStreamJobDetails {
  /**
   * [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of streamSource
   *
   */
  "streamSourceId"?: string;
  /**
   * List of stream analysis features.
   */
  "features"?: Array<model.VideoStreamFeature>;
  "streamOutputLocation"?: model.ObjectStorageOutputLocation;
  /**
   * Stream job display name.
   */
  "displayName"?: string;
  /**
   * A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only.
   * For example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * For example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
}

export namespace UpdateStreamJobDetails {
  export function getJsonObj(obj: UpdateStreamJobDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "features": obj.features
          ? obj.features.map(item => {
              return model.VideoStreamFeature.getJsonObj(item);
            })
          : undefined,
        "streamOutputLocation": obj.streamOutputLocation
          ? model.StreamOutputLocation.getJsonObj(obj.streamOutputLocation)
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: UpdateStreamJobDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "features": obj.features
          ? obj.features.map(item => {
              return model.VideoStreamFeature.getDeserializedJsonObj(item);
            })
          : undefined,
        "streamOutputLocation": obj.streamOutputLocation
          ? model.StreamOutputLocation.getDeserializedJsonObj(obj.streamOutputLocation)
          : undefined
      }
    };

    return jsonObj;
  }
}
