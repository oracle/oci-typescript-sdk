/**
 * Oracle Database Autonomous Recovery Service API
 * Use Oracle Database Autonomous Recovery Service API to manage Protected Databases.
 * OpenAPI spec version: 20210216
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { DatabaseRecoveryWaiter } from "./databaserecovery-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DatabaseRecoveryApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DatabaseRecoveryClient {
  protected static serviceEndpointTemplate = "https://recovery.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DatabaseRecoveryWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "DatabaseRecovery";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("recovery")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("recovery");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20210216";
    if (this.logger) this.logger.info(`DatabaseRecoveryClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        DatabaseRecoveryClient.serviceEndpointTemplate,
        this._region,
        DatabaseRecoveryClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        DatabaseRecoveryClient.serviceEndpointTemplate,
        this._regionId,
        DatabaseRecoveryClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DatabaseRecoveryClient.serviceEndpointTemplate,
      region,
      DatabaseRecoveryClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DatabaseRecoveryClient.serviceEndpointTemplate,
      regionId,
      DatabaseRecoveryClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new DatabaseRecoveryWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DatabaseRecoveryWaiter {
    this._waiters = new DatabaseRecoveryWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DatabaseRecoveryWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Cancels the scheduled deletion of a protected database, and returns the protected database to an ACTIVE state. You can cancel the deletion only if the protected database is in the DELETE SCHEDULED state.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelProtectedDatabaseDeletionRequest
   * @return CancelProtectedDatabaseDeletionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/CancelProtectedDatabaseDeletion.ts.html |here} to see how to use CancelProtectedDatabaseDeletion API.
   */
  public async cancelProtectedDatabaseDeletion(
    cancelProtectedDatabaseDeletionRequest: requests.CancelProtectedDatabaseDeletionRequest
  ): Promise<responses.CancelProtectedDatabaseDeletionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DatabaseRecoveryClient#cancelProtectedDatabaseDeletion."
      );
    const operationName = "cancelProtectedDatabaseDeletion";
    const apiReferenceLink = "";
    const pathParams = {
      "{protectedDatabaseId}": cancelProtectedDatabaseDeletionRequest.protectedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelProtectedDatabaseDeletionRequest.ifMatch,
      "opc-request-id": cancelProtectedDatabaseDeletionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelProtectedDatabaseDeletionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectedDatabases/{protectedDatabaseId}/actions/cancelDeletion",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelProtectedDatabaseDeletionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a protected database resource from the existing compartment to the specified compartment. When provided, If-Match is checked against ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeProtectedDatabaseCompartmentRequest
   * @return ChangeProtectedDatabaseCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/ChangeProtectedDatabaseCompartment.ts.html |here} to see how to use ChangeProtectedDatabaseCompartment API.
   */
  public async changeProtectedDatabaseCompartment(
    changeProtectedDatabaseCompartmentRequest: requests.ChangeProtectedDatabaseCompartmentRequest
  ): Promise<responses.ChangeProtectedDatabaseCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DatabaseRecoveryClient#changeProtectedDatabaseCompartment."
      );
    const operationName = "changeProtectedDatabaseCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{protectedDatabaseId}": changeProtectedDatabaseCompartmentRequest.protectedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeProtectedDatabaseCompartmentRequest.ifMatch,
      "opc-request-id": changeProtectedDatabaseCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeProtectedDatabaseCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectedDatabases/{protectedDatabaseId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeProtectedDatabaseCompartmentRequest.changeProtectedDatabaseCompartmentDetails,
        "ChangeProtectedDatabaseCompartmentDetails",
        model.ChangeProtectedDatabaseCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeProtectedDatabaseCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Associates the protected database with a new cloud service environment, such as Microsoft Azure.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeProtectedDatabaseSubscriptionRequest
   * @return ChangeProtectedDatabaseSubscriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/ChangeProtectedDatabaseSubscription.ts.html |here} to see how to use ChangeProtectedDatabaseSubscription API.
   */
  public async changeProtectedDatabaseSubscription(
    changeProtectedDatabaseSubscriptionRequest: requests.ChangeProtectedDatabaseSubscriptionRequest
  ): Promise<responses.ChangeProtectedDatabaseSubscriptionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DatabaseRecoveryClient#changeProtectedDatabaseSubscription."
      );
    const operationName = "changeProtectedDatabaseSubscription";
    const apiReferenceLink = "";
    const pathParams = {
      "{protectedDatabaseId}": changeProtectedDatabaseSubscriptionRequest.protectedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeProtectedDatabaseSubscriptionRequest.opcRequestId,
      "if-match": changeProtectedDatabaseSubscriptionRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeProtectedDatabaseSubscriptionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectedDatabases/{protectedDatabaseId}/actions/changeSubscription",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeProtectedDatabaseSubscriptionRequest.changeProtectedDatabaseSubscriptionDetails,
        "ChangeProtectedDatabaseSubscriptionDetails",
        model.ChangeProtectedDatabaseSubscriptionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeProtectedDatabaseSubscriptionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a protection policy resource from the existing compartment to the specified compartment. When provided, If-Match is checked against ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeProtectionPolicyCompartmentRequest
   * @return ChangeProtectionPolicyCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/ChangeProtectionPolicyCompartment.ts.html |here} to see how to use ChangeProtectionPolicyCompartment API.
   */
  public async changeProtectionPolicyCompartment(
    changeProtectionPolicyCompartmentRequest: requests.ChangeProtectionPolicyCompartmentRequest
  ): Promise<responses.ChangeProtectionPolicyCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DatabaseRecoveryClient#changeProtectionPolicyCompartment."
      );
    const operationName = "changeProtectionPolicyCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{protectionPolicyId}": changeProtectionPolicyCompartmentRequest.protectionPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeProtectionPolicyCompartmentRequest.ifMatch,
      "opc-request-id": changeProtectionPolicyCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeProtectionPolicyCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectionPolicies/{protectionPolicyId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeProtectionPolicyCompartmentRequest.changeProtectionPolicyCompartmentDetails,
        "ChangeProtectionPolicyCompartmentDetails",
        model.ChangeProtectionPolicyCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeProtectionPolicyCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a recovery service subnet resource from the existing compartment to the specified compartment. When provided, If-Match is checked against ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeRecoveryServiceSubnetCompartmentRequest
   * @return ChangeRecoveryServiceSubnetCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/ChangeRecoveryServiceSubnetCompartment.ts.html |here} to see how to use ChangeRecoveryServiceSubnetCompartment API.
   */
  public async changeRecoveryServiceSubnetCompartment(
    changeRecoveryServiceSubnetCompartmentRequest: requests.ChangeRecoveryServiceSubnetCompartmentRequest
  ): Promise<responses.ChangeRecoveryServiceSubnetCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DatabaseRecoveryClient#changeRecoveryServiceSubnetCompartment."
      );
    const operationName = "changeRecoveryServiceSubnetCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{recoveryServiceSubnetId}":
        changeRecoveryServiceSubnetCompartmentRequest.recoveryServiceSubnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeRecoveryServiceSubnetCompartmentRequest.ifMatch,
      "opc-request-id": changeRecoveryServiceSubnetCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeRecoveryServiceSubnetCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recoveryServiceSubnets/{recoveryServiceSubnetId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeRecoveryServiceSubnetCompartmentRequest.changeRecoveryServiceSubnetCompartmentDetails,
        "ChangeRecoveryServiceSubnetCompartmentDetails",
        model.ChangeRecoveryServiceSubnetCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeRecoveryServiceSubnetCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Protected Database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateProtectedDatabaseRequest
   * @return CreateProtectedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/CreateProtectedDatabase.ts.html |here} to see how to use CreateProtectedDatabase API.
   */
  public async createProtectedDatabase(
    createProtectedDatabaseRequest: requests.CreateProtectedDatabaseRequest
  ): Promise<responses.CreateProtectedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#createProtectedDatabase.");
    const operationName = "createProtectedDatabase";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createProtectedDatabaseRequest.opcRetryToken,
      "opc-request-id": createProtectedDatabaseRequest.opcRequestId,
      "opc-dry-run": createProtectedDatabaseRequest.opcDryRun
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createProtectedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectedDatabases",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProtectedDatabaseRequest.createProtectedDatabaseDetails,
        "CreateProtectedDatabaseDetails",
        model.CreateProtectedDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProtectedDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "protectedDatabase",
        bodyModel: model.ProtectedDatabase,
        type: "model.ProtectedDatabase",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Protection Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateProtectionPolicyRequest
   * @return CreateProtectionPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/CreateProtectionPolicy.ts.html |here} to see how to use CreateProtectionPolicy API.
   */
  public async createProtectionPolicy(
    createProtectionPolicyRequest: requests.CreateProtectionPolicyRequest
  ): Promise<responses.CreateProtectionPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#createProtectionPolicy.");
    const operationName = "createProtectionPolicy";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createProtectionPolicyRequest.opcRetryToken,
      "opc-request-id": createProtectionPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createProtectionPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectionPolicies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProtectionPolicyRequest.createProtectionPolicyDetails,
        "CreateProtectionPolicyDetails",
        model.CreateProtectionPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProtectionPolicyResponse>{},
        body: await response.json(),
        bodyKey: "protectionPolicy",
        bodyModel: model.ProtectionPolicy,
        type: "model.ProtectionPolicy",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Recovery Service Subnet.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateRecoveryServiceSubnetRequest
   * @return CreateRecoveryServiceSubnetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/CreateRecoveryServiceSubnet.ts.html |here} to see how to use CreateRecoveryServiceSubnet API.
   */
  public async createRecoveryServiceSubnet(
    createRecoveryServiceSubnetRequest: requests.CreateRecoveryServiceSubnetRequest
  ): Promise<responses.CreateRecoveryServiceSubnetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#createRecoveryServiceSubnet.");
    const operationName = "createRecoveryServiceSubnet";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createRecoveryServiceSubnetRequest.opcRetryToken,
      "opc-request-id": createRecoveryServiceSubnetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createRecoveryServiceSubnetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recoveryServiceSubnets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRecoveryServiceSubnetRequest.createRecoveryServiceSubnetDetails,
        "CreateRecoveryServiceSubnetDetails",
        model.CreateRecoveryServiceSubnetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRecoveryServiceSubnetResponse>{},
        body: await response.json(),
        bodyKey: "recoveryServiceSubnet",
        bodyModel: model.RecoveryServiceSubnet,
        type: "model.RecoveryServiceSubnet",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a protected database based on the specified protected database ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteProtectedDatabaseRequest
   * @return DeleteProtectedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/DeleteProtectedDatabase.ts.html |here} to see how to use DeleteProtectedDatabase API.
   */
  public async deleteProtectedDatabase(
    deleteProtectedDatabaseRequest: requests.DeleteProtectedDatabaseRequest
  ): Promise<responses.DeleteProtectedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#deleteProtectedDatabase.");
    const operationName = "deleteProtectedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{protectedDatabaseId}": deleteProtectedDatabaseRequest.protectedDatabaseId
    };

    const queryParams = {
      "deletionSchedule": deleteProtectedDatabaseRequest.deletionSchedule
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteProtectedDatabaseRequest.ifMatch,
      "opc-request-id": deleteProtectedDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteProtectedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectedDatabases/{protectedDatabaseId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProtectedDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a specified protection policy. You can delete custom policies only.
   * Deleting a Oracle predefined policies will result in status code 405 Method Not Allowed.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteProtectionPolicyRequest
   * @return DeleteProtectionPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/DeleteProtectionPolicy.ts.html |here} to see how to use DeleteProtectionPolicy API.
   */
  public async deleteProtectionPolicy(
    deleteProtectionPolicyRequest: requests.DeleteProtectionPolicyRequest
  ): Promise<responses.DeleteProtectionPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#deleteProtectionPolicy.");
    const operationName = "deleteProtectionPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{protectionPolicyId}": deleteProtectionPolicyRequest.protectionPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteProtectionPolicyRequest.ifMatch,
      "opc-request-id": deleteProtectionPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteProtectionPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectionPolicies/{protectionPolicyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProtectionPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a specified recovery service subnet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteRecoveryServiceSubnetRequest
   * @return DeleteRecoveryServiceSubnetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/DeleteRecoveryServiceSubnet.ts.html |here} to see how to use DeleteRecoveryServiceSubnet API.
   */
  public async deleteRecoveryServiceSubnet(
    deleteRecoveryServiceSubnetRequest: requests.DeleteRecoveryServiceSubnetRequest
  ): Promise<responses.DeleteRecoveryServiceSubnetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#deleteRecoveryServiceSubnet.");
    const operationName = "deleteRecoveryServiceSubnet";
    const apiReferenceLink = "";
    const pathParams = {
      "{recoveryServiceSubnetId}": deleteRecoveryServiceSubnetRequest.recoveryServiceSubnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRecoveryServiceSubnetRequest.ifMatch,
      "opc-request-id": deleteRecoveryServiceSubnetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteRecoveryServiceSubnetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recoveryServiceSubnets/{recoveryServiceSubnetId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRecoveryServiceSubnetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads the network service configuration file 'tnsnames.ora' for a specified protected database. Applies to user-defined recovery systems only.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param FetchProtectedDatabaseConfigurationRequest
   * @return FetchProtectedDatabaseConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/FetchProtectedDatabaseConfiguration.ts.html |here} to see how to use FetchProtectedDatabaseConfiguration API.
   */
  public async fetchProtectedDatabaseConfiguration(
    fetchProtectedDatabaseConfigurationRequest: requests.FetchProtectedDatabaseConfigurationRequest
  ): Promise<responses.FetchProtectedDatabaseConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DatabaseRecoveryClient#fetchProtectedDatabaseConfiguration."
      );
    const operationName = "fetchProtectedDatabaseConfiguration";
    const apiReferenceLink = "";
    const pathParams = {
      "{protectedDatabaseId}": fetchProtectedDatabaseConfigurationRequest.protectedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": fetchProtectedDatabaseConfigurationRequest.opcRequestId,
      "if-match": fetchProtectedDatabaseConfigurationRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      fetchProtectedDatabaseConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectedDatabases/{protectedDatabaseId}/actions/getConfiguration",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        fetchProtectedDatabaseConfigurationRequest.fetchProtectedDatabaseConfigurationDetails,
        "FetchProtectedDatabaseConfigurationDetails",
        model.FetchProtectedDatabaseConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.FetchProtectedDatabaseConfigurationResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-filename"),
            key: "opcFilename",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-checksum"),
            key: "opcChecksum",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a specified protected database.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetProtectedDatabaseRequest
   * @return GetProtectedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/GetProtectedDatabase.ts.html |here} to see how to use GetProtectedDatabase API.
   */
  public async getProtectedDatabase(
    getProtectedDatabaseRequest: requests.GetProtectedDatabaseRequest
  ): Promise<responses.GetProtectedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#getProtectedDatabase.");
    const operationName = "getProtectedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{protectedDatabaseId}": getProtectedDatabaseRequest.protectedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProtectedDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProtectedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectedDatabases/{protectedDatabaseId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProtectedDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "protectedDatabase",
        bodyModel: model.ProtectedDatabase,
        type: "model.ProtectedDatabase",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a specified protection policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetProtectionPolicyRequest
   * @return GetProtectionPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/GetProtectionPolicy.ts.html |here} to see how to use GetProtectionPolicy API.
   */
  public async getProtectionPolicy(
    getProtectionPolicyRequest: requests.GetProtectionPolicyRequest
  ): Promise<responses.GetProtectionPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#getProtectionPolicy.");
    const operationName = "getProtectionPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{protectionPolicyId}": getProtectionPolicyRequest.protectionPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProtectionPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProtectionPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectionPolicies/{protectionPolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProtectionPolicyResponse>{},
        body: await response.json(),
        bodyKey: "protectionPolicy",
        bodyModel: model.ProtectionPolicy,
        type: "model.ProtectionPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a specified recovery service subnet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetRecoveryServiceSubnetRequest
   * @return GetRecoveryServiceSubnetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/GetRecoveryServiceSubnet.ts.html |here} to see how to use GetRecoveryServiceSubnet API.
   */
  public async getRecoveryServiceSubnet(
    getRecoveryServiceSubnetRequest: requests.GetRecoveryServiceSubnetRequest
  ): Promise<responses.GetRecoveryServiceSubnetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#getRecoveryServiceSubnet.");
    const operationName = "getRecoveryServiceSubnet";
    const apiReferenceLink = "";
    const pathParams = {
      "{recoveryServiceSubnetId}": getRecoveryServiceSubnetRequest.recoveryServiceSubnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRecoveryServiceSubnetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRecoveryServiceSubnetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recoveryServiceSubnets/{recoveryServiceSubnetId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRecoveryServiceSubnetResponse>{},
        body: await response.json(),
        bodyKey: "recoveryServiceSubnet",
        bodyModel: model.RecoveryServiceSubnet,
        type: "model.RecoveryServiceSubnet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request based on the specified ID
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseRecoveryClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the protected databases based on the specified parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListProtectedDatabasesRequest
   * @return ListProtectedDatabasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/ListProtectedDatabases.ts.html |here} to see how to use ListProtectedDatabases API.
   */
  public async listProtectedDatabases(
    listProtectedDatabasesRequest: requests.ListProtectedDatabasesRequest
  ): Promise<responses.ListProtectedDatabasesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#listProtectedDatabases.");
    const operationName = "listProtectedDatabases";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listProtectedDatabasesRequest.compartmentId,
      "lifecycleState": listProtectedDatabasesRequest.lifecycleState,
      "displayName": listProtectedDatabasesRequest.displayName,
      "id": listProtectedDatabasesRequest.id,
      "protectionPolicyId": listProtectedDatabasesRequest.protectionPolicyId,
      "recoveryServiceSubnetId": listProtectedDatabasesRequest.recoveryServiceSubnetId,
      "limit": listProtectedDatabasesRequest.limit,
      "page": listProtectedDatabasesRequest.page,
      "sortOrder": listProtectedDatabasesRequest.sortOrder,
      "sortBy": listProtectedDatabasesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProtectedDatabasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProtectedDatabasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectedDatabases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProtectedDatabasesResponse>{},
        body: await response.json(),
        bodyKey: "protectedDatabaseCollection",
        bodyModel: model.ProtectedDatabaseCollection,
        type: "model.ProtectedDatabaseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of protection policies based on the specified parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListProtectionPoliciesRequest
   * @return ListProtectionPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/ListProtectionPolicies.ts.html |here} to see how to use ListProtectionPolicies API.
   */
  public async listProtectionPolicies(
    listProtectionPoliciesRequest: requests.ListProtectionPoliciesRequest
  ): Promise<responses.ListProtectionPoliciesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#listProtectionPolicies.");
    const operationName = "listProtectionPolicies";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listProtectionPoliciesRequest.compartmentId,
      "lifecycleState": listProtectionPoliciesRequest.lifecycleState,
      "displayName": listProtectionPoliciesRequest.displayName,
      "protectionPolicyId": listProtectionPoliciesRequest.protectionPolicyId,
      "owner": listProtectionPoliciesRequest.owner,
      "limit": listProtectionPoliciesRequest.limit,
      "page": listProtectionPoliciesRequest.page,
      "sortOrder": listProtectionPoliciesRequest.sortOrder,
      "sortBy": listProtectionPoliciesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProtectionPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProtectionPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectionPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProtectionPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "protectionPolicyCollection",
        bodyModel: model.ProtectionPolicyCollection,
        type: "model.ProtectionPolicyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Recovery Service Subnets.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListRecoveryServiceSubnetsRequest
   * @return ListRecoveryServiceSubnetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/ListRecoveryServiceSubnets.ts.html |here} to see how to use ListRecoveryServiceSubnets API.
   */
  public async listRecoveryServiceSubnets(
    listRecoveryServiceSubnetsRequest: requests.ListRecoveryServiceSubnetsRequest
  ): Promise<responses.ListRecoveryServiceSubnetsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#listRecoveryServiceSubnets.");
    const operationName = "listRecoveryServiceSubnets";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRecoveryServiceSubnetsRequest.compartmentId,
      "lifecycleState": listRecoveryServiceSubnetsRequest.lifecycleState,
      "displayName": listRecoveryServiceSubnetsRequest.displayName,
      "id": listRecoveryServiceSubnetsRequest.id,
      "vcnId": listRecoveryServiceSubnetsRequest.vcnId,
      "limit": listRecoveryServiceSubnetsRequest.limit,
      "page": listRecoveryServiceSubnetsRequest.page,
      "sortOrder": listRecoveryServiceSubnetsRequest.sortOrder,
      "sortBy": listRecoveryServiceSubnetsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRecoveryServiceSubnetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRecoveryServiceSubnetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recoveryServiceSubnets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRecoveryServiceSubnetsResponse>{},
        body: await response.json(),
        bodyKey: "recoveryServiceSubnetCollection",
        bodyModel: model.RecoveryServiceSubnetCollection,
        type: "model.RecoveryServiceSubnetCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of errors for a given work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of logs for a given work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Defines a preferred schedule to delete a protected database after you terminate the source database.
   * The default schedule is DELETE_AFTER_72_HOURS, so that the delete operation can occur 72 hours (3 days) after the source database is terminated.
   * The alternate schedule is DELETE_AFTER_RETENTION_PERIOD. Specify this option if you want to delete a protected database only after the policy-defined backup retention period expires.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ScheduleProtectedDatabaseDeletionRequest
   * @return ScheduleProtectedDatabaseDeletionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/ScheduleProtectedDatabaseDeletion.ts.html |here} to see how to use ScheduleProtectedDatabaseDeletion API.
   */
  public async scheduleProtectedDatabaseDeletion(
    scheduleProtectedDatabaseDeletionRequest: requests.ScheduleProtectedDatabaseDeletionRequest
  ): Promise<responses.ScheduleProtectedDatabaseDeletionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DatabaseRecoveryClient#scheduleProtectedDatabaseDeletion."
      );
    const operationName = "scheduleProtectedDatabaseDeletion";
    const apiReferenceLink = "";
    const pathParams = {
      "{protectedDatabaseId}": scheduleProtectedDatabaseDeletionRequest.protectedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": scheduleProtectedDatabaseDeletionRequest.ifMatch,
      "opc-request-id": scheduleProtectedDatabaseDeletionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      scheduleProtectedDatabaseDeletionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectedDatabases/{protectedDatabaseId}/actions/scheduleDeletion",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        scheduleProtectedDatabaseDeletionRequest.scheduleProtectedDatabaseDeletionDetails,
        "ScheduleProtectedDatabaseDeletionDetails",
        model.ScheduleProtectedDatabaseDeletionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ScheduleProtectedDatabaseDeletionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Protected Database
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateProtectedDatabaseRequest
   * @return UpdateProtectedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/UpdateProtectedDatabase.ts.html |here} to see how to use UpdateProtectedDatabase API.
   */
  public async updateProtectedDatabase(
    updateProtectedDatabaseRequest: requests.UpdateProtectedDatabaseRequest
  ): Promise<responses.UpdateProtectedDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#updateProtectedDatabase.");
    const operationName = "updateProtectedDatabase";
    const apiReferenceLink = "";
    const pathParams = {
      "{protectedDatabaseId}": updateProtectedDatabaseRequest.protectedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateProtectedDatabaseRequest.ifMatch,
      "opc-request-id": updateProtectedDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateProtectedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectedDatabases/{protectedDatabaseId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProtectedDatabaseRequest.updateProtectedDatabaseDetails,
        "UpdateProtectedDatabaseDetails",
        model.UpdateProtectedDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProtectedDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified protection policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateProtectionPolicyRequest
   * @return UpdateProtectionPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/UpdateProtectionPolicy.ts.html |here} to see how to use UpdateProtectionPolicy API.
   */
  public async updateProtectionPolicy(
    updateProtectionPolicyRequest: requests.UpdateProtectionPolicyRequest
  ): Promise<responses.UpdateProtectionPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#updateProtectionPolicy.");
    const operationName = "updateProtectionPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{protectionPolicyId}": updateProtectionPolicyRequest.protectionPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateProtectionPolicyRequest.ifMatch,
      "opc-request-id": updateProtectionPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateProtectionPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/protectionPolicies/{protectionPolicyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProtectionPolicyRequest.updateProtectionPolicyDetails,
        "UpdateProtectionPolicyDetails",
        model.UpdateProtectionPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProtectionPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified recovery service subnet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateRecoveryServiceSubnetRequest
   * @return UpdateRecoveryServiceSubnetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/recovery/UpdateRecoveryServiceSubnet.ts.html |here} to see how to use UpdateRecoveryServiceSubnet API.
   */
  public async updateRecoveryServiceSubnet(
    updateRecoveryServiceSubnetRequest: requests.UpdateRecoveryServiceSubnetRequest
  ): Promise<responses.UpdateRecoveryServiceSubnetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseRecoveryClient#updateRecoveryServiceSubnet.");
    const operationName = "updateRecoveryServiceSubnet";
    const apiReferenceLink = "";
    const pathParams = {
      "{recoveryServiceSubnetId}": updateRecoveryServiceSubnetRequest.recoveryServiceSubnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRecoveryServiceSubnetRequest.ifMatch,
      "opc-request-id": updateRecoveryServiceSubnetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateRecoveryServiceSubnetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recoveryServiceSubnets/{recoveryServiceSubnetId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRecoveryServiceSubnetRequest.updateRecoveryServiceSubnetDetails,
        "UpdateRecoveryServiceSubnetDetails",
        model.UpdateRecoveryServiceSubnetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRecoveryServiceSubnetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
