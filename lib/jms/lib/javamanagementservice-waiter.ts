/**
 * Java Management Service Fleets API
 * The APIs for the [Fleet Management](https://docs.oracle.com/en-us/iaas/jms/doc/fleet-management.html) feature of Java Management Service to monitor and manage the usage of Java in your enterprise. Use these APIs to manage fleets, configure managed instances to report to fleets, and gain insights into the Java workloads running on these instances by carrying out basic and advanced features.
 * OpenAPI spec version: 20210610
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { JavaManagementServiceClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class JavaManagementServiceWaiter {
  public constructor(
    private client: JavaManagementServiceClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forFleet till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetFleetResponse | null (null in case of 404 response)
   */
  public async forFleet(
    request: serviceRequests.GetFleetRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetFleetResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getFleet(request),
      response => targetStates.includes(response.fleet.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forJmsPlugin till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetJmsPluginResponse | null (null in case of 404 response)
   */
  public async forJmsPlugin(
    request: serviceRequests.GetJmsPluginRequest,
    ...targetStates: models.JmsPluginLifecycleState[]
  ): Promise<serviceResponses.GetJmsPluginResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getJmsPlugin(request),
      response => targetStates.includes(response.jmsPlugin.lifecycleState!),
      targetStates.includes(models.JmsPluginLifecycleState.Deleted)
    );
  }

  /**
   * Waits forTaskSchedule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTaskScheduleResponse
   */
  public async forTaskSchedule(
    request: serviceRequests.GetTaskScheduleRequest,
    ...targetStates: models.TaskSchedule.LifecycleState[]
  ): Promise<serviceResponses.GetTaskScheduleResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getTaskSchedule(request),
      response => targetStates.includes(response.taskSchedule.lifecycleState!)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
