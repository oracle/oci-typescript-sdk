/**
 * Java Management Service Fleets API
 * The APIs for the [Fleet Management](https://docs.oracle.com/en-us/iaas/jms/doc/fleet-management.html) feature of Java Management Service to monitor and manage the usage of Java in your enterprise. Use these APIs to manage fleets, configure managed instances to report to fleets, and gain insights into the Java workloads running on these instances by carrying out basic and advanced features.
 * OpenAPI spec version: 20210610
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The work item details with JFR related information.
 */
export interface ApplicationWorkItemDetails extends model.WorkItemDetails {
  /**
   * The unique key of the application of the JFR.
   */
  "applicationKey": string;
  /**
   * The unique key of the application installation of the JFR.
   */
  "applicationInstallationKey"?: string;
  /**
   * The application name.
   */
  "applicationName": string;
  /**
   * The full path on which application installation was detected.
   */
  "applicationInstallationPath"?: string;
  /**
   * The Object Storage namespace of the JFR upload result.
   */
  "namespace"?: string;
  /**
   * The Object Storage bucket name of the JFR upload result.
   */
  "bucketName"?: string;
  /**
   * The Object Storage object name of the JFR upload result.
   */
  "objectName"?: string;
  "containerInfo"?: model.ContainerSummary;

  "kind": string;
}

export namespace ApplicationWorkItemDetails {
  export function getJsonObj(obj: ApplicationWorkItemDetails, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.WorkItemDetails.getJsonObj(obj) as ApplicationWorkItemDetails)),
      ...{
        "containerInfo": obj.containerInfo
          ? model.ContainerSummary.getJsonObj(obj.containerInfo)
          : undefined
      }
    };

    return jsonObj;
  }
  export const kind = "APPLICATION";
  export function getDeserializedJsonObj(
    obj: ApplicationWorkItemDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.WorkItemDetails.getDeserializedJsonObj(obj) as ApplicationWorkItemDetails)),
      ...{
        "containerInfo": obj.containerInfo
          ? model.ContainerSummary.getDeserializedJsonObj(obj.containerInfo)
          : undefined
      }
    };

    return jsonObj;
  }
}
