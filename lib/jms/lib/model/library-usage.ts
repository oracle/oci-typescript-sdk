/**
 * Java Management Service Fleets API
 * The APIs for the [Fleet Management](https://docs.oracle.com/en-us/iaas/jms/doc/fleet-management.html) feature of Java Management Service to monitor and manage the usage of Java in your enterprise. Use these APIs to manage fleets, configure managed instances to report to fleets, and gain insights into the Java workloads running on these instances by carrying out basic and advanced features.
 * OpenAPI spec version: 20210610
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Library usage during a specified time period.
 *
 */
export interface LibraryUsage {
  /**
   * The internal identifier of the library.
   *
   */
  "libraryKey": string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related fleet.
   *
   */
  "fleetId": string;
  /**
   * The name of the library.
   *
   */
  "libraryName": string;
  /**
   * The version of the library.
   *
   */
  "libraryVersion"?: string;
  /**
   * Deprecated, use {@code vulnerabilities} instead.
   * The Common Vulnerabilities and Exposures (CVE) ID.
   *
   */
  "cveId"?: string;
  /**
   * Deprecated, use {@code highestVulnerabilityScore} instead.
   * The Common Vulnerability Scoring System (CVSS) score. If {@code cvssScore} is not available, it will be set to -1.0. It is set to 0.0 when {@code cveId} is null.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "cvssScore"?: number;
  /**
   * Indicates whether the library was dynamically detected.
   *
   */
  "isDynamicallyDetected": boolean;
  /**
   * Highest CVSS score among the all vulnerabilities. If highest CVSS score is not available, it will be set to -1.0. It is set to 0.0 when there is no associated vulnerabilities.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "highestVulnerabilityScore"?: number;
  /**
   * The list of library vulnerabilities.
   */
  "vulnerabilities"?: Array<model.LibraryVulnerability>;
  /**
   * Confidence level of the assessed library's vulnerabilities.
   */
  "confidenceLevel"?: model.ConfidenceLevel;
  /**
   * The approximate count of applications using the library.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "approximateApplicationCount"?: number;
  /**
   * The approximate count of Java Server instances using the library.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "approximateJavaServerInstanceCount"?: number;
  /**
   * The approximate count of deployed applications using the library.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "approximateDeployedApplicationCount"?: number;
  /**
   * The approximate count of managed instances using the library.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "approximateManagedInstanceCount"?: number;
  /**
   * Lower bound of the specified time period filter. JMS provides a view of the data that is _per day_. The query uses only the date element of the parameter.
   */
  "timeStart"?: Date;
  /**
   * Upper bound of the specified time period filter. JMS provides a view of the data that is _per day_. The query uses only the date element of the parameter.
   */
  "timeEnd"?: Date;
  /**
   * The date and time the resource was _first_ reported to JMS.
   * This is potentially _before_ the specified time period provided by the filters.
   * For example, a resource can be first reported to JMS before the start of a specified time period,
   * if it is also reported during the time period.
   *
   */
  "timeFirstSeen"?: Date;
  /**
   * The date and time the resource was _last_ reported to JMS.
   * This is potentially _after_ the specified time period provided by the filters.
   * For example, a resource can be last reported to JMS before the start of a specified time period,
   * if it is also reported during the time period.
   *
   */
  "timeLastSeen"?: Date;
  /**
   * Deprecated.
   * The date and time of the last CVEs refresh was completed.
   *
   */
  "timeLastCveRefreshed"?: Date;
}

export namespace LibraryUsage {
  export function getJsonObj(obj: LibraryUsage): object {
    const jsonObj = {
      ...obj,
      ...{
        "vulnerabilities": obj.vulnerabilities
          ? obj.vulnerabilities.map(item => {
              return model.LibraryVulnerability.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: LibraryUsage): object {
    const jsonObj = {
      ...obj,
      ...{
        "vulnerabilities": obj.vulnerabilities
          ? obj.vulnerabilities.map(item => {
              return model.LibraryVulnerability.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
