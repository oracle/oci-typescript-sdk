/**
 * Java Management Service Fleets API
 * The APIs for the [Fleet Management](https://docs.oracle.com/en-us/iaas/jms/doc/fleet-management.html) feature of Java Management Service to monitor and manage the usage of Java in your enterprise. Use these APIs to manage fleets, configure managed instances to report to fleets, and gain insights into the Java workloads running on these instances by carrying out basic and advanced features.
 * OpenAPI spec version: 20210610
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Information about a container in the cluster.
 *
 */
export interface ContainerSummary {
  /**
   * Unique identifier for the container.
   */
  "containerKey": string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated managed instance of type OCMA.
   */
  "managedInstanceId": string;
  /**
   * The name of the container.
   */
  "displayName": string;
  /**
   * The container image name.
   */
  "imageName": string;
  /**
   * The namespace of the container.
   */
  "namespace": string;
  /**
   * The name of the node associated with the pod running this container.
   */
  "nodeName": string;
  /**
   * The name of the pod running this container.
   */
  "podName": string;
  /**
   * Unique key that identifies the application running in the container.
   */
  "applicationKey"?: string;
  /**
   * The name of the application running in the container.
   */
  "applicationName"?: string;
  /**
   * Unique key that identifies the Java runtime used to run the application in the container.
   */
  "jreKey"?: string;
  /**
   * The Java runtime used to run the application in the container.
   */
  "javaVersion"?: string;
  /**
   * The security status of the Java runtime used to run the application in the container.
   */
  "jreSecurityStatus"?: model.JreSecurityStatus;
  /**
   * The start time of the container.
   */
  "timeStarted"?: Date;
}

export namespace ContainerSummary {
  export function getJsonObj(obj: ContainerSummary): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ContainerSummary): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
