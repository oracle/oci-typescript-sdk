/**
 * Java Management Service Fleets API
 * The APIs for the [Fleet Management](https://docs.oracle.com/en-us/iaas/jms/doc/fleet-management.html) feature of Java Management Service to monitor and manage the usage of Java in your enterprise. Use these APIs to manage fleets, configure managed instances to report to fleets, and gain insights into the Java workloads running on these instances by carrying out basic and advanced features.
 * OpenAPI spec version: 20210610
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Operating System of the platform on which the Java Runtime was reported.
 *
 */
export interface OperatingSystem {
  /**
   * The operating system type, such as Windows, Linux or macOS
   */
  "family": model.OsFamily;
  /**
   * The name of the operating system as provided by the Java system property os.name.
   */
  "name": string;
  /**
   * The name of the Operating System distribution, such as Oracle Linux 9, Windows 10, or macOS X.
   */
  "distribution"?: string;
  /**
   * The version of the operating system as provided by the Java system property os.version.
   */
  "version": string;
  /**
   * The architecture of the operating system as provided by the Java system property os.arch.
   */
  "architecture": string;
  /**
   * Number of instances running the operating system. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "managedInstanceCount"?: number;
  /**
   * Number of containers running the operating system. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "containerCount"?: number;
}

export namespace OperatingSystem {
  export function getJsonObj(obj: OperatingSystem): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: OperatingSystem): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
