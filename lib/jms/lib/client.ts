/**
 * Java Management Service Fleets API
 * The APIs for the [Fleet Management](https://docs.oracle.com/en-us/iaas/jms/doc/fleet-management.html) feature of Java Management Service to monitor and manage the usage of Java in your enterprise. Use these APIs to manage fleets, configure managed instances to report to fleets, and gain insights into the Java workloads running on these instances by carrying out basic and advanced features.
 * OpenAPI spec version: 20210610
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { JavaManagementServiceWaiter } from "./javamanagementservice-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum JavaManagementServiceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class JavaManagementServiceClient {
  protected static serviceEndpointTemplate =
    "https://javamanagement.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": JavaManagementServiceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "JavaManagementService";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("jms")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("jms");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20210610";
    if (this.logger)
      this.logger.info(`JavaManagementServiceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        JavaManagementServiceClient.serviceEndpointTemplate,
        this._region,
        JavaManagementServiceClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        JavaManagementServiceClient.serviceEndpointTemplate,
        this._regionId,
        JavaManagementServiceClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      JavaManagementServiceClient.serviceEndpointTemplate,
      region,
      JavaManagementServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      JavaManagementServiceClient.serviceEndpointTemplate,
      regionId,
      JavaManagementServiceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new JavaManagementServiceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): JavaManagementServiceWaiter {
    this._waiters = new JavaManagementServiceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): JavaManagementServiceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Add Java installation sites in a Fleet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AddFleetInstallationSitesRequest
   * @return AddFleetInstallationSitesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/AddFleetInstallationSites.ts.html |here} to see how to use AddFleetInstallationSites API.
   */
  public async addFleetInstallationSites(
    addFleetInstallationSitesRequest: requests.AddFleetInstallationSitesRequest
  ): Promise<responses.AddFleetInstallationSitesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#addFleetInstallationSites.");
    const operationName = "addFleetInstallationSites";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": addFleetInstallationSitesRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": addFleetInstallationSitesRequest.ifMatch,
      "opc-retry-token": addFleetInstallationSitesRequest.opcRetryToken,
      "opc-request-id": addFleetInstallationSitesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addFleetInstallationSitesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/addInstallationSites",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addFleetInstallationSitesRequest.addFleetInstallationSitesDetails,
        "AddFleetInstallationSitesDetails",
        model.AddFleetInstallationSitesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddFleetInstallationSitesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the work request specified by an identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#cancelWorkRequest.");
    const operationName = "cancelWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": cancelWorkRequestRequest.opcRequestId,
      "if-match": cancelWorkRequestRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Move a specified Fleet into the compartment identified in the POST form. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeFleetCompartmentRequest
   * @return ChangeFleetCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ChangeFleetCompartment.ts.html |here} to see how to use ChangeFleetCompartment API.
   */
  public async changeFleetCompartment(
    changeFleetCompartmentRequest: requests.ChangeFleetCompartmentRequest
  ): Promise<responses.ChangeFleetCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#changeFleetCompartment.");
    const operationName = "changeFleetCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": changeFleetCompartmentRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeFleetCompartmentRequest.ifMatch,
      "opc-retry-token": changeFleetCompartmentRequest.opcRetryToken,
      "opc-request-id": changeFleetCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeFleetCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeFleetCompartmentRequest.changeFleetCompartmentDetails,
        "ChangeFleetCompartmentDetails",
        model.ChangeFleetCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeFleetCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add a new record to the fleet blocklist.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateBlocklistRequest
   * @return CreateBlocklistResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/CreateBlocklist.ts.html |here} to see how to use CreateBlocklist API.
   */
  public async createBlocklist(
    createBlocklistRequest: requests.CreateBlocklistRequest
  ): Promise<responses.CreateBlocklistResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#createBlocklist.");
    const operationName = "createBlocklist";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": createBlocklistRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createBlocklistRequest.opcRetryToken,
      "opc-request-id": createBlocklistRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBlocklistRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/blocklists",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBlocklistRequest.createBlocklistDetails,
        "CreateBlocklistDetails",
        model.CreateBlocklistDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBlocklistResponse>{},
        body: await response.json(),
        bodyKey: "blocklist",
        bodyModel: model.Blocklist,
        type: "model.Blocklist",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Request to perform validation of the DRS file and create the file to the Object Storage.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDrsFileRequest
   * @return CreateDrsFileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/CreateDrsFile.ts.html |here} to see how to use CreateDrsFile API.
   */
  public async createDrsFile(
    createDrsFileRequest: requests.CreateDrsFileRequest
  ): Promise<responses.CreateDrsFileResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#createDrsFile.");
    const operationName = "createDrsFile";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": createDrsFileRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDrsFileRequest.opcRequestId,
      "if-match": createDrsFileRequest.ifMatch,
      "opc-retry-token": createDrsFileRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDrsFileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/drsFiles",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDrsFileRequest.createDrsFileDetails,
        "CreateDrsFileDetails",
        model.CreateDrsFileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDrsFileResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Create a new Fleet using the information provided.
* <p>
`inventoryLog` is now a required parameter for CreateFleet API.
* Update existing applications using this API
* before July 15, 2022 to ensure the applications continue to work.
* See the [Service Change Notice](https://docs.oracle.com/en-us/iaas/Content/servicechanges.htm#JMS) for more details.
* Migrate existing fleets using the `UpdateFleet` API to set the `inventoryLog` parameter.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateFleetRequest
     * @return CreateFleetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/CreateFleet.ts.html |here} to see how to use CreateFleet API.
     */
  public async createFleet(
    createFleetRequest: requests.CreateFleetRequest
  ): Promise<responses.CreateFleetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#createFleet.");
    const operationName = "createFleet";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFleetRequest.opcRetryToken,
      "opc-request-id": createFleetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFleetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFleetRequest.createFleetDetails,
        "CreateFleetDetails",
        model.CreateFleetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFleetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Registers an agent's JmsPlugin, optionally attaching to an existing fleet of the tenancy.
   * JmsPlugins registered fleet-less are created with lifecycle state INACTIVE.
   * For the operation to be authorized, the agent must exist, and the authorized user requires JMS_PLUGIN_CREATE permission for the agent's compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateJmsPluginRequest
   * @return CreateJmsPluginResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/CreateJmsPlugin.ts.html |here} to see how to use CreateJmsPlugin API.
   */
  public async createJmsPlugin(
    createJmsPluginRequest: requests.CreateJmsPluginRequest
  ): Promise<responses.CreateJmsPluginResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#createJmsPlugin.");
    const operationName = "createJmsPlugin";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createJmsPluginRequest.opcRetryToken,
      "opc-request-id": createJmsPluginRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createJmsPluginRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jmsPlugins",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createJmsPluginRequest.createJmsPluginDetails,
        "CreateJmsPluginDetails",
        model.CreateJmsPluginDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateJmsPluginResponse>{},
        body: await response.json(),
        bodyKey: "jmsPlugin",
        bodyModel: model.JmsPlugin,
        type: "model.JmsPlugin",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a task schedule using the information provided.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateTaskScheduleRequest
   * @return CreateTaskScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/CreateTaskSchedule.ts.html |here} to see how to use CreateTaskSchedule API.
   */
  public async createTaskSchedule(
    createTaskScheduleRequest: requests.CreateTaskScheduleRequest
  ): Promise<responses.CreateTaskScheduleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#createTaskSchedule.");
    const operationName = "createTaskSchedule";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createTaskScheduleRequest.opcRequestId,
      "opc-retry-token": createTaskScheduleRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTaskScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/taskSchedules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTaskScheduleRequest.createTaskScheduleDetails,
        "CreateTaskScheduleDetails",
        model.CreateTaskScheduleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTaskScheduleResponse>{},
        body: await response.json(),
        bodyKey: "taskSchedule",
        bodyModel: model.TaskSchedule,
        type: "model.TaskSchedule",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the blocklist record specified by an identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteBlocklistRequest
   * @return DeleteBlocklistResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/DeleteBlocklist.ts.html |here} to see how to use DeleteBlocklist API.
   */
  public async deleteBlocklist(
    deleteBlocklistRequest: requests.DeleteBlocklistRequest
  ): Promise<responses.DeleteBlocklistResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#deleteBlocklist.");
    const operationName = "deleteBlocklist";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": deleteBlocklistRequest.fleetId,
      "{blocklistKey}": deleteBlocklistRequest.blocklistKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteBlocklistRequest.ifMatch,
      "opc-request-id": deleteBlocklistRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBlocklistRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/blocklists/{blocklistKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBlocklistResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the metadata for the result of a Crypto event analysis. The actual report shall remain in the object storage.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteCryptoAnalysisResultRequest
   * @return DeleteCryptoAnalysisResultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/DeleteCryptoAnalysisResult.ts.html |here} to see how to use DeleteCryptoAnalysisResult API.
   */
  public async deleteCryptoAnalysisResult(
    deleteCryptoAnalysisResultRequest: requests.DeleteCryptoAnalysisResultRequest
  ): Promise<responses.DeleteCryptoAnalysisResultResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#deleteCryptoAnalysisResult."
      );
    const operationName = "deleteCryptoAnalysisResult";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": deleteCryptoAnalysisResultRequest.fleetId,
      "{cryptoAnalysisResultId}": deleteCryptoAnalysisResultRequest.cryptoAnalysisResultId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteCryptoAnalysisResultRequest.ifMatch,
      "opc-request-id": deleteCryptoAnalysisResultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCryptoAnalysisResultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/cryptoAnalysisResults/{cryptoAnalysisResultId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCryptoAnalysisResultResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Request to delete the DRS file from the Object Storage.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDrsFileRequest
   * @return DeleteDrsFileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/DeleteDrsFile.ts.html |here} to see how to use DeleteDrsFile API.
   */
  public async deleteDrsFile(
    deleteDrsFileRequest: requests.DeleteDrsFileRequest
  ): Promise<responses.DeleteDrsFileResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#deleteDrsFile.");
    const operationName = "deleteDrsFile";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": deleteDrsFileRequest.fleetId,
      "{drsFileKey}": deleteDrsFileRequest.drsFileKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteDrsFileRequest.opcRequestId,
      "if-match": deleteDrsFileRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDrsFileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/drsFiles/{drsFileKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDrsFileResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the Fleet specified by an identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteFleetRequest
   * @return DeleteFleetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/DeleteFleet.ts.html |here} to see how to use DeleteFleet API.
   */
  public async deleteFleet(
    deleteFleetRequest: requests.DeleteFleetRequest
  ): Promise<responses.DeleteFleetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#deleteFleet.");
    const operationName = "deleteFleet";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": deleteFleetRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFleetRequest.ifMatch,
      "opc-request-id": deleteFleetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFleetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFleetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the Java migration analysis result. The actual report will remain in the Object Storage bucket.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteJavaMigrationAnalysisResultRequest
   * @return DeleteJavaMigrationAnalysisResultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/DeleteJavaMigrationAnalysisResult.ts.html |here} to see how to use DeleteJavaMigrationAnalysisResult API.
   */
  public async deleteJavaMigrationAnalysisResult(
    deleteJavaMigrationAnalysisResultRequest: requests.DeleteJavaMigrationAnalysisResultRequest
  ): Promise<responses.DeleteJavaMigrationAnalysisResultResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#deleteJavaMigrationAnalysisResult."
      );
    const operationName = "deleteJavaMigrationAnalysisResult";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": deleteJavaMigrationAnalysisResultRequest.fleetId,
      "{javaMigrationAnalysisResultId}":
        deleteJavaMigrationAnalysisResultRequest.javaMigrationAnalysisResultId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteJavaMigrationAnalysisResultRequest.ifMatch,
      "opc-request-id": deleteJavaMigrationAnalysisResultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteJavaMigrationAnalysisResultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/javaMigrationAnalysisResults/{javaMigrationAnalysisResultId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteJavaMigrationAnalysisResultResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a JmsPlugin. The JmsPlugin may be visible for some time with state DELETED.
   * Deleted plugins will not be able to communicate with the JMS service.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteJmsPluginRequest
   * @return DeleteJmsPluginResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/DeleteJmsPlugin.ts.html |here} to see how to use DeleteJmsPlugin API.
   */
  public async deleteJmsPlugin(
    deleteJmsPluginRequest: requests.DeleteJmsPluginRequest
  ): Promise<responses.DeleteJmsPluginResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#deleteJmsPlugin.");
    const operationName = "deleteJmsPlugin";
    const apiReferenceLink = "";
    const pathParams = {
      "{jmsPluginId}": deleteJmsPluginRequest.jmsPluginId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteJmsPluginRequest.opcRequestId,
      "if-match": deleteJmsPluginRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteJmsPluginRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jmsPlugins/{jmsPluginId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteJmsPluginResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes only the metadata of the Performance Tuning Analysis result, but the file remains in the object storage.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeletePerformanceTuningAnalysisResultRequest
   * @return DeletePerformanceTuningAnalysisResultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/DeletePerformanceTuningAnalysisResult.ts.html |here} to see how to use DeletePerformanceTuningAnalysisResult API.
   */
  public async deletePerformanceTuningAnalysisResult(
    deletePerformanceTuningAnalysisResultRequest: requests.DeletePerformanceTuningAnalysisResultRequest
  ): Promise<responses.DeletePerformanceTuningAnalysisResultResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#deletePerformanceTuningAnalysisResult."
      );
    const operationName = "deletePerformanceTuningAnalysisResult";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": deletePerformanceTuningAnalysisResultRequest.fleetId,
      "{performanceTuningAnalysisResultId}":
        deletePerformanceTuningAnalysisResultRequest.performanceTuningAnalysisResultId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePerformanceTuningAnalysisResultRequest.ifMatch,
      "opc-request-id": deletePerformanceTuningAnalysisResultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePerformanceTuningAnalysisResultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/fleets/{fleetId}/performanceTuningAnalysisResults/{performanceTuningAnalysisResultId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePerformanceTuningAnalysisResultResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the task schedule record specified by an identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteTaskScheduleRequest
   * @return DeleteTaskScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/DeleteTaskSchedule.ts.html |here} to see how to use DeleteTaskSchedule API.
   */
  public async deleteTaskSchedule(
    deleteTaskScheduleRequest: requests.DeleteTaskScheduleRequest
  ): Promise<responses.DeleteTaskScheduleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#deleteTaskSchedule.");
    const operationName = "deleteTaskSchedule";
    const apiReferenceLink = "";
    const pathParams = {
      "{taskScheduleId}": deleteTaskScheduleRequest.taskScheduleId
    };

    const queryParams = {
      "fleetId": deleteTaskScheduleRequest.fleetId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTaskScheduleRequest.ifMatch,
      "opc-request-id": deleteTaskScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTaskScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/taskSchedules/{taskScheduleId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTaskScheduleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Request to disable the DRS in the selected target in the Fleet.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DisableDrsRequest
   * @return DisableDrsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/DisableDrs.ts.html |here} to see how to use DisableDrs API.
   */
  public async disableDrs(
    disableDrsRequest: requests.DisableDrsRequest
  ): Promise<responses.DisableDrsResponse> {
    if (this.logger) this.logger.debug("Calling operation JavaManagementServiceClient#disableDrs.");
    const operationName = "disableDrs";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": disableDrsRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": disableDrsRequest.opcRequestId,
      "if-match": disableDrsRequest.ifMatch,
      "opc-retry-token": disableDrsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      disableDrsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/disableDrs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        disableDrsRequest.disableDrsDetails,
        "DisableDrsDetails",
        model.DisableDrsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DisableDrsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Request to enable the DRS in the selected target in the Fleet.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param EnableDrsRequest
   * @return EnableDrsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/EnableDrs.ts.html |here} to see how to use EnableDrs API.
   */
  public async enableDrs(
    enableDrsRequest: requests.EnableDrsRequest
  ): Promise<responses.EnableDrsResponse> {
    if (this.logger) this.logger.debug("Calling operation JavaManagementServiceClient#enableDrs.");
    const operationName = "enableDrs";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": enableDrsRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": enableDrsRequest.opcRequestId,
      "if-match": enableDrsRequest.ifMatch,
      "opc-retry-token": enableDrsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      enableDrsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/enableDrs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        enableDrsRequest.enableDrsDetails,
        "EnableDrsDetails",
        model.EnableDrsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.EnableDrsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates Agent Deploy Script for Fleet using the information provided.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateAgentDeployScriptRequest
   * @return GenerateAgentDeployScriptResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GenerateAgentDeployScript.ts.html |here} to see how to use GenerateAgentDeployScript API.
   */
  public async generateAgentDeployScript(
    generateAgentDeployScriptRequest: requests.GenerateAgentDeployScriptRequest
  ): Promise<responses.GenerateAgentDeployScriptResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#generateAgentDeployScript.");
    const operationName = "generateAgentDeployScript";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": generateAgentDeployScriptRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateAgentDeployScriptRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateAgentDeployScriptRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/generateAgentDeployScript",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateAgentDeployScriptRequest.generateAgentDeployScriptDetails,
        "GenerateAgentDeployScriptDetails",
        model.GenerateAgentDeployScriptDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateAgentDeployScriptResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("content-type"),
            key: "contentType",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates the agent installer configuration using the information provided.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateAgentInstallerConfigurationRequest
   * @return GenerateAgentInstallerConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GenerateAgentInstallerConfiguration.ts.html |here} to see how to use GenerateAgentInstallerConfiguration API.
   */
  public async generateAgentInstallerConfiguration(
    generateAgentInstallerConfigurationRequest: requests.GenerateAgentInstallerConfigurationRequest
  ): Promise<responses.GenerateAgentInstallerConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#generateAgentInstallerConfiguration."
      );
    const operationName = "generateAgentInstallerConfiguration";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateAgentInstallerConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateAgentInstallerConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/agentInstallers/actions/generateAgentInstallerConfiguration",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateAgentInstallerConfigurationRequest.generateAgentInstallerConfigurationDetails,
        "GenerateAgentInstallerConfigurationDetails",
        model.GenerateAgentInstallerConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateAgentInstallerConfigurationResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("content-type"),
            key: "contentType",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates Load Pipeline Script
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateLoadPipelineScriptRequest
   * @return GenerateLoadPipelineScriptResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GenerateLoadPipelineScript.ts.html |here} to see how to use GenerateLoadPipelineScript API.
   */
  public async generateLoadPipelineScript(
    generateLoadPipelineScriptRequest: requests.GenerateLoadPipelineScriptRequest
  ): Promise<responses.GenerateLoadPipelineScriptResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#generateLoadPipelineScript."
      );
    const operationName = "generateLoadPipelineScript";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": generateLoadPipelineScriptRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateLoadPipelineScriptRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateLoadPipelineScriptRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/generateLoadPipelineScript",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateLoadPipelineScriptRequest.generateLoadPipelineScriptDetails,
        "GenerateLoadPipelineScriptDetails",
        model.GenerateLoadPipelineScriptDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateLoadPipelineScriptResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("content-type"),
            key: "contentType",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve the metadata for the result of a Crypto event analysis.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCryptoAnalysisResultRequest
   * @return GetCryptoAnalysisResultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetCryptoAnalysisResult.ts.html |here} to see how to use GetCryptoAnalysisResult API.
   */
  public async getCryptoAnalysisResult(
    getCryptoAnalysisResultRequest: requests.GetCryptoAnalysisResultRequest
  ): Promise<responses.GetCryptoAnalysisResultResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#getCryptoAnalysisResult.");
    const operationName = "getCryptoAnalysisResult";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": getCryptoAnalysisResultRequest.fleetId,
      "{cryptoAnalysisResultId}": getCryptoAnalysisResultRequest.cryptoAnalysisResultId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCryptoAnalysisResultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCryptoAnalysisResultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/cryptoAnalysisResults/{cryptoAnalysisResultId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCryptoAnalysisResultResponse>{},
        body: await response.json(),
        bodyKey: "cryptoAnalysisResult",
        bodyModel: model.CryptoAnalysisResult,
        type: "model.CryptoAnalysisResult",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the detail about the created DRS file in the Fleet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDrsFileRequest
   * @return GetDrsFileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetDrsFile.ts.html |here} to see how to use GetDrsFile API.
   */
  public async getDrsFile(
    getDrsFileRequest: requests.GetDrsFileRequest
  ): Promise<responses.GetDrsFileResponse> {
    if (this.logger) this.logger.debug("Calling operation JavaManagementServiceClient#getDrsFile.");
    const operationName = "getDrsFile";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": getDrsFileRequest.fleetId,
      "{drsFileKey}": getDrsFileRequest.drsFileKey
    };

    const queryParams = {
      "page": getDrsFileRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDrsFileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDrsFileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/drsFiles/{drsFileKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDrsFileResponse>{},
        body: await response.json(),
        bodyKey: "drsFile",
        bodyModel: model.DrsFile,
        type: "model.DrsFile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns export setting for the specified fleet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetExportSettingRequest
   * @return GetExportSettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetExportSetting.ts.html |here} to see how to use GetExportSetting API.
   */
  public async getExportSetting(
    getExportSettingRequest: requests.GetExportSettingRequest
  ): Promise<responses.GetExportSettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#getExportSetting.");
    const operationName = "getExportSetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": getExportSettingRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getExportSettingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getExportSettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/exportSetting",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetExportSettingResponse>{},
        body: await response.json(),
        bodyKey: "exportSetting",
        bodyModel: model.ExportSetting,
        type: "model.ExportSetting",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns last export status for the specified fleet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetExportStatusRequest
   * @return GetExportStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetExportStatus.ts.html |here} to see how to use GetExportStatus API.
   */
  public async getExportStatus(
    getExportStatusRequest: requests.GetExportStatusRequest
  ): Promise<responses.GetExportStatusResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#getExportStatus.");
    const operationName = "getExportStatus";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": getExportStatusRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getExportStatusRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getExportStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/exportStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetExportStatusResponse>{},
        body: await response.json(),
        bodyKey: "exportStatus",
        bodyModel: model.ExportStatus,
        type: "model.ExportStatus",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve a Fleet with the specified identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFleetRequest
   * @return GetFleetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetFleet.ts.html |here} to see how to use GetFleet API.
   */
  public async getFleet(
    getFleetRequest: requests.GetFleetRequest
  ): Promise<responses.GetFleetResponse> {
    if (this.logger) this.logger.debug("Calling operation JavaManagementServiceClient#getFleet.");
    const operationName = "getFleet";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": getFleetRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFleetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFleetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFleetResponse>{},
        body: await response.json(),
        bodyKey: "fleet",
        bodyModel: model.Fleet,
        type: "model.Fleet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns Fleet level advanced feature configuration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFleetAdvancedFeatureConfigurationRequest
   * @return GetFleetAdvancedFeatureConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetFleetAdvancedFeatureConfiguration.ts.html |here} to see how to use GetFleetAdvancedFeatureConfiguration API.
   */
  public async getFleetAdvancedFeatureConfiguration(
    getFleetAdvancedFeatureConfigurationRequest: requests.GetFleetAdvancedFeatureConfigurationRequest
  ): Promise<responses.GetFleetAdvancedFeatureConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#getFleetAdvancedFeatureConfiguration."
      );
    const operationName = "getFleetAdvancedFeatureConfiguration";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": getFleetAdvancedFeatureConfigurationRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": getFleetAdvancedFeatureConfigurationRequest.ifMatch,
      "opc-request-id": getFleetAdvancedFeatureConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFleetAdvancedFeatureConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/advancedFeatureConfiguration",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFleetAdvancedFeatureConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "fleetAdvancedFeatureConfiguration",
        bodyModel: model.FleetAdvancedFeatureConfiguration,
        type: "model.FleetAdvancedFeatureConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve a Fleet Agent Configuration for the specified Fleet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFleetAgentConfigurationRequest
   * @return GetFleetAgentConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetFleetAgentConfiguration.ts.html |here} to see how to use GetFleetAgentConfiguration API.
   */
  public async getFleetAgentConfiguration(
    getFleetAgentConfigurationRequest: requests.GetFleetAgentConfigurationRequest
  ): Promise<responses.GetFleetAgentConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#getFleetAgentConfiguration."
      );
    const operationName = "getFleetAgentConfiguration";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": getFleetAgentConfigurationRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFleetAgentConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFleetAgentConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/agentConfiguration",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFleetAgentConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "fleetAgentConfiguration",
        bodyModel: model.FleetAgentConfiguration,
        type: "model.FleetAgentConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns metadata associated with a specific Java release family.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJavaFamilyRequest
   * @return GetJavaFamilyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetJavaFamily.ts.html |here} to see how to use GetJavaFamily API.
   */
  public async getJavaFamily(
    getJavaFamilyRequest: requests.GetJavaFamilyRequest
  ): Promise<responses.GetJavaFamilyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#getJavaFamily.");
    const operationName = "getJavaFamily";
    const apiReferenceLink = "";
    const pathParams = {
      "{familyVersion}": getJavaFamilyRequest.familyVersion
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJavaFamilyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJavaFamilyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/javaFamilies/{familyVersion}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJavaFamilyResponse>{},
        body: await response.json(),
        bodyKey: "javaFamily",
        bodyModel: model.JavaFamily,
        type: "model.JavaFamily",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve Java Migration Analysis result.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJavaMigrationAnalysisResultRequest
   * @return GetJavaMigrationAnalysisResultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetJavaMigrationAnalysisResult.ts.html |here} to see how to use GetJavaMigrationAnalysisResult API.
   */
  public async getJavaMigrationAnalysisResult(
    getJavaMigrationAnalysisResultRequest: requests.GetJavaMigrationAnalysisResultRequest
  ): Promise<responses.GetJavaMigrationAnalysisResultResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#getJavaMigrationAnalysisResult."
      );
    const operationName = "getJavaMigrationAnalysisResult";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": getJavaMigrationAnalysisResultRequest.fleetId,
      "{javaMigrationAnalysisResultId}":
        getJavaMigrationAnalysisResultRequest.javaMigrationAnalysisResultId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJavaMigrationAnalysisResultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJavaMigrationAnalysisResultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/javaMigrationAnalysisResults/{javaMigrationAnalysisResultId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJavaMigrationAnalysisResultResponse>{},
        body: await response.json(),
        bodyKey: "javaMigrationAnalysisResult",
        bodyModel: model.JavaMigrationAnalysisResult,
        type: "model.JavaMigrationAnalysisResult",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns detail of a Java release.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJavaReleaseRequest
   * @return GetJavaReleaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetJavaRelease.ts.html |here} to see how to use GetJavaRelease API.
   */
  public async getJavaRelease(
    getJavaReleaseRequest: requests.GetJavaReleaseRequest
  ): Promise<responses.GetJavaReleaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#getJavaRelease.");
    const operationName = "getJavaRelease";
    const apiReferenceLink = "";
    const pathParams = {
      "{releaseVersion}": getJavaReleaseRequest.releaseVersion
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJavaReleaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJavaReleaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/javaReleases/{releaseVersion}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJavaReleaseResponse>{},
        body: await response.json(),
        bodyKey: "javaRelease",
        bodyModel: model.JavaRelease,
        type: "model.JavaRelease",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the JmsPlugin.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJmsPluginRequest
   * @return GetJmsPluginResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetJmsPlugin.ts.html |here} to see how to use GetJmsPlugin API.
   */
  public async getJmsPlugin(
    getJmsPluginRequest: requests.GetJmsPluginRequest
  ): Promise<responses.GetJmsPluginResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#getJmsPlugin.");
    const operationName = "getJmsPlugin";
    const apiReferenceLink = "";
    const pathParams = {
      "{jmsPluginId}": getJmsPluginRequest.jmsPluginId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJmsPluginRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJmsPluginRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jmsPlugins/{jmsPluginId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJmsPluginResponse>{},
        body: await response.json(),
        bodyKey: "jmsPlugin",
        bodyModel: model.JmsPlugin,
        type: "model.JmsPlugin",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve metadata of the Performance Tuning Analysis result.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPerformanceTuningAnalysisResultRequest
   * @return GetPerformanceTuningAnalysisResultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetPerformanceTuningAnalysisResult.ts.html |here} to see how to use GetPerformanceTuningAnalysisResult API.
   */
  public async getPerformanceTuningAnalysisResult(
    getPerformanceTuningAnalysisResultRequest: requests.GetPerformanceTuningAnalysisResultRequest
  ): Promise<responses.GetPerformanceTuningAnalysisResultResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#getPerformanceTuningAnalysisResult."
      );
    const operationName = "getPerformanceTuningAnalysisResult";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": getPerformanceTuningAnalysisResultRequest.fleetId,
      "{performanceTuningAnalysisResultId}":
        getPerformanceTuningAnalysisResultRequest.performanceTuningAnalysisResultId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPerformanceTuningAnalysisResultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPerformanceTuningAnalysisResultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/fleets/{fleetId}/performanceTuningAnalysisResults/{performanceTuningAnalysisResultId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPerformanceTuningAnalysisResultResponse>{},
        body: await response.json(),
        bodyKey: "performanceTuningAnalysisResult",
        bodyModel: model.PerformanceTuningAnalysisResult,
        type: "model.PerformanceTuningAnalysisResult",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a task schedule.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetTaskScheduleRequest
   * @return GetTaskScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetTaskSchedule.ts.html |here} to see how to use GetTaskSchedule API.
   */
  public async getTaskSchedule(
    getTaskScheduleRequest: requests.GetTaskScheduleRequest
  ): Promise<responses.GetTaskScheduleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#getTaskSchedule.");
    const operationName = "getTaskSchedule";
    const apiReferenceLink = "";
    const pathParams = {
      "{taskScheduleId}": getTaskScheduleRequest.taskScheduleId
    };

    const queryParams = {
      "fleetId": getTaskScheduleRequest.fleetId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTaskScheduleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTaskScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/taskSchedules/{taskScheduleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTaskScheduleResponse>{},
        body: await response.json(),
        bodyKey: "taskSchedule",
        bodyModel: model.TaskSchedule,
        type: "model.TaskSchedule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve the details of a work request with the specified ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of the agent installer information.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAgentInstallersRequest
   * @return ListAgentInstallersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListAgentInstallers.ts.html |here} to see how to use ListAgentInstallers API.
   */
  public async listAgentInstallers(
    listAgentInstallersRequest: requests.ListAgentInstallersRequest
  ): Promise<responses.ListAgentInstallersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listAgentInstallers.");
    const operationName = "listAgentInstallers";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAgentInstallersRequest.compartmentId,
      "fleetId": listAgentInstallersRequest.fleetId,
      "platformArchitecture": listAgentInstallersRequest.platformArchitecture,
      "osFamily": listAgentInstallersRequest.osFamily,
      "limit": listAgentInstallersRequest.limit,
      "page": listAgentInstallersRequest.page,
      "sortOrder": listAgentInstallersRequest.sortOrder,
      "sortBy": listAgentInstallersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAgentInstallersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAgentInstallersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/agentInstallers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAgentInstallersResponse>{},
        body: await response.json(),
        bodyKey: "agentInstallerCollection",
        bodyModel: model.AgentInstallerCollection,
        type: "model.AgentInstallerCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a list of AnnouncementSummary items
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAnnouncementsRequest
   * @return ListAnnouncementsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListAnnouncements.ts.html |here} to see how to use ListAnnouncements API.
   */
  public async listAnnouncements(
    listAnnouncementsRequest: requests.ListAnnouncementsRequest
  ): Promise<responses.ListAnnouncementsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listAnnouncements.");
    const operationName = "listAnnouncements";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "summaryContains": listAnnouncementsRequest.summaryContains,
      "timeStart": listAnnouncementsRequest.timeStart,
      "timeEnd": listAnnouncementsRequest.timeEnd,
      "limit": listAnnouncementsRequest.limit,
      "page": listAnnouncementsRequest.page,
      "sortOrder": listAnnouncementsRequest.sortOrder,
      "sortBy": listAnnouncementsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAnnouncementsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAnnouncementsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/announcements",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAnnouncementsResponse>{},
        body: await response.json(),
        bodyKey: "announcementCollection",
        bodyModel: model.AnnouncementCollection,
        type: "model.AnnouncementCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of blocklist entities contained by a fleet.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListBlocklistsRequest
   * @return ListBlocklistsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListBlocklists.ts.html |here} to see how to use ListBlocklists API.
   */
  public async listBlocklists(
    listBlocklistsRequest: requests.ListBlocklistsRequest
  ): Promise<responses.ListBlocklistsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listBlocklists.");
    const operationName = "listBlocklists";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listBlocklistsRequest.fleetId
    };

    const queryParams = {
      "operation": listBlocklistsRequest.operation,
      "managedInstanceId": listBlocklistsRequest.managedInstanceId,
      "limit": listBlocklistsRequest.limit,
      "page": listBlocklistsRequest.page,
      "sortOrder": listBlocklistsRequest.sortOrder,
      "sortBy": listBlocklistsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBlocklistsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBlocklistsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/blocklists",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBlocklistsResponse>{},
        body: await response.json(),
        bodyKey: "blocklistCollection",
        bodyModel: model.BlocklistCollection,
        type: "model.BlocklistCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List containers in a fleet filtered by query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListContainersRequest
   * @return ListContainersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListContainers.ts.html |here} to see how to use ListContainers API.
   */
  public async listContainers(
    listContainersRequest: requests.ListContainersRequest
  ): Promise<responses.ListContainersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listContainers.");
    const operationName = "listContainers";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listContainersRequest.fleetId
    };

    const queryParams = {
      "managedInstanceId": listContainersRequest.managedInstanceId,
      "displayName": listContainersRequest.displayName,
      "applicationName": listContainersRequest.applicationName,
      "jreVersion": listContainersRequest.jreVersion,
      "jreSecurityStatus": listContainersRequest.jreSecurityStatus,
      "timeStartedGreaterThanOrEqualTo": listContainersRequest.timeStartedGreaterThanOrEqualTo,
      "timeStartedLessThanOrEqualTo": listContainersRequest.timeStartedLessThanOrEqualTo,
      "limit": listContainersRequest.limit,
      "page": listContainersRequest.page,
      "sortOrder": listContainersRequest.sortOrder,
      "sortBy": listContainersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listContainersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listContainersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/containers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListContainersResponse>{},
        body: await response.json(),
        bodyKey: "containerCollection",
        bodyModel: model.ContainerCollection,
        type: "model.ContainerCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the results of a Crypto event analysis.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCryptoAnalysisResultsRequest
   * @return ListCryptoAnalysisResultsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListCryptoAnalysisResults.ts.html |here} to see how to use ListCryptoAnalysisResults API.
   */
  public async listCryptoAnalysisResults(
    listCryptoAnalysisResultsRequest: requests.ListCryptoAnalysisResultsRequest
  ): Promise<responses.ListCryptoAnalysisResultsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listCryptoAnalysisResults.");
    const operationName = "listCryptoAnalysisResults";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listCryptoAnalysisResultsRequest.fleetId
    };

    const queryParams = {
      "aggregationMode": listCryptoAnalysisResultsRequest.aggregationMode,
      "managedInstanceId": listCryptoAnalysisResultsRequest.managedInstanceId,
      "hostName": listCryptoAnalysisResultsRequest.hostName,
      "nonCompliantFindingCount": listCryptoAnalysisResultsRequest.nonCompliantFindingCount,
      "nonCompliantFindingCountGreaterThan":
        listCryptoAnalysisResultsRequest.nonCompliantFindingCountGreaterThan,
      "findingCount": listCryptoAnalysisResultsRequest.findingCount,
      "findingCountGreaterThan": listCryptoAnalysisResultsRequest.findingCountGreaterThan,
      "timeStart": listCryptoAnalysisResultsRequest.timeStart,
      "timeEnd": listCryptoAnalysisResultsRequest.timeEnd,
      "limit": listCryptoAnalysisResultsRequest.limit,
      "page": listCryptoAnalysisResultsRequest.page,
      "sortOrder": listCryptoAnalysisResultsRequest.sortOrder,
      "sortBy": listCryptoAnalysisResultsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCryptoAnalysisResultsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCryptoAnalysisResultsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/cryptoAnalysisResults",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCryptoAnalysisResultsResponse>{},
        body: await response.json(),
        bodyKey: "cryptoAnalysisResultCollection",
        bodyModel: model.CryptoAnalysisResultCollection,
        type: "model.CryptoAnalysisResultCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List the details about the created DRS files in the Fleet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDrsFilesRequest
   * @return ListDrsFilesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListDrsFiles.ts.html |here} to see how to use ListDrsFiles API.
   */
  public async listDrsFiles(
    listDrsFilesRequest: requests.ListDrsFilesRequest
  ): Promise<responses.ListDrsFilesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listDrsFiles.");
    const operationName = "listDrsFiles";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listDrsFilesRequest.fleetId
    };

    const queryParams = {
      "limit": listDrsFilesRequest.limit,
      "page": listDrsFilesRequest.page,
      "sortOrder": listDrsFilesRequest.sortOrder,
      "sortBy": listDrsFilesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDrsFilesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDrsFilesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/drsFiles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDrsFilesResponse>{},
        body: await response.json(),
        bodyKey: "drsFileCollection",
        bodyModel: model.DrsFileCollection,
        type: "model.DrsFileCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List potential diagnoses that would put a fleet into FAILED or NEEDS_ATTENTION lifecycle state.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFleetDiagnosesRequest
   * @return ListFleetDiagnosesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListFleetDiagnoses.ts.html |here} to see how to use ListFleetDiagnoses API.
   */
  public async listFleetDiagnoses(
    listFleetDiagnosesRequest: requests.ListFleetDiagnosesRequest
  ): Promise<responses.ListFleetDiagnosesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listFleetDiagnoses.");
    const operationName = "listFleetDiagnoses";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listFleetDiagnosesRequest.fleetId
    };

    const queryParams = {
      "limit": listFleetDiagnosesRequest.limit,
      "page": listFleetDiagnosesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFleetDiagnosesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFleetDiagnosesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/diagnoses",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFleetDiagnosesResponse>{},
        body: await response.json(),
        bodyKey: "fleetDiagnosisCollection",
        bodyModel: model.FleetDiagnosisCollection,
        type: "model.FleetDiagnosisCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of fleet errors that describe all detected errors.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFleetErrorsRequest
   * @return ListFleetErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListFleetErrors.ts.html |here} to see how to use ListFleetErrors API.
   */
  public async listFleetErrors(
    listFleetErrorsRequest: requests.ListFleetErrorsRequest
  ): Promise<responses.ListFleetErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listFleetErrors.");
    const operationName = "listFleetErrors";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listFleetErrorsRequest.compartmentId,
      "compartmentIdInSubtree": listFleetErrorsRequest.compartmentIdInSubtree,
      "fleetId": listFleetErrorsRequest.fleetId,
      "timeFirstSeenLessThanOrEqualTo": listFleetErrorsRequest.timeFirstSeenLessThanOrEqualTo,
      "timeFirstSeenGreaterThanOrEqualTo": listFleetErrorsRequest.timeFirstSeenGreaterThanOrEqualTo,
      "timeLastSeenLessThanOrEqualTo": listFleetErrorsRequest.timeLastSeenLessThanOrEqualTo,
      "timeLastSeenGreaterThanOrEqualTo": listFleetErrorsRequest.timeLastSeenGreaterThanOrEqualTo,
      "limit": listFleetErrorsRequest.limit,
      "page": listFleetErrorsRequest.page,
      "sortBy": listFleetErrorsRequest.sortBy,
      "sortOrder": listFleetErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFleetErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFleetErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleetErrors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFleetErrorsResponse>{},
        body: await response.json(),
        bodyKey: "fleetErrorCollection",
        bodyModel: model.FleetErrorCollection,
        type: "model.FleetErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of all the Fleets contained by a compartment. The query parameter `compartmentId`
   * is required unless the query parameter `id` is specified.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFleetsRequest
   * @return ListFleetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListFleets.ts.html |here} to see how to use ListFleets API.
   */
  public async listFleets(
    listFleetsRequest: requests.ListFleetsRequest
  ): Promise<responses.ListFleetsResponse> {
    if (this.logger) this.logger.debug("Calling operation JavaManagementServiceClient#listFleets.");
    const operationName = "listFleets";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listFleetsRequest.compartmentId,
      "id": listFleetsRequest.id,
      "lifecycleState": listFleetsRequest.lifecycleState,
      "displayName": listFleetsRequest.displayName,
      "limit": listFleetsRequest.limit,
      "page": listFleetsRequest.page,
      "sortOrder": listFleetsRequest.sortOrder,
      "sortBy": listFleetsRequest.sortBy,
      "displayNameContains": listFleetsRequest.displayNameContains
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFleetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFleetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFleetsResponse>{},
        body: await response.json(),
        bodyKey: "fleetCollection",
        bodyModel: model.FleetCollection,
        type: "model.FleetCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List Java installation sites in a Fleet filtered by query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListInstallationSitesRequest
   * @return ListInstallationSitesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListInstallationSites.ts.html |here} to see how to use ListInstallationSites API.
   */
  public async listInstallationSites(
    listInstallationSitesRequest: requests.ListInstallationSitesRequest
  ): Promise<responses.ListInstallationSitesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listInstallationSites.");
    const operationName = "listInstallationSites";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listInstallationSitesRequest.fleetId
    };

    const queryParams = {
      "jreVendor": listInstallationSitesRequest.jreVendor,
      "jreDistribution": listInstallationSitesRequest.jreDistribution,
      "jreVersion": listInstallationSitesRequest.jreVersion,
      "installationPath": listInstallationSitesRequest.installationPath,
      "applicationId": listInstallationSitesRequest.applicationId,
      "managedInstanceId": listInstallationSitesRequest.managedInstanceId,
      "limit": listInstallationSitesRequest.limit,
      "page": listInstallationSitesRequest.page,
      "sortOrder": listInstallationSitesRequest.sortOrder,
      "sortBy": listInstallationSitesRequest.sortBy,
      "osFamily": listInstallationSitesRequest.osFamily,
      "jreSecurityStatus": listInstallationSitesRequest.jreSecurityStatus,
      "pathContains": listInstallationSitesRequest.pathContains,
      "timeStart": listInstallationSitesRequest.timeStart,
      "timeEnd": listInstallationSitesRequest.timeEnd
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listInstallationSitesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listInstallationSitesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/installationSites",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstallationSitesResponse>{},
        body: await response.json(),
        bodyKey: "installationSiteCollection",
        bodyModel: model.InstallationSiteCollection,
        type: "model.InstallationSiteCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of the Java release family information.
   * A Java release family is typically a major version in the Java version identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJavaFamiliesRequest
   * @return ListJavaFamiliesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListJavaFamilies.ts.html |here} to see how to use ListJavaFamilies API.
   */
  public async listJavaFamilies(
    listJavaFamiliesRequest: requests.ListJavaFamiliesRequest
  ): Promise<responses.ListJavaFamiliesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listJavaFamilies.");
    const operationName = "listJavaFamilies";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "familyVersion": listJavaFamiliesRequest.familyVersion,
      "displayName": listJavaFamiliesRequest.displayName,
      "isSupportedVersion": listJavaFamiliesRequest.isSupportedVersion,
      "limit": listJavaFamiliesRequest.limit,
      "page": listJavaFamiliesRequest.page,
      "sortOrder": listJavaFamiliesRequest.sortOrder,
      "sortBy": listJavaFamiliesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJavaFamiliesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJavaFamiliesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/javaFamilies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJavaFamiliesResponse>{},
        body: await response.json(),
        bodyKey: "javaFamilyCollection",
        bodyModel: model.JavaFamilyCollection,
        type: "model.JavaFamilyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the results of a Java migration analysis.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJavaMigrationAnalysisResultsRequest
   * @return ListJavaMigrationAnalysisResultsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListJavaMigrationAnalysisResults.ts.html |here} to see how to use ListJavaMigrationAnalysisResults API.
   */
  public async listJavaMigrationAnalysisResults(
    listJavaMigrationAnalysisResultsRequest: requests.ListJavaMigrationAnalysisResultsRequest
  ): Promise<responses.ListJavaMigrationAnalysisResultsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#listJavaMigrationAnalysisResults."
      );
    const operationName = "listJavaMigrationAnalysisResults";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listJavaMigrationAnalysisResultsRequest.fleetId
    };

    const queryParams = {
      "managedInstanceId": listJavaMigrationAnalysisResultsRequest.managedInstanceId,
      "hostName": listJavaMigrationAnalysisResultsRequest.hostName,
      "applicationName": listJavaMigrationAnalysisResultsRequest.applicationName,
      "timeStart": listJavaMigrationAnalysisResultsRequest.timeStart,
      "timeEnd": listJavaMigrationAnalysisResultsRequest.timeEnd,
      "limit": listJavaMigrationAnalysisResultsRequest.limit,
      "page": listJavaMigrationAnalysisResultsRequest.page,
      "sortOrder": listJavaMigrationAnalysisResultsRequest.sortOrder,
      "sortBy": listJavaMigrationAnalysisResultsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJavaMigrationAnalysisResultsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJavaMigrationAnalysisResultsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/javaMigrationAnalysisResults",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJavaMigrationAnalysisResultsResponse>{},
        body: await response.json(),
        bodyKey: "javaMigrationAnalysisResultCollection",
        bodyModel: model.JavaMigrationAnalysisResultCollection,
        type: "model.JavaMigrationAnalysisResultCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Java releases.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJavaReleasesRequest
   * @return ListJavaReleasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListJavaReleases.ts.html |here} to see how to use ListJavaReleases API.
   */
  public async listJavaReleases(
    listJavaReleasesRequest: requests.ListJavaReleasesRequest
  ): Promise<responses.ListJavaReleasesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listJavaReleases.");
    const operationName = "listJavaReleases";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "releaseVersion": listJavaReleasesRequest.releaseVersion,
      "familyVersion": listJavaReleasesRequest.familyVersion,
      "releaseType": listJavaReleasesRequest.releaseType,
      "jreSecurityStatus": listJavaReleasesRequest.jreSecurityStatus,
      "licenseType": listJavaReleasesRequest.licenseType,
      "limit": listJavaReleasesRequest.limit,
      "page": listJavaReleasesRequest.page,
      "sortOrder": listJavaReleasesRequest.sortOrder,
      "sortBy": listJavaReleasesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJavaReleasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJavaReleasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/javaReleases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJavaReleasesResponse>{},
        body: await response.json(),
        bodyKey: "javaReleaseCollection",
        bodyModel: model.JavaReleaseCollection,
        type: "model.JavaReleaseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the JmsPlugins.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJmsPluginsRequest
   * @return ListJmsPluginsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListJmsPlugins.ts.html |here} to see how to use ListJmsPlugins API.
   */
  public async listJmsPlugins(
    listJmsPluginsRequest: requests.ListJmsPluginsRequest
  ): Promise<responses.ListJmsPluginsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listJmsPlugins.");
    const operationName = "listJmsPlugins";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJmsPluginsRequest.compartmentId,
      "compartmentIdInSubtree": listJmsPluginsRequest.compartmentIdInSubtree,
      "id": listJmsPluginsRequest.id,
      "fleetId": listJmsPluginsRequest.fleetId,
      "agentId": listJmsPluginsRequest.agentId,
      "lifecycleState": listJmsPluginsRequest.lifecycleState,
      "availabilityStatus": listJmsPluginsRequest.availabilityStatus,
      "agentType": listJmsPluginsRequest.agentType,
      "timeRegisteredLessThanOrEqualTo": listJmsPluginsRequest.timeRegisteredLessThanOrEqualTo,
      "timeLastSeenLessThanOrEqualTo": listJmsPluginsRequest.timeLastSeenLessThanOrEqualTo,
      "limit": listJmsPluginsRequest.limit,
      "page": listJmsPluginsRequest.page,
      "sortOrder": listJmsPluginsRequest.sortOrder,
      "sortBy": listJmsPluginsRequest.sortBy,
      "hostnameContains": listJmsPluginsRequest.hostnameContains
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJmsPluginsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJmsPluginsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jmsPlugins",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJmsPluginsResponse>{},
        body: await response.json(),
        bodyKey: "jmsPluginCollection",
        bodyModel: model.JmsPluginCollection,
        type: "model.JmsPluginCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List Java Runtime usage in a specified host filtered by query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJreUsageRequest
   * @return ListJreUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListJreUsage.ts.html |here} to see how to use ListJreUsage API.
   */
  public async listJreUsage(
    listJreUsageRequest: requests.ListJreUsageRequest
  ): Promise<responses.ListJreUsageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listJreUsage.");
    const operationName = "listJreUsage";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJreUsageRequest.compartmentId,
      "hostId": listJreUsageRequest.hostId,
      "applicationId": listJreUsageRequest.applicationId,
      "applicationName": listJreUsageRequest.applicationName,
      "timeStart": listJreUsageRequest.timeStart,
      "timeEnd": listJreUsageRequest.timeEnd,
      "limit": listJreUsageRequest.limit,
      "page": listJreUsageRequest.page,
      "sortOrder": listJreUsageRequest.sortOrder,
      "sortBy": listJreUsageRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJreUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJreUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listJreUsage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJreUsageResponse>{},
        body: await response.json(),
        bodyKey: "jreUsageCollection",
        bodyModel: model.JreUsageCollection,
        type: "model.JreUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List applications where a library has been detected filtered by query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListLibraryApplicationUsageRequest
   * @return ListLibraryApplicationUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListLibraryApplicationUsage.ts.html |here} to see how to use ListLibraryApplicationUsage API.
   */
  public async listLibraryApplicationUsage(
    listLibraryApplicationUsageRequest: requests.ListLibraryApplicationUsageRequest
  ): Promise<responses.ListLibraryApplicationUsageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#listLibraryApplicationUsage."
      );
    const operationName = "listLibraryApplicationUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listLibraryApplicationUsageRequest.fleetId,
      "{libraryKey}": listLibraryApplicationUsageRequest.libraryKey
    };

    const queryParams = {
      "applicationId": listLibraryApplicationUsageRequest.applicationId,
      "managedInstanceId": listLibraryApplicationUsageRequest.managedInstanceId,
      "applicationName": listLibraryApplicationUsageRequest.applicationName,
      "applicationNameContains": listLibraryApplicationUsageRequest.applicationNameContains,
      "timeStart": listLibraryApplicationUsageRequest.timeStart,
      "timeEnd": listLibraryApplicationUsageRequest.timeEnd,
      "limit": listLibraryApplicationUsageRequest.limit,
      "page": listLibraryApplicationUsageRequest.page,
      "sortBy": listLibraryApplicationUsageRequest.sortBy,
      "sortOrder": listLibraryApplicationUsageRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLibraryApplicationUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLibraryApplicationUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/libraries/{libraryKey}/applications",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLibraryApplicationUsageResponse>{},
        body: await response.json(),
        bodyKey: "libraryApplicationUsageCollection",
        bodyModel: model.LibraryApplicationUsageCollection,
        type: "model.LibraryApplicationUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List managed instances where a library has been detected, filtered by query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListLibraryManagedInstanceUsageRequest
   * @return ListLibraryManagedInstanceUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListLibraryManagedInstanceUsage.ts.html |here} to see how to use ListLibraryManagedInstanceUsage API.
   */
  public async listLibraryManagedInstanceUsage(
    listLibraryManagedInstanceUsageRequest: requests.ListLibraryManagedInstanceUsageRequest
  ): Promise<responses.ListLibraryManagedInstanceUsageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#listLibraryManagedInstanceUsage."
      );
    const operationName = "listLibraryManagedInstanceUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listLibraryManagedInstanceUsageRequest.fleetId,
      "{libraryKey}": listLibraryManagedInstanceUsageRequest.libraryKey
    };

    const queryParams = {
      "applicationId": listLibraryManagedInstanceUsageRequest.applicationId,
      "managedInstanceId": listLibraryManagedInstanceUsageRequest.managedInstanceId,
      "hostName": listLibraryManagedInstanceUsageRequest.hostName,
      "hostnameContains": listLibraryManagedInstanceUsageRequest.hostnameContains,
      "timeStart": listLibraryManagedInstanceUsageRequest.timeStart,
      "timeEnd": listLibraryManagedInstanceUsageRequest.timeEnd,
      "limit": listLibraryManagedInstanceUsageRequest.limit,
      "page": listLibraryManagedInstanceUsageRequest.page,
      "sortBy": listLibraryManagedInstanceUsageRequest.sortBy,
      "sortOrder": listLibraryManagedInstanceUsageRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLibraryManagedInstanceUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLibraryManagedInstanceUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/libraries/{libraryKey}/managedInstances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLibraryManagedInstanceUsageResponse>{},
        body: await response.json(),
        bodyKey: "libraryManagedInstanceUsageCollection",
        bodyModel: model.LibraryManagedInstanceUsageCollection,
        type: "model.LibraryManagedInstanceUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List Performance Tuning Analysis results.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPerformanceTuningAnalysisResultsRequest
   * @return ListPerformanceTuningAnalysisResultsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListPerformanceTuningAnalysisResults.ts.html |here} to see how to use ListPerformanceTuningAnalysisResults API.
   */
  public async listPerformanceTuningAnalysisResults(
    listPerformanceTuningAnalysisResultsRequest: requests.ListPerformanceTuningAnalysisResultsRequest
  ): Promise<responses.ListPerformanceTuningAnalysisResultsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#listPerformanceTuningAnalysisResults."
      );
    const operationName = "listPerformanceTuningAnalysisResults";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listPerformanceTuningAnalysisResultsRequest.fleetId
    };

    const queryParams = {
      "managedInstanceId": listPerformanceTuningAnalysisResultsRequest.managedInstanceId,
      "applicationId": listPerformanceTuningAnalysisResultsRequest.applicationId,
      "applicationName": listPerformanceTuningAnalysisResultsRequest.applicationName,
      "hostName": listPerformanceTuningAnalysisResultsRequest.hostName,
      "timeStart": listPerformanceTuningAnalysisResultsRequest.timeStart,
      "timeEnd": listPerformanceTuningAnalysisResultsRequest.timeEnd,
      "limit": listPerformanceTuningAnalysisResultsRequest.limit,
      "page": listPerformanceTuningAnalysisResultsRequest.page,
      "sortOrder": listPerformanceTuningAnalysisResultsRequest.sortOrder,
      "sortBy": listPerformanceTuningAnalysisResultsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPerformanceTuningAnalysisResultsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPerformanceTuningAnalysisResultsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/performanceTuningAnalysisResults",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPerformanceTuningAnalysisResultsResponse>{},
        body: await response.json(),
        bodyKey: "performanceTuningAnalysisResultCollection",
        bodyModel: model.PerformanceTuningAnalysisResultCollection,
        type: "model.PerformanceTuningAnalysisResultCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of plugin errors that describe all detected errors.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPluginErrorsRequest
   * @return ListPluginErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListPluginErrors.ts.html |here} to see how to use ListPluginErrors API.
   */
  public async listPluginErrors(
    listPluginErrorsRequest: requests.ListPluginErrorsRequest
  ): Promise<responses.ListPluginErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listPluginErrors.");
    const operationName = "listPluginErrors";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listPluginErrorsRequest.compartmentId,
      "compartmentIdInSubtree": listPluginErrorsRequest.compartmentIdInSubtree,
      "managedInstanceId": listPluginErrorsRequest.managedInstanceId,
      "timeFirstSeenLessThanOrEqualTo": listPluginErrorsRequest.timeFirstSeenLessThanOrEqualTo,
      "timeFirstSeenGreaterThanOrEqualTo":
        listPluginErrorsRequest.timeFirstSeenGreaterThanOrEqualTo,
      "timeLastSeenLessThanOrEqualTo": listPluginErrorsRequest.timeLastSeenLessThanOrEqualTo,
      "timeLastSeenGreaterThanOrEqualTo": listPluginErrorsRequest.timeLastSeenGreaterThanOrEqualTo,
      "limit": listPluginErrorsRequest.limit,
      "page": listPluginErrorsRequest.page,
      "sortBy": listPluginErrorsRequest.sortBy,
      "sortOrder": listPluginErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPluginErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPluginErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pluginErrors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPluginErrorsResponse>{},
        body: await response.json(),
        bodyKey: "pluginErrorCollection",
        bodyModel: model.PluginErrorCollection,
        type: "model.PluginErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of task schedules.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTaskSchedulesRequest
   * @return ListTaskSchedulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListTaskSchedules.ts.html |here} to see how to use ListTaskSchedules API.
   */
  public async listTaskSchedules(
    listTaskSchedulesRequest: requests.ListTaskSchedulesRequest
  ): Promise<responses.ListTaskSchedulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listTaskSchedules.");
    const operationName = "listTaskSchedules";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "fleetId": listTaskSchedulesRequest.fleetId,
      "id": listTaskSchedulesRequest.id,
      "managedInstanceId": listTaskSchedulesRequest.managedInstanceId,
      "name": listTaskSchedulesRequest.name,
      "taskScheduleNameContains": listTaskSchedulesRequest.taskScheduleNameContains,
      "limit": listTaskSchedulesRequest.limit,
      "page": listTaskSchedulesRequest.page,
      "sortOrder": listTaskSchedulesRequest.sortOrder,
      "sortBy": listTaskSchedulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTaskSchedulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTaskSchedulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/taskSchedules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTaskSchedulesResponse>{},
        body: await response.json(),
        bodyKey: "taskScheduleCollection",
        bodyModel: model.TaskScheduleCollection,
        type: "model.TaskScheduleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List applications where an uncorrelated package has been detected, filtered by query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListUncorrelatedPackageApplicationUsageRequest
   * @return ListUncorrelatedPackageApplicationUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListUncorrelatedPackageApplicationUsage.ts.html |here} to see how to use ListUncorrelatedPackageApplicationUsage API.
   */
  public async listUncorrelatedPackageApplicationUsage(
    listUncorrelatedPackageApplicationUsageRequest: requests.ListUncorrelatedPackageApplicationUsageRequest
  ): Promise<responses.ListUncorrelatedPackageApplicationUsageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#listUncorrelatedPackageApplicationUsage."
      );
    const operationName = "listUncorrelatedPackageApplicationUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listUncorrelatedPackageApplicationUsageRequest.fleetId,
      "{packageName}": listUncorrelatedPackageApplicationUsageRequest.packageName
    };

    const queryParams = {
      "applicationId": listUncorrelatedPackageApplicationUsageRequest.applicationId,
      "managedInstanceId": listUncorrelatedPackageApplicationUsageRequest.managedInstanceId,
      "timeStart": listUncorrelatedPackageApplicationUsageRequest.timeStart,
      "timeEnd": listUncorrelatedPackageApplicationUsageRequest.timeEnd,
      "limit": listUncorrelatedPackageApplicationUsageRequest.limit,
      "page": listUncorrelatedPackageApplicationUsageRequest.page,
      "sortBy": listUncorrelatedPackageApplicationUsageRequest.sortBy,
      "sortOrder": listUncorrelatedPackageApplicationUsageRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUncorrelatedPackageApplicationUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUncorrelatedPackageApplicationUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/uncorrelatedPackages/{packageName}/applications",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUncorrelatedPackageApplicationUsageResponse>{},
        body: await response.json(),
        bodyKey: "uncorrelatedPackageApplicationUsageCollection",
        bodyModel: model.UncorrelatedPackageApplicationUsageCollection,
        type: "model.UncorrelatedPackageApplicationUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List managed instances where an uncorrelated package has been detected, filtered by query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListUncorrelatedPackageManagedInstanceUsageRequest
   * @return ListUncorrelatedPackageManagedInstanceUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListUncorrelatedPackageManagedInstanceUsage.ts.html |here} to see how to use ListUncorrelatedPackageManagedInstanceUsage API.
   */
  public async listUncorrelatedPackageManagedInstanceUsage(
    listUncorrelatedPackageManagedInstanceUsageRequest: requests.ListUncorrelatedPackageManagedInstanceUsageRequest
  ): Promise<responses.ListUncorrelatedPackageManagedInstanceUsageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#listUncorrelatedPackageManagedInstanceUsage."
      );
    const operationName = "listUncorrelatedPackageManagedInstanceUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listUncorrelatedPackageManagedInstanceUsageRequest.fleetId,
      "{packageName}": listUncorrelatedPackageManagedInstanceUsageRequest.packageName
    };

    const queryParams = {
      "applicationId": listUncorrelatedPackageManagedInstanceUsageRequest.applicationId,
      "managedInstanceId": listUncorrelatedPackageManagedInstanceUsageRequest.managedInstanceId,
      "timeStart": listUncorrelatedPackageManagedInstanceUsageRequest.timeStart,
      "timeEnd": listUncorrelatedPackageManagedInstanceUsageRequest.timeEnd,
      "limit": listUncorrelatedPackageManagedInstanceUsageRequest.limit,
      "page": listUncorrelatedPackageManagedInstanceUsageRequest.page,
      "sortBy": listUncorrelatedPackageManagedInstanceUsageRequest.sortBy,
      "sortOrder": listUncorrelatedPackageManagedInstanceUsageRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUncorrelatedPackageManagedInstanceUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUncorrelatedPackageManagedInstanceUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/uncorrelatedPackages/{packageName}/managedInstances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUncorrelatedPackageManagedInstanceUsageResponse>{},
        body: await response.json(),
        bodyKey: "uncorrelatedPackageManagedInstanceUsageCollection",
        bodyModel: model.UncorrelatedPackageManagedInstanceUsageCollection,
        type: "model.UncorrelatedPackageManagedInstanceUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List uncorrelated package summaries in a fleet, filtered by query parameters. Uncorrelated packages are Java packages which can't be accurately correlated to a library during a library scan.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListUncorrelatedPackageUsageRequest
   * @return ListUncorrelatedPackageUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListUncorrelatedPackageUsage.ts.html |here} to see how to use ListUncorrelatedPackageUsage API.
   */
  public async listUncorrelatedPackageUsage(
    listUncorrelatedPackageUsageRequest: requests.ListUncorrelatedPackageUsageRequest
  ): Promise<responses.ListUncorrelatedPackageUsageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#listUncorrelatedPackageUsage."
      );
    const operationName = "listUncorrelatedPackageUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": listUncorrelatedPackageUsageRequest.fleetId
    };

    const queryParams = {
      "packageName": listUncorrelatedPackageUsageRequest.packageName,
      "managedInstanceId": listUncorrelatedPackageUsageRequest.managedInstanceId,
      "applicationId": listUncorrelatedPackageUsageRequest.applicationId,
      "timeStart": listUncorrelatedPackageUsageRequest.timeStart,
      "timeEnd": listUncorrelatedPackageUsageRequest.timeEnd,
      "limit": listUncorrelatedPackageUsageRequest.limit,
      "page": listUncorrelatedPackageUsageRequest.page,
      "sortOrder": listUncorrelatedPackageUsageRequest.sortOrder,
      "sortBy": listUncorrelatedPackageUsageRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUncorrelatedPackageUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUncorrelatedPackageUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/uncorrelatedPackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUncorrelatedPackageUsageResponse>{},
        body: await response.json(),
        bodyKey: "uncorrelatedPackageUsageCollection",
        bodyModel: model.UncorrelatedPackageUsageCollection,
        type: "model.UncorrelatedPackageUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve a paginated list of work items for a specified work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkItemsRequest
   * @return ListWorkItemsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListWorkItems.ts.html |here} to see how to use ListWorkItems API.
   */
  public async listWorkItems(
    listWorkItemsRequest: requests.ListWorkItemsRequest
  ): Promise<responses.ListWorkItemsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listWorkItems.");
    const operationName = "listWorkItems";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkItemsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkItemsRequest.page,
      "limit": listWorkItemsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkItemsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkItemsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/workItems",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkItemsResponse>{},
        body: await response.json(),
        bodyKey: "workItemCollection",
        bodyModel: model.WorkItemCollection,
        type: "model.WorkItemCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve a (paginated) list of errors for a specified work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve a paginated list of logs for a specified work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List the work requests in a compartment. The query parameter `compartmentId` is required unless the query parameter `id` or `fleetId` is specified.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "id": listWorkRequestsRequest.id,
      "fleetId": listWorkRequestsRequest.fleetId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "managedInstanceId": listWorkRequestsRequest.managedInstanceId,
      "operationType": listWorkRequestsRequest.operationType,
      "status": listWorkRequestsRequest.status
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestCollection",
        bodyModel: model.WorkRequestCollection,
        type: "model.WorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove Java installation sites in a Fleet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RemoveFleetInstallationSitesRequest
   * @return RemoveFleetInstallationSitesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/RemoveFleetInstallationSites.ts.html |here} to see how to use RemoveFleetInstallationSites API.
   */
  public async removeFleetInstallationSites(
    removeFleetInstallationSitesRequest: requests.RemoveFleetInstallationSitesRequest
  ): Promise<responses.RemoveFleetInstallationSitesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#removeFleetInstallationSites."
      );
    const operationName = "removeFleetInstallationSites";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": removeFleetInstallationSitesRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": removeFleetInstallationSitesRequest.ifMatch,
      "opc-retry-token": removeFleetInstallationSitesRequest.opcRetryToken,
      "opc-request-id": removeFleetInstallationSitesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeFleetInstallationSitesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/removeInstallationSites",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeFleetInstallationSitesRequest.removeFleetInstallationSitesDetails,
        "RemoveFleetInstallationSitesDetails",
        model.RemoveFleetInstallationSitesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveFleetInstallationSitesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Request to perform crypto analysis on one or more selected targets in the Fleet. The result of the crypto analysis will be uploaded to the object storage bucket created by JMS on enabling the Crypto Event Analysis feature in the Fleet.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RequestCryptoAnalysesRequest
   * @return RequestCryptoAnalysesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/RequestCryptoAnalyses.ts.html |here} to see how to use RequestCryptoAnalyses API.
   */
  public async requestCryptoAnalyses(
    requestCryptoAnalysesRequest: requests.RequestCryptoAnalysesRequest
  ): Promise<responses.RequestCryptoAnalysesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#requestCryptoAnalyses.");
    const operationName = "requestCryptoAnalyses";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": requestCryptoAnalysesRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestCryptoAnalysesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestCryptoAnalysesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/requestCryptoAnalyses",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        requestCryptoAnalysesRequest.requestCryptoAnalysesDetails,
        "RequestCryptoAnalysesDetails",
        model.RequestCryptoAnalysesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestCryptoAnalysesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Request to perform a deployed Java migration analyses. The results of the deployed Java migration analyses will be uploaded to the
   * Object Storage bucket that you designate when you enable the Java Migration Analyses feature.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RequestDeployedApplicationMigrationAnalysesRequest
   * @return RequestDeployedApplicationMigrationAnalysesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/RequestDeployedApplicationMigrationAnalyses.ts.html |here} to see how to use RequestDeployedApplicationMigrationAnalyses API.
   */
  public async requestDeployedApplicationMigrationAnalyses(
    requestDeployedApplicationMigrationAnalysesRequest: requests.RequestDeployedApplicationMigrationAnalysesRequest
  ): Promise<responses.RequestDeployedApplicationMigrationAnalysesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#requestDeployedApplicationMigrationAnalyses."
      );
    const operationName = "requestDeployedApplicationMigrationAnalyses";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": requestDeployedApplicationMigrationAnalysesRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestDeployedApplicationMigrationAnalysesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestDeployedApplicationMigrationAnalysesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/requestDeployedApplicationMigrationAnalyses",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        requestDeployedApplicationMigrationAnalysesRequest.requestDeployedApplicationMigrationAnalysesDetails,
        "RequestDeployedApplicationMigrationAnalysesDetails",
        model.RequestDeployedApplicationMigrationAnalysesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestDeployedApplicationMigrationAnalysesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Request to perform a Java migration analysis. The results of the Java migration analysis will be uploaded to the
   * Object Storage bucket that you designate when you enable the Java Migration Analysis feature.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RequestJavaMigrationAnalysesRequest
   * @return RequestJavaMigrationAnalysesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/RequestJavaMigrationAnalyses.ts.html |here} to see how to use RequestJavaMigrationAnalyses API.
   */
  public async requestJavaMigrationAnalyses(
    requestJavaMigrationAnalysesRequest: requests.RequestJavaMigrationAnalysesRequest
  ): Promise<responses.RequestJavaMigrationAnalysesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#requestJavaMigrationAnalyses."
      );
    const operationName = "requestJavaMigrationAnalyses";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": requestJavaMigrationAnalysesRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestJavaMigrationAnalysesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestJavaMigrationAnalysesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/requestJavaMigrationAnalyses",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        requestJavaMigrationAnalysesRequest.requestJavaMigrationAnalysesDetails,
        "RequestJavaMigrationAnalysesDetails",
        model.RequestJavaMigrationAnalysesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestJavaMigrationAnalysesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Request to collect the JFR recordings on the selected target in the Fleet. The JFR files are uploaded to the object storage bucket created by JMS on enabling Generic JFR feature in the Fleet.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RequestJfrRecordingsRequest
   * @return RequestJfrRecordingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/RequestJfrRecordings.ts.html |here} to see how to use RequestJfrRecordings API.
   */
  public async requestJfrRecordings(
    requestJfrRecordingsRequest: requests.RequestJfrRecordingsRequest
  ): Promise<responses.RequestJfrRecordingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#requestJfrRecordings.");
    const operationName = "requestJfrRecordings";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": requestJfrRecordingsRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestJfrRecordingsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestJfrRecordingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/requestJfrRecordings",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        requestJfrRecordingsRequest.requestJfrRecordingsDetails,
        "RequestJfrRecordingsDetails",
        model.RequestJfrRecordingsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestJfrRecordingsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Request to perform performance tuning analyses. The result of performance tuning analysis will be uploaded to the
   * object storage bucket that you designated when you enabled the recording feature.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RequestPerformanceTuningAnalysesRequest
   * @return RequestPerformanceTuningAnalysesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/RequestPerformanceTuningAnalyses.ts.html |here} to see how to use RequestPerformanceTuningAnalyses API.
   */
  public async requestPerformanceTuningAnalyses(
    requestPerformanceTuningAnalysesRequest: requests.RequestPerformanceTuningAnalysesRequest
  ): Promise<responses.RequestPerformanceTuningAnalysesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#requestPerformanceTuningAnalyses."
      );
    const operationName = "requestPerformanceTuningAnalyses";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": requestPerformanceTuningAnalysesRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestPerformanceTuningAnalysesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestPerformanceTuningAnalysesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/requestPerformanceTuningAnalyses",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        requestPerformanceTuningAnalysesRequest.requestPerformanceTuningAnalysesDetails,
        "RequestPerformanceTuningAnalysesDetails",
        model.RequestPerformanceTuningAnalysesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestPerformanceTuningAnalysesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Scan Java Server usage in a fleet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ScanJavaServerUsageRequest
   * @return ScanJavaServerUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ScanJavaServerUsage.ts.html |here} to see how to use ScanJavaServerUsage API.
   */
  public async scanJavaServerUsage(
    scanJavaServerUsageRequest: requests.ScanJavaServerUsageRequest
  ): Promise<responses.ScanJavaServerUsageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#scanJavaServerUsage.");
    const operationName = "scanJavaServerUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": scanJavaServerUsageRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": scanJavaServerUsageRequest.ifMatch,
      "opc-retry-token": scanJavaServerUsageRequest.opcRetryToken,
      "opc-request-id": scanJavaServerUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      scanJavaServerUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/scanJavaServerUsage",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        scanJavaServerUsageRequest.scanJavaServerUsageDetails,
        "ScanJavaServerUsageDetails",
        model.ScanJavaServerUsageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ScanJavaServerUsageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Scan library usage in a fleet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ScanLibraryUsageRequest
   * @return ScanLibraryUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/ScanLibraryUsage.ts.html |here} to see how to use ScanLibraryUsage API.
   */
  public async scanLibraryUsage(
    scanLibraryUsageRequest: requests.ScanLibraryUsageRequest
  ): Promise<responses.ScanLibraryUsageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#scanLibraryUsage.");
    const operationName = "scanLibraryUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": scanLibraryUsageRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": scanLibraryUsageRequest.ifMatch,
      "opc-retry-token": scanLibraryUsageRequest.opcRetryToken,
      "opc-request-id": scanLibraryUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      scanLibraryUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/scanLibraryUsage",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        scanLibraryUsageRequest.scanLibraryUsageDetails,
        "ScanLibraryUsageDetails",
        model.ScanLibraryUsageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ScanLibraryUsageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the application installation usage in a Fleet filtered by query parameters. In contrast to SummarizeApplicationUsage, which provides only information aggregated by application name, this operation provides installation details. This allows for better focusing of actions.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeApplicationInstallationUsageRequest
   * @return SummarizeApplicationInstallationUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeApplicationInstallationUsage.ts.html |here} to see how to use SummarizeApplicationInstallationUsage API.
   */
  public async summarizeApplicationInstallationUsage(
    summarizeApplicationInstallationUsageRequest: requests.SummarizeApplicationInstallationUsageRequest
  ): Promise<responses.SummarizeApplicationInstallationUsageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#summarizeApplicationInstallationUsage."
      );
    const operationName = "summarizeApplicationInstallationUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": summarizeApplicationInstallationUsageRequest.fleetId
    };

    const queryParams = {
      "applicationInstallationKey":
        summarizeApplicationInstallationUsageRequest.applicationInstallationKey,
      "applicationId": summarizeApplicationInstallationUsageRequest.applicationId,
      "displayName": summarizeApplicationInstallationUsageRequest.displayName,
      "displayNameContains": summarizeApplicationInstallationUsageRequest.displayNameContains,
      "applicationType": summarizeApplicationInstallationUsageRequest.applicationType,
      "appInstallationPathContains":
        summarizeApplicationInstallationUsageRequest.appInstallationPathContains,
      "jreVendor": summarizeApplicationInstallationUsageRequest.jreVendor,
      "jreDistribution": summarizeApplicationInstallationUsageRequest.jreDistribution,
      "jreVersion": summarizeApplicationInstallationUsageRequest.jreVersion,
      "installationPath": summarizeApplicationInstallationUsageRequest.installationPath,
      "libraryKey": summarizeApplicationInstallationUsageRequest.libraryKey,
      "managedInstanceId": summarizeApplicationInstallationUsageRequest.managedInstanceId,
      "osFamily": summarizeApplicationInstallationUsageRequest.osFamily,
      "timeStart": summarizeApplicationInstallationUsageRequest.timeStart,
      "timeEnd": summarizeApplicationInstallationUsageRequest.timeEnd,
      "limit": summarizeApplicationInstallationUsageRequest.limit,
      "page": summarizeApplicationInstallationUsageRequest.page,
      "sortOrder": summarizeApplicationInstallationUsageRequest.sortOrder,
      "sortBy": summarizeApplicationInstallationUsageRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeApplicationInstallationUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeApplicationInstallationUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/summarizeApplicationInstallationUsage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeApplicationInstallationUsageResponse>{},
        body: await response.json(),
        bodyKey: "applicationInstallationUsageSummaryCollection",
        bodyModel: model.ApplicationInstallationUsageSummaryCollection,
        type: "model.ApplicationInstallationUsageSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List application usage in a Fleet filtered by query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeApplicationUsageRequest
   * @return SummarizeApplicationUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeApplicationUsage.ts.html |here} to see how to use SummarizeApplicationUsage API.
   */
  public async summarizeApplicationUsage(
    summarizeApplicationUsageRequest: requests.SummarizeApplicationUsageRequest
  ): Promise<responses.SummarizeApplicationUsageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#summarizeApplicationUsage.");
    const operationName = "summarizeApplicationUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": summarizeApplicationUsageRequest.fleetId
    };

    const queryParams = {
      "applicationId": summarizeApplicationUsageRequest.applicationId,
      "displayName": summarizeApplicationUsageRequest.displayName,
      "applicationType": summarizeApplicationUsageRequest.applicationType,
      "jreVendor": summarizeApplicationUsageRequest.jreVendor,
      "jreDistribution": summarizeApplicationUsageRequest.jreDistribution,
      "jreVersion": summarizeApplicationUsageRequest.jreVersion,
      "installationPath": summarizeApplicationUsageRequest.installationPath,
      "managedInstanceId": summarizeApplicationUsageRequest.managedInstanceId,
      "fields": summarizeApplicationUsageRequest.fields,
      "timeStart": summarizeApplicationUsageRequest.timeStart,
      "timeEnd": summarizeApplicationUsageRequest.timeEnd,
      "limit": summarizeApplicationUsageRequest.limit,
      "page": summarizeApplicationUsageRequest.page,
      "sortOrder": summarizeApplicationUsageRequest.sortOrder,
      "sortBy": summarizeApplicationUsageRequest.sortBy,
      "osFamily": summarizeApplicationUsageRequest.osFamily,
      "displayNameContains": summarizeApplicationUsageRequest.displayNameContains,
      "libraryKey": summarizeApplicationUsageRequest.libraryKey
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeApplicationUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeApplicationUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/summarizeApplicationUsage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeApplicationUsageResponse>{},
        body: await response.json(),
        bodyKey: "applicationUsageCollection",
        bodyModel: model.ApplicationUsageCollection,
        type: "model.ApplicationUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarize installation usage of an application deployed on Java servers in a fleet filtered by query parameters. In contrast to SummarizeDeployedApplicationUsage, which provides only information aggregated by the deployment information, this operation provides installation details and allows for better focusing of actions.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeDeployedApplicationInstallationUsageRequest
   * @return SummarizeDeployedApplicationInstallationUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeDeployedApplicationInstallationUsage.ts.html |here} to see how to use SummarizeDeployedApplicationInstallationUsage API.
   */
  public async summarizeDeployedApplicationInstallationUsage(
    summarizeDeployedApplicationInstallationUsageRequest: requests.SummarizeDeployedApplicationInstallationUsageRequest
  ): Promise<responses.SummarizeDeployedApplicationInstallationUsageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#summarizeDeployedApplicationInstallationUsage."
      );
    const operationName = "summarizeDeployedApplicationInstallationUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": summarizeDeployedApplicationInstallationUsageRequest.fleetId
    };

    const queryParams = {
      "serverKey": summarizeDeployedApplicationInstallationUsageRequest.serverKey,
      "serverInstanceKey": summarizeDeployedApplicationInstallationUsageRequest.serverInstanceKey,
      "managedInstanceId": summarizeDeployedApplicationInstallationUsageRequest.managedInstanceId,
      "applicationInstallationKey":
        summarizeDeployedApplicationInstallationUsageRequest.applicationInstallationKey,
      "applicationKey": summarizeDeployedApplicationInstallationUsageRequest.applicationKey,
      "applicationNameContains":
        summarizeDeployedApplicationInstallationUsageRequest.applicationNameContains,
      "applicationName": summarizeDeployedApplicationInstallationUsageRequest.applicationName,
      "applicationSourcePathContains":
        summarizeDeployedApplicationInstallationUsageRequest.applicationSourcePathContains,
      "libraryKey": summarizeDeployedApplicationInstallationUsageRequest.libraryKey,
      "timeStart": summarizeDeployedApplicationInstallationUsageRequest.timeStart,
      "timeEnd": summarizeDeployedApplicationInstallationUsageRequest.timeEnd,
      "limit": summarizeDeployedApplicationInstallationUsageRequest.limit,
      "page": summarizeDeployedApplicationInstallationUsageRequest.page,
      "sortOrder": summarizeDeployedApplicationInstallationUsageRequest.sortOrder,
      "sortBy": summarizeDeployedApplicationInstallationUsageRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeDeployedApplicationInstallationUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeDeployedApplicationInstallationUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/summarizeDeployedApplicationInstallationUsage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeDeployedApplicationInstallationUsageResponse>{},
        body: await response.json(),
        bodyKey: "deployedApplicationInstallationUsageSummaryCollection",
        bodyModel: model.DeployedApplicationInstallationUsageSummaryCollection,
        type: "model.DeployedApplicationInstallationUsageSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List of deployed applications in a Fleet filtered by query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeDeployedApplicationUsageRequest
   * @return SummarizeDeployedApplicationUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeDeployedApplicationUsage.ts.html |here} to see how to use SummarizeDeployedApplicationUsage API.
   */
  public async summarizeDeployedApplicationUsage(
    summarizeDeployedApplicationUsageRequest: requests.SummarizeDeployedApplicationUsageRequest
  ): Promise<responses.SummarizeDeployedApplicationUsageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#summarizeDeployedApplicationUsage."
      );
    const operationName = "summarizeDeployedApplicationUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": summarizeDeployedApplicationUsageRequest.fleetId
    };

    const queryParams = {
      "serverKey": summarizeDeployedApplicationUsageRequest.serverKey,
      "serverInstanceKey": summarizeDeployedApplicationUsageRequest.serverInstanceKey,
      "managedInstanceId": summarizeDeployedApplicationUsageRequest.managedInstanceId,
      "libraryKey": summarizeDeployedApplicationUsageRequest.libraryKey,
      "applicationKey": summarizeDeployedApplicationUsageRequest.applicationKey,
      "applicationNameContains": summarizeDeployedApplicationUsageRequest.applicationNameContains,
      "applicationName": summarizeDeployedApplicationUsageRequest.applicationName,
      "timeStart": summarizeDeployedApplicationUsageRequest.timeStart,
      "timeEnd": summarizeDeployedApplicationUsageRequest.timeEnd,
      "limit": summarizeDeployedApplicationUsageRequest.limit,
      "page": summarizeDeployedApplicationUsageRequest.page,
      "sortOrder": summarizeDeployedApplicationUsageRequest.sortOrder,
      "sortBy": summarizeDeployedApplicationUsageRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeDeployedApplicationUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeDeployedApplicationUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/summarizeDeployedApplicationUsage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeDeployedApplicationUsageResponse>{},
        body: await response.json(),
        bodyKey: "deployedApplicationUsageCollection",
        bodyModel: model.DeployedApplicationUsageCollection,
        type: "model.DeployedApplicationUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a high level summary of FleetErrors.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeFleetErrorsRequest
   * @return SummarizeFleetErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeFleetErrors.ts.html |here} to see how to use SummarizeFleetErrors API.
   */
  public async summarizeFleetErrors(
    summarizeFleetErrorsRequest: requests.SummarizeFleetErrorsRequest
  ): Promise<responses.SummarizeFleetErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#summarizeFleetErrors.");
    const operationName = "summarizeFleetErrors";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeFleetErrorsRequest.compartmentId,
      "compartmentIdInSubtree": summarizeFleetErrorsRequest.compartmentIdInSubtree,
      "limit": summarizeFleetErrorsRequest.limit,
      "page": summarizeFleetErrorsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeFleetErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeFleetErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleetErrorAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeFleetErrorsResponse>{},
        body: await response.json(),
        bodyKey: "fleetErrorAggregationCollection",
        bodyModel: model.FleetErrorAggregationCollection,
        type: "model.FleetErrorAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List Java installation usage in a Fleet filtered by query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeInstallationUsageRequest
   * @return SummarizeInstallationUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeInstallationUsage.ts.html |here} to see how to use SummarizeInstallationUsage API.
   */
  public async summarizeInstallationUsage(
    summarizeInstallationUsageRequest: requests.SummarizeInstallationUsageRequest
  ): Promise<responses.SummarizeInstallationUsageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#summarizeInstallationUsage."
      );
    const operationName = "summarizeInstallationUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": summarizeInstallationUsageRequest.fleetId
    };

    const queryParams = {
      "jreVendor": summarizeInstallationUsageRequest.jreVendor,
      "jreDistribution": summarizeInstallationUsageRequest.jreDistribution,
      "jreVersion": summarizeInstallationUsageRequest.jreVersion,
      "installationPath": summarizeInstallationUsageRequest.installationPath,
      "applicationId": summarizeInstallationUsageRequest.applicationId,
      "managedInstanceId": summarizeInstallationUsageRequest.managedInstanceId,
      "fields": summarizeInstallationUsageRequest.fields,
      "timeStart": summarizeInstallationUsageRequest.timeStart,
      "timeEnd": summarizeInstallationUsageRequest.timeEnd,
      "limit": summarizeInstallationUsageRequest.limit,
      "page": summarizeInstallationUsageRequest.page,
      "sortOrder": summarizeInstallationUsageRequest.sortOrder,
      "sortBy": summarizeInstallationUsageRequest.sortBy,
      "osFamily": summarizeInstallationUsageRequest.osFamily,
      "pathContains": summarizeInstallationUsageRequest.pathContains
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeInstallationUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeInstallationUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/summarizeInstallationUsage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeInstallationUsageResponse>{},
        body: await response.json(),
        bodyKey: "installationUsageCollection",
        bodyModel: model.InstallationUsageCollection,
        type: "model.InstallationUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List Java Server instances in a fleet filtered by query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeJavaServerInstanceUsageRequest
   * @return SummarizeJavaServerInstanceUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeJavaServerInstanceUsage.ts.html |here} to see how to use SummarizeJavaServerInstanceUsage API.
   */
  public async summarizeJavaServerInstanceUsage(
    summarizeJavaServerInstanceUsageRequest: requests.SummarizeJavaServerInstanceUsageRequest
  ): Promise<responses.SummarizeJavaServerInstanceUsageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#summarizeJavaServerInstanceUsage."
      );
    const operationName = "summarizeJavaServerInstanceUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": summarizeJavaServerInstanceUsageRequest.fleetId
    };

    const queryParams = {
      "serverKey": summarizeJavaServerInstanceUsageRequest.serverKey,
      "serverInstanceKey": summarizeJavaServerInstanceUsageRequest.serverInstanceKey,
      "managedInstanceId": summarizeJavaServerInstanceUsageRequest.managedInstanceId,
      "applicationKey": summarizeJavaServerInstanceUsageRequest.applicationKey,
      "libraryKey": summarizeJavaServerInstanceUsageRequest.libraryKey,
      "serverInstanceNameContains":
        summarizeJavaServerInstanceUsageRequest.serverInstanceNameContains,
      "serverInstanceName": summarizeJavaServerInstanceUsageRequest.serverInstanceName,
      "timeStart": summarizeJavaServerInstanceUsageRequest.timeStart,
      "timeEnd": summarizeJavaServerInstanceUsageRequest.timeEnd,
      "limit": summarizeJavaServerInstanceUsageRequest.limit,
      "page": summarizeJavaServerInstanceUsageRequest.page,
      "sortOrder": summarizeJavaServerInstanceUsageRequest.sortOrder,
      "sortBy": summarizeJavaServerInstanceUsageRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeJavaServerInstanceUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeJavaServerInstanceUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/summarizeJavaServerInstanceUsage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeJavaServerInstanceUsageResponse>{},
        body: await response.json(),
        bodyKey: "javaServerInstanceUsageCollection",
        bodyModel: model.JavaServerInstanceUsageCollection,
        type: "model.JavaServerInstanceUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List of Java servers in a Fleet filtered by query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeJavaServerUsageRequest
   * @return SummarizeJavaServerUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeJavaServerUsage.ts.html |here} to see how to use SummarizeJavaServerUsage API.
   */
  public async summarizeJavaServerUsage(
    summarizeJavaServerUsageRequest: requests.SummarizeJavaServerUsageRequest
  ): Promise<responses.SummarizeJavaServerUsageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#summarizeJavaServerUsage.");
    const operationName = "summarizeJavaServerUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": summarizeJavaServerUsageRequest.fleetId
    };

    const queryParams = {
      "serverKey": summarizeJavaServerUsageRequest.serverKey,
      "serverNameContains": summarizeJavaServerUsageRequest.serverNameContains,
      "serverName": summarizeJavaServerUsageRequest.serverName,
      "serverVersion": summarizeJavaServerUsageRequest.serverVersion,
      "timeStart": summarizeJavaServerUsageRequest.timeStart,
      "timeEnd": summarizeJavaServerUsageRequest.timeEnd,
      "limit": summarizeJavaServerUsageRequest.limit,
      "page": summarizeJavaServerUsageRequest.page,
      "sortOrder": summarizeJavaServerUsageRequest.sortOrder,
      "sortBy": summarizeJavaServerUsageRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeJavaServerUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeJavaServerUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/summarizeJavaServerUsage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeJavaServerUsageResponse>{},
        body: await response.json(),
        bodyKey: "javaServerUsageCollection",
        bodyModel: model.JavaServerUsageCollection,
        type: "model.JavaServerUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List Java Runtime usage in a specified Fleet filtered by query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeJreUsageRequest
   * @return SummarizeJreUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeJreUsage.ts.html |here} to see how to use SummarizeJreUsage API.
   */
  public async summarizeJreUsage(
    summarizeJreUsageRequest: requests.SummarizeJreUsageRequest
  ): Promise<responses.SummarizeJreUsageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#summarizeJreUsage.");
    const operationName = "summarizeJreUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": summarizeJreUsageRequest.fleetId
    };

    const queryParams = {
      "jreId": summarizeJreUsageRequest.jreId,
      "jreVendor": summarizeJreUsageRequest.jreVendor,
      "jreDistribution": summarizeJreUsageRequest.jreDistribution,
      "jreVersion": summarizeJreUsageRequest.jreVersion,
      "applicationId": summarizeJreUsageRequest.applicationId,
      "managedInstanceId": summarizeJreUsageRequest.managedInstanceId,
      "fields": summarizeJreUsageRequest.fields,
      "timeStart": summarizeJreUsageRequest.timeStart,
      "timeEnd": summarizeJreUsageRequest.timeEnd,
      "limit": summarizeJreUsageRequest.limit,
      "page": summarizeJreUsageRequest.page,
      "sortOrder": summarizeJreUsageRequest.sortOrder,
      "sortBy": summarizeJreUsageRequest.sortBy,
      "osFamily": summarizeJreUsageRequest.osFamily,
      "jreSecurityStatus": summarizeJreUsageRequest.jreSecurityStatus
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeJreUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeJreUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/summarizeJreUsage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeJreUsageResponse>{},
        body: await response.json(),
        bodyKey: "jreUsageCollection",
        bodyModel: model.JreUsageCollection,
        type: "model.JreUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve the inventory of libraries in the specified fleet: Statically detected library count, Dynamically detected library count, Uncorrelated package count, High, Medium and Low severity library count.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeLibraryInventoryRequest
   * @return SummarizeLibraryInventoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeLibraryInventory.ts.html |here} to see how to use SummarizeLibraryInventory API.
   */
  public async summarizeLibraryInventory(
    summarizeLibraryInventoryRequest: requests.SummarizeLibraryInventoryRequest
  ): Promise<responses.SummarizeLibraryInventoryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#summarizeLibraryInventory.");
    const operationName = "summarizeLibraryInventory";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": summarizeLibraryInventoryRequest.fleetId
    };

    const queryParams = {
      "managedInstanceId": summarizeLibraryInventoryRequest.managedInstanceId,
      "applicationId": summarizeLibraryInventoryRequest.applicationId,
      "timeStart": summarizeLibraryInventoryRequest.timeStart,
      "timeEnd": summarizeLibraryInventoryRequest.timeEnd
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeLibraryInventoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeLibraryInventoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/summarizeLibraryInventory",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeLibraryInventoryResponse>{},
        body: await response.json(),
        bodyKey: "libraryInventory",
        bodyModel: model.LibraryInventory,
        type: "model.LibraryInventory",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List libraries in a fleet filtered by query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeLibraryUsageRequest
   * @return SummarizeLibraryUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeLibraryUsage.ts.html |here} to see how to use SummarizeLibraryUsage API.
   */
  public async summarizeLibraryUsage(
    summarizeLibraryUsageRequest: requests.SummarizeLibraryUsageRequest
  ): Promise<responses.SummarizeLibraryUsageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#summarizeLibraryUsage.");
    const operationName = "summarizeLibraryUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": summarizeLibraryUsageRequest.fleetId
    };

    const queryParams = {
      "serverInstanceKey": summarizeLibraryUsageRequest.serverInstanceKey,
      "managedInstanceId": summarizeLibraryUsageRequest.managedInstanceId,
      "applicationKey": summarizeLibraryUsageRequest.applicationKey,
      "libraryKey": summarizeLibraryUsageRequest.libraryKey,
      "libraryNameContains": summarizeLibraryUsageRequest.libraryNameContains,
      "libraryName": summarizeLibraryUsageRequest.libraryName,
      "cvssScoreGreaterThan": summarizeLibraryUsageRequest.cvssScoreGreaterThan,
      "cvssScoreLessThan": summarizeLibraryUsageRequest.cvssScoreLessThan,
      "timeStart": summarizeLibraryUsageRequest.timeStart,
      "timeEnd": summarizeLibraryUsageRequest.timeEnd,
      "limit": summarizeLibraryUsageRequest.limit,
      "page": summarizeLibraryUsageRequest.page,
      "sortOrder": summarizeLibraryUsageRequest.sortOrder,
      "sortBy": summarizeLibraryUsageRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeLibraryUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeLibraryUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/summarizeLibraryUsage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeLibraryUsageResponse>{},
        body: await response.json(),
        bodyKey: "libraryUsageCollection",
        bodyModel: model.LibraryUsageCollection,
        type: "model.LibraryUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List managed instance usage in a Fleet filtered by query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeManagedInstanceUsageRequest
   * @return SummarizeManagedInstanceUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeManagedInstanceUsage.ts.html |here} to see how to use SummarizeManagedInstanceUsage API.
   */
  public async summarizeManagedInstanceUsage(
    summarizeManagedInstanceUsageRequest: requests.SummarizeManagedInstanceUsageRequest
  ): Promise<responses.SummarizeManagedInstanceUsageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#summarizeManagedInstanceUsage."
      );
    const operationName = "summarizeManagedInstanceUsage";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": summarizeManagedInstanceUsageRequest.fleetId
    };

    const queryParams = {
      "managedInstanceId": summarizeManagedInstanceUsageRequest.managedInstanceId,
      "managedInstanceType": summarizeManagedInstanceUsageRequest.managedInstanceType,
      "jreVendor": summarizeManagedInstanceUsageRequest.jreVendor,
      "jreDistribution": summarizeManagedInstanceUsageRequest.jreDistribution,
      "jreVersion": summarizeManagedInstanceUsageRequest.jreVersion,
      "installationPath": summarizeManagedInstanceUsageRequest.installationPath,
      "applicationId": summarizeManagedInstanceUsageRequest.applicationId,
      "fields": summarizeManagedInstanceUsageRequest.fields,
      "timeStart": summarizeManagedInstanceUsageRequest.timeStart,
      "timeEnd": summarizeManagedInstanceUsageRequest.timeEnd,
      "limit": summarizeManagedInstanceUsageRequest.limit,
      "page": summarizeManagedInstanceUsageRequest.page,
      "sortOrder": summarizeManagedInstanceUsageRequest.sortOrder,
      "sortBy": summarizeManagedInstanceUsageRequest.sortBy,
      "osFamily": summarizeManagedInstanceUsageRequest.osFamily,
      "hostnameContains": summarizeManagedInstanceUsageRequest.hostnameContains,
      "libraryKey": summarizeManagedInstanceUsageRequest.libraryKey
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeManagedInstanceUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeManagedInstanceUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/actions/summarizeManagedInstanceUsage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeManagedInstanceUsageResponse>{},
        body: await response.json(),
        bodyKey: "managedInstanceUsageCollection",
        bodyModel: model.ManagedInstanceUsageCollection,
        type: "model.ManagedInstanceUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a high level summary of PluginErrors.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizePluginErrorsRequest
   * @return SummarizePluginErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizePluginErrors.ts.html |here} to see how to use SummarizePluginErrors API.
   */
  public async summarizePluginErrors(
    summarizePluginErrorsRequest: requests.SummarizePluginErrorsRequest
  ): Promise<responses.SummarizePluginErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#summarizePluginErrors.");
    const operationName = "summarizePluginErrors";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizePluginErrorsRequest.compartmentId,
      "compartmentIdInSubtree": summarizePluginErrorsRequest.compartmentIdInSubtree,
      "limit": summarizePluginErrorsRequest.limit,
      "page": summarizePluginErrorsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizePluginErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizePluginErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pluginErrorAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizePluginErrorsResponse>{},
        body: await response.json(),
        bodyKey: "pluginErrorAggregationCollection",
        bodyModel: model.PluginErrorAggregationCollection,
        type: "model.PluginErrorAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve the inventory of JMS resources in the specified compartment: a list of the number of _active_ fleets, managed instances, Java Runtimes, Java installations, and applications.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SummarizeResourceInventoryRequest
   * @return SummarizeResourceInventoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/SummarizeResourceInventory.ts.html |here} to see how to use SummarizeResourceInventory API.
   */
  public async summarizeResourceInventory(
    summarizeResourceInventoryRequest: requests.SummarizeResourceInventoryRequest
  ): Promise<responses.SummarizeResourceInventoryResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#summarizeResourceInventory."
      );
    const operationName = "summarizeResourceInventory";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeResourceInventoryRequest.compartmentId,
      "compartmentIdInSubtree": summarizeResourceInventoryRequest.compartmentIdInSubtree,
      "timeStart": summarizeResourceInventoryRequest.timeStart,
      "timeEnd": summarizeResourceInventoryRequest.timeEnd
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeResourceInventoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeResourceInventoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/summarizeResourceInventory",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeResourceInventoryResponse>{},
        body: await response.json(),
        bodyKey: "resourceInventory",
        bodyModel: model.ResourceInventory,
        type: "model.ResourceInventory",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Request to perform validation of the DRS file and update the existing file in the Object Storage.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDrsFileRequest
   * @return UpdateDrsFileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/UpdateDrsFile.ts.html |here} to see how to use UpdateDrsFile API.
   */
  public async updateDrsFile(
    updateDrsFileRequest: requests.UpdateDrsFileRequest
  ): Promise<responses.UpdateDrsFileResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#updateDrsFile.");
    const operationName = "updateDrsFile";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": updateDrsFileRequest.fleetId,
      "{drsFileKey}": updateDrsFileRequest.drsFileKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateDrsFileRequest.opcRequestId,
      "if-match": updateDrsFileRequest.ifMatch,
      "opc-retry-token": updateDrsFileRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDrsFileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/drsFiles/{drsFileKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrsFileRequest.updateDrsFileDetails,
        "UpdateDrsFileDetails",
        model.UpdateDrsFileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrsFileResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates existing export setting for the specified fleet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateExportSettingRequest
   * @return UpdateExportSettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/UpdateExportSetting.ts.html |here} to see how to use UpdateExportSetting API.
   */
  public async updateExportSetting(
    updateExportSettingRequest: requests.UpdateExportSettingRequest
  ): Promise<responses.UpdateExportSettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#updateExportSetting.");
    const operationName = "updateExportSetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": updateExportSettingRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateExportSettingRequest.ifMatch,
      "opc-request-id": updateExportSettingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateExportSettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/exportSetting",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateExportSettingRequest.updateExportSettingDetails,
        "UpdateExportSettingDetails",
        model.UpdateExportSettingDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateExportSettingResponse>{},
        body: await response.json(),
        bodyKey: "exportSetting",
        bodyModel: model.ExportSetting,
        type: "model.ExportSetting",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the Fleet specified by an identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFleetRequest
   * @return UpdateFleetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/UpdateFleet.ts.html |here} to see how to use UpdateFleet API.
   */
  public async updateFleet(
    updateFleetRequest: requests.UpdateFleetRequest
  ): Promise<responses.UpdateFleetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#updateFleet.");
    const operationName = "updateFleet";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": updateFleetRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFleetRequest.ifMatch,
      "opc-request-id": updateFleetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFleetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFleetRequest.updateFleetDetails,
        "UpdateFleetDetails",
        model.UpdateFleetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFleetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update advanced feature configurations for the Fleet.
   * Ensure that the namespace and bucket storage are created prior to turning on the JfrRecording or CryptoEventAnalysis feature.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFleetAdvancedFeatureConfigurationRequest
   * @return UpdateFleetAdvancedFeatureConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/UpdateFleetAdvancedFeatureConfiguration.ts.html |here} to see how to use UpdateFleetAdvancedFeatureConfiguration API.
   */
  public async updateFleetAdvancedFeatureConfiguration(
    updateFleetAdvancedFeatureConfigurationRequest: requests.UpdateFleetAdvancedFeatureConfigurationRequest
  ): Promise<responses.UpdateFleetAdvancedFeatureConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#updateFleetAdvancedFeatureConfiguration."
      );
    const operationName = "updateFleetAdvancedFeatureConfiguration";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": updateFleetAdvancedFeatureConfigurationRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateFleetAdvancedFeatureConfigurationRequest.opcRetryToken,
      "if-match": updateFleetAdvancedFeatureConfigurationRequest.ifMatch,
      "opc-request-id": updateFleetAdvancedFeatureConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFleetAdvancedFeatureConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/advancedFeatureConfiguration",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFleetAdvancedFeatureConfigurationRequest.updateFleetAdvancedFeatureConfigurationDetails,
        "UpdateFleetAdvancedFeatureConfigurationDetails",
        model.UpdateFleetAdvancedFeatureConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFleetAdvancedFeatureConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "fleetAdvancedFeatureConfiguration",
        bodyModel: model.FleetAdvancedFeatureConfiguration,
        type: "model.FleetAdvancedFeatureConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the Fleet Agent Configuration for the specified Fleet.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFleetAgentConfigurationRequest
   * @return UpdateFleetAgentConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/UpdateFleetAgentConfiguration.ts.html |here} to see how to use UpdateFleetAgentConfiguration API.
   */
  public async updateFleetAgentConfiguration(
    updateFleetAgentConfigurationRequest: requests.UpdateFleetAgentConfigurationRequest
  ): Promise<responses.UpdateFleetAgentConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaManagementServiceClient#updateFleetAgentConfiguration."
      );
    const operationName = "updateFleetAgentConfiguration";
    const apiReferenceLink = "";
    const pathParams = {
      "{fleetId}": updateFleetAgentConfigurationRequest.fleetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFleetAgentConfigurationRequest.ifMatch,
      "opc-request-id": updateFleetAgentConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFleetAgentConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleets/{fleetId}/agentConfiguration",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFleetAgentConfigurationRequest.updateFleetAgentConfigurationDetails,
        "UpdateFleetAgentConfigurationDetails",
        model.UpdateFleetAgentConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFleetAgentConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Fleet of a JmsPlugin.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateJmsPluginRequest
   * @return UpdateJmsPluginResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/UpdateJmsPlugin.ts.html |here} to see how to use UpdateJmsPlugin API.
   */
  public async updateJmsPlugin(
    updateJmsPluginRequest: requests.UpdateJmsPluginRequest
  ): Promise<responses.UpdateJmsPluginResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#updateJmsPlugin.");
    const operationName = "updateJmsPlugin";
    const apiReferenceLink = "";
    const pathParams = {
      "{jmsPluginId}": updateJmsPluginRequest.jmsPluginId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateJmsPluginRequest.ifMatch,
      "opc-request-id": updateJmsPluginRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateJmsPluginRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jmsPlugins/{jmsPluginId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateJmsPluginRequest.updateJmsPluginDetails,
        "UpdateJmsPluginDetails",
        model.UpdateJmsPluginDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateJmsPluginResponse>{},
        body: await response.json(),
        bodyKey: "jmsPlugin",
        bodyModel: model.JmsPlugin,
        type: "model.JmsPlugin",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the task schedule for the given task type.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateTaskScheduleRequest
   * @return UpdateTaskScheduleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jms/UpdateTaskSchedule.ts.html |here} to see how to use UpdateTaskSchedule API.
   */
  public async updateTaskSchedule(
    updateTaskScheduleRequest: requests.UpdateTaskScheduleRequest
  ): Promise<responses.UpdateTaskScheduleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaManagementServiceClient#updateTaskSchedule.");
    const operationName = "updateTaskSchedule";
    const apiReferenceLink = "";
    const pathParams = {
      "{taskScheduleId}": updateTaskScheduleRequest.taskScheduleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTaskScheduleRequest.ifMatch,
      "opc-request-id": updateTaskScheduleRequest.opcRequestId,
      "opc-retry-token": updateTaskScheduleRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTaskScheduleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/taskSchedules/{taskScheduleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTaskScheduleRequest.updateTaskScheduleDetails,
        "UpdateTaskScheduleDetails",
        model.UpdateTaskScheduleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTaskScheduleResponse>{},
        body: await response.json(),
        bodyKey: "taskSchedule",
        bodyModel: model.TaskSchedule,
        type: "model.TaskSchedule",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
