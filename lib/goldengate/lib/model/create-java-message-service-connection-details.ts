/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The information about a new Java Message Service Connection.
 *
 */
export interface CreateJavaMessageServiceConnectionDetails extends model.CreateConnectionDetails {
  /**
   * The Java Message Service technology type.
   *
   */
  "technologyType": string;
  /**
   * If set to true, Java Naming and Directory Interface (JNDI) properties should be provided.
   *
   */
  "shouldUseJndi": boolean;
  /**
   * The Connection Factory can be looked up using this name.
   * e.g.: 'ConnectionFactory'
   *
   */
  "jndiConnectionFactory"?: string;
  /**
   * The URL that Java Message Service will use to contact the JNDI provider.
   * e.g.: 'tcp://myjms.host.domain:61616?jms.prefetchPolicy.all=1000'
   *
   */
  "jndiProviderUrl"?: string;
  /**
   * The implementation of javax.naming.spi.InitialContextFactory interface
   * that the client uses to obtain initial naming context.
   * e.g.: 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'
   *
   */
  "jndiInitialContextFactory"?: string;
  /**
   * Specifies the identity of the principal (user) to be authenticated.
   * e.g.: 'admin2'
   *
   */
  "jndiSecurityPrincipal"?: string;
  /**
   * The password associated to the principal.
   * Deprecated: This field is deprecated and replaced by \"jndiSecurityCredentialsSecretId\". This field will be removed after February 15 2026.
   *
   */
  "jndiSecurityCredentials"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the security credentials are stored associated to the principal.
   * Note: When provided, 'jndiSecurityCredentials' field must not be provided.
   *
   */
  "jndiSecurityCredentialsSecretId"?: string;
  /**
   * Connection URL of the Java Message Service, specifying the protocol, host, and port.
   * e.g.: 'mq://myjms.host.domain:7676'
   *
   */
  "connectionUrl"?: string;
  /**
   * The of Java class implementing javax.jms.ConnectionFactory interface
   * supplied by the Java Message Service provider.
   * e.g.: 'com.stc.jmsjca.core.JConnectionFactoryXA'
   *
   */
  "connectionFactory"?: string;
  /**
   * The username Oracle GoldenGate uses to connect to the Java Message Service.
   * This username must already exist and be available by the Java Message Service to be connected to.
   *
   */
  "username"?: string;
  /**
   * The password Oracle GoldenGate uses to connect the associated Java Message Service.
   * Deprecated: This field is deprecated and replaced by \"passwordSecretId\". This field will be removed after February 15 2026.
   *
   */
  "password"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored,
   * that Oracle GoldenGate uses to connect the associated Java Message Service.
   * Note: When provided, 'password' field must not be provided.
   *
   */
  "passwordSecretId"?: string;
  /**
   * Security protocol for Java Message Service. If not provided, default is PLAIN.
   * Optional until 2024-06-27, in the release after it will be made required.
   *
   */
  "securityProtocol"?: string;
  /**
   * Authentication type for Java Message Service.  If not provided, default is NONE.
   * Optional until 2024-06-27, in the release after it will be made required.
   *
   */
  "authenticationType"?: string;
  /**
   * The base64 encoded content of the TrustStore file.
   * Deprecated: This field is deprecated and replaced by \"trustStoreSecretId\". This field will be removed after February 15 2026.
   *
   */
  "trustStore"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the TrustStore file is stored.
   * Note: When provided, 'trustStore' field must not be provided.
   *
   */
  "trustStoreSecretId"?: string;
  /**
   * The TrustStore password.
   * Deprecated: This field is deprecated and replaced by \"trustStorePasswordSecretId\". This field will be removed after February 15 2026.
   *
   */
  "trustStorePassword"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the TrustStore password is stored.
   * Note: When provided, 'trustStorePassword' field must not be provided.
   *
   */
  "trustStorePasswordSecretId"?: string;
  /**
   * The base64 encoded content of the KeyStore file.
   * Deprecated: This field is deprecated and replaced by \"keyStoreSecretId\". This field will be removed after February 15 2026.
   *
   */
  "keyStore"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the content of the KeyStore file is stored.
   * Note: When provided, 'keyStore' field must not be provided.
   *
   */
  "keyStoreSecretId"?: string;
  /**
   * The KeyStore password.
   * Deprecated: This field is deprecated and replaced by \"keyStorePasswordSecretId\". This field will be removed after February 15 2026.
   *
   */
  "keyStorePassword"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the KeyStore password is stored.
   * Note: When provided, 'keyStorePassword' field must not be provided.
   *
   */
  "keyStorePasswordSecretId"?: string;
  /**
   * The password for the cert inside of the KeyStore.
   * In case it differs from the KeyStore password, it should be provided.
   * Deprecated: This field is deprecated and replaced by \"sslKeyPasswordSecretId\". This field will be removed after February 15 2026.
   *
   */
  "sslKeyPassword"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored for the cert inside of the Keystore.
   * In case it differs from the KeyStore password, it should be provided.
   * Note: When provided, 'sslKeyPassword' field must not be provided.
   *
   */
  "sslKeyPasswordSecretId"?: string;
  /**
    * Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host 
* field, or make sure the host name is resolvable in the target VCN.
* <p>
The private IP address of the connection's endpoint in the customer's VCN, typically a
* database endpoint or a big data endpoint (e.g. Kafka bootstrap server).
* In case the privateIp is provided, the subnetId must also be provided.
* In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible.
* In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
* 
    */
  "privateIp"?: string;

  "connectionType": string;
}

export namespace CreateJavaMessageServiceConnectionDetails {
  export function getJsonObj(
    obj: CreateJavaMessageServiceConnectionDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.CreateConnectionDetails.getJsonObj(
            obj
          ) as CreateJavaMessageServiceConnectionDetails)),
      ...{}
    };

    return jsonObj;
  }
  export const connectionType = "JAVA_MESSAGE_SERVICE";
  export function getDeserializedJsonObj(
    obj: CreateJavaMessageServiceConnectionDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.CreateConnectionDetails.getDeserializedJsonObj(
            obj
          ) as CreateJavaMessageServiceConnectionDetails)),
      ...{}
    };

    return jsonObj;
  }
}
