/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Summary of the DB2 Connection.
 *
 */
export interface Db2ConnectionSummary extends model.ConnectionSummary {
  /**
   * The DB2 technology type.
   */
  "technologyType": string;
  /**
   * The name of the database.
   *
   */
  "databaseName": string;
  /**
   * The name or address of a host.
   *
   */
  "host": string;
  /**
   * The port of an endpoint usually specified for a connection.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "port": number;
  /**
   * The username Oracle GoldenGate uses to connect to the DB2 database.
   * This username must already exist and be available by the DB2 to be connected to.
   *
   */
  "username": string;
  /**
   * An array of name-value pair attribute entries.
   * Used as additional parameters in connection string.
   *
   */
  "additionalAttributes"?: Array<model.NameValuePair>;
  /**
   * Security protocol for the DB2 database.
   */
  "securityProtocol": string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored,
   * that Oracle GoldenGate uses to connect the associated DB2 database.
   * Note: When provided, 'password' field must not be provided.
   *
   */
  "passwordSecretId"?: string;
  /**
    * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystore file stored, 
* which created at the client containing the server certificate / CA root certificate.
* This property is not supported for IBM Db2 for i, as client TLS mode is not available.
* <p>
Note: When provided, 'sslClientKeystoredb' field must not be provided.
* 
    */
  "sslClientKeystoredbSecretId"?: string;
  /**
    * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the keystash file is stored, 
* which contains the encrypted password to the key database file.
* This property is not supported for IBM Db2 for i, as client TLS mode is not available.
* <p>
Note: When provided, 'sslClientKeystash' field must not be provided.
* 
    */
  "sslClientKeystashSecretId"?: string;

  "connectionType": string;
}

export namespace Db2ConnectionSummary {
  export function getJsonObj(obj: Db2ConnectionSummary, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.ConnectionSummary.getJsonObj(obj) as Db2ConnectionSummary)),
      ...{
        "additionalAttributes": obj.additionalAttributes
          ? obj.additionalAttributes.map(item => {
              return model.NameValuePair.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export const connectionType = "DB2";
  export function getDeserializedJsonObj(
    obj: Db2ConnectionSummary,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.ConnectionSummary.getDeserializedJsonObj(obj) as Db2ConnectionSummary)),
      ...{
        "additionalAttributes": obj.additionalAttributes
          ? obj.additionalAttributes.map(item => {
              return model.NameValuePair.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
