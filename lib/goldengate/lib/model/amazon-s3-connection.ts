/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Represents the metadata of a Amazon S3 Connection.
 *
 */
export interface AmazonS3Connection extends model.Connection {
  /**
   * The Amazon S3 technology type.
   */
  "technologyType": AmazonS3Connection.TechnologyType;
  /**
   * Access key ID to access the Amazon S3 bucket.
   * e.g.: \"this-is-not-the-secret\"
   *
   */
  "accessKeyId": string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the Secret Access Key is stored.
   * Note: When provided, 'secretAccessKey' field must not be provided.
   *
   */
  "secretAccessKeySecretId"?: string;
  /**
   * The Amazon Endpoint for S3.
   * e.g.: 'https://my-bucket.s3.us-east-1.amazonaws.com'
   * If not provided, GoldenGate will default to 'https://s3.<region>.amazonaws.com'.
   *
   */
  "endpoint"?: string;
  /**
   * The name of the AWS region where the bucket is created.
   * If not provided, GoldenGate will default to 'us-west-2'.
   * Note: this property will become mandatory after May 20, 2026.
   *
   */
  "region"?: string;

  "connectionType": string;
}

export namespace AmazonS3Connection {
  export enum TechnologyType {
    AmazonS3 = "AMAZON_S3",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: AmazonS3Connection, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.Connection.getJsonObj(obj) as AmazonS3Connection)),
      ...{}
    };

    return jsonObj;
  }
  export const connectionType = "AMAZON_S3";
  export function getDeserializedJsonObj(
    obj: AmazonS3Connection,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.Connection.getDeserializedJsonObj(obj) as AmazonS3Connection)),
      ...{}
    };

    return jsonObj;
  }
}
