/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { GoldenGateWaiter } from "./goldengate-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum GoldenGateApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class GoldenGateClient {
  protected static serviceEndpointTemplate = "https://goldengate.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": GoldenGateWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "GoldenGate";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("goldengate")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("goldengate");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200407";
    if (this.logger) this.logger.info(`GoldenGateClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        GoldenGateClient.serviceEndpointTemplate,
        this._region,
        GoldenGateClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        GoldenGateClient.serviceEndpointTemplate,
        this._regionId,
        GoldenGateClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      GoldenGateClient.serviceEndpointTemplate,
      region,
      GoldenGateClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      GoldenGateClient.serviceEndpointTemplate,
      regionId,
      GoldenGateClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new GoldenGateWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): GoldenGateWaiter {
    this._waiters = new GoldenGateWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): GoldenGateWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Adds a lock to a Connection resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AddConnectionLockRequest
   * @return AddConnectionLockResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/AddConnectionLock.ts.html |here} to see how to use AddConnectionLock API.
   */
  public async addConnectionLock(
    addConnectionLockRequest: requests.AddConnectionLockRequest
  ): Promise<responses.AddConnectionLockResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#addConnectionLock.");
    const operationName = "addConnectionLock";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Connection/AddConnectionLock";
    const pathParams = {
      "{connectionId}": addConnectionLockRequest.connectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addConnectionLockRequest.opcRequestId,
      "if-match": addConnectionLockRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addConnectionLockRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}/actions/addLock",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addConnectionLockRequest.addResourceLockDetails,
        "AddResourceLockDetails",
        model.AddResourceLockDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddConnectionLockResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a lock to a DeploymentBackup resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AddDeploymentBackupLockRequest
   * @return AddDeploymentBackupLockResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/AddDeploymentBackupLock.ts.html |here} to see how to use AddDeploymentBackupLock API.
   */
  public async addDeploymentBackupLock(
    addDeploymentBackupLockRequest: requests.AddDeploymentBackupLockRequest
  ): Promise<responses.AddDeploymentBackupLockResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#addDeploymentBackupLock.");
    const operationName = "addDeploymentBackupLock";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentBackup/AddDeploymentBackupLock";
    const pathParams = {
      "{deploymentBackupId}": addDeploymentBackupLockRequest.deploymentBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addDeploymentBackupLockRequest.opcRequestId,
      "if-match": addDeploymentBackupLockRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addDeploymentBackupLockRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentBackups/{deploymentBackupId}/actions/addLock",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addDeploymentBackupLockRequest.addResourceLockDetails,
        "AddResourceLockDetails",
        model.AddResourceLockDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddDeploymentBackupLockResponse>{},
        body: await response.json(),
        bodyKey: "deploymentBackup",
        bodyModel: model.DeploymentBackup,
        type: "model.DeploymentBackup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a new local peer to the deployment, this will add the given placement to deployment placement attribute. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AddDeploymentLocalPeerRequest
   * @return AddDeploymentLocalPeerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/AddDeploymentLocalPeer.ts.html |here} to see how to use AddDeploymentLocalPeer API.
   */
  public async addDeploymentLocalPeer(
    addDeploymentLocalPeerRequest: requests.AddDeploymentLocalPeerRequest
  ): Promise<responses.AddDeploymentLocalPeerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#addDeploymentLocalPeer.");
    const operationName = "addDeploymentLocalPeer";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/AddDeploymentLocalPeer";
    const pathParams = {
      "{deploymentId}": addDeploymentLocalPeerRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": addDeploymentLocalPeerRequest.ifMatch,
      "opc-request-id": addDeploymentLocalPeerRequest.opcRequestId,
      "opc-retry-token": addDeploymentLocalPeerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addDeploymentLocalPeerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/addLocalPeer",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addDeploymentLocalPeerRequest.addDeploymentLocalPeerDetails,
        "AddDeploymentLocalPeerDetails",
        model.AddDeploymentLocalPeerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddDeploymentLocalPeerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a lock to a Deployment resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AddDeploymentLockRequest
   * @return AddDeploymentLockResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/AddDeploymentLock.ts.html |here} to see how to use AddDeploymentLock API.
   */
  public async addDeploymentLock(
    addDeploymentLockRequest: requests.AddDeploymentLockRequest
  ): Promise<responses.AddDeploymentLockResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#addDeploymentLock.");
    const operationName = "addDeploymentLock";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/AddDeploymentLock";
    const pathParams = {
      "{deploymentId}": addDeploymentLockRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addDeploymentLockRequest.opcRequestId,
      "if-match": addDeploymentLockRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addDeploymentLockRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/addLock",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addDeploymentLockRequest.addResourceLockDetails,
        "AddResourceLockDetails",
        model.AddResourceLockDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddDeploymentLockResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancels a Deployment Backup creation process.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelDeploymentBackupRequest
   * @return CancelDeploymentBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CancelDeploymentBackup.ts.html |here} to see how to use CancelDeploymentBackup API.
   */
  public async cancelDeploymentBackup(
    cancelDeploymentBackupRequest: requests.CancelDeploymentBackupRequest
  ): Promise<responses.CancelDeploymentBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#cancelDeploymentBackup.");
    const operationName = "cancelDeploymentBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentBackup/CancelDeploymentBackup";
    const pathParams = {
      "{deploymentBackupId}": cancelDeploymentBackupRequest.deploymentBackupId
    };

    const queryParams = {
      "isLockOverride": cancelDeploymentBackupRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelDeploymentBackupRequest.ifMatch,
      "opc-request-id": cancelDeploymentBackupRequest.opcRequestId,
      "opc-retry-token": cancelDeploymentBackupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelDeploymentBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentBackups/{deploymentBackupId}/actions/cancel",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        cancelDeploymentBackupRequest.cancelDeploymentBackupDetails,
        "CancelDeploymentBackupDetails",
        model.CancelDeploymentBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelDeploymentBackupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancels a DeploymentUpgrade, applicable only for DeploymentUpgrade in Waiting state. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelDeploymentUpgradeRequest
   * @return CancelDeploymentUpgradeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CancelDeploymentUpgrade.ts.html |here} to see how to use CancelDeploymentUpgrade API.
   */
  public async cancelDeploymentUpgrade(
    cancelDeploymentUpgradeRequest: requests.CancelDeploymentUpgradeRequest
  ): Promise<responses.CancelDeploymentUpgradeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#cancelDeploymentUpgrade.");
    const operationName = "cancelDeploymentUpgrade";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentUpgrade/CancelDeploymentUpgrade";
    const pathParams = {
      "{deploymentUpgradeId}": cancelDeploymentUpgradeRequest.deploymentUpgradeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelDeploymentUpgradeRequest.ifMatch,
      "opc-request-id": cancelDeploymentUpgradeRequest.opcRequestId,
      "opc-retry-token": cancelDeploymentUpgradeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelDeploymentUpgradeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentUpgrades/{deploymentUpgradeId}/actions/cancel",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        cancelDeploymentUpgradeRequest.cancelDeploymentUpgradeDetails,
        "CancelDeploymentUpgradeDetails",
        model.CancelDeploymentUpgradeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelDeploymentUpgradeResponse>{},
        body: await response.json(),
        bodyKey: "deploymentUpgrade",
        bodyModel: model.DeploymentUpgrade,
        type: "model.DeploymentUpgrade",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancel snooze of a DeploymentUpgrade. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelSnoozeDeploymentUpgradeRequest
   * @return CancelSnoozeDeploymentUpgradeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CancelSnoozeDeploymentUpgrade.ts.html |here} to see how to use CancelSnoozeDeploymentUpgrade API.
   */
  public async cancelSnoozeDeploymentUpgrade(
    cancelSnoozeDeploymentUpgradeRequest: requests.CancelSnoozeDeploymentUpgradeRequest
  ): Promise<responses.CancelSnoozeDeploymentUpgradeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#cancelSnoozeDeploymentUpgrade.");
    const operationName = "cancelSnoozeDeploymentUpgrade";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentUpgrade/CancelSnoozeDeploymentUpgrade";
    const pathParams = {
      "{deploymentUpgradeId}": cancelSnoozeDeploymentUpgradeRequest.deploymentUpgradeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelSnoozeDeploymentUpgradeRequest.ifMatch,
      "opc-request-id": cancelSnoozeDeploymentUpgradeRequest.opcRequestId,
      "opc-retry-token": cancelSnoozeDeploymentUpgradeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelSnoozeDeploymentUpgradeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentUpgrades/{deploymentUpgradeId}/actions/cancelSnooze",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        cancelSnoozeDeploymentUpgradeRequest.cancelSnoozeDeploymentUpgradeDetails,
        "CancelSnoozeDeploymentUpgradeDetails",
        model.CancelSnoozeDeploymentUpgradeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelSnoozeDeploymentUpgradeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Connection into a different compartment within the same tenancy. When
   * provided, If-Match is checked against ETag values of the resource.  For information about
   * moving resources between compartments, see [Moving Resources Between
   * Compartments](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeConnectionCompartmentRequest
   * @return ChangeConnectionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ChangeConnectionCompartment.ts.html |here} to see how to use ChangeConnectionCompartment API.
   */
  public async changeConnectionCompartment(
    changeConnectionCompartmentRequest: requests.ChangeConnectionCompartmentRequest
  ): Promise<responses.ChangeConnectionCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#changeConnectionCompartment.");
    const operationName = "changeConnectionCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Connection/ChangeConnectionCompartment";
    const pathParams = {
      "{connectionId}": changeConnectionCompartmentRequest.connectionId
    };

    const queryParams = {
      "isLockOverride": changeConnectionCompartmentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeConnectionCompartmentRequest.ifMatch,
      "opc-request-id": changeConnectionCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeConnectionCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeConnectionCompartmentRequest.changeConnectionCompartmentDetails,
        "ChangeConnectionCompartmentDetails",
        model.ChangeConnectionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeConnectionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Note: Deprecated. Use the /connections API instead.
   * Moves the DatabaseRegistration into a different compartment within the same tenancy. When
   * provided, If-Match is checked against ETag values of the resource.  For information about
   * moving resources between compartments, see [Moving Resources Between
   * Compartments](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDatabaseRegistrationCompartmentRequest
   * @return ChangeDatabaseRegistrationCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ChangeDatabaseRegistrationCompartment.ts.html |here} to see how to use ChangeDatabaseRegistrationCompartment API.
   */
  public async changeDatabaseRegistrationCompartment(
    changeDatabaseRegistrationCompartmentRequest: requests.ChangeDatabaseRegistrationCompartmentRequest
  ): Promise<responses.ChangeDatabaseRegistrationCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation GoldenGateClient#changeDatabaseRegistrationCompartment."
      );
    const operationName = "changeDatabaseRegistrationCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DatabaseRegistration/ChangeDatabaseRegistrationCompartment";
    const pathParams = {
      "{databaseRegistrationId}":
        changeDatabaseRegistrationCompartmentRequest.databaseRegistrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDatabaseRegistrationCompartmentRequest.ifMatch,
      "opc-request-id": changeDatabaseRegistrationCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDatabaseRegistrationCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDatabaseRegistrationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseRegistrations/{databaseRegistrationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDatabaseRegistrationCompartmentRequest.changeDatabaseRegistrationCompartmentDetails,
        "ChangeDatabaseRegistrationCompartmentDetails",
        model.ChangeDatabaseRegistrationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDatabaseRegistrationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("sunset"),
            key: "sunset",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a DeploymentBackup into a different compartment within the same tenancy.  When provided,
   * If-Match is checked against ETag values of the resource.  For information about moving
   * resources between compartments, see [Moving Resources Between
   * Compartments](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDeploymentBackupCompartmentRequest
   * @return ChangeDeploymentBackupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ChangeDeploymentBackupCompartment.ts.html |here} to see how to use ChangeDeploymentBackupCompartment API.
   */
  public async changeDeploymentBackupCompartment(
    changeDeploymentBackupCompartmentRequest: requests.ChangeDeploymentBackupCompartmentRequest
  ): Promise<responses.ChangeDeploymentBackupCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#changeDeploymentBackupCompartment.");
    const operationName = "changeDeploymentBackupCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentBackup/ChangeDeploymentBackupCompartment";
    const pathParams = {
      "{deploymentBackupId}": changeDeploymentBackupCompartmentRequest.deploymentBackupId
    };

    const queryParams = {
      "isLockOverride": changeDeploymentBackupCompartmentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDeploymentBackupCompartmentRequest.ifMatch,
      "opc-request-id": changeDeploymentBackupCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDeploymentBackupCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDeploymentBackupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentBackups/{deploymentBackupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDeploymentBackupCompartmentRequest.changeDeploymentBackupCompartmentDetails,
        "ChangeDeploymentBackupCompartmentDetails",
        model.ChangeDeploymentBackupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDeploymentBackupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Deployment into a different compartment within the same tenancy.  When provided,
   * If-Match is checked against ETag values of the resource.  For information about moving
   * resources between compartments, see [Moving Resources Between
   * Compartments](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDeploymentCompartmentRequest
   * @return ChangeDeploymentCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ChangeDeploymentCompartment.ts.html |here} to see how to use ChangeDeploymentCompartment API.
   */
  public async changeDeploymentCompartment(
    changeDeploymentCompartmentRequest: requests.ChangeDeploymentCompartmentRequest
  ): Promise<responses.ChangeDeploymentCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#changeDeploymentCompartment.");
    const operationName = "changeDeploymentCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/ChangeDeploymentCompartment";
    const pathParams = {
      "{deploymentId}": changeDeploymentCompartmentRequest.deploymentId
    };

    const queryParams = {
      "isLockOverride": changeDeploymentCompartmentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDeploymentCompartmentRequest.ifMatch,
      "opc-request-id": changeDeploymentCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDeploymentCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDeploymentCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDeploymentCompartmentRequest.changeDeploymentCompartmentDetails,
        "ChangeDeploymentCompartmentDetails",
        model.ChangeDeploymentCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDeploymentCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Pipeline into a different compartment within the same tenancy. When
   * provided, If-Match is checked against ETag values of the resource.  For information about
   * moving resources between compartments, see [Moving Resources Between
   * Compartments](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangePipelineCompartmentRequest
   * @return ChangePipelineCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ChangePipelineCompartment.ts.html |here} to see how to use ChangePipelineCompartment API.
   */
  public async changePipelineCompartment(
    changePipelineCompartmentRequest: requests.ChangePipelineCompartmentRequest
  ): Promise<responses.ChangePipelineCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#changePipelineCompartment.");
    const operationName = "changePipelineCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/ChangePipelineCompartment";
    const pathParams = {
      "{pipelineId}": changePipelineCompartmentRequest.pipelineId
    };

    const queryParams = {
      "isLockOverride": changePipelineCompartmentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changePipelineCompartmentRequest.ifMatch,
      "opc-request-id": changePipelineCompartmentRequest.opcRequestId,
      "opc-retry-token": changePipelineCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changePipelineCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines/{pipelineId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changePipelineCompartmentRequest.changePipelineCompartmentDetails,
        "ChangePipelineCompartmentDetails",
        model.ChangePipelineCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangePipelineCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Collects the diagnostic of a Deployment. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CollectDeploymentDiagnosticRequest
   * @return CollectDeploymentDiagnosticResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CollectDeploymentDiagnostic.ts.html |here} to see how to use CollectDeploymentDiagnostic API.
   */
  public async collectDeploymentDiagnostic(
    collectDeploymentDiagnosticRequest: requests.CollectDeploymentDiagnosticRequest
  ): Promise<responses.CollectDeploymentDiagnosticResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#collectDeploymentDiagnostic.");
    const operationName = "collectDeploymentDiagnostic";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/CollectDeploymentDiagnostic";
    const pathParams = {
      "{deploymentId}": collectDeploymentDiagnosticRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": collectDeploymentDiagnosticRequest.ifMatch,
      "opc-request-id": collectDeploymentDiagnosticRequest.opcRequestId,
      "opc-retry-token": collectDeploymentDiagnosticRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      collectDeploymentDiagnosticRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/collectDiagnostics",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        collectDeploymentDiagnosticRequest.collectDeploymentDiagnosticDetails,
        "CollectDeploymentDiagnosticDetails",
        model.CollectDeploymentDiagnosticDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CollectDeploymentDiagnosticResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Collects diagnostics for the pipeline
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CollectPipelineDiagnosticRequest
   * @return CollectPipelineDiagnosticResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CollectPipelineDiagnostic.ts.html |here} to see how to use CollectPipelineDiagnostic API.
   */
  public async collectPipelineDiagnostic(
    collectPipelineDiagnosticRequest: requests.CollectPipelineDiagnosticRequest
  ): Promise<responses.CollectPipelineDiagnosticResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#collectPipelineDiagnostic.");
    const operationName = "collectPipelineDiagnostic";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/CollectPipelineDiagnostic";
    const pathParams = {
      "{pipelineId}": collectPipelineDiagnosticRequest.pipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": collectPipelineDiagnosticRequest.ifMatch,
      "opc-request-id": collectPipelineDiagnosticRequest.opcRequestId,
      "opc-retry-token": collectPipelineDiagnosticRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      collectPipelineDiagnosticRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines/{pipelineId}/actions/collectDiagnostics",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        collectPipelineDiagnosticRequest.collectPipelineDiagnosticDetails,
        "CollectPipelineDiagnosticDetails",
        model.CollectPipelineDiagnosticDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CollectPipelineDiagnosticResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a copy of a Deployment Backup.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CopyDeploymentBackupRequest
   * @return CopyDeploymentBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CopyDeploymentBackup.ts.html |here} to see how to use CopyDeploymentBackup API.
   */
  public async copyDeploymentBackup(
    copyDeploymentBackupRequest: requests.CopyDeploymentBackupRequest
  ): Promise<responses.CopyDeploymentBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#copyDeploymentBackup.");
    const operationName = "copyDeploymentBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentBackup/CopyDeploymentBackup";
    const pathParams = {
      "{deploymentBackupId}": copyDeploymentBackupRequest.deploymentBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": copyDeploymentBackupRequest.ifMatch,
      "opc-retry-token": copyDeploymentBackupRequest.opcRetryToken,
      "opc-request-id": copyDeploymentBackupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      copyDeploymentBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentBackups/{deploymentBackupId}/actions/copyToBucket",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        copyDeploymentBackupRequest.copyDeploymentBackupDetails,
        "CopyDeploymentBackupDetails",
        model.CopyDeploymentBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CopyDeploymentBackupResponse>{},
        body: await response.json(),
        bodyKey: "deploymentBackup",
        bodyModel: model.DeploymentBackup,
        type: "model.DeploymentBackup",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new certificate to truststore.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateCertificateRequest
   * @return CreateCertificateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CreateCertificate.ts.html |here} to see how to use CreateCertificate API.
   */
  public async createCertificate(
    createCertificateRequest: requests.CreateCertificateRequest
  ): Promise<responses.CreateCertificateResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#createCertificate.");
    const operationName = "createCertificate";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/CertificateCollection/CreateCertificate";
    const pathParams = {
      "{deploymentId}": createCertificateRequest.deploymentId
    };

    const queryParams = {
      "isLockOverride": createCertificateRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createCertificateRequest.opcRetryToken,
      "opc-request-id": createCertificateRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createCertificateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/certificates",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCertificateRequest.createCertificateDetails,
        "CreateCertificateDetails",
        model.CreateCertificateDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCertificateResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Connection.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateConnectionRequest
   * @return CreateConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CreateConnection.ts.html |here} to see how to use CreateConnection API.
   */
  public async createConnection(
    createConnectionRequest: requests.CreateConnectionRequest
  ): Promise<responses.CreateConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#createConnection.");
    const operationName = "createConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Connection/CreateConnection";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createConnectionRequest.opcRetryToken,
      "opc-request-id": createConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createConnectionRequest.createConnectionDetails,
        "CreateConnectionDetails",
        model.CreateConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Connection Assignment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateConnectionAssignmentRequest
   * @return CreateConnectionAssignmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CreateConnectionAssignment.ts.html |here} to see how to use CreateConnectionAssignment API.
   */
  public async createConnectionAssignment(
    createConnectionAssignmentRequest: requests.CreateConnectionAssignmentRequest
  ): Promise<responses.CreateConnectionAssignmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#createConnectionAssignment.");
    const operationName = "createConnectionAssignment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/ConnectionAssignment/CreateConnectionAssignment";
    const pathParams = {};

    const queryParams = {
      "isLockOverride": createConnectionAssignmentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createConnectionAssignmentRequest.opcRetryToken,
      "opc-request-id": createConnectionAssignmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createConnectionAssignmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connectionAssignments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createConnectionAssignmentRequest.createConnectionAssignmentDetails,
        "CreateConnectionAssignmentDetails",
        model.CreateConnectionAssignmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateConnectionAssignmentResponse>{},
        body: await response.json(),
        bodyKey: "connectionAssignment",
        bodyModel: model.ConnectionAssignment,
        type: "model.ConnectionAssignment",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Note: Deprecated. Use the /connections API instead.
   * Creates a new DatabaseRegistration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDatabaseRegistrationRequest
   * @return CreateDatabaseRegistrationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CreateDatabaseRegistration.ts.html |here} to see how to use CreateDatabaseRegistration API.
   */
  public async createDatabaseRegistration(
    createDatabaseRegistrationRequest: requests.CreateDatabaseRegistrationRequest
  ): Promise<responses.CreateDatabaseRegistrationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#createDatabaseRegistration.");
    const operationName = "createDatabaseRegistration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DatabaseRegistration/CreateDatabaseRegistration";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDatabaseRegistrationRequest.opcRetryToken,
      "opc-request-id": createDatabaseRegistrationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDatabaseRegistrationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseRegistrations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDatabaseRegistrationRequest.createDatabaseRegistrationDetails,
        "CreateDatabaseRegistrationDetails",
        model.CreateDatabaseRegistrationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDatabaseRegistrationResponse>{},
        body: await response.json(),
        bodyKey: "databaseRegistration",
        bodyModel: model.DatabaseRegistration,
        type: "model.DatabaseRegistration",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("sunset"),
            key: "sunset",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Deployment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDeploymentRequest
   * @return CreateDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CreateDeployment.ts.html |here} to see how to use CreateDeployment API.
   */
  public async createDeployment(
    createDeploymentRequest: requests.CreateDeploymentRequest
  ): Promise<responses.CreateDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#createDeployment.");
    const operationName = "createDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/CreateDeployment";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDeploymentRequest.opcRetryToken,
      "opc-request-id": createDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeploymentRequest.createDeploymentDetails,
        "CreateDeploymentDetails",
        model.CreateDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new DeploymentBackup.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDeploymentBackupRequest
   * @return CreateDeploymentBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CreateDeploymentBackup.ts.html |here} to see how to use CreateDeploymentBackup API.
   */
  public async createDeploymentBackup(
    createDeploymentBackupRequest: requests.CreateDeploymentBackupRequest
  ): Promise<responses.CreateDeploymentBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#createDeploymentBackup.");
    const operationName = "createDeploymentBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentBackup/CreateDeploymentBackup";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDeploymentBackupRequest.opcRetryToken,
      "opc-request-id": createDeploymentBackupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDeploymentBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentBackups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeploymentBackupRequest.createDeploymentBackupDetails,
        "CreateDeploymentBackupDetails",
        model.CreateDeploymentBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeploymentBackupResponse>{},
        body: await response.json(),
        bodyKey: "deploymentBackup",
        bodyModel: model.DeploymentBackup,
        type: "model.DeploymentBackup",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Pipeline.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreatePipelineRequest
   * @return CreatePipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/CreatePipeline.ts.html |here} to see how to use CreatePipeline API.
   */
  public async createPipeline(
    createPipelineRequest: requests.CreatePipelineRequest
  ): Promise<responses.CreatePipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#createPipeline.");
    const operationName = "createPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/CreatePipeline";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createPipelineRequest.opcRetryToken,
      "opc-request-id": createPipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPipelineRequest.createPipelineDetails,
        "CreatePipelineDetails",
        model.CreatePipelineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePipelineResponse>{},
        body: await response.json(),
        bodyKey: "pipeline",
        bodyModel: model.Pipeline,
        type: "model.Pipeline",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the certificate from truststore.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteCertificateRequest
   * @return DeleteCertificateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/DeleteCertificate.ts.html |here} to see how to use DeleteCertificate API.
   */
  public async deleteCertificate(
    deleteCertificateRequest: requests.DeleteCertificateRequest
  ): Promise<responses.DeleteCertificateResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#deleteCertificate.");
    const operationName = "deleteCertificate";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Certificate/DeleteCertificate";
    const pathParams = {
      "{deploymentId}": deleteCertificateRequest.deploymentId,
      "{certificateKey}": deleteCertificateRequest.certificateKey
    };

    const queryParams = {
      "isLockOverride": deleteCertificateRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteCertificateRequest.ifMatch,
      "opc-request-id": deleteCertificateRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCertificateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/certificates/{certificateKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCertificateResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Connection.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteConnectionRequest
   * @return DeleteConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/DeleteConnection.ts.html |here} to see how to use DeleteConnection API.
   */
  public async deleteConnection(
    deleteConnectionRequest: requests.DeleteConnectionRequest
  ): Promise<responses.DeleteConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#deleteConnection.");
    const operationName = "deleteConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Connection/DeleteConnection";
    const pathParams = {
      "{connectionId}": deleteConnectionRequest.connectionId
    };

    const queryParams = {
      "isLockOverride": deleteConnectionRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteConnectionRequest.ifMatch,
      "opc-request-id": deleteConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Connection Assignment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteConnectionAssignmentRequest
   * @return DeleteConnectionAssignmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/DeleteConnectionAssignment.ts.html |here} to see how to use DeleteConnectionAssignment API.
   */
  public async deleteConnectionAssignment(
    deleteConnectionAssignmentRequest: requests.DeleteConnectionAssignmentRequest
  ): Promise<responses.DeleteConnectionAssignmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#deleteConnectionAssignment.");
    const operationName = "deleteConnectionAssignment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/ConnectionAssignment/DeleteConnectionAssignment";
    const pathParams = {
      "{connectionAssignmentId}": deleteConnectionAssignmentRequest.connectionAssignmentId
    };

    const queryParams = {
      "isLockOverride": deleteConnectionAssignmentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteConnectionAssignmentRequest.ifMatch,
      "opc-request-id": deleteConnectionAssignmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteConnectionAssignmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connectionAssignments/{connectionAssignmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteConnectionAssignmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Note: Deprecated. Use the /connections API instead.
   * Deletes a DatabaseRegistration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDatabaseRegistrationRequest
   * @return DeleteDatabaseRegistrationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/DeleteDatabaseRegistration.ts.html |here} to see how to use DeleteDatabaseRegistration API.
   */
  public async deleteDatabaseRegistration(
    deleteDatabaseRegistrationRequest: requests.DeleteDatabaseRegistrationRequest
  ): Promise<responses.DeleteDatabaseRegistrationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#deleteDatabaseRegistration.");
    const operationName = "deleteDatabaseRegistration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DatabaseRegistration/DeleteDatabaseRegistration";
    const pathParams = {
      "{databaseRegistrationId}": deleteDatabaseRegistrationRequest.databaseRegistrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDatabaseRegistrationRequest.ifMatch,
      "opc-request-id": deleteDatabaseRegistrationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDatabaseRegistrationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseRegistrations/{databaseRegistrationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDatabaseRegistrationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("sunset"),
            key: "sunset",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the Deployment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDeploymentRequest
   * @return DeleteDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/DeleteDeployment.ts.html |here} to see how to use DeleteDeployment API.
   */
  public async deleteDeployment(
    deleteDeploymentRequest: requests.DeleteDeploymentRequest
  ): Promise<responses.DeleteDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#deleteDeployment.");
    const operationName = "deleteDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/DeleteDeployment";
    const pathParams = {
      "{deploymentId}": deleteDeploymentRequest.deploymentId
    };

    const queryParams = {
      "isLockOverride": deleteDeploymentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDeploymentRequest.ifMatch,
      "opc-request-id": deleteDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a DeploymentBackup.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDeploymentBackupRequest
   * @return DeleteDeploymentBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/DeleteDeploymentBackup.ts.html |here} to see how to use DeleteDeploymentBackup API.
   */
  public async deleteDeploymentBackup(
    deleteDeploymentBackupRequest: requests.DeleteDeploymentBackupRequest
  ): Promise<responses.DeleteDeploymentBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#deleteDeploymentBackup.");
    const operationName = "deleteDeploymentBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentBackup/DeleteDeploymentBackup";
    const pathParams = {
      "{deploymentBackupId}": deleteDeploymentBackupRequest.deploymentBackupId
    };

    const queryParams = {
      "isLockOverride": deleteDeploymentBackupRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDeploymentBackupRequest.ifMatch,
      "opc-request-id": deleteDeploymentBackupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDeploymentBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentBackups/{deploymentBackupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDeploymentBackupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Pipeline.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeletePipelineRequest
   * @return DeletePipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/DeletePipeline.ts.html |here} to see how to use DeletePipeline API.
   */
  public async deletePipeline(
    deletePipelineRequest: requests.DeletePipelineRequest
  ): Promise<responses.DeletePipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#deletePipeline.");
    const operationName = "deletePipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/DeletePipeline";
    const pathParams = {
      "{pipelineId}": deletePipelineRequest.pipelineId
    };

    const queryParams = {
      "isLockOverride": deletePipelineRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePipelineRequest.ifMatch,
      "opc-request-id": deletePipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines/{pipelineId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePipelineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Checks if a wallet is already present in the deployment. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeploymentWalletExistsRequest
   * @return DeploymentWalletExistsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/DeploymentWalletExists.ts.html |here} to see how to use DeploymentWalletExists API.
   */
  public async deploymentWalletExists(
    deploymentWalletExistsRequest: requests.DeploymentWalletExistsRequest
  ): Promise<responses.DeploymentWalletExistsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#deploymentWalletExists.");
    const operationName = "deploymentWalletExists";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/DeploymentWalletExists";
    const pathParams = {
      "{deploymentId}": deploymentWalletExistsRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deploymentWalletExistsRequest.ifMatch,
      "opc-request-id": deploymentWalletExistsRequest.opcRequestId,
      "opc-retry-token": deploymentWalletExistsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deploymentWalletExistsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/walletExists",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        deploymentWalletExistsRequest.deploymentWalletExistsDetails,
        "DeploymentWalletExistsDetails",
        model.DeploymentWalletExistsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeploymentWalletExistsResponse>{},
        body: await response.json(),
        bodyKey: "deploymentWalletExistsResponseDetails",
        bodyModel: model.DeploymentWalletExistsResponseDetails,
        type: "model.DeploymentWalletExistsResponseDetails",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Export the OGG wallet from the deployment to OCI vault. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ExportDeploymentWalletRequest
   * @return ExportDeploymentWalletResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ExportDeploymentWallet.ts.html |here} to see how to use ExportDeploymentWallet API.
   */
  public async exportDeploymentWallet(
    exportDeploymentWalletRequest: requests.ExportDeploymentWalletRequest
  ): Promise<responses.ExportDeploymentWalletResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#exportDeploymentWallet.");
    const operationName = "exportDeploymentWallet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/ExportDeploymentWallet";
    const pathParams = {
      "{deploymentId}": exportDeploymentWalletRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": exportDeploymentWalletRequest.ifMatch,
      "opc-request-id": exportDeploymentWalletRequest.opcRequestId,
      "opc-retry-token": exportDeploymentWalletRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      exportDeploymentWalletRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/exportWallet",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        exportDeploymentWalletRequest.exportDeploymentWalletDetails,
        "ExportDeploymentWalletDetails",
        model.ExportDeploymentWalletDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ExportDeploymentWalletResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates a Pre-Authenticated Request Object URL to a DB2 for z/OS library that needs to be uploaded to your DB2 for z/OS server in order to establish GoldenGate connections to it. For licensing reasons, the URL is accessible for 10 minutes only.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateLibraryUrlRequest
   * @return GenerateLibraryUrlResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/GenerateLibraryUrl.ts.html |here} to see how to use GenerateLibraryUrl API.
   */
  public async generateLibraryUrl(
    generateLibraryUrlRequest: requests.GenerateLibraryUrlRequest
  ): Promise<responses.GenerateLibraryUrlResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#generateLibraryUrl.");
    const operationName = "generateLibraryUrl";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/GenerateLibraryUrl";
    const pathParams = {
      "{deploymentId}": generateLibraryUrlRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": generateLibraryUrlRequest.ifMatch,
      "opc-request-id": generateLibraryUrlRequest.opcRequestId,
      "opc-retry-token": generateLibraryUrlRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateLibraryUrlRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/generateLibraryUrl",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateLibraryUrlRequest.generateLibraryUrlDetails,
        "GenerateLibraryUrlDetails",
        model.GenerateLibraryUrlDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateLibraryUrlResponse>{},
        body: await response.json(),
        bodyKey: "libraryUrl",
        bodyModel: model.LibraryUrl,
        type: "model.LibraryUrl",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a Certificate.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCertificateRequest
   * @return GetCertificateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/GetCertificate.ts.html |here} to see how to use GetCertificate API.
   */
  public async getCertificate(
    getCertificateRequest: requests.GetCertificateRequest
  ): Promise<responses.GetCertificateResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#getCertificate.");
    const operationName = "getCertificate";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Certificate/GetCertificate";
    const pathParams = {
      "{deploymentId}": getCertificateRequest.deploymentId,
      "{certificateKey}": getCertificateRequest.certificateKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCertificateRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCertificateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/certificates/{certificateKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCertificateResponse>{},
        body: await response.json(),
        bodyKey: "certificate",
        bodyModel: model.Certificate,
        type: "model.Certificate",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a Connection.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetConnectionRequest
   * @return GetConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/GetConnection.ts.html |here} to see how to use GetConnection API.
   */
  public async getConnection(
    getConnectionRequest: requests.GetConnectionRequest
  ): Promise<responses.GetConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#getConnection.");
    const operationName = "getConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Connection/GetConnection";
    const pathParams = {
      "{connectionId}": getConnectionRequest.connectionId
    };

    const queryParams = {
      "view": getConnectionRequest.view
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a Connection Assignment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetConnectionAssignmentRequest
   * @return GetConnectionAssignmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/GetConnectionAssignment.ts.html |here} to see how to use GetConnectionAssignment API.
   */
  public async getConnectionAssignment(
    getConnectionAssignmentRequest: requests.GetConnectionAssignmentRequest
  ): Promise<responses.GetConnectionAssignmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#getConnectionAssignment.");
    const operationName = "getConnectionAssignment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/ConnectionAssignment/GetConnectionAssignment";
    const pathParams = {
      "{connectionAssignmentId}": getConnectionAssignmentRequest.connectionAssignmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConnectionAssignmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConnectionAssignmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connectionAssignments/{connectionAssignmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConnectionAssignmentResponse>{},
        body: await response.json(),
        bodyKey: "connectionAssignment",
        bodyModel: model.ConnectionAssignment,
        type: "model.ConnectionAssignment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Note: Deprecated. Use the /connections API instead.
   * Retrieves a DatabaseRegistration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDatabaseRegistrationRequest
   * @return GetDatabaseRegistrationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/GetDatabaseRegistration.ts.html |here} to see how to use GetDatabaseRegistration API.
   */
  public async getDatabaseRegistration(
    getDatabaseRegistrationRequest: requests.GetDatabaseRegistrationRequest
  ): Promise<responses.GetDatabaseRegistrationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#getDatabaseRegistration.");
    const operationName = "getDatabaseRegistration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DatabaseRegistration/GetDatabaseRegistration";
    const pathParams = {
      "{databaseRegistrationId}": getDatabaseRegistrationRequest.databaseRegistrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDatabaseRegistrationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDatabaseRegistrationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseRegistrations/{databaseRegistrationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDatabaseRegistrationResponse>{},
        body: await response.json(),
        bodyKey: "databaseRegistration",
        bodyModel: model.DatabaseRegistration,
        type: "model.DatabaseRegistration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("sunset"),
            key: "sunset",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a deployment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDeploymentRequest
   * @return GetDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/GetDeployment.ts.html |here} to see how to use GetDeployment API.
   */
  public async getDeployment(
    getDeploymentRequest: requests.GetDeploymentRequest
  ): Promise<responses.GetDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#getDeployment.");
    const operationName = "getDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/GetDeployment";
    const pathParams = {
      "{deploymentId}": getDeploymentRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a DeploymentBackup.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDeploymentBackupRequest
   * @return GetDeploymentBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/GetDeploymentBackup.ts.html |here} to see how to use GetDeploymentBackup API.
   */
  public async getDeploymentBackup(
    getDeploymentBackupRequest: requests.GetDeploymentBackupRequest
  ): Promise<responses.GetDeploymentBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#getDeploymentBackup.");
    const operationName = "getDeploymentBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentBackup/GetDeploymentBackup";
    const pathParams = {
      "{deploymentBackupId}": getDeploymentBackupRequest.deploymentBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeploymentBackupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDeploymentBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentBackups/{deploymentBackupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeploymentBackupResponse>{},
        body: await response.json(),
        bodyKey: "deploymentBackup",
        bodyModel: model.DeploymentBackup,
        type: "model.DeploymentBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a deployment upgrade.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDeploymentUpgradeRequest
   * @return GetDeploymentUpgradeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/GetDeploymentUpgrade.ts.html |here} to see how to use GetDeploymentUpgrade API.
   */
  public async getDeploymentUpgrade(
    getDeploymentUpgradeRequest: requests.GetDeploymentUpgradeRequest
  ): Promise<responses.GetDeploymentUpgradeResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#getDeploymentUpgrade.");
    const operationName = "getDeploymentUpgrade";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentUpgrade/GetDeploymentUpgrade";
    const pathParams = {
      "{deploymentUpgradeId}": getDeploymentUpgradeRequest.deploymentUpgradeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeploymentUpgradeRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDeploymentUpgradeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentUpgrades/{deploymentUpgradeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeploymentUpgradeResponse>{},
        body: await response.json(),
        bodyKey: "deploymentUpgrade",
        bodyModel: model.DeploymentUpgrade,
        type: "model.DeploymentUpgrade",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a Pipeline details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPipelineRequest
   * @return GetPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/GetPipeline.ts.html |here} to see how to use GetPipeline API.
   */
  public async getPipeline(
    getPipelineRequest: requests.GetPipelineRequest
  ): Promise<responses.GetPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#getPipeline.");
    const operationName = "getPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/GetPipeline";
    const pathParams = {
      "{pipelineId}": getPipelineRequest.pipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines/{pipelineId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPipelineResponse>{},
        body: await response.json(),
        bodyKey: "pipeline",
        bodyModel: model.Pipeline,
        type: "model.Pipeline",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve the WorkRequest identified by the given OCID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Imports an OGG wallet from the OCI Vault to the Deployment. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ImportDeploymentWalletRequest
   * @return ImportDeploymentWalletResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ImportDeploymentWallet.ts.html |here} to see how to use ImportDeploymentWallet API.
   */
  public async importDeploymentWallet(
    importDeploymentWalletRequest: requests.ImportDeploymentWalletRequest
  ): Promise<responses.ImportDeploymentWalletResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#importDeploymentWallet.");
    const operationName = "importDeploymentWallet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/ImportDeploymentWallet";
    const pathParams = {
      "{deploymentId}": importDeploymentWalletRequest.deploymentId
    };

    const queryParams = {
      "isLockOverride": importDeploymentWalletRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": importDeploymentWalletRequest.ifMatch,
      "opc-request-id": importDeploymentWalletRequest.opcRequestId,
      "opc-retry-token": importDeploymentWalletRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      importDeploymentWalletRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/importWallet",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        importDeploymentWalletRequest.importDeploymentWalletDetails,
        "ImportDeploymentWalletDetails",
        model.ImportDeploymentWalletDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ImportDeploymentWalletResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of certificates from truststore.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCertificatesRequest
   * @return ListCertificatesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListCertificates.ts.html |here} to see how to use ListCertificates API.
   */
  public async listCertificates(
    listCertificatesRequest: requests.ListCertificatesRequest
  ): Promise<responses.ListCertificatesResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listCertificates.");
    const operationName = "listCertificates";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/CertificateCollection/ListCertificates";
    const pathParams = {
      "{deploymentId}": listCertificatesRequest.deploymentId
    };

    const queryParams = {
      "lifecycleState": listCertificatesRequest.lifecycleState,
      "limit": listCertificatesRequest.limit,
      "page": listCertificatesRequest.page,
      "sortOrder": listCertificatesRequest.sortOrder,
      "sortBy": listCertificatesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCertificatesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCertificatesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/certificates",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCertificatesResponse>{},
        body: await response.json(),
        bodyKey: "certificateCollection",
        bodyModel: model.CertificateCollection,
        type: "model.CertificateCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Connection Assignments in the compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListConnectionAssignmentsRequest
   * @return ListConnectionAssignmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListConnectionAssignments.ts.html |here} to see how to use ListConnectionAssignments API.
   */
  public async listConnectionAssignments(
    listConnectionAssignmentsRequest: requests.ListConnectionAssignmentsRequest
  ): Promise<responses.ListConnectionAssignmentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#listConnectionAssignments.");
    const operationName = "listConnectionAssignments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/ConnectionAssignment/ListConnectionAssignments";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listConnectionAssignmentsRequest.compartmentId,
      "deploymentId": listConnectionAssignmentsRequest.deploymentId,
      "connectionId": listConnectionAssignmentsRequest.connectionId,
      "name": listConnectionAssignmentsRequest.name,
      "lifecycleState": listConnectionAssignmentsRequest.lifecycleState,
      "limit": listConnectionAssignmentsRequest.limit,
      "page": listConnectionAssignmentsRequest.page,
      "sortOrder": listConnectionAssignmentsRequest.sortOrder,
      "sortBy": listConnectionAssignmentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listConnectionAssignmentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listConnectionAssignmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connectionAssignments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConnectionAssignmentsResponse>{},
        body: await response.json(),
        bodyKey: "connectionAssignmentCollection",
        bodyModel: model.ConnectionAssignmentCollection,
        type: "model.ConnectionAssignmentCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Connections in the compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListConnectionsRequest
   * @return ListConnectionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListConnections.ts.html |here} to see how to use ListConnections API.
   */
  public async listConnections(
    listConnectionsRequest: requests.ListConnectionsRequest
  ): Promise<responses.ListConnectionsResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listConnections.");
    const operationName = "listConnections";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Connection/ListConnections";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listConnectionsRequest.compartmentId,
      "technologyType": listConnectionsRequest.technologyType,
      "connectionType": listConnectionsRequest.connectionType,
      "assignedDeploymentId": listConnectionsRequest.assignedDeploymentId,
      "assignableDeploymentId": listConnectionsRequest.assignableDeploymentId,
      "assignableDeploymentType": listConnectionsRequest.assignableDeploymentType,
      "lifecycleState": listConnectionsRequest.lifecycleState,
      "displayName": listConnectionsRequest.displayName,
      "limit": listConnectionsRequest.limit,
      "page": listConnectionsRequest.page,
      "sortOrder": listConnectionsRequest.sortOrder,
      "sortBy": listConnectionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listConnectionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listConnectionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConnectionsResponse>{},
        body: await response.json(),
        bodyKey: "connectionCollection",
        bodyModel: model.ConnectionCollection,
        type: "model.ConnectionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Note: Deprecated. Use the /connections API instead.
   * Lists the DatabaseRegistrations in the compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDatabaseRegistrationsRequest
   * @return ListDatabaseRegistrationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListDatabaseRegistrations.ts.html |here} to see how to use ListDatabaseRegistrations API.
   */
  public async listDatabaseRegistrations(
    listDatabaseRegistrationsRequest: requests.ListDatabaseRegistrationsRequest
  ): Promise<responses.ListDatabaseRegistrationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#listDatabaseRegistrations.");
    const operationName = "listDatabaseRegistrations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DatabaseRegistration/ListDatabaseRegistrations";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDatabaseRegistrationsRequest.compartmentId,
      "lifecycleState": listDatabaseRegistrationsRequest.lifecycleState,
      "displayName": listDatabaseRegistrationsRequest.displayName,
      "limit": listDatabaseRegistrationsRequest.limit,
      "page": listDatabaseRegistrationsRequest.page,
      "sortOrder": listDatabaseRegistrationsRequest.sortOrder,
      "sortBy": listDatabaseRegistrationsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDatabaseRegistrationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDatabaseRegistrationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseRegistrations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDatabaseRegistrationsResponse>{},
        body: await response.json(),
        bodyKey: "databaseRegistrationCollection",
        bodyModel: model.DatabaseRegistrationCollection,
        type: "model.DatabaseRegistrationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("sunset"),
            key: "sunset",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Backups in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeploymentBackupsRequest
   * @return ListDeploymentBackupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListDeploymentBackups.ts.html |here} to see how to use ListDeploymentBackups API.
   */
  public async listDeploymentBackups(
    listDeploymentBackupsRequest: requests.ListDeploymentBackupsRequest
  ): Promise<responses.ListDeploymentBackupsResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listDeploymentBackups.");
    const operationName = "listDeploymentBackups";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentBackup/ListDeploymentBackups";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDeploymentBackupsRequest.compartmentId,
      "deploymentId": listDeploymentBackupsRequest.deploymentId,
      "lifecycleState": listDeploymentBackupsRequest.lifecycleState,
      "displayName": listDeploymentBackupsRequest.displayName,
      "limit": listDeploymentBackupsRequest.limit,
      "page": listDeploymentBackupsRequest.page,
      "sortOrder": listDeploymentBackupsRequest.sortOrder,
      "sortBy": listDeploymentBackupsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeploymentBackupsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeploymentBackupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentBackups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeploymentBackupsResponse>{},
        body: await response.json(),
        bodyKey: "deploymentBackupCollection",
        bodyModel: model.DeploymentBackupCollection,
        type: "model.DeploymentBackupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns an array of DeploymentEnvironmentDescriptor
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeploymentEnvironmentsRequest
   * @return ListDeploymentEnvironmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListDeploymentEnvironments.ts.html |here} to see how to use ListDeploymentEnvironments API.
   */
  public async listDeploymentEnvironments(
    listDeploymentEnvironmentsRequest: requests.ListDeploymentEnvironmentsRequest
  ): Promise<responses.ListDeploymentEnvironmentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#listDeploymentEnvironments.");
    const operationName = "listDeploymentEnvironments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentEnvironmentCollection/ListDeploymentEnvironments";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDeploymentEnvironmentsRequest.compartmentId,
      "limit": listDeploymentEnvironmentsRequest.limit,
      "page": listDeploymentEnvironmentsRequest.page,
      "sortOrder": listDeploymentEnvironmentsRequest.sortOrder,
      "sortBy": listDeploymentEnvironmentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeploymentEnvironmentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeploymentEnvironmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentEnvironments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeploymentEnvironmentsResponse>{},
        body: await response.json(),
        bodyKey: "deploymentEnvironmentCollection",
        bodyModel: model.DeploymentEnvironmentCollection,
        type: "model.DeploymentEnvironmentCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the local and remote peers in a deployment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeploymentPeersRequest
   * @return ListDeploymentPeersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListDeploymentPeers.ts.html |here} to see how to use ListDeploymentPeers API.
   */
  public async listDeploymentPeers(
    listDeploymentPeersRequest: requests.ListDeploymentPeersRequest
  ): Promise<responses.ListDeploymentPeersResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listDeploymentPeers.");
    const operationName = "listDeploymentPeers";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentPeerSummary/ListDeploymentPeers";
    const pathParams = {
      "{deploymentId}": listDeploymentPeersRequest.deploymentId
    };

    const queryParams = {
      "lifecycleState": listDeploymentPeersRequest.lifecycleState,
      "displayName": listDeploymentPeersRequest.displayName,
      "limit": listDeploymentPeersRequest.limit,
      "page": listDeploymentPeersRequest.page,
      "sortOrder": listDeploymentPeersRequest.sortOrder,
      "sortBy": listDeploymentPeersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeploymentPeersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeploymentPeersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/peers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeploymentPeersResponse>{},
        body: await response.json(),
        bodyKey: "deploymentPeerCollection",
        bodyModel: model.DeploymentPeerCollection,
        type: "model.DeploymentPeerCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns an array of DeploymentTypeDescriptor
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeploymentTypesRequest
   * @return ListDeploymentTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListDeploymentTypes.ts.html |here} to see how to use ListDeploymentTypes API.
   */
  public async listDeploymentTypes(
    listDeploymentTypesRequest: requests.ListDeploymentTypesRequest
  ): Promise<responses.ListDeploymentTypesResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listDeploymentTypes.");
    const operationName = "listDeploymentTypes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentTypeCollection/ListDeploymentTypes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDeploymentTypesRequest.compartmentId,
      "deploymentType": listDeploymentTypesRequest.deploymentType,
      "oggVersion": listDeploymentTypesRequest.oggVersion,
      "displayName": listDeploymentTypesRequest.displayName,
      "limit": listDeploymentTypesRequest.limit,
      "page": listDeploymentTypesRequest.page,
      "sortOrder": listDeploymentTypesRequest.sortOrder,
      "sortBy": listDeploymentTypesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeploymentTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeploymentTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeploymentTypesResponse>{},
        body: await response.json(),
        bodyKey: "deploymentTypeCollection",
        bodyModel: model.DeploymentTypeCollection,
        type: "model.DeploymentTypeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Deployment Upgrades in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeploymentUpgradesRequest
   * @return ListDeploymentUpgradesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListDeploymentUpgrades.ts.html |here} to see how to use ListDeploymentUpgrades API.
   */
  public async listDeploymentUpgrades(
    listDeploymentUpgradesRequest: requests.ListDeploymentUpgradesRequest
  ): Promise<responses.ListDeploymentUpgradesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#listDeploymentUpgrades.");
    const operationName = "listDeploymentUpgrades";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentUpgrade/ListDeploymentUpgrades";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDeploymentUpgradesRequest.compartmentId,
      "deploymentId": listDeploymentUpgradesRequest.deploymentId,
      "lifecycleState": listDeploymentUpgradesRequest.lifecycleState,
      "displayName": listDeploymentUpgradesRequest.displayName,
      "limit": listDeploymentUpgradesRequest.limit,
      "page": listDeploymentUpgradesRequest.page,
      "sortOrder": listDeploymentUpgradesRequest.sortOrder,
      "sortBy": listDeploymentUpgradesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeploymentUpgradesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeploymentUpgradesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentUpgrades",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeploymentUpgradesResponse>{},
        body: await response.json(),
        bodyKey: "deploymentUpgradeCollection",
        bodyModel: model.DeploymentUpgradeCollection,
        type: "model.DeploymentUpgradeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the list of available deployment versions.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeploymentVersionsRequest
   * @return ListDeploymentVersionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListDeploymentVersions.ts.html |here} to see how to use ListDeploymentVersions API.
   */
  public async listDeploymentVersions(
    listDeploymentVersionsRequest: requests.ListDeploymentVersionsRequest
  ): Promise<responses.ListDeploymentVersionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#listDeploymentVersions.");
    const operationName = "listDeploymentVersions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentVersionCollection/ListDeploymentVersions";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDeploymentVersionsRequest.compartmentId,
      "deploymentId": listDeploymentVersionsRequest.deploymentId,
      "deploymentType": listDeploymentVersionsRequest.deploymentType,
      "limit": listDeploymentVersionsRequest.limit,
      "page": listDeploymentVersionsRequest.page,
      "sortOrder": listDeploymentVersionsRequest.sortOrder,
      "sortBy": listDeploymentVersionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeploymentVersionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeploymentVersionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentVersions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeploymentVersionsResponse>{},
        body: await response.json(),
        bodyKey: "deploymentVersionCollection",
        bodyModel: model.DeploymentVersionCollection,
        type: "model.DeploymentVersionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the wallets export/import operations to/from a deployment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeploymentWalletsOperationsRequest
   * @return ListDeploymentWalletsOperationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListDeploymentWalletsOperations.ts.html |here} to see how to use ListDeploymentWalletsOperations API.
   */
  public async listDeploymentWalletsOperations(
    listDeploymentWalletsOperationsRequest: requests.ListDeploymentWalletsOperationsRequest
  ): Promise<responses.ListDeploymentWalletsOperationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#listDeploymentWalletsOperations.");
    const operationName = "listDeploymentWalletsOperations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentWalletsOperationSummary/ListDeploymentWalletsOperations";
    const pathParams = {
      "{deploymentId}": listDeploymentWalletsOperationsRequest.deploymentId
    };

    const queryParams = {
      "displayName": listDeploymentWalletsOperationsRequest.displayName,
      "limit": listDeploymentWalletsOperationsRequest.limit,
      "page": listDeploymentWalletsOperationsRequest.page,
      "sortBy": listDeploymentWalletsOperationsRequest.sortBy,
      "sortOrder": listDeploymentWalletsOperationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeploymentWalletsOperationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeploymentWalletsOperationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/deploymentWalletsOperations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeploymentWalletsOperationsResponse>{},
        body: await response.json(),
        bodyKey: "deploymentWalletsOperationCollection",
        bodyModel: model.DeploymentWalletsOperationCollection,
        type: "model.DeploymentWalletsOperationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Deployments in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeploymentsRequest
   * @return ListDeploymentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListDeployments.ts.html |here} to see how to use ListDeployments API.
   */
  public async listDeployments(
    listDeploymentsRequest: requests.ListDeploymentsRequest
  ): Promise<responses.ListDeploymentsResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listDeployments.");
    const operationName = "listDeployments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/ListDeployments";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDeploymentsRequest.compartmentId,
      "supportedConnectionType": listDeploymentsRequest.supportedConnectionType,
      "assignedConnectionId": listDeploymentsRequest.assignedConnectionId,
      "assignableConnectionId": listDeploymentsRequest.assignableConnectionId,
      "lifecycleState": listDeploymentsRequest.lifecycleState,
      "lifecycleSubState": listDeploymentsRequest.lifecycleSubState,
      "deploymentType": listDeploymentsRequest.deploymentType,
      "displayName": listDeploymentsRequest.displayName,
      "fqdn": listDeploymentsRequest.fqdn,
      "limit": listDeploymentsRequest.limit,
      "page": listDeploymentsRequest.page,
      "sortOrder": listDeploymentsRequest.sortOrder,
      "sortBy": listDeploymentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeploymentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeploymentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeploymentsResponse>{},
        body: await response.json(),
        bodyKey: "deploymentCollection",
        bodyModel: model.DeploymentCollection,
        type: "model.DeploymentCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the DeploymentMessages for a deployment. The sorting order is not important. By default first will be Upgrade message, next Exception message and then Storage Utilization message.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMessagesRequest
   * @return ListMessagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListMessages.ts.html |here} to see how to use ListMessages API.
   */
  public async listMessages(
    listMessagesRequest: requests.ListMessagesRequest
  ): Promise<responses.ListMessagesResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listMessages.");
    const operationName = "listMessages";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/MessageSummary/ListMessages";
    const pathParams = {};

    const queryParams = {
      "deploymentId": listMessagesRequest.deploymentId,
      "limit": listMessagesRequest.limit,
      "page": listMessagesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMessagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMessagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/messages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMessagesResponse>{},
        body: await response.json(),
        bodyKey: "deploymentMessageCollection",
        bodyModel: model.DeploymentMessageCollection,
        type: "model.DeploymentMessageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a Pipeline recipe steps and its progress details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPipelineInitializationStepsRequest
   * @return ListPipelineInitializationStepsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListPipelineInitializationSteps.ts.html |here} to see how to use ListPipelineInitializationSteps API.
   */
  public async listPipelineInitializationSteps(
    listPipelineInitializationStepsRequest: requests.ListPipelineInitializationStepsRequest
  ): Promise<responses.ListPipelineInitializationStepsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#listPipelineInitializationSteps.");
    const operationName = "listPipelineInitializationSteps";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/ListPipelineInitializationSteps";
    const pathParams = {
      "{pipelineId}": listPipelineInitializationStepsRequest.pipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPipelineInitializationStepsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPipelineInitializationStepsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines/{pipelineId}/initializationSteps",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPipelineInitializationStepsResponse>{},
        body: await response.json(),
        bodyKey: "pipelineInitializationSteps",
        bodyModel: model.PipelineInitializationSteps,
        type: "model.PipelineInitializationSteps",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a Pipeline's running replication process's status like Capture/Apply.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPipelineRunningProcessesRequest
   * @return ListPipelineRunningProcessesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListPipelineRunningProcesses.ts.html |here} to see how to use ListPipelineRunningProcesses API.
   */
  public async listPipelineRunningProcesses(
    listPipelineRunningProcessesRequest: requests.ListPipelineRunningProcessesRequest
  ): Promise<responses.ListPipelineRunningProcessesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#listPipelineRunningProcesses.");
    const operationName = "listPipelineRunningProcesses";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/ListPipelineRunningProcesses";
    const pathParams = {
      "{pipelineId}": listPipelineRunningProcessesRequest.pipelineId
    };

    const queryParams = {
      "limit": listPipelineRunningProcessesRequest.limit,
      "page": listPipelineRunningProcessesRequest.page,
      "sortOrder": listPipelineRunningProcessesRequest.sortOrder,
      "sortBy": listPipelineRunningProcessesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPipelineRunningProcessesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPipelineRunningProcessesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines/{pipelineId}/runningProcesses",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPipelineRunningProcessesResponse>{},
        body: await response.json(),
        bodyKey: "pipelineRunningProcessCollection",
        bodyModel: model.PipelineRunningProcessCollection,
        type: "model.PipelineRunningProcessCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns an array of tables under the given schemas of the pipeline for given source and target schemas passed as query params.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPipelineSchemaTablesRequest
   * @return ListPipelineSchemaTablesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListPipelineSchemaTables.ts.html |here} to see how to use ListPipelineSchemaTables API.
   */
  public async listPipelineSchemaTables(
    listPipelineSchemaTablesRequest: requests.ListPipelineSchemaTablesRequest
  ): Promise<responses.ListPipelineSchemaTablesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#listPipelineSchemaTables.");
    const operationName = "listPipelineSchemaTables";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/ListPipelineSchemaTables";
    const pathParams = {
      "{pipelineId}": listPipelineSchemaTablesRequest.pipelineId
    };

    const queryParams = {
      "sourceSchemaName": listPipelineSchemaTablesRequest.sourceSchemaName,
      "targetSchemaName": listPipelineSchemaTablesRequest.targetSchemaName,
      "displayName": listPipelineSchemaTablesRequest.displayName,
      "limit": listPipelineSchemaTablesRequest.limit,
      "page": listPipelineSchemaTablesRequest.page,
      "sortOrder": listPipelineSchemaTablesRequest.sortOrder,
      "sortBy": listPipelineSchemaTablesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPipelineSchemaTablesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPipelineSchemaTablesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines/{pipelineId}/schemaTables",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPipelineSchemaTablesResponse>{},
        body: await response.json(),
        bodyKey: "pipelineSchemaTableCollection",
        bodyModel: model.PipelineSchemaTableCollection,
        type: "model.PipelineSchemaTableCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns an array of schemas based on mapping rules for a pipeline.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPipelineSchemasRequest
   * @return ListPipelineSchemasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListPipelineSchemas.ts.html |here} to see how to use ListPipelineSchemas API.
   */
  public async listPipelineSchemas(
    listPipelineSchemasRequest: requests.ListPipelineSchemasRequest
  ): Promise<responses.ListPipelineSchemasResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listPipelineSchemas.");
    const operationName = "listPipelineSchemas";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/ListPipelineSchemas";
    const pathParams = {
      "{pipelineId}": listPipelineSchemasRequest.pipelineId
    };

    const queryParams = {
      "displayName": listPipelineSchemasRequest.displayName,
      "limit": listPipelineSchemasRequest.limit,
      "page": listPipelineSchemasRequest.page,
      "sortOrder": listPipelineSchemasRequest.sortOrder,
      "sortBy": listPipelineSchemasRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPipelineSchemasRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPipelineSchemasRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines/{pipelineId}/schemas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPipelineSchemasResponse>{},
        body: await response.json(),
        bodyKey: "pipelineSchemaCollection",
        bodyModel: model.PipelineSchemaCollection,
        type: "model.PipelineSchemaCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Pipelines in the compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPipelinesRequest
   * @return ListPipelinesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListPipelines.ts.html |here} to see how to use ListPipelines API.
   */
  public async listPipelines(
    listPipelinesRequest: requests.ListPipelinesRequest
  ): Promise<responses.ListPipelinesResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listPipelines.");
    const operationName = "listPipelines";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/ListPipelines";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listPipelinesRequest.compartmentId,
      "lifecycleState": listPipelinesRequest.lifecycleState,
      "lifecycleSubState": listPipelinesRequest.lifecycleSubState,
      "displayName": listPipelinesRequest.displayName,
      "limit": listPipelinesRequest.limit,
      "page": listPipelinesRequest.page,
      "sortOrder": listPipelinesRequest.sortOrder,
      "sortBy": listPipelinesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPipelinesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPipelinesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPipelinesResponse>{},
        body: await response.json(),
        bodyKey: "pipelineCollection",
        bodyModel: model.PipelineCollection,
        type: "model.PipelineCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns an array of Recipe Summary.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListRecipesRequest
   * @return ListRecipesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListRecipes.ts.html |here} to see how to use ListRecipes API.
   */
  public async listRecipes(
    listRecipesRequest: requests.ListRecipesRequest
  ): Promise<responses.ListRecipesResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listRecipes.");
    const operationName = "listRecipes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/RecipeSummaryCollection/ListRecipes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRecipesRequest.compartmentId,
      "recipeType": listRecipesRequest.recipeType,
      "displayName": listRecipesRequest.displayName,
      "limit": listRecipesRequest.limit,
      "page": listRecipesRequest.page,
      "sortOrder": listRecipesRequest.sortOrder,
      "sortBy": listRecipesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRecipesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRecipesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recipes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRecipesResponse>{},
        body: await response.json(),
        bodyKey: "recipeSummaryCollection",
        bodyModel: model.RecipeSummaryCollection,
        type: "model.RecipeSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the TrailFiles for a deployment.
   * Deprecated: Please access trail file management functions directly on OGG console which are available since version Oracle GoldenGate 23c.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTrailFilesRequest
   * @return ListTrailFilesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListTrailFiles.ts.html |here} to see how to use ListTrailFiles API.
   */
  public async listTrailFiles(
    listTrailFilesRequest: requests.ListTrailFilesRequest
  ): Promise<responses.ListTrailFilesResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listTrailFiles.");
    const operationName = "listTrailFiles";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/TrailFileSummary/ListTrailFiles";
    const pathParams = {};

    const queryParams = {
      "deploymentId": listTrailFilesRequest.deploymentId,
      "displayName": listTrailFilesRequest.displayName,
      "trailFileId": listTrailFilesRequest.trailFileId,
      "limit": listTrailFilesRequest.limit,
      "page": listTrailFilesRequest.page,
      "sortBy": listTrailFilesRequest.sortBy,
      "sortOrder": listTrailFilesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTrailFilesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTrailFilesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/trailFiles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTrailFilesResponse>{},
        body: await response.json(),
        bodyKey: "trailFileCollection",
        bodyModel: model.TrailFileCollection,
        type: "model.TrailFileCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Trail Sequences for a TrailFile in a given deployment.
   * Deprecated: Please access trail file management functions directly on OGG console which are available since version Oracle GoldenGate 23c.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTrailSequencesRequest
   * @return ListTrailSequencesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListTrailSequences.ts.html |here} to see how to use ListTrailSequences API.
   */
  public async listTrailSequences(
    listTrailSequencesRequest: requests.ListTrailSequencesRequest
  ): Promise<responses.ListTrailSequencesResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listTrailSequences.");
    const operationName = "listTrailSequences";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/TrailSequenceSummary/ListTrailSequences";
    const pathParams = {};

    const queryParams = {
      "deploymentId": listTrailSequencesRequest.deploymentId,
      "trailFileId": listTrailSequencesRequest.trailFileId,
      "trailSequenceId": listTrailSequencesRequest.trailSequenceId,
      "displayName": listTrailSequencesRequest.displayName,
      "limit": listTrailSequencesRequest.limit,
      "page": listTrailSequencesRequest.page,
      "sortBy": listTrailSequencesRequest.sortBy,
      "sortOrder": listTrailSequencesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTrailSequencesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTrailSequencesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/trailSequences",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTrailSequencesResponse>{},
        body: await response.json(),
        bodyKey: "trailSequenceCollection",
        bodyModel: model.TrailSequenceCollection,
        type: "model.TrailSequenceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists work request errors.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/WorkRequestError/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsRecordIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsResponseIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Lists work request logs.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/WorkRequestLogEntry/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLogEntry,
        type: "Array<model.WorkRequestLogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsRecordIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsResponseIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Lists the work requests in the compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/WorkRequest/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequest,
        type: "Array<model.WorkRequest>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequest objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequest> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequest objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsRecordIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequest> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsResponseIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Refresh the external Connection attributes.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RefreshConnectionRequest
   * @return RefreshConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/RefreshConnection.ts.html |here} to see how to use RefreshConnection API.
   */
  public async refreshConnection(
    refreshConnectionRequest: requests.RefreshConnectionRequest
  ): Promise<responses.RefreshConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#refreshConnection.");
    const operationName = "refreshConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Connection/RefreshConnection";
    const pathParams = {
      "{connectionId}": refreshConnectionRequest.connectionId
    };

    const queryParams = {
      "isLockOverride": refreshConnectionRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": refreshConnectionRequest.ifMatch,
      "opc-request-id": refreshConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      refreshConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}/actions/refresh",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        refreshConnectionRequest.refreshConnectionDetails,
        "RefreshConnectionDetails",
        model.RefreshConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RefreshConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a lock from a Connection resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RemoveConnectionLockRequest
   * @return RemoveConnectionLockResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/RemoveConnectionLock.ts.html |here} to see how to use RemoveConnectionLock API.
   */
  public async removeConnectionLock(
    removeConnectionLockRequest: requests.RemoveConnectionLockRequest
  ): Promise<responses.RemoveConnectionLockResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#removeConnectionLock.");
    const operationName = "removeConnectionLock";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Connection/RemoveConnectionLock";
    const pathParams = {
      "{connectionId}": removeConnectionLockRequest.connectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeConnectionLockRequest.opcRequestId,
      "if-match": removeConnectionLockRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeConnectionLockRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}/actions/removeLock",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeConnectionLockRequest.removeResourceLockDetails,
        "RemoveResourceLockDetails",
        model.RemoveResourceLockDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveConnectionLockResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a lock from a DeploymentBackup resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RemoveDeploymentBackupLockRequest
   * @return RemoveDeploymentBackupLockResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/RemoveDeploymentBackupLock.ts.html |here} to see how to use RemoveDeploymentBackupLock API.
   */
  public async removeDeploymentBackupLock(
    removeDeploymentBackupLockRequest: requests.RemoveDeploymentBackupLockRequest
  ): Promise<responses.RemoveDeploymentBackupLockResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#removeDeploymentBackupLock.");
    const operationName = "removeDeploymentBackupLock";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentBackup/RemoveDeploymentBackupLock";
    const pathParams = {
      "{deploymentBackupId}": removeDeploymentBackupLockRequest.deploymentBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeDeploymentBackupLockRequest.opcRequestId,
      "if-match": removeDeploymentBackupLockRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeDeploymentBackupLockRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentBackups/{deploymentBackupId}/actions/removeLock",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeDeploymentBackupLockRequest.removeResourceLockDetails,
        "RemoveResourceLockDetails",
        model.RemoveResourceLockDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveDeploymentBackupLockResponse>{},
        body: await response.json(),
        bodyKey: "deploymentBackup",
        bodyModel: model.DeploymentBackup,
        type: "model.DeploymentBackup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a local peer of the deployment, this will remove the given placement entry from the deployment placement attribute. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RemoveDeploymentLocalPeerRequest
   * @return RemoveDeploymentLocalPeerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/RemoveDeploymentLocalPeer.ts.html |here} to see how to use RemoveDeploymentLocalPeer API.
   */
  public async removeDeploymentLocalPeer(
    removeDeploymentLocalPeerRequest: requests.RemoveDeploymentLocalPeerRequest
  ): Promise<responses.RemoveDeploymentLocalPeerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#removeDeploymentLocalPeer.");
    const operationName = "removeDeploymentLocalPeer";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/RemoveDeploymentLocalPeer";
    const pathParams = {
      "{deploymentId}": removeDeploymentLocalPeerRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": removeDeploymentLocalPeerRequest.ifMatch,
      "opc-request-id": removeDeploymentLocalPeerRequest.opcRequestId,
      "opc-retry-token": removeDeploymentLocalPeerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeDeploymentLocalPeerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/removeLocalPeer",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeDeploymentLocalPeerRequest.removeDeploymentLocalPeerDetails,
        "RemoveDeploymentLocalPeerDetails",
        model.RemoveDeploymentLocalPeerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveDeploymentLocalPeerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a lock from a Deployment resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RemoveDeploymentLockRequest
   * @return RemoveDeploymentLockResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/RemoveDeploymentLock.ts.html |here} to see how to use RemoveDeploymentLock API.
   */
  public async removeDeploymentLock(
    removeDeploymentLockRequest: requests.RemoveDeploymentLockRequest
  ): Promise<responses.RemoveDeploymentLockResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#removeDeploymentLock.");
    const operationName = "removeDeploymentLock";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/RemoveDeploymentLock";
    const pathParams = {
      "{deploymentId}": removeDeploymentLockRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeDeploymentLockRequest.opcRequestId,
      "if-match": removeDeploymentLockRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeDeploymentLockRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/removeLock",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeDeploymentLockRequest.removeResourceLockDetails,
        "RemoveResourceLockDetails",
        model.RemoveResourceLockDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveDeploymentLockResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Reschedules a DeploymentUpgrade, applicable only for DeploymentUpgrade in Waiting state. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RescheduleDeploymentUpgradeRequest
   * @return RescheduleDeploymentUpgradeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/RescheduleDeploymentUpgrade.ts.html |here} to see how to use RescheduleDeploymentUpgrade API.
   */
  public async rescheduleDeploymentUpgrade(
    rescheduleDeploymentUpgradeRequest: requests.RescheduleDeploymentUpgradeRequest
  ): Promise<responses.RescheduleDeploymentUpgradeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#rescheduleDeploymentUpgrade.");
    const operationName = "rescheduleDeploymentUpgrade";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentUpgrade/RescheduleDeploymentUpgrade";
    const pathParams = {
      "{deploymentUpgradeId}": rescheduleDeploymentUpgradeRequest.deploymentUpgradeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": rescheduleDeploymentUpgradeRequest.ifMatch,
      "opc-request-id": rescheduleDeploymentUpgradeRequest.opcRequestId,
      "opc-retry-token": rescheduleDeploymentUpgradeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      rescheduleDeploymentUpgradeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentUpgrades/{deploymentUpgradeId}/actions/reschedule",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        rescheduleDeploymentUpgradeRequest.rescheduleDeploymentUpgradeDetails,
        "RescheduleDeploymentUpgradeDetails",
        model.RescheduleDeploymentUpgradeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RescheduleDeploymentUpgradeResponse>{},
        body: await response.json(),
        bodyKey: "deploymentUpgrade",
        bodyModel: model.DeploymentUpgrade,
        type: "model.DeploymentUpgrade",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Restores a Deployment from a Deployment Backup created from the same Deployment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RestoreDeploymentRequest
   * @return RestoreDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/RestoreDeployment.ts.html |here} to see how to use RestoreDeployment API.
   */
  public async restoreDeployment(
    restoreDeploymentRequest: requests.RestoreDeploymentRequest
  ): Promise<responses.RestoreDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#restoreDeployment.");
    const operationName = "restoreDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentBackup/RestoreDeployment";
    const pathParams = {
      "{deploymentBackupId}": restoreDeploymentRequest.deploymentBackupId
    };

    const queryParams = {
      "isLockOverride": restoreDeploymentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": restoreDeploymentRequest.ifMatch,
      "opc-request-id": restoreDeploymentRequest.opcRequestId,
      "opc-retry-token": restoreDeploymentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      restoreDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentBackups/{deploymentBackupId}/actions/restore",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        restoreDeploymentRequest.restoreDeploymentDetails,
        "RestoreDeploymentDetails",
        model.RestoreDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RestoreDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Rollback a deployment to it's previous version. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RollbackDeploymentUpgradeRequest
   * @return RollbackDeploymentUpgradeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/RollbackDeploymentUpgrade.ts.html |here} to see how to use RollbackDeploymentUpgrade API.
   */
  public async rollbackDeploymentUpgrade(
    rollbackDeploymentUpgradeRequest: requests.RollbackDeploymentUpgradeRequest
  ): Promise<responses.RollbackDeploymentUpgradeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#rollbackDeploymentUpgrade.");
    const operationName = "rollbackDeploymentUpgrade";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentUpgrade/RollbackDeploymentUpgrade";
    const pathParams = {
      "{deploymentUpgradeId}": rollbackDeploymentUpgradeRequest.deploymentUpgradeId
    };

    const queryParams = {
      "isLockOverride": rollbackDeploymentUpgradeRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": rollbackDeploymentUpgradeRequest.ifMatch,
      "opc-request-id": rollbackDeploymentUpgradeRequest.opcRequestId,
      "opc-retry-token": rollbackDeploymentUpgradeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      rollbackDeploymentUpgradeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentUpgrades/{deploymentUpgradeId}/actions/rollback",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        rollbackDeploymentUpgradeRequest.rollbackDeploymentUpgradeDetails,
        "RollbackDeploymentUpgradeDetails",
        model.RollbackDeploymentUpgradeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RollbackDeploymentUpgradeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Snooze a DeploymentUpgrade. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SnoozeDeploymentUpgradeRequest
   * @return SnoozeDeploymentUpgradeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/SnoozeDeploymentUpgrade.ts.html |here} to see how to use SnoozeDeploymentUpgrade API.
   */
  public async snoozeDeploymentUpgrade(
    snoozeDeploymentUpgradeRequest: requests.SnoozeDeploymentUpgradeRequest
  ): Promise<responses.SnoozeDeploymentUpgradeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#snoozeDeploymentUpgrade.");
    const operationName = "snoozeDeploymentUpgrade";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentUpgrade/SnoozeDeploymentUpgrade";
    const pathParams = {
      "{deploymentUpgradeId}": snoozeDeploymentUpgradeRequest.deploymentUpgradeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": snoozeDeploymentUpgradeRequest.ifMatch,
      "opc-request-id": snoozeDeploymentUpgradeRequest.opcRequestId,
      "opc-retry-token": snoozeDeploymentUpgradeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      snoozeDeploymentUpgradeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentUpgrades/{deploymentUpgradeId}/actions/snooze",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        snoozeDeploymentUpgradeRequest.snoozeDeploymentUpgradeDetails,
        "SnoozeDeploymentUpgradeDetails",
        model.SnoozeDeploymentUpgradeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SnoozeDeploymentUpgradeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Starts a Deployment. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StartDeploymentRequest
   * @return StartDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/StartDeployment.ts.html |here} to see how to use StartDeployment API.
   */
  public async startDeployment(
    startDeploymentRequest: requests.StartDeploymentRequest
  ): Promise<responses.StartDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#startDeployment.");
    const operationName = "startDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/StartDeployment";
    const pathParams = {
      "{deploymentId}": startDeploymentRequest.deploymentId
    };

    const queryParams = {
      "isLockOverride": startDeploymentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": startDeploymentRequest.ifMatch,
      "opc-request-id": startDeploymentRequest.opcRequestId,
      "opc-retry-token": startDeploymentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/start",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        startDeploymentRequest.startDeploymentDetails,
        "StartDeploymentDetails",
        model.StartDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Starts the pipeline for data replication.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StartPipelineRequest
   * @return StartPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/StartPipeline.ts.html |here} to see how to use StartPipeline API.
   */
  public async startPipeline(
    startPipelineRequest: requests.StartPipelineRequest
  ): Promise<responses.StartPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#startPipeline.");
    const operationName = "startPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/StartPipeline";
    const pathParams = {
      "{pipelineId}": startPipelineRequest.pipelineId
    };

    const queryParams = {
      "isLockOverride": startPipelineRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": startPipelineRequest.ifMatch,
      "opc-request-id": startPipelineRequest.opcRequestId,
      "opc-retry-token": startPipelineRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines/{pipelineId}/actions/start",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        startPipelineRequest.startPipelineDetails,
        "StartPipelineDetails",
        model.StartPipelineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartPipelineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stops a Deployment. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StopDeploymentRequest
   * @return StopDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/StopDeployment.ts.html |here} to see how to use StopDeployment API.
   */
  public async stopDeployment(
    stopDeploymentRequest: requests.StopDeploymentRequest
  ): Promise<responses.StopDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#stopDeployment.");
    const operationName = "stopDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/StopDeployment";
    const pathParams = {
      "{deploymentId}": stopDeploymentRequest.deploymentId
    };

    const queryParams = {
      "isLockOverride": stopDeploymentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": stopDeploymentRequest.ifMatch,
      "opc-request-id": stopDeploymentRequest.opcRequestId,
      "opc-retry-token": stopDeploymentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/stop",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        stopDeploymentRequest.stopDeploymentDetails,
        "StopDeploymentDetails",
        model.StopDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stops the pipeline for data replication.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StopPipelineRequest
   * @return StopPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/StopPipeline.ts.html |here} to see how to use StopPipeline API.
   */
  public async stopPipeline(
    stopPipelineRequest: requests.StopPipelineRequest
  ): Promise<responses.StopPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#stopPipeline.");
    const operationName = "stopPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/StopPipeline";
    const pathParams = {
      "{pipelineId}": stopPipelineRequest.pipelineId
    };

    const queryParams = {
      "isLockOverride": stopPipelineRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": stopPipelineRequest.ifMatch,
      "opc-request-id": stopPipelineRequest.opcRequestId,
      "opc-retry-token": stopPipelineRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines/{pipelineId}/actions/stop",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        stopPipelineRequest.stopPipelineDetails,
        "StopPipelineDetails",
        model.StopPipelineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopPipelineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Switchover to the selected standby peer, which can be a local placement or a standby deployment in different region. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SwitchoverDeploymentPeerRequest
   * @return SwitchoverDeploymentPeerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/SwitchoverDeploymentPeer.ts.html |here} to see how to use SwitchoverDeploymentPeer API.
   */
  public async switchoverDeploymentPeer(
    switchoverDeploymentPeerRequest: requests.SwitchoverDeploymentPeerRequest
  ): Promise<responses.SwitchoverDeploymentPeerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#switchoverDeploymentPeer.");
    const operationName = "switchoverDeploymentPeer";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/SwitchoverDeploymentPeer";
    const pathParams = {
      "{deploymentId}": switchoverDeploymentPeerRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": switchoverDeploymentPeerRequest.ifMatch,
      "opc-request-id": switchoverDeploymentPeerRequest.opcRequestId,
      "opc-retry-token": switchoverDeploymentPeerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      switchoverDeploymentPeerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/switchover",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        switchoverDeploymentPeerRequest.switchoverDeploymentPeerDetails,
        "SwitchoverDeploymentPeerDetails",
        model.SwitchoverDeploymentPeerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SwitchoverDeploymentPeerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Tests the connectivity between given GoldenGate deployment and one of the associated database / service.
   * When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param TestConnectionAssignmentRequest
   * @return TestConnectionAssignmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/TestConnectionAssignment.ts.html |here} to see how to use TestConnectionAssignment API.
   */
  public async testConnectionAssignment(
    testConnectionAssignmentRequest: requests.TestConnectionAssignmentRequest
  ): Promise<responses.TestConnectionAssignmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#testConnectionAssignment.");
    const operationName = "testConnectionAssignment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/ConnectionAssignment/TestConnectionAssignment";
    const pathParams = {
      "{connectionAssignmentId}": testConnectionAssignmentRequest.connectionAssignmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": testConnectionAssignmentRequest.ifMatch,
      "opc-request-id": testConnectionAssignmentRequest.opcRequestId,
      "opc-retry-token": testConnectionAssignmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      testConnectionAssignmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connectionAssignments/{connectionAssignmentId}/actions/test",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        testConnectionAssignmentRequest.testConnectionAssignmentDetails,
        "TestConnectionAssignmentDetails",
        model.TestConnectionAssignmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.TestConnectionAssignmentResponse>{},
        body: await response.json(),
        bodyKey: "testConnectionAssignmentResult",
        bodyModel: model.TestConnectionAssignmentResult,
        type: "model.TestConnectionAssignmentResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Tests pipeline connections against pipeline to verify the connectivity.
   * When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param TestPipelineConnectionRequest
   * @return TestPipelineConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/TestPipelineConnection.ts.html |here} to see how to use TestPipelineConnection API.
   */
  public async testPipelineConnection(
    testPipelineConnectionRequest: requests.TestPipelineConnectionRequest
  ): Promise<responses.TestPipelineConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#testPipelineConnection.");
    const operationName = "testPipelineConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/TestPipelineConnection";
    const pathParams = {
      "{pipelineId}": testPipelineConnectionRequest.pipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": testPipelineConnectionRequest.opcRequestId,
      "if-match": testPipelineConnectionRequest.ifMatch,
      "opc-retry-token": testPipelineConnectionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      testPipelineConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines/{pipelineId}/actions/testConnection",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        testPipelineConnectionRequest.testPipelineConnectionDetails,
        "TestPipelineConnectionDetails",
        model.TestPipelineConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.TestPipelineConnectionResponse>{},
        body: await response.json(),
        bodyKey: "testPipelineConnectionResult",
        bodyModel: model.TestPipelineConnectionResult,
        type: "model.TestPipelineConnectionResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Connection.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateConnectionRequest
   * @return UpdateConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/UpdateConnection.ts.html |here} to see how to use UpdateConnection API.
   */
  public async updateConnection(
    updateConnectionRequest: requests.UpdateConnectionRequest
  ): Promise<responses.UpdateConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#updateConnection.");
    const operationName = "updateConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Connection/UpdateConnection";
    const pathParams = {
      "{connectionId}": updateConnectionRequest.connectionId
    };

    const queryParams = {
      "isLockOverride": updateConnectionRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateConnectionRequest.ifMatch,
      "opc-request-id": updateConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateConnectionRequest.updateConnectionDetails,
        "UpdateConnectionDetails",
        model.UpdateConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Note: Deprecated. Use the /connections API instead.
   * Updates the DatabaseRegistration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDatabaseRegistrationRequest
   * @return UpdateDatabaseRegistrationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/UpdateDatabaseRegistration.ts.html |here} to see how to use UpdateDatabaseRegistration API.
   */
  public async updateDatabaseRegistration(
    updateDatabaseRegistrationRequest: requests.UpdateDatabaseRegistrationRequest
  ): Promise<responses.UpdateDatabaseRegistrationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#updateDatabaseRegistration.");
    const operationName = "updateDatabaseRegistration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DatabaseRegistration/UpdateDatabaseRegistration";
    const pathParams = {
      "{databaseRegistrationId}": updateDatabaseRegistrationRequest.databaseRegistrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDatabaseRegistrationRequest.ifMatch,
      "opc-request-id": updateDatabaseRegistrationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDatabaseRegistrationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseRegistrations/{databaseRegistrationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDatabaseRegistrationRequest.updateDatabaseRegistrationDetails,
        "UpdateDatabaseRegistrationDetails",
        model.UpdateDatabaseRegistrationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDatabaseRegistrationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("sunset"),
            key: "sunset",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies a Deployment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDeploymentRequest
   * @return UpdateDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/UpdateDeployment.ts.html |here} to see how to use UpdateDeployment API.
   */
  public async updateDeployment(
    updateDeploymentRequest: requests.UpdateDeploymentRequest
  ): Promise<responses.UpdateDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#updateDeployment.");
    const operationName = "updateDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/UpdateDeployment";
    const pathParams = {
      "{deploymentId}": updateDeploymentRequest.deploymentId
    };

    const queryParams = {
      "isLockOverride": updateDeploymentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDeploymentRequest.ifMatch,
      "opc-request-id": updateDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeploymentRequest.updateDeploymentDetails,
        "UpdateDeploymentDetails",
        model.UpdateDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies a Deployment Backup.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDeploymentBackupRequest
   * @return UpdateDeploymentBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/UpdateDeploymentBackup.ts.html |here} to see how to use UpdateDeploymentBackup API.
   */
  public async updateDeploymentBackup(
    updateDeploymentBackupRequest: requests.UpdateDeploymentBackupRequest
  ): Promise<responses.UpdateDeploymentBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#updateDeploymentBackup.");
    const operationName = "updateDeploymentBackup";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentBackup/UpdateDeploymentBackup";
    const pathParams = {
      "{deploymentBackupId}": updateDeploymentBackupRequest.deploymentBackupId
    };

    const queryParams = {
      "isLockOverride": updateDeploymentBackupRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDeploymentBackupRequest.ifMatch,
      "opc-request-id": updateDeploymentBackupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDeploymentBackupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentBackups/{deploymentBackupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeploymentBackupRequest.updateDeploymentBackupDetails,
        "UpdateDeploymentBackupDetails",
        model.UpdateDeploymentBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeploymentBackupResponse>{},
        body: await response.json(),
        bodyKey: "deploymentBackup",
        bodyModel: model.DeploymentBackup,
        type: "model.DeploymentBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Pipeline.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdatePipelineRequest
   * @return UpdatePipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/UpdatePipeline.ts.html |here} to see how to use UpdatePipeline API.
   */
  public async updatePipeline(
    updatePipelineRequest: requests.UpdatePipelineRequest
  ): Promise<responses.UpdatePipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#updatePipeline.");
    const operationName = "updatePipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Pipeline/UpdatePipeline";
    const pathParams = {
      "{pipelineId}": updatePipelineRequest.pipelineId
    };

    const queryParams = {
      "isLockOverride": updatePipelineRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updatePipelineRequest.ifMatch,
      "opc-request-id": updatePipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/pipelines/{pipelineId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePipelineRequest.updatePipelineDetails,
        "UpdatePipelineDetails",
        model.UpdatePipelineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePipelineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Upgrade a Deployment. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpgradeDeploymentRequest
   * @return UpgradeDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/UpgradeDeployment.ts.html |here} to see how to use UpgradeDeployment API.
   */
  public async upgradeDeployment(
    upgradeDeploymentRequest: requests.UpgradeDeploymentRequest
  ): Promise<responses.UpgradeDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation GoldenGateClient#upgradeDeployment.");
    const operationName = "upgradeDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/Deployment/UpgradeDeployment";
    const pathParams = {
      "{deploymentId}": upgradeDeploymentRequest.deploymentId
    };

    const queryParams = {
      "isLockOverride": upgradeDeploymentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": upgradeDeploymentRequest.ifMatch,
      "opc-request-id": upgradeDeploymentRequest.opcRequestId,
      "opc-retry-token": upgradeDeploymentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      upgradeDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/upgrade",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        upgradeDeploymentRequest.upgradeDeploymentDetails,
        "UpgradeDeploymentDetails",
        model.UpgradeDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpgradeDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Upgrade a deployment. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpgradeDeploymentUpgradeRequest
   * @return UpgradeDeploymentUpgradeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/goldengate/UpgradeDeploymentUpgrade.ts.html |here} to see how to use UpgradeDeploymentUpgrade API.
   */
  public async upgradeDeploymentUpgrade(
    upgradeDeploymentUpgradeRequest: requests.UpgradeDeploymentUpgradeRequest
  ): Promise<responses.UpgradeDeploymentUpgradeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation GoldenGateClient#upgradeDeploymentUpgrade.");
    const operationName = "upgradeDeploymentUpgrade";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/goldengate/20200407/DeploymentUpgrade/UpgradeDeploymentUpgrade";
    const pathParams = {
      "{deploymentUpgradeId}": upgradeDeploymentUpgradeRequest.deploymentUpgradeId
    };

    const queryParams = {
      "isLockOverride": upgradeDeploymentUpgradeRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": upgradeDeploymentUpgradeRequest.ifMatch,
      "opc-request-id": upgradeDeploymentUpgradeRequest.opcRequestId,
      "opc-retry-token": upgradeDeploymentUpgradeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      upgradeDeploymentUpgradeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deploymentUpgrades/{deploymentUpgradeId}/actions/upgrade",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        upgradeDeploymentUpgradeRequest.upgradeDeploymentUpgradeDetails,
        "UpgradeDeploymentUpgradeDetails",
        model.UpgradeDeploymentUpgradeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpgradeDeploymentUpgradeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
