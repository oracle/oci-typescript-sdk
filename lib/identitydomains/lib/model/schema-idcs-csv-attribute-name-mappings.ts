/**
 * Identity Domains API
 * Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm).
Use this pattern to construct endpoints for identity domains: `https://<domainURL>/admin/v1/`. See [Finding an Identity Domain URL](https://docs.oracle.com/en-us/iaas/Content/Identity/api-getstarted/locate-identity-domain-url.htm) to locate the domain URL you need.
Use the table of contents and search tool to explore the Identity Domains API.
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Csv meta data for those resource type attributes which can be imported / exported from / to csv.
 */
export interface SchemaIdcsCsvAttributeNameMappings {
  /**
   * The CSV column header name that maps to this attribute.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "columnHeaderName"?: string;
  /**
   * The deprecated CSV column header name that maps to this attribute.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "deprecatedColumnHeaderName"?: string;
  /**
   * The attribute path that the CSV column header name maps to for complex multi-valued attributes.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "mapsTo"?: string;
  /**
   * The default value to be used during import processing in case the CSV column header is not present or value is not given in the import CSV.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "defaultValue"?: string;
  /**
   * If values of the CSV column header name can contain multiple values, this attribute specifies the delimiter to be used. For example, Group's \\\"User Members\\\" CSV column header is multi-valued and it's delimiter is a semi-colon (\\\";\\\").
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "multiValueDelimiter"?: string;
  /**
   * This specifies the Csv Header for resolving Resource Type for this Column Header
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "csvColumnForResolvingResourceType"?: string;
  /**
   * This attribute gives a maps for resolving Resource Type after reading it's value from \\\"csvColumnForResolvingResourceType\\\" attribute
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: complex
   *  - uniqueness: none
   */
  "resolveValueUsingResourceType"?: Array<model.SchemaResolveValueUsingResourceType>;
  /**
   * This attribute specifies the mapping of \\\"uniqueAttributeNameForDisplay\\\" attributes(s) of the referenced resource with the columnHeaderName(s). This attribute should be given in the idcsCsvAttributeNameMappings when uniqueAttributeNameForDisplay contains more than one attribute.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: complex
   *  - uniqueness: none
   */
  "referencedResourceTypeUniqueAttributeNameMappings"?: Array<
    model.SchemaReferencedResourceTypeUniqueAttributeNameMappings
  >;
}

export namespace SchemaIdcsCsvAttributeNameMappings {
  export function getJsonObj(obj: SchemaIdcsCsvAttributeNameMappings): object {
    const jsonObj = {
      ...obj,
      ...{
        "resolveValueUsingResourceType": obj.resolveValueUsingResourceType
          ? obj.resolveValueUsingResourceType.map(item => {
              return model.SchemaResolveValueUsingResourceType.getJsonObj(item);
            })
          : undefined,
        "referencedResourceTypeUniqueAttributeNameMappings": obj.referencedResourceTypeUniqueAttributeNameMappings
          ? obj.referencedResourceTypeUniqueAttributeNameMappings.map(item => {
              return model.SchemaReferencedResourceTypeUniqueAttributeNameMappings.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: SchemaIdcsCsvAttributeNameMappings): object {
    const jsonObj = {
      ...obj,
      ...{
        "resolveValueUsingResourceType": obj.resolveValueUsingResourceType
          ? obj.resolveValueUsingResourceType.map(item => {
              return model.SchemaResolveValueUsingResourceType.getDeserializedJsonObj(item);
            })
          : undefined,
        "referencedResourceTypeUniqueAttributeNameMappings": obj.referencedResourceTypeUniqueAttributeNameMappings
          ? obj.referencedResourceTypeUniqueAttributeNameMappings.map(item => {
              return model.SchemaReferencedResourceTypeUniqueAttributeNameMappings.getDeserializedJsonObj(
                item
              );
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
