/**
 * Identity Domains API
 * Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm).
Use this pattern to construct endpoints for identity domains: `https://<domainURL>/admin/v1/`. See [Finding an Identity Domain URL](https://docs.oracle.com/en-us/iaas/Content/Identity/api-getstarted/locate-identity-domain-url.htm) to locate the domain URL you need.
Use the table of contents and search tool to explore the Identity Domains API.
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * ResourceTypeSchemaAttribute Schema Definition
 */
export interface ResourceTypeSchemaAttribute {
  /**
   * Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: always
   *  - type: string
   *  - uniqueness: global
   */
  "id"?: string;
  /**
   * Unique OCI identifier for the SCIM Resource.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: immutable
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: global
   */
  "ocid"?: string;
  /**
   * REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "schemas": Array<string>;
  "meta"?: model.Meta;
  "idcsCreatedBy"?: model.IdcsCreatedBy;
  "idcsLastModifiedBy"?: model.IdcsLastModifiedBy;
  /**
   * Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: true
   *  - mutability: readOnly
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "idcsPreventedOperations"?: Array<ResourceTypeSchemaAttribute.IdcsPreventedOperations>;
  /**
   * A list of tags on this resource.
   * <p>
   **SCIM++ Properties:**
   *  - idcsCompositeKey: [key, value]
   *  - idcsSearchable: true
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: request
   *  - type: complex
   *  - uniqueness: none
   */
  "tags"?: Array<model.Tags>;
  /**
   * A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "deleteInProgress"?: boolean;
  /**
   * The release number when the resource was upgraded.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "idcsLastUpgradedInRelease"?: string;
  /**
   * OCI Domain Id (ocid) in which the resource lives.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "domainOcid"?: string;
  /**
   * OCI Compartment Id (ocid) in which the resource lives.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "compartmentOcid"?: string;
  /**
   * OCI Tenant Id (ocid) in which the resource lives.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "tenancyOcid"?: string;
  /**
   * Attribute's name
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - idcsSearchable: true
   *  - type: string
   *  - uniqueness: none
   */
  "name"?: string;
  /**
   * Localized schema attribute display name for use by UI client  for displaying attribute labels
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - idcsSearchable: true
   *  - type: string
   *  - uniqueness: none
   */
  "idcsDisplayNameMessageId"?: string;
  /**
   * ResourceType this attribute belongs to.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - idcsSearchable: true
   *  - uniqueness: none
   */
  "resourceType"?: string;
  /**
   * Schema URN string that this attribute belongs to
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - idcsSearchable: true
   *  - uniqueness: none
   */
  "idcsSchemaUrn"?: string;
  /**
   * Fully qualified name of this attribute
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - idcsSearchable: true
   *  - uniqueness: none
   */
  "idcsFullyQualifiedName"?: string;
  /**
   * custom attribute flag.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - idcsSearchable: true
   *  - uniqueness: none
   */
  "idcsCustomAttribute"?: boolean;
  /**
   * The attribute's data type--for example, String
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "type"?: ResourceTypeSchemaAttribute.Type;
  /**
   * Indicates the attribute's plurality
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: boolean
   */
  "multiValued"?: boolean;
  /**
   * The attribute's human-readable description
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - idcsSearchable: true
   *  - type: string
   *  - uniqueness: none
   */
  "description"?: string;
  /**
   * Specifies if the attribute is required
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: boolean
   */
  "required"?: boolean;
  /**
   * A collection of canonical values. Applicable Service Providers MUST specify the canonical types specified in the core schema specification--for example, \\\"work\\\", \\\"home\\\".
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "canonicalValues"?: Array<string>;
  /**
   * Specifies if the String attribute is case-sensitive
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: boolean
   */
  "caseExact"?: boolean;
  /**
   * Specifies if the attribute is mutable
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - idcsSearchable: true
   *  - type: string
   *  - uniqueness: none
   */
  "mutability"?: ResourceTypeSchemaAttribute.Mutability;
  /**
   * Specifies User mutability for this attribute
   * <p>
   **Added In:** 18.2.6
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "endUserMutability"?: ResourceTypeSchemaAttribute.EndUserMutability;
  /**
   * Specifies the list of User mutabilities allowed
   * <p>
   **Added In:** 18.2.6
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: true
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "endUserMutabilityAllowedValues"?: Array<
    ResourceTypeSchemaAttribute.EndUserMutabilityAllowedValues
  >;
  /**
   * A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - idcsSearchable: true
   *  - type: string
   *  - uniqueness: none
   */
  "returned"?: ResourceTypeSchemaAttribute.Returned;
  /**
   * A single keyword value that specifies how the Service Provider enforces uniqueness of attribute values. A server MAY reject an invalid value based on uniqueness by returning an HTTP response code of 400 (Bad Request). A client MAY enforce uniqueness on the client side to a greater degree than the Service Provider enforces. For example, a client could make a value unique while the server has the uniqueness of \\\"none\\\".
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - required: false
   *  - returned: default
   *  - idcsSearchable: true
   *  - type: string
   *  - uniqueness: none
   */
  "uniqueness"?: ResourceTypeSchemaAttribute.Uniqueness;
  /**
   * The attribute defining the CSV column header name for import/export
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsCsvColumnHeaderName"?: string;
  /**
   * Maps to ICF target attribute name
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsICFBundleAttributeName"?: string;
  /**
   * Metadata to identify the ICF required attribute
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "idcsICFRequired"?: boolean;
  /**
   * Maps to ICF data type
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - idcsSearchable: true
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsICFAttributeType"?: ResourceTypeSchemaAttribute.IdcsICFAttributeType;
  /**
   * The names of the Resource types that may be referenced--for example, User. This is only applicable for attributes that are of the \\\"reference\\\" data type.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "referenceTypes"?: Array<string>;
  /**
   * Indicates that the schema has been deprecated since version
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsDeprecatedSinceVersion"?: number;
  /**
   * Indicates that the schema has been added since version
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsAddedSinceVersion"?: number;
  /**
   * Indicates that the schema has been deprecated since this release number
   * <p>
   **Added In:** 17.3.4
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - idcsSearchable: true
   *  - required: false
   *  - returned: default
   *  - type: string
   */
  "idcsDeprecatedSinceReleaseNumber"?: string;
  /**
   * Indicates that the schema has been added since this release number
   * <p>
   **Added In:** 17.3.4
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - idcsSearchable: true
   *  - required: false
   *  - returned: default
   *  - type: string
   */
  "idcsAddedSinceReleaseNumber"?: string;
  /**
   * Specifies the minimum length of the attribute
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - idcsSearchable: true
   *  - required: false
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsMinLength"?: number;
  /**
   * Specifies the maximum length of the attribute
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsMaxLength"?: number;
  /**
   * Specifies the minimum value of the integer attribute
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsMinValue"?: number;
  /**
   * Specifies the maximum value of the integer attribute
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readOnly
   *  - idcsSearchable: true
   *  - required: false
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsMaxValue"?: number;
  /**
   * If true, specifies that the attribute can have multiple language values set for the attribute on which this is set.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - idcsSearchable: true
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "idcsMultiLanguage"?: boolean;
  /**
   * Specifies the directly referenced Resources
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   */
  "idcsRefResourceAttributes"?: Array<string>;
  /**
   * Specifies the indirectly referenced Resources
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   */
  "idcsIndirectRefResourceAttributes"?: Array<string>;
  /**
   * Sequence tracking ID name for the attribute
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   */
  "idcsAutoIncrementSeqName"?: string;
  /**
   * Specifies whether the value of the Resource attribute is persisted
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: boolean
   */
  "idcsValuePersisted"?: boolean;
  /**
   * Flag to specify if the attribute should be encrypted or hashed
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsSensitive"?: ResourceTypeSchemaAttribute.IdcsSensitive;
  /**
   * Specifies whether the schema attribute is for internal use only. Internal attributes are not exposed via REST. This attribute overrides mutability for create/update if the request is internal and the attribute internalflag is set to True. This attribute overrides the return attribute while building SCIM response attributes when both the request is internal and the schema attribute is internal.
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: boolean
   */
  "idcsInternal"?: boolean;
  /**
   * Trims any leading and trailing blanks from String values. Default is True.
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: boolean
   */
  "idcsTrimStringValue"?: boolean;
  /**
   * Specifies whether this attribute can be included in a search filter
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: boolean
   */
  "idcsSearchable"?: boolean;
  /**
   * Specifies whether this attribute value was generated
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: boolean
   */
  "idcsGenerated"?: boolean;
  /**
   * Specifies whether changes to this attribute value are audited
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - idcsSearchable: true
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsAuditable"?: boolean;
  /**
   * Target attribute name that this attribute gets mapped to for persistence
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsTargetAttributeName"?: string;
  /**
   * Target index name created for this attribute for performance
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsTargetUniqueConstraintName"?: string;
  /**
   * Target normalized attribute name that this normalized value of attribute gets mapped to for persistence. Only set for caseExact=false & searchable attributes. Do not use by default.
   * <p>
   **Added In:** 19.1.4
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsTargetNormAttributeName"?: string;
  /**
   * Old Target attribute name from child table for CSVA attribute prior to migration. This maintains this attribute used to get mapped to for persistence
   * <p>
   **Added In:** 19.1.4
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsTargetAttributeNameToMigrateFrom"?: string;
  /**
   * Specifies the mapper to use when mapping this attribute value to DataProvider-specific semantics
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsToTargetMapper"?: string;
  /**
   * Specifies the mapper to use when mapping this attribute value from DataProvider-specific semantics
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsFromTargetMapper"?: string;
  /**
   * Specifies the user-friendly displayable attribute name or catalog key used for localization
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - idcsSearchable: true
   *  - type: string
   *  - uniqueness: none
   */
  "idcsDisplayName"?: string;
  /**
   * Specifies the Resource type to read from for dynamic canonical values
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsCanonicalValueSourceResourceType"?: string;
  /**
   * Filter to use when getting canonical values for this schema attribute
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsCanonicalValueSourceFilter"?: string;
  /**
   * Validate payload reference value during create, replace, and update. Default is True.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "idcsValidateReference"?: boolean;
  /**
   * The set of one or more sub attributes' names of a CMVA, whose values uniquely identify an instance of a CMVA
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsCompositeKey"?: Array<string>;
  /**
   * **SCIM++ Properties:**
   * - caseExact: false
   * - multiValued: false
   * - mutability: readOnly
   * - required: false
   * - idcsSearchable: true
   * - returned: default
   * - type: boolean
   * - uniqueness: none
   * Whether the CMVA attribute will be fetched or not for current resource in AbstractResourceManager update operation before calling data provider update. Default is true.
   */
  "idcsFetchComplexAttributeValues"?: boolean;
  /**
   * Indicates if the attribute is scim compliant, default is true
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readOnly
   *  - idcsSearchable: true
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsScimCompliant"?: boolean;
  /**
   * Specifies if the attribute can be used for mapping with external identity sources such as AD or LDAP. If isSchemaMappable: false for the schema in which this attribute is defined, then this flag is ignored
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - idcsSearchable: true
   *  - returned: default
   *  - type: boolean
   */
  "idcsAttributeMappable"?: boolean;
  /**
   * Specifies the referenced Resource attribute
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - idcsSearchable: true
   *  - required: false
   *  - returned: default
   *  - type: string
   */
  "idcsRefResourceAttribute"?: string;
  /**
   * Specifies whether the attribute is cacheable. True by default for all attributes. If attribute with idcsAttributeCachable = false, is present \\\"attributesToGet\\\" while executing GET/SEARCH on cacheable resource, Cache is missed and data is fetched from Data Provider.
   * <p>
   **Added In:** 17.3.4
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - idcsSearchable: true
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsAttributeCacheable"?: boolean;
}

export namespace ResourceTypeSchemaAttribute {
  export enum IdcsPreventedOperations {
    Replace = "replace",
    Update = "update",
    Delete = "delete",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Type {
    String = "string",
    Complex = "complex",
    Boolean = "boolean",
    Decimal = "decimal",
    Integer = "integer",
    DateTime = "dateTime",
    Reference = "reference",
    Binary = "binary",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Mutability {
    ReadOnly = "readOnly",
    ReadWrite = "readWrite",
    Immutable = "immutable",
    WriteOnly = "writeOnly",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum EndUserMutability {
    ReadOnly = "readOnly",
    ReadWrite = "readWrite",
    Immutable = "immutable",
    Hidden = "hidden",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum EndUserMutabilityAllowedValues {
    ReadOnly = "readOnly",
    ReadWrite = "readWrite",
    Immutable = "immutable",
    Hidden = "hidden",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Returned {
    Always = "always",
    Never = "never",
    Default = "default",
    Request = "request",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Uniqueness {
    None = "none",
    Server = "server",
    Global = "global",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum IdcsICFAttributeType {
    String = "string",
    Long = "long",
    Char = "char",
    Double = "double",
    Float = "float",
    Integer = "integer",
    Boolean = "boolean",
    Bytes = "bytes",
    Bigdecimal = "bigdecimal",
    Biginteger = "biginteger",
    Guardedbytes = "guardedbytes",
    Guardedstring = "guardedstring",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum IdcsSensitive {
    Encrypt = "encrypt",
    Hash = "hash",
    HashSc = "hash_sc",
    Checksum = "checksum",
    None = "none",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ResourceTypeSchemaAttribute): object {
    const jsonObj = {
      ...obj,
      ...{
        "meta": obj.meta ? model.Meta.getJsonObj(obj.meta) : undefined,
        "idcsCreatedBy": obj.idcsCreatedBy
          ? model.IdcsCreatedBy.getJsonObj(obj.idcsCreatedBy)
          : undefined,
        "idcsLastModifiedBy": obj.idcsLastModifiedBy
          ? model.IdcsLastModifiedBy.getJsonObj(obj.idcsLastModifiedBy)
          : undefined,

        "tags": obj.tags
          ? obj.tags.map(item => {
              return model.Tags.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ResourceTypeSchemaAttribute): object {
    const jsonObj = {
      ...obj,
      ...{
        "meta": obj.meta ? model.Meta.getDeserializedJsonObj(obj.meta) : undefined,
        "idcsCreatedBy": obj.idcsCreatedBy
          ? model.IdcsCreatedBy.getDeserializedJsonObj(obj.idcsCreatedBy)
          : undefined,
        "idcsLastModifiedBy": obj.idcsLastModifiedBy
          ? model.IdcsLastModifiedBy.getDeserializedJsonObj(obj.idcsLastModifiedBy)
          : undefined,

        "tags": obj.tags
          ? obj.tags.map(item => {
              return model.Tags.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
