/**
 * Identity Domains API
 * Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm).
Use this pattern to construct endpoints for identity domains: `https://<domainURL>/admin/v1/`. See [Finding an Identity Domain URL](https://docs.oracle.com/en-us/iaas/Content/Identity/api-getstarted/locate-identity-domain-url.htm) to locate the domain URL you need.
Use the table of contents and search tool to explore the Identity Domains API.
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Schema for Database Service  Resource
 */
export interface ExtensionDbcsGroup {
  /**
   * DBCS instance-level schema-names. Each schema-name is specific to a DB Instance.
   * <p>
   **Added In:** 18.2.4
   * <p>
   **SCIM++ Properties:**
   *  - idcsCompositeKey: [dbInstanceId, schemaName]
   *  - idcsSearchable: true
   *  - multiValued: true
   *  - mutability: readOnly
   *  - required: false
   *  - returned: request
   *  - type: complex
   */
  "instanceLevelSchemaNames"?: Array<model.GroupExtInstanceLevelSchemaNames>;
  /**
   * DBCS Domain-level schema-names. Each value is specific to a DB Domain.
   * <p>
   **Added In:** 18.2.4
   * <p>
   **SCIM++ Properties:**
   *  - idcsCompositeKey: [domainName, schemaName]
   *  - idcsSearchable: true
   *  - multiValued: true
   *  - mutability: readOnly
   *  - required: false
   *  - returned: request
   *  - type: complex
   */
  "domainLevelSchemaNames"?: Array<model.GroupExtDomainLevelSchemaNames>;
  /**
   * DBCS Domain-level schema-name.  This attribute refers implicitly to a value of 'domainLevelSchemaNames' for a particular DB Domain.
   * <p>
   **Added In:** 18.2.4
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - idcsSensitive: none
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "domainLevelSchema"?: string;
  /**
   * DBCS instance-level schema-name. This attribute refers implicitly to a value of 'instanceLevelSchemaNames' for a particular DB Instance.
   * <p>
   **Added In:** 18.2.4
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - idcsSensitive: none
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "instanceLevelSchema"?: string;
}

export namespace ExtensionDbcsGroup {
  export function getJsonObj(obj: ExtensionDbcsGroup): object {
    const jsonObj = {
      ...obj,
      ...{
        "instanceLevelSchemaNames": obj.instanceLevelSchemaNames
          ? obj.instanceLevelSchemaNames.map(item => {
              return model.GroupExtInstanceLevelSchemaNames.getJsonObj(item);
            })
          : undefined,
        "domainLevelSchemaNames": obj.domainLevelSchemaNames
          ? obj.domainLevelSchemaNames.map(item => {
              return model.GroupExtDomainLevelSchemaNames.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ExtensionDbcsGroup): object {
    const jsonObj = {
      ...obj,
      ...{
        "instanceLevelSchemaNames": obj.instanceLevelSchemaNames
          ? obj.instanceLevelSchemaNames.map(item => {
              return model.GroupExtInstanceLevelSchemaNames.getDeserializedJsonObj(item);
            })
          : undefined,
        "domainLevelSchemaNames": obj.domainLevelSchemaNames
          ? obj.domainLevelSchemaNames.map(item => {
              return model.GroupExtDomainLevelSchemaNames.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
