/**
 * Identity Domains API
 * Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm).
Use this pattern to construct endpoints for identity domains: `https://<domainURL>/admin/v1/`. See [Finding an Identity Domain URL](https://docs.oracle.com/en-us/iaas/Content/Identity/api-getstarted/locate-identity-domain-url.htm) to locate the domain URL you need.
Use the table of contents and search tool to explore the Identity Domains API.
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Device Resource.
 */
export interface MyDevice {
  /**
   * Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: always
   *  - type: string
   *  - uniqueness: global
   */
  "id"?: string;
  /**
   * Unique OCI identifier for the SCIM Resource.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: immutable
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: global
   */
  "ocid"?: string;
  /**
   * REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "schemas": Array<string>;
  "meta"?: model.Meta;
  "idcsCreatedBy"?: model.IdcsCreatedBy;
  "idcsLastModifiedBy"?: model.IdcsLastModifiedBy;
  /**
   * Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: true
   *  - mutability: readOnly
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "idcsPreventedOperations"?: Array<MyDevice.IdcsPreventedOperations>;
  /**
   * A list of tags on this resource.
   * <p>
   **SCIM++ Properties:**
   *  - idcsCompositeKey: [key, value]
   *  - idcsSearchable: true
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: request
   *  - type: complex
   *  - uniqueness: none
   */
  "tags"?: Array<model.Tags>;
  /**
   * A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "deleteInProgress"?: boolean;
  /**
   * The release number when the resource was upgraded.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "idcsLastUpgradedInRelease"?: string;
  /**
   * OCI Domain Id (ocid) in which the resource lives.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "domainOcid"?: string;
  /**
   * OCI Compartment Id (ocid) in which the resource lives.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "compartmentOcid"?: string;
  /**
   * OCI Tenant Id (ocid) in which the resource lives.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "tenancyOcid"?: string;
  /**
   * An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued be the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "externalId"?: string;
  /**
   * Device friendly display name
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   */
  "displayName"?: string;
  /**
   * Device Platform
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: immutable
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "platform"?: MyDevice.Platform;
  /**
   * Device Status
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   */
  "status"?: MyDevice.Status;
  /**
   * Additional comments/reasons for the change in device status
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "reason"?: string;
  /**
   * Device hardware name/model
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   */
  "deviceType"?: string;
  /**
   * Mobile Authenticator App Version
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   */
  "appVersion"?: string;
  /**
   * Mobile Authenticator App Package Id
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   */
  "packageId"?: string;
  /**
   * Last Sync time for device
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   *  - required: false
   *  - returned: default
   *  - type: dateTime
   *  - uniqueness: none
   */
  "lastSyncTime"?: string;
  /**
   * The most recent timestamp when the device was successfully validated using one time passcode
   * <p>
   **Added In:** 17.3.6
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - idcsAllowUpdatesInReadOnlyMode: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   *  - required: false
   *  - returned: default
   *  - type: dateTime
   *  - uniqueness: none
   */
  "lastValidatedTime"?: string;
  /**
   * Device Compliance Status
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "isCompliant"?: boolean;
  /**
   * Country code of user's Phone Number
   * <p>
   **Added In:** 19.1.4
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: immutable
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   */
  "countryCode"?: string;
  /**
   * User's Phone Number
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: immutable
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   */
  "phoneNumber"?: string;
  /**
   * Flag that indicates whether the device is enrolled for account recovery
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   */
  "isAccRecEnabled"?: boolean;
  /**
   * Unique id sent from device
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   */
  "deviceUUID"?: string;
  /**
   * Device base public Key
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   */
  "basePublicKey"?: string;
  /**
   * Authentication method used in device. For FIDO, it will contain SECURITY_KEY/WINDOWS_HELLO etc
   * <p>
   **Added In:** 2009232244
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   *  - idcsRequiresWriteForAccessFlows: true
   *  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
   */
  "authenticationMethod"?: string;
  /**
   * Attribute added for replication log, it is not used by IDCS, just added as place holder
   * <p>
   **Added In:** 2111040242
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: integer
   *  - uniqueness: none Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "expiresOn"?: number;
  /**
   * Attribute added for replication log, it is not used by IDCS, the DEK that encrypts the specific seed for that user
   * <p>
   **Added In:** 2111040242
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "seedDekId"?: string;
  /**
   * Attribute added for replication log, it is not used by IDCS, it is actual encrypted TOTP seed for the user
   * <p>
   **Added In:** 2111040242
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "seed"?: string;
  "thirdPartyFactor"?: model.MyDeviceThirdPartyFactor;
  "user": model.MyDeviceUser;
  "pushNotificationTarget"?: model.MyDevicePushNotificationTarget;
  /**
   * Device additional attributes
   * <p>
   **SCIM++ Properties:**
   *  - idcsCompositeKey: [key, value]
   *  - idcsSearchable: false
   *  - multiValued: true
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: complex
   */
  "additionalAttributes"?: Array<model.MyDeviceAdditionalAttributes>;
  /**
   * Authentication Factors
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsCompositeKey: [type]
   *  - idcsSearchable: true
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: true
   *  - returned: default
   *  - type: complex
   */
  "authenticationFactors": Array<model.MyDeviceAuthenticationFactors>;
  /**
   * Device Non Compliances
   * <p>
   **SCIM++ Properties:**
   *  - idcsCompositeKey: [name, value]
   *  - idcsSearchable: false
   *  - multiValued: true
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: complex
   */
  "nonCompliances"?: Array<model.MyDeviceNonCompliances>;
}

export namespace MyDevice {
  export enum IdcsPreventedOperations {
    Replace = "replace",
    Update = "update",
    Delete = "delete",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Platform {
    Ios = "IOS",
    Android = "ANDROID",
    Windows = "WINDOWS",
    Cellular = "CELLULAR",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Status {
    Initiated = "INITIATED",
    Inprogress = "INPROGRESS",
    Inactive = "INACTIVE",
    Enrolled = "ENROLLED",
    Locked = "LOCKED",
    Blocked = "BLOCKED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: MyDevice): object {
    const jsonObj = {
      ...obj,
      ...{
        "meta": obj.meta ? model.Meta.getJsonObj(obj.meta) : undefined,
        "idcsCreatedBy": obj.idcsCreatedBy
          ? model.IdcsCreatedBy.getJsonObj(obj.idcsCreatedBy)
          : undefined,
        "idcsLastModifiedBy": obj.idcsLastModifiedBy
          ? model.IdcsLastModifiedBy.getJsonObj(obj.idcsLastModifiedBy)
          : undefined,

        "tags": obj.tags
          ? obj.tags.map(item => {
              return model.Tags.getJsonObj(item);
            })
          : undefined,

        "thirdPartyFactor": obj.thirdPartyFactor
          ? model.MyDeviceThirdPartyFactor.getJsonObj(obj.thirdPartyFactor)
          : undefined,
        "user": obj.user ? model.MyDeviceUser.getJsonObj(obj.user) : undefined,
        "pushNotificationTarget": obj.pushNotificationTarget
          ? model.MyDevicePushNotificationTarget.getJsonObj(obj.pushNotificationTarget)
          : undefined,
        "additionalAttributes": obj.additionalAttributes
          ? obj.additionalAttributes.map(item => {
              return model.MyDeviceAdditionalAttributes.getJsonObj(item);
            })
          : undefined,
        "authenticationFactors": obj.authenticationFactors
          ? obj.authenticationFactors.map(item => {
              return model.MyDeviceAuthenticationFactors.getJsonObj(item);
            })
          : undefined,
        "nonCompliances": obj.nonCompliances
          ? obj.nonCompliances.map(item => {
              return model.MyDeviceNonCompliances.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: MyDevice): object {
    const jsonObj = {
      ...obj,
      ...{
        "meta": obj.meta ? model.Meta.getDeserializedJsonObj(obj.meta) : undefined,
        "idcsCreatedBy": obj.idcsCreatedBy
          ? model.IdcsCreatedBy.getDeserializedJsonObj(obj.idcsCreatedBy)
          : undefined,
        "idcsLastModifiedBy": obj.idcsLastModifiedBy
          ? model.IdcsLastModifiedBy.getDeserializedJsonObj(obj.idcsLastModifiedBy)
          : undefined,

        "tags": obj.tags
          ? obj.tags.map(item => {
              return model.Tags.getDeserializedJsonObj(item);
            })
          : undefined,

        "thirdPartyFactor": obj.thirdPartyFactor
          ? model.MyDeviceThirdPartyFactor.getDeserializedJsonObj(obj.thirdPartyFactor)
          : undefined,
        "user": obj.user ? model.MyDeviceUser.getDeserializedJsonObj(obj.user) : undefined,
        "pushNotificationTarget": obj.pushNotificationTarget
          ? model.MyDevicePushNotificationTarget.getDeserializedJsonObj(obj.pushNotificationTarget)
          : undefined,
        "additionalAttributes": obj.additionalAttributes
          ? obj.additionalAttributes.map(item => {
              return model.MyDeviceAdditionalAttributes.getDeserializedJsonObj(item);
            })
          : undefined,
        "authenticationFactors": obj.authenticationFactors
          ? obj.authenticationFactors.map(item => {
              return model.MyDeviceAuthenticationFactors.getDeserializedJsonObj(item);
            })
          : undefined,
        "nonCompliances": obj.nonCompliances
          ? obj.nonCompliances.map(item => {
              return model.MyDeviceNonCompliances.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
