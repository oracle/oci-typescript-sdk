/**
 * Identity Domains API
 * Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm).
Use this pattern to construct endpoints for identity domains: `https://<domainURL>/admin/v1/`. See [Finding an Identity Domain URL](https://docs.oracle.com/en-us/iaas/Content/Identity/api-getstarted/locate-identity-domain-url.htm) to locate the domain URL you need.
Use the table of contents and search tool to explore the Identity Domains API.
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * This extension defines attributes related to the Service Providers configuration.
 */
export interface AppExtensionSamlServiceProviderApp {
  /**
   * This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "metadata"?: string;
  /**
   * The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "partnerProviderId"?: string;
  /**
   * The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
   * <p>
   **Added In:** 2202230830
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "partnerProviderPattern"?: string;
  /**
   * The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
   * <p>
   **Added In:** 19.2.1
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "tenantProviderId"?: string;
  /**
   * This attribute represents the Succinct ID.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: server
   */
  "succinctId"?: string;
  /**
   * The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "assertionConsumerUrl"?: string;
  /**
   * The URL to which the partner sends the logout request.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "logoutRequestUrl"?: string;
  /**
   * The URL to which the partner sends the logout response.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "logoutResponseUrl"?: string;
  /**
   * This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "nameIdFormat"?: string;
  /**
   * This attribute represents the signing certificate that an App uses to verify the signed authentication request.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "signingCertificate"?: string;
  /**
   * This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "encryptionCertificate"?: string;
  /**
   * This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "encryptionAlgorithm"?: AppExtensionSamlServiceProviderApp.EncryptionAlgorithm;
  /**
   * This attribute indicates the key encryption algorithm.
   * <p>
   **Added In:** 18.4.2
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "keyEncryptionAlgorithm"?: AppExtensionSamlServiceProviderApp.KeyEncryptionAlgorithm;
  /**
   * If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "encryptAssertion"?: boolean;
  /**
   * Indicates which part of the response should be signed.  A value of \\\"Assertion\\\" indicates that the Assertion should be signed.  A value of \\\"Response\\\" indicates that the SSO Response should be signed. A value of \\\"AssertionAndResponse\\\" indicates that both the Assertion and the SSO Response should be signed.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "signResponseOrAssertion"?: AppExtensionSamlServiceProviderApp.SignResponseOrAssertion;
  /**
   * If true, then the signing certificate is included in the signature.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "includeSigningCertInSignature"?: boolean;
  /**
   * This attribute represents the HTTP binding that would be used while logout.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "logoutBinding"?: AppExtensionSamlServiceProviderApp.LogoutBinding;
  /**
   * If true, then the SAML Service supports logout for this App.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "logoutEnabled"?: boolean;
  /**
   * This attribute represents the algorithm used to hash the signature.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "signatureHashAlgorithm"?: AppExtensionSamlServiceProviderApp.SignatureHashAlgorithm;
  /**
   * Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
   * <p>
   **Added In:** 18.2.6
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsDefaultValue: SAML2.0
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "federationProtocol"?: AppExtensionSamlServiceProviderApp.FederationProtocol;
  /**
   * **Deprecated Since: 18.2.2**
   * <p>
   **SCIM++ Properties:**
   * - caseExact: false
   * - idcsSearchable: true
   * - idcsValuePersistedInOtherAttribute: true
   * - multiValued: false
   * - mutability: readWrite
   * - required: false
   * - returned: default
   * - type: string
   * - uniqueness: none
   * This property specifies which user attribute is used as the NameID value in the SAML assertion. This attribute can be constructed by using attributes from the Oracle Identity Cloud Service Core Users schema.
   */
  "nameIdUserstoreAttribute"?: string;
  /**
   * If enabled, then the SAML Service supports Hok for this App.
   * <p>
   **Added In:** 2101262133
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "hokRequired"?: boolean;
  /**
   * Hok Assertion Consumer Service Url
   * <p>
   **Added In:** 2101262133
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "hokAcsUrl"?: string;
  /**
   * Records the notification timestamp for the SP whose signing certificate is about to expire.
   * <p>
   **Added In:** 2302092332
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: dateTime
   *  - uniqueness: none
   */
  "lastNotificationSentTime"?: string;
  "outboundAssertionAttributes"?: model.AppOutboundAssertionAttributes;
  /**
   * Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
   * <p>
   **Deprecated Since: 18.2.2**
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsCompositeKey: [name]
   *  - idcsSearchable: false
   *  - idcsValuePersistedInOtherAttribute: true
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: complex
   *  - uniqueness: none
   */
  "userAssertionAttributes"?: Array<model.AppUserAssertionAttributes>;
  /**
   * Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
   * <p>
   **Deprecated Since: 18.2.2**
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsCompositeKey: [name]
   *  - idcsSearchable: false
   *  - idcsValuePersistedInOtherAttribute: true
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: complex
   *  - uniqueness: none
   */
  "groupAssertionAttributes"?: Array<model.AppGroupAssertionAttributes>;
}

export namespace AppExtensionSamlServiceProviderApp {
  export enum EncryptionAlgorithm {
    _3Des = "3DES",
    Aes128 = "AES-128",
    Aes256 = "AES-256",
    Aes192 = "AES-192",
    Aes128Gcm = "AES-128-GCM",
    Aes256Gcm = "AES-256-GCM",
    Aes192Gcm = "AES-192-GCM",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum KeyEncryptionAlgorithm {
    RsaV15 = "RSA-v1.5",
    RsaOaep = "RSA-OAEP",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum SignResponseOrAssertion {
    Assertion = "Assertion",
    Response = "Response",
    AssertionAndResponse = "AssertionAndResponse",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum LogoutBinding {
    Redirect = "Redirect",
    Post = "Post",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum SignatureHashAlgorithm {
    Sha1 = "SHA-1",
    Sha256 = "SHA-256",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum FederationProtocol {
    Saml20 = "SAML2.0",
    WsFed11 = "WS-Fed1.1",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: AppExtensionSamlServiceProviderApp): object {
    const jsonObj = {
      ...obj,
      ...{
        "outboundAssertionAttributes": obj.outboundAssertionAttributes
          ? model.AppOutboundAssertionAttributes.getJsonObj(obj.outboundAssertionAttributes)
          : undefined,
        "userAssertionAttributes": obj.userAssertionAttributes
          ? obj.userAssertionAttributes.map(item => {
              return model.AppUserAssertionAttributes.getJsonObj(item);
            })
          : undefined,
        "groupAssertionAttributes": obj.groupAssertionAttributes
          ? obj.groupAssertionAttributes.map(item => {
              return model.AppGroupAssertionAttributes.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: AppExtensionSamlServiceProviderApp): object {
    const jsonObj = {
      ...obj,
      ...{
        "outboundAssertionAttributes": obj.outboundAssertionAttributes
          ? model.AppOutboundAssertionAttributes.getDeserializedJsonObj(
              obj.outboundAssertionAttributes
            )
          : undefined,
        "userAssertionAttributes": obj.userAssertionAttributes
          ? obj.userAssertionAttributes.map(item => {
              return model.AppUserAssertionAttributes.getDeserializedJsonObj(item);
            })
          : undefined,
        "groupAssertionAttributes": obj.groupAssertionAttributes
          ? obj.groupAssertionAttributes.map(item => {
              return model.AppGroupAssertionAttributes.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
