/**
 * Identity Domains API
 * Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm).
Use this pattern to construct endpoints for identity domains: `https://<domainURL>/admin/v1/`. See [Finding an Identity Domain URL](https://docs.oracle.com/en-us/iaas/Content/Identity/api-getstarted/locate-identity-domain-url.htm) to locate the domain URL you need.
Use the table of contents and search tool to explore the Identity Domains API.
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Settings that describe the set of restrictions that the system should apply to devices and trusted endpoints of a user
 * <p>
 **SCIM++ Properties:**
 *  - idcsSearchable: false
 *  - multiValued: false
 *  - mutability: readWrite
 *  - required: true
 *  - returned: default
 *  - type: complex
 *  - uniqueness: none
 */
export interface AuthenticationFactorSettingsEndpointRestrictions {
  /**
   * Maximum number of enrolled devices per user
   * <p>
   **SCIM++ Properties:**
   *  - idcsMaxValue: 20
   *  - idcsMinValue: 1
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: true
   *  - returned: default
   *  - type: integer
   *  - uniqueness: none Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "maxEnrolledDevices": number;
  /**
   * Max number of trusted endpoints per user
   * <p>
   **SCIM++ Properties:**
   *  - idcsMaxValue: 20
   *  - idcsMinValue: 1
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: true
   *  - returned: default
   *  - type: integer
   *  - uniqueness: none Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "maxTrustedEndpoints": number;
  /**
   * Maximum number of days until an endpoint can be trusted
   * <p>
   **SCIM++ Properties:**
   *  - idcsMaxValue: 180
   *  - idcsMinValue: 1
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: true
   *  - returned: default
   *  - type: integer
   *  - uniqueness: none Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "maxEndpointTrustDurationInDays": number;
  /**
   * Specify if trusted endpoints are enabled
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: true
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "trustedEndpointsEnabled": boolean;
  /**
   * An integer that represents the maximum number of failed MFA logins before an account is locked
   * <p>
   **SCIM++ Properties:**
   *  - idcsMaxValue: 20
   *  - idcsMinValue: 5
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: true
   *  - returned: default
   *  - type: integer
   *  - uniqueness: none Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "maxIncorrectAttempts": number;
}

export namespace AuthenticationFactorSettingsEndpointRestrictions {
  export function getJsonObj(obj: AuthenticationFactorSettingsEndpointRestrictions): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(
    obj: AuthenticationFactorSettingsEndpointRestrictions
  ): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
