/**
 * Identity Domains API
 * Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm).
Use this pattern to construct endpoints for identity domains: `https://<domainURL>/admin/v1/`. See [Finding an Identity Domain URL](https://docs.oracle.com/en-us/iaas/Content/Identity/api-getstarted/locate-identity-domain-url.htm) to locate the domain URL you need.
Use the table of contents and search tool to explore the Identity Domains API.
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Kerberos Realm
 */
export interface AppExtensionKerberosRealmApp {
  /**
   * The name of the Kerberos Realm that this App uses for authentication.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "realmName"?: string;
  /**
   * The primary key that the system should use to encrypt artifacts that are specific to this Kerberos realm -- for example, to encrypt the Principal Key in each KerberosRealmUser.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - idcsSensitive: none
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "masterKey"?: string;
  /**
   * The type of salt that the system will use to encrypt Kerberos-specific artifacts of this App unless another type of salt is specified.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "defaultEncryptionSaltType"?: string;
  /**
   * The types of salt that are available for the system to use when encrypting Kerberos-specific artifacts for this App.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "supportedEncryptionSaltTypes"?: Array<string>;
  /**
   * Ticket Flags
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: request
   *  - type: integer
   *  - uniqueness: none Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "ticketFlags"?: number;
  /**
   * Max Ticket Life in seconds
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: request
   *  - type: integer
   *  - uniqueness: none Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "maxTicketLife"?: number;
  /**
   * Max Renewable Age in seconds
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: request
   *  - type: integer
   *  - uniqueness: none Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "maxRenewableAge"?: number;
}

export namespace AppExtensionKerberosRealmApp {
  export function getJsonObj(obj: AppExtensionKerberosRealmApp): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: AppExtensionKerberosRealmApp): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
