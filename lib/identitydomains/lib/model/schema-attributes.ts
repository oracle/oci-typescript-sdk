/**
 * Identity Domains API
 * Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm).
Use this pattern to construct endpoints for identity domains: `https://<domainURL>/admin/v1/`. See [Finding an Identity Domain URL](https://docs.oracle.com/en-us/iaas/Content/Identity/api-getstarted/locate-identity-domain-url.htm) to locate the domain URL you need.
Use the table of contents and search tool to explore the Identity Domains API.
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * A complex type that specifies the set of Resource attributes
 */
export interface SchemaAttributes {
  /**
   * Attribute's name
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "name"?: string;
  /**
   * Localized schema attribute display name for use by UI client  for displaying attribute labels
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsDisplayNameMessageId"?: string;
  /**
   * Specifies if the attributes in this schema should be hidden externally
   * <p>
   **Added In:** 19.1.4
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "idcsRtsaHideAttribute"?: boolean;
  "localizedDisplayName"?: model.SchemaLocalizedDisplayName;
  /**
   * The attribute's data type--for example, String
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "type"?: SchemaAttributes.Type;
  /**
   * Indicates the attribute's plurality
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "multiValued"?: boolean;
  /**
   * The attribute's human-readable description
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "description"?: string;
  /**
   * Specifies if the attribute is required
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "required"?: boolean;
  /**
   * Specifies if the attribute is required
   * <p>
   **Added In:** 2305190132
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsReturnEmptyWhenNull"?: boolean;
  /**
   * A collection of canonical values. Applicable Service Providers MUST specify the canonical types specified in the core schema specification--for example, \\\"work\\\", \\\"home\\\".
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "canonicalValues"?: Array<string>;
  /**
   * Specifies the default value for an attribute. The value must be one from canonicalValues if defined.
   * <p>
   **Added In:** 18.1.6
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsDefaultValue"?: string;
  /**
   * A collection of Localized canonical values.
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: complex
   */
  "localizedCanonicalValues"?: Array<model.SchemaLocalizedCanonicalValues>;
  /**
   * Specifies if the String attribute is case-sensitive
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "caseExact"?: boolean;
  /**
   * Specifies if the attribute is mutable
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "mutability"?: SchemaAttributes.Mutability;
  /**
   * A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "returned"?: SchemaAttributes.Returned;
  /**
   * A single keyword value that specifies how the Service Provider enforces uniqueness of attribute values. A server MAY reject an invalid value based on uniqueness by returning an HTTP response code of 400 (Bad Request). A client MAY enforce uniqueness on the client side to a greater degree than the Service Provider enforces. For example, a client could make a value unique while the server has the uniqueness of \\\"none\\\".
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "uniqueness"?: SchemaAttributes.Uniqueness;
  /**
   * The attribute defining the CSV header name for import/export
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsCsvAttributeName"?: string;
  /**
   * Specifies the mapping between external identity source attributes and Oracle Identity Cloud Service complex attributes (e.g. email => emails[work].value)
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: true
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: complex
   */
  "idcsComplexAttributeNameMappings"?: Array<model.SchemaIdcsComplexAttributeNameMappings>;
  /**
   * Maps to ICF target attribute name
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsICFBundleAttributeName"?: string;
  /**
   * Metadata to identify the ICF required attribute
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "idcsICFRequired"?: boolean;
  /**
   * Maps to ICF data type
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsICFAttributeType"?: SchemaAttributes.IdcsICFAttributeType;
  /**
   * Csv meta data for those resource type attributes which can be imported / exported from / to csv.
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: complex
   */
  "idcsCsvAttributeNameMappings"?: Array<model.SchemaIdcsCsvAttributeNameMappings>;
  /**
   * The names of the Resource types that may be referenced--for example, User. This is only applicable for attributes that are of the \\\"reference\\\" data type.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "referenceTypes"?: Array<string>;
  /**
   * Indicates that the schema has been deprecated since version
   * <p>
   **Deprecated Since: 19.3.3**
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsDeprecatedSinceVersion"?: number;
  /**
   * Indicates that the schema has been added since version
   * <p>
   **Deprecated Since: 19.3.3**
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsAddedSinceVersion"?: number;
  /**
   * Indicates that the schema has been deprecated since this release number
   * <p>
   **Added In:** 17.3.4
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   */
  "idcsDeprecatedSinceReleaseNumber"?: string;
  /**
   * Indicates that the schema has been added since this release number
   * <p>
   **Added In:** 17.3.4
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   */
  "idcsAddedSinceReleaseNumber"?: string;
  /**
   * Specifies the minimum length of the attribute
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsMinLength"?: number;
  /**
   * Specifies the maximum length of the attribute
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsMaxLength"?: number;
  /**
   * Specifies the minimum value of the integer attribute
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsMinValue"?: number;
  /**
   * Specifies the maximum value of the integer attribute
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsMaxValue"?: number;
  /**
   * If true, specifies that the attribute can have multiple language values set for the attribute on which this is set.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "idcsMultiLanguage"?: boolean;
  /**
   * Specifies the directly referenced Resources
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   */
  "idcsRefResourceAttributes"?: Array<string>;
  /**
   * Specifies the indirectly referenced Resources
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   */
  "idcsIndirectRefResourceAttributes"?: Array<string>;
  /**
   * Sequence tracking ID name for the attribute
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   */
  "idcsAutoIncrementSeqName"?: string;
  /**
   * Specifies whether the value of the Resource attribute is persisted
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsValuePersisted"?: boolean;
  /**
   * Flag to specify if the attribute should be encrypted or hashed
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsSensitive"?: SchemaAttributes.IdcsSensitive;
  /**
   * Specifies whether the schema attribute is for internal use only. Internal attributes are not exposed via REST. This attribute overrides mutability for create/update if the request is internal and the attribute internalflag is set to True. This attribute overrides the return attribute while building SCIM response attributes when both the request is internal and the schema attribute is internal.
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsInternal"?: boolean;
  /**
   * Trims any leading and trailing blanks from String values. Default is True.
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsTrimStringValue"?: boolean;
  /**
   * Specifies whether this attribute can be included in a search filter
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsSearchable"?: boolean;
  /**
   * Specifies whether this attribute value was generated
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsGenerated"?: boolean;
  /**
   * Specifies whether changes to this attribute value are audited
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsAuditable"?: boolean;
  /**
   * Target attribute name that this attribute gets mapped to for persistence
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsTargetAttributeName"?: string;
  /**
   * Contains the canonical name of the other attribute sharing the same idcsTargetAttributeName
   * <p>
   **Added In:** 2209122038
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: always
   *  - type: string
   *  - uniqueness: none
   */
  "idcsMapsToSameTargetAttributeNameAs"?: string;
  /**
   * Target normalized attribute name that this normalized value of attribute gets mapped to for persistence. Only set for caseExact=false & searchable attributes. Do not use by default.
   * <p>
   **Added In:** 19.2.1
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsTargetNormAttributeName"?: string;
  /**
   * Old Target attribute name from child table for CSVA attribute prior to migration. This maintains this attribute used to get mapped to for persistence
   * <p>
   **Added In:** 19.2.1
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsTargetAttributeNameToMigrateFrom"?: string;
  /**
   * Target index name created for this attribute for performance
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsTargetUniqueConstraintName"?: string;
  /**
   * Specifies the mapper to use when mapping this attribute value to DataProvider-specific semantics
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsToTargetMapper"?: string;
  /**
   * Specifies the mapper to use when mapping this attribute value from DataProvider-specific semantics
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsFromTargetMapper"?: string;
  /**
   * Specifies the user-friendly displayable attribute name or catalog key used for localization
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsDisplayName"?: string;
  /**
   * Specifies the Resource type to read from for dynamic canonical values
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsCanonicalValueSourceResourceType"?: string;
  /**
   * Filter to use when getting canonical values for this schema attribute
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsCanonicalValueSourceFilter"?: string;
  /**
   * Specifies the Resource type ID to read from for dynamic canonical values
   * <p>
   **Added In:** 17.4.6
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsCanonicalValueSourceResourceTypeID"?: string;
  /**
   * Display name for the canonical value attribute name.
   * <p>
   **Added In:** 17.4.6
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsCanonicalValueSourceDisplayAttrName"?: string;
  /**
   * Source key attribute for the canonical value.
   * <p>
   **Added In:** 17.4.6
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsCanonicalValueSourceKeyAttrName"?: string;
  /**
   * Type of the canonical value.
   * <p>
   **Added In:** 17.4.6
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsCanonicalValueType"?: SchemaAttributes.IdcsCanonicalValueType;
  /**
   * Validate payload reference value during create, replace, and update. Default is True.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "idcsValidateReference"?: boolean;
  /**
   * The set of one or more sub attributes' names of a CMVA, whose values uniquely identify an instance of a CMVA
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsCompositeKey"?: Array<string>;
  /**
   * **SCIM++ Properties:**
   * - caseExact: false
   * - multiValued: false
   * - mutability: readOnly
   * - required: false
   * - returned: default
   * - type: boolean
   * - uniqueness: none
   * Whether the CMVA attribute will be fetched or not for current resource in AbstractResourceManager update operation before calling data provider update. Default is true.
   */
  "idcsFetchComplexAttributeValues"?: boolean;
  /**
   * Indicates if the attribute is scim compliant, default is true
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsScimCompliant"?: boolean;
  /**
   * Specifies if the attribute can be used for mapping with external identity sources such as AD or LDAP. If isSchemaMappable: false for the schema in which this attribute is defined, then this flag is ignored
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsAttributeMappable"?: boolean;
  /**
   * If true, ARM should not validate the value of the attribute since it will be converted/migrated to another attribute internally by the manager which will build valid post, put, or patch payload, depending on the client requested operation
   * <p>
   **Added In:** 18.2.2
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsValuePersistedInOtherAttribute"?: boolean;
  /**
   * Specifies whether the attribute is PII (personal information). False by default for all attributes. If attribute with idcsPii = true, it's value must be obfuscated before it's written to the Oracle Identity Cloud Service system logs.
   * <p>
   **Added In:** 18.4.2
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsPii"?: boolean;
  /**
   * Specifies whether the attribute should be excluded from the BulkApi patch generated by gradle task for upgrading OOTB resources.
   * <p>
   **Added In:** 2104150946
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: never
   *  - type: boolean
   */
  "idcsExcludeFromUpgradePatch"?: boolean;
  /**
   * A list specifying the contained attributes
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: complex
   */
  "subAttributes"?: Array<model.SchemaSubAttributes>;
  /**
   * Specifies the referenced Resource attribute
   * <p>
   **Deprecated Since: 17.3.4**
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   */
  "idcsRefResourceAttribute"?: string;
  /**
   * Specifies whether the attribute is cacheable. True by default for all attributes. If attribute with idcsAttributeCachable = false, is present \\\"attributesToGet\\\" while executing GET/SEARCH on cacheable resource, Cache is missed and data is fetched from Data Provider.
   * <p>
   **Added In:** 17.3.4
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsAttributeCacheable"?: boolean;
  /**
   * Metadata used by Oracle Identity Cloud Service UI to sequence the attributes displayed on the Account Form.
   * <p>
   **Added In:** 17.4.2
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: integer Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "idcsuiOrder"?: number;
  /**
   * Metadata used by Oracle Identity Cloud Service UI to validate the attribute values using regular expressions.
   * <p>
   **Added In:** 17.4.2
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   */
  "idcsuiRegexp"?: string;
  /**
   * Metadata used by Oracle Identity Cloud Service UI to decide whether the attribute must be displayed on the Account Form.
   * <p>
   **Added In:** 17.4.2
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsuiVisible"?: boolean;
  /**
   * Metadata used by Oracle Identity Cloud Service UI to render a widget for this attribute on the Account Form.
   * <p>
   **Added In:** 17.4.2
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   */
  "idcsuiWidget"?: SchemaAttributes.IdcsuiWidget;
  /**
   * The list of features that require this attribute
   * <p>
   **Deprecated Since: 19.1.6**
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: string
   */
  "idcsFeatures"?: Array<SchemaAttributes.IdcsFeatures>;
  /**
   * A subset of \\\"canonicalValues\\\" that are not supported when the \\\"optionalPii\\\" feature is disabled in GlobalConfig.
   * <p>
   **Deprecated Since: 19.1.6**
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: true
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "idcsOptionalPiiCanonicalValues"?: Array<string>;
  /**
   * Specifies if the value of the attribute should be sanitized using OWASP library for HTML content
   * <p>
   **Added In:** 20.1.3
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "idcsSanitize"?: boolean;
  /**
   * Specifies whether the attribute from resource schema should override from common schema with the same name.
   * <p>
   **Added In:** 2102181953
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: boolean
   */
  "idcsOverrideCommonAttribute"?: boolean;
  /**
   * Specifies whether the readOnly and immutable reference attributes should be ignored when forceDelete=true.
   * <p>
   **Added In:** 2104220644
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "idcsIgnoreReadOnlyAndImmutableRefAttrsDuringForceDelete"?: boolean;
  /**
   * Set this attribute to True if the resource is eligibal for update while system is in readonly mode.
   * <p>
   **Added In:** 2106170416
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "idcsAllowUpdatesInReadOnlyMode"?: boolean;
  /**
   * Set this attribute to True if the pagination is required on an attribute.
   * <p>
   **Added In:** 2202230830
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "idcsPaginateResponse"?: boolean;
  /**
   * If true, indicates that the attribute value must be written to the home region for access flows initiated from a replica region.
   * <p>
   **Added In:** 2209220956
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "idcsRequiresWriteForAccessFlows"?: boolean;
  /**
   * If true, indicates that the attribute value must be written to the home region and requires immediate read-after-write consistency for access flows initiated from a replica region.
   * <p>
   **Added In:** 2209220956
   * <p>
   **SCIM++ Properties:**
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: never
   *  - type: boolean
   */
  "idcsRequiresImmediateReadAfterWriteForAccessFlows"?: boolean;
}

export namespace SchemaAttributes {
  export enum Type {
    String = "string",
    Complex = "complex",
    Boolean = "boolean",
    Decimal = "decimal",
    Integer = "integer",
    DateTime = "dateTime",
    Reference = "reference",
    Binary = "binary",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Mutability {
    ReadOnly = "readOnly",
    ReadWrite = "readWrite",
    Immutable = "immutable",
    WriteOnly = "writeOnly",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Returned {
    Always = "always",
    Never = "never",
    Default = "default",
    Request = "request",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Uniqueness {
    None = "none",
    Server = "server",
    Global = "global",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum IdcsICFAttributeType {
    String = "string",
    Long = "long",
    Char = "char",
    Double = "double",
    Float = "float",
    Integer = "integer",
    Boolean = "boolean",
    Bytes = "bytes",
    Bigdecimal = "bigdecimal",
    Biginteger = "biginteger",
    Guardedbytes = "guardedbytes",
    Guardedstring = "guardedstring",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum IdcsSensitive {
    Encrypt = "encrypt",
    Hash = "hash",
    HashSc = "hash_sc",
    Checksum = "checksum",
    None = "none",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum IdcsCanonicalValueType {
    Dynamic = "dynamic",
    Static = "static",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum IdcsuiWidget {
    Inputtext = "inputtext",
    Checkbox = "checkbox",
    Textarea = "textarea",
    Combobox = "combobox",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum IdcsFeatures {
    OptionalPii = "optionalPii",
    Mfa = "mfa",
    Social = "social",
    SchemaCustomization = "schemaCustomization",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: SchemaAttributes): object {
    const jsonObj = {
      ...obj,
      ...{
        "localizedDisplayName": obj.localizedDisplayName
          ? model.SchemaLocalizedDisplayName.getJsonObj(obj.localizedDisplayName)
          : undefined,

        "localizedCanonicalValues": obj.localizedCanonicalValues
          ? obj.localizedCanonicalValues.map(item => {
              return model.SchemaLocalizedCanonicalValues.getJsonObj(item);
            })
          : undefined,

        "idcsComplexAttributeNameMappings": obj.idcsComplexAttributeNameMappings
          ? obj.idcsComplexAttributeNameMappings.map(item => {
              return model.SchemaIdcsComplexAttributeNameMappings.getJsonObj(item);
            })
          : undefined,

        "idcsCsvAttributeNameMappings": obj.idcsCsvAttributeNameMappings
          ? obj.idcsCsvAttributeNameMappings.map(item => {
              return model.SchemaIdcsCsvAttributeNameMappings.getJsonObj(item);
            })
          : undefined,

        "subAttributes": obj.subAttributes
          ? obj.subAttributes.map(item => {
              return model.SchemaSubAttributes.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: SchemaAttributes): object {
    const jsonObj = {
      ...obj,
      ...{
        "localizedDisplayName": obj.localizedDisplayName
          ? model.SchemaLocalizedDisplayName.getDeserializedJsonObj(obj.localizedDisplayName)
          : undefined,

        "localizedCanonicalValues": obj.localizedCanonicalValues
          ? obj.localizedCanonicalValues.map(item => {
              return model.SchemaLocalizedCanonicalValues.getDeserializedJsonObj(item);
            })
          : undefined,

        "idcsComplexAttributeNameMappings": obj.idcsComplexAttributeNameMappings
          ? obj.idcsComplexAttributeNameMappings.map(item => {
              return model.SchemaIdcsComplexAttributeNameMappings.getDeserializedJsonObj(item);
            })
          : undefined,

        "idcsCsvAttributeNameMappings": obj.idcsCsvAttributeNameMappings
          ? obj.idcsCsvAttributeNameMappings.map(item => {
              return model.SchemaIdcsCsvAttributeNameMappings.getDeserializedJsonObj(item);
            })
          : undefined,

        "subAttributes": obj.subAttributes
          ? obj.subAttributes.map(item => {
              return model.SchemaSubAttributes.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
