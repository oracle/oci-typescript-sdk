/**
 * Identity Domains API
 * Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm).
Use this pattern to construct endpoints for identity domains: `https://<domainURL>/admin/v1/`. See [Finding an Identity Domain URL](https://docs.oracle.com/en-us/iaas/Content/Identity/api-getstarted/locate-identity-domain-url.htm) to locate the domain URL you need.
Use the table of contents and search tool to explore the Identity Domains API.
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Validate any given Authentication Factor
 */
export interface MyAuthenticationFactorValidator {
  /**
   * Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: always
   *  - type: string
   *  - uniqueness: global
   */
  "id"?: string;
  /**
   * Unique OCI identifier for the SCIM Resource.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: immutable
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: global
   */
  "ocid"?: string;
  /**
   * REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: true
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "schemas": Array<string>;
  "meta"?: model.Meta;
  "idcsCreatedBy"?: model.IdcsCreatedBy;
  "idcsLastModifiedBy"?: model.IdcsLastModifiedBy;
  /**
   * Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: true
   *  - mutability: readOnly
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "idcsPreventedOperations"?: Array<MyAuthenticationFactorValidator.IdcsPreventedOperations>;
  /**
   * A list of tags on this resource.
   * <p>
   **SCIM++ Properties:**
   *  - idcsCompositeKey: [key, value]
   *  - idcsSearchable: true
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: request
   *  - type: complex
   *  - uniqueness: none
   */
  "tags"?: Array<model.Tags>;
  /**
   * A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "deleteInProgress"?: boolean;
  /**
   * The release number when the resource was upgraded.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: request
   *  - type: string
   *  - uniqueness: none
   */
  "idcsLastUpgradedInRelease"?: string;
  /**
   * OCI Domain Id (ocid) in which the resource lives.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "domainOcid"?: string;
  /**
   * OCI Compartment Id (ocid) in which the resource lives.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "compartmentOcid"?: string;
  /**
   * OCI Tenant Id (ocid) in which the resource lives.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: false
   *  - idcsSearchable: false
   *  - multiValued: false
   *  - mutability: readOnly
   *  - required: false
   *  - returned: default
   *  - type: string
   *  - uniqueness: none
   */
  "tenancyOcid"?: string;
  /**
   * Authentication Factor which is being validated
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: true
   *  - mutability: readWrite
   *  - returned: default
   *  - uniqueness: none
   *  - idcsSearchable: false
   */
  "authFactor": MyAuthenticationFactorValidator.AuthFactor;
  /**
   * Specifies whether the service is being used to enroll or validate a factor
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: true
   *  - mutability: readWrite
   *  - returned: default
   *  - uniqueness: none
   *  - idcsSearchable: false
   */
  "scenario": MyAuthenticationFactorValidator.Scenario;
  /**
   * Request ID which is being validated
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: readWrite
   *  - returned: default
   *  - uniqueness: none
   *  - idcsSearchable: false
   */
  "requestId"?: string;
  /**
   * The One Time Passcode which needs to be validated
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: readWrite
   *  - returned: never
   *  - uniqueness: none
   *  - idcsSensitive: encrypt
   *  - idcsSearchable: false
   */
  "otpCode"?: string;
  /**
   * Device id whose factor is being validated
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: readWrite
   *  - returned: default
   *  - uniqueness: none
   *  - idcsSearchable: false
   */
  "deviceId"?: string;
  /**
   * Validation status returned in the response
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: readOnly
   *  - returned: default
   *  - uniqueness: none
   *  - idcsSearchable: false
   */
  "status"?: MyAuthenticationFactorValidator.Status;
  /**
   * User guid for whom the validation has initiated. Optional.
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: readWrite
   *  - returned: default
   *  - uniqueness: none
   *  - idcsSearchable: false
   */
  "userId"?: string;
  /**
   * User name for whom the validation has initiated
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: readWrite
   *  - returned: default
   *  - uniqueness: none
   *  - idcsSearchable: false
   *  - idcsPii: true
   */
  "userName"?: string;
  /**
   * Display name of the verified device
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: readWrite
   *  - returned: default
   *  - uniqueness: none
   *  - idcsSearchable: false
   */
  "displayName"?: string;
  /**
   * Validator message which is passed by the client. When it is a PUSH notification, it can be a rejection message.
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: readWrite
   *  - returned: default
   *  - uniqueness: none
   *  - idcsSearchable: false
   */
  "message"?: string;
  /**
   * type indicating whether the flow is OIDC, SAML etc.,
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: default
   *  - uniqueness: none
   */
  "type"?: MyAuthenticationFactorValidator.Type;
  /**
   * Indicates whether to update user preferred mfa factor or not
   * <p>
   **SCIM++ Properties:**
   *  - type: boolean
   *  - multiValued: false
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: never
   *  - uniqueness: none
   */
  "updateUserPreference"?: boolean;
  /**
   * Indicates whether to user passwordless factor to be updated or mfa factor to be updated
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: never
   *  - uniqueness: none
   */
  "preferenceType"?: MyAuthenticationFactorValidator.PreferenceType;
  /**
   * List of security questions the user has submitted to get authenticated.
   * <p>
   **SCIM++ Properties:**
   *  - type: complex
   *  - multiValued: true
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: never
   *  - uniqueness: none
   *  - idcsSearchable: false
   */
  "securityQuestions"?: Array<model.MyAuthenticationFactorValidatorSecurityQuestions>;
  /**
   * Name of the client to be trusted
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: never
   *  - uniqueness: none
   */
  "name"?: string;
  /**
   * Platform of the client to be trusted
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: never
   *  - uniqueness: none
   */
  "platform"?: string;
  /**
   * Location of the trusted client.
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: never
   *  - uniqueness: none
   */
  "location"?: string;
  /**
   * Trusted token resource identifier.
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: never
   *  - uniqueness: none
   */
  "trustedTokenId"?: string;
  /**
   * KMSI token resource identifier.
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: false
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: never
   *  - uniqueness: none
   */
  "kmsiTokenId"?: string;
  /**
   * Sign-On Policy dictated allowed second factors.
   * <p>
   **SCIM++ Properties:**
   *  - type: string
   *  - multiValued: true
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: never
   *  - uniqueness: none
   */
  "policyEnabledSecondFactors"?: Array<string>;
  /**
   * Indicates to create trust token.
   * <p>
   **SCIM++ Properties:**
   *  - type: boolean
   *  - multiValued: false
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: never
   *  - uniqueness: none
   */
  "createTrustedAgent"?: boolean;
  /**
   * Indicates to create kmsi token.
   * <p>
   **SCIM++ Properties:**
   *  - type: boolean
   *  - multiValued: false
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: never
   *  - uniqueness: none
   */
  "createKmsiToken"?: boolean;
  /**
   * Flag indicates whether the factor is enrolled in account recovery. If the value is not provided or false, then it will be treated as MFA factor validation.
   * <p>
   **SCIM++ Properties:**
   *  - caseExact: true
   *  - idcsSearchable: true
   *  - multiValued: false
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: boolean
   *  - uniqueness: none
   */
  "isAccRecEnabled"?: boolean;
  /**
   * Sign-On Policy dictated validity duration for trusted client in Minutes.
   * <p>
   **SCIM++ Properties:**
   *  - type: integer
   *  - multiValued: false
   *  - required: false
   *  - mutability: writeOnly
   *  - returned: never
   *  - uniqueness: none Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "policyTrustedFrequencyMins"?: number;
  "thirdPartyFactor"?: model.MyAuthenticationFactorValidatorThirdPartyFactor;
  /**
   * Additional attributes which will be sent as part of a push notification
   * <p>
   **SCIM++ Properties:**
   *  - idcsSearchable: false
   *  - multiValued: true
   *  - mutability: readWrite
   *  - required: false
   *  - returned: default
   *  - type: complex
   *  - uniqueness: none
   */
  "additionalAttributes"?: Array<model.MyAuthenticationFactorValidatorAdditionalAttributes>;
}

export namespace MyAuthenticationFactorValidator {
  export enum IdcsPreventedOperations {
    Replace = "replace",
    Update = "update",
    Delete = "delete",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum AuthFactor {
    UsernamePassword = "USERNAME_PASSWORD",
    Push = "PUSH",
    Totp = "TOTP",
    Email = "EMAIL",
    Sms = "SMS",
    Voice = "VOICE",
    Bypasscode = "BYPASSCODE",
    SecurityQuestions = "SECURITY_QUESTIONS",
    TrustToken = "TRUST_TOKEN",
    PhoneCall = "PHONE_CALL",
    Thirdparty = "THIRDPARTY",
    FidoAuthenticator = "FIDO_AUTHENTICATOR",
    YubicoOtp = "YUBICO_OTP",
    KmsiToken = "KMSI_TOKEN",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Scenario {
    Enrollment = "ENROLLMENT",
    Authentication = "AUTHENTICATION",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Status {
    Success = "SUCCESS",
    Failure = "FAILURE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum Type {
    Saml = "SAML",
    Oidc = "OIDC",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum PreferenceType {
    Passwordless = "PASSWORDLESS",
    Mfa = "MFA",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: MyAuthenticationFactorValidator): object {
    const jsonObj = {
      ...obj,
      ...{
        "meta": obj.meta ? model.Meta.getJsonObj(obj.meta) : undefined,
        "idcsCreatedBy": obj.idcsCreatedBy
          ? model.IdcsCreatedBy.getJsonObj(obj.idcsCreatedBy)
          : undefined,
        "idcsLastModifiedBy": obj.idcsLastModifiedBy
          ? model.IdcsLastModifiedBy.getJsonObj(obj.idcsLastModifiedBy)
          : undefined,

        "tags": obj.tags
          ? obj.tags.map(item => {
              return model.Tags.getJsonObj(item);
            })
          : undefined,

        "securityQuestions": obj.securityQuestions
          ? obj.securityQuestions.map(item => {
              return model.MyAuthenticationFactorValidatorSecurityQuestions.getJsonObj(item);
            })
          : undefined,

        "thirdPartyFactor": obj.thirdPartyFactor
          ? model.MyAuthenticationFactorValidatorThirdPartyFactor.getJsonObj(obj.thirdPartyFactor)
          : undefined,
        "additionalAttributes": obj.additionalAttributes
          ? obj.additionalAttributes.map(item => {
              return model.MyAuthenticationFactorValidatorAdditionalAttributes.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: MyAuthenticationFactorValidator): object {
    const jsonObj = {
      ...obj,
      ...{
        "meta": obj.meta ? model.Meta.getDeserializedJsonObj(obj.meta) : undefined,
        "idcsCreatedBy": obj.idcsCreatedBy
          ? model.IdcsCreatedBy.getDeserializedJsonObj(obj.idcsCreatedBy)
          : undefined,
        "idcsLastModifiedBy": obj.idcsLastModifiedBy
          ? model.IdcsLastModifiedBy.getDeserializedJsonObj(obj.idcsLastModifiedBy)
          : undefined,

        "tags": obj.tags
          ? obj.tags.map(item => {
              return model.Tags.getDeserializedJsonObj(item);
            })
          : undefined,

        "securityQuestions": obj.securityQuestions
          ? obj.securityQuestions.map(item => {
              return model.MyAuthenticationFactorValidatorSecurityQuestions.getDeserializedJsonObj(
                item
              );
            })
          : undefined,

        "thirdPartyFactor": obj.thirdPartyFactor
          ? model.MyAuthenticationFactorValidatorThirdPartyFactor.getDeserializedJsonObj(
              obj.thirdPartyFactor
            )
          : undefined,
        "additionalAttributes": obj.additionalAttributes
          ? obj.additionalAttributes.map(item => {
              return model.MyAuthenticationFactorValidatorAdditionalAttributes.getDeserializedJsonObj(
                item
              );
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
