/**
 * File Storage API
 * Use the File Storage service API to manage file systems, mount targets, and snapshots.
For more information, see [Overview of File Storage](/iaas/Content/File/Concepts/filestorageoverview.htm).

 * OpenAPI spec version: 20171215
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { FileStorageWaiter } from "./filestorage-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum FileStorageApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class FileStorageClient {
  protected static serviceEndpointTemplate = "https://filestorage.{region}.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": FileStorageWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "FileStorage";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("filestorage")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("filestorage");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20171215";
    if (this.logger) this.logger.info(`FileStorageClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        FileStorageClient.serviceEndpointTemplate,
        this._region,
        FileStorageClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        FileStorageClient.serviceEndpointTemplate,
        this._regionId,
        FileStorageClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      FileStorageClient.serviceEndpointTemplate,
      region,
      FileStorageClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      FileStorageClient.serviceEndpointTemplate,
      regionId,
      FileStorageClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new FileStorageWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): FileStorageWaiter {
    this._waiters = new FileStorageWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): FileStorageWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Cancel scheduled downgrade shape request for mount target.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CancelDowngradeShapeMountTargetRequest
   * @return CancelDowngradeShapeMountTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CancelDowngradeShapeMountTarget.ts.html |here} to see how to use CancelDowngradeShapeMountTarget API.
   */
  public async cancelDowngradeShapeMountTarget(
    cancelDowngradeShapeMountTargetRequest: requests.CancelDowngradeShapeMountTargetRequest
  ): Promise<responses.CancelDowngradeShapeMountTargetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#cancelDowngradeShapeMountTarget.");
    const operationName = "cancelDowngradeShapeMountTarget";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/MountTarget/CancelDowngradeShapeMountTarget";
    const pathParams = {
      "{mountTargetId}": cancelDowngradeShapeMountTargetRequest.mountTargetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelDowngradeShapeMountTargetRequest.ifMatch,
      "opc-request-id": cancelDowngradeShapeMountTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelDowngradeShapeMountTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/mountTargets/{mountTargetId}/actions/cancelShapeDowngrade",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelDowngradeShapeMountTargetResponse>{},
        body: await response.json(),
        bodyKey: "mountTarget",
        bodyModel: model.MountTarget,
        type: "model.MountTarget",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a file system and its associated snapshots into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes)
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeFileSystemCompartmentRequest
   * @return ChangeFileSystemCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ChangeFileSystemCompartment.ts.html |here} to see how to use ChangeFileSystemCompartment API.
   */
  public async changeFileSystemCompartment(
    changeFileSystemCompartmentRequest: requests.ChangeFileSystemCompartmentRequest
  ): Promise<responses.ChangeFileSystemCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#changeFileSystemCompartment.");
    const operationName = "changeFileSystemCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FileSystem/ChangeFileSystemCompartment";
    const pathParams = {
      "{fileSystemId}": changeFileSystemCompartmentRequest.fileSystemId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeFileSystemCompartmentRequest.ifMatch,
      "opc-request-id": changeFileSystemCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeFileSystemCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fileSystems/{fileSystemId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeFileSystemCompartmentRequest.changeFileSystemCompartmentDetails,
        "ChangeFileSystemCompartmentDetails",
        model.ChangeFileSystemCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeFileSystemCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a file system snapshot policy into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeFilesystemSnapshotPolicyCompartmentRequest
   * @return ChangeFilesystemSnapshotPolicyCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ChangeFilesystemSnapshotPolicyCompartment.ts.html |here} to see how to use ChangeFilesystemSnapshotPolicyCompartment API.
   */
  public async changeFilesystemSnapshotPolicyCompartment(
    changeFilesystemSnapshotPolicyCompartmentRequest: requests.ChangeFilesystemSnapshotPolicyCompartmentRequest
  ): Promise<responses.ChangeFilesystemSnapshotPolicyCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FileStorageClient#changeFilesystemSnapshotPolicyCompartment."
      );
    const operationName = "changeFilesystemSnapshotPolicyCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FilesystemSnapshotPolicy/ChangeFilesystemSnapshotPolicyCompartment";
    const pathParams = {
      "{filesystemSnapshotPolicyId}":
        changeFilesystemSnapshotPolicyCompartmentRequest.filesystemSnapshotPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeFilesystemSnapshotPolicyCompartmentRequest.ifMatch,
      "opc-request-id": changeFilesystemSnapshotPolicyCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeFilesystemSnapshotPolicyCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/filesystemSnapshotPolicies/{filesystemSnapshotPolicyId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeFilesystemSnapshotPolicyCompartmentRequest.changeFilesystemSnapshotPolicyCompartmentDetails,
        "ChangeFilesystemSnapshotPolicyCompartmentDetails",
        model.ChangeFilesystemSnapshotPolicyCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeFilesystemSnapshotPolicyCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a mount target and its associated export set or share set into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes)
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeMountTargetCompartmentRequest
   * @return ChangeMountTargetCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ChangeMountTargetCompartment.ts.html |here} to see how to use ChangeMountTargetCompartment API.
   */
  public async changeMountTargetCompartment(
    changeMountTargetCompartmentRequest: requests.ChangeMountTargetCompartmentRequest
  ): Promise<responses.ChangeMountTargetCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#changeMountTargetCompartment.");
    const operationName = "changeMountTargetCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/MountTarget/ChangeMountTargetCompartment";
    const pathParams = {
      "{mountTargetId}": changeMountTargetCompartmentRequest.mountTargetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeMountTargetCompartmentRequest.ifMatch,
      "opc-request-id": changeMountTargetCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeMountTargetCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/mountTargets/{mountTargetId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeMountTargetCompartmentRequest.changeMountTargetCompartmentDetails,
        "ChangeMountTargetCompartmentDetails",
        model.ChangeMountTargetCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeMountTargetCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves an outbound connector into a different compartment within the same tenancy.
   * For information about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes)
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeOutboundConnectorCompartmentRequest
   * @return ChangeOutboundConnectorCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ChangeOutboundConnectorCompartment.ts.html |here} to see how to use ChangeOutboundConnectorCompartment API.
   */
  public async changeOutboundConnectorCompartment(
    changeOutboundConnectorCompartmentRequest: requests.ChangeOutboundConnectorCompartmentRequest
  ): Promise<responses.ChangeOutboundConnectorCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#changeOutboundConnectorCompartment.");
    const operationName = "changeOutboundConnectorCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/OutboundConnector/ChangeOutboundConnectorCompartment";
    const pathParams = {
      "{outboundConnectorId}": changeOutboundConnectorCompartmentRequest.outboundConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeOutboundConnectorCompartmentRequest.ifMatch,
      "opc-request-id": changeOutboundConnectorCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeOutboundConnectorCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/outboundConnectors/{outboundConnectorId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeOutboundConnectorCompartmentRequest.changeOutboundConnectorCompartmentDetails,
        "ChangeOutboundConnectorCompartmentDetails",
        model.ChangeOutboundConnectorCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeOutboundConnectorCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a replication and its replication target into a different compartment within the same tenancy.
   * For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeReplicationCompartmentRequest
   * @return ChangeReplicationCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ChangeReplicationCompartment.ts.html |here} to see how to use ChangeReplicationCompartment API.
   */
  public async changeReplicationCompartment(
    changeReplicationCompartmentRequest: requests.ChangeReplicationCompartmentRequest
  ): Promise<responses.ChangeReplicationCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#changeReplicationCompartment.");
    const operationName = "changeReplicationCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Replication/ChangeReplicationCompartment";
    const pathParams = {
      "{replicationId}": changeReplicationCompartmentRequest.replicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeReplicationCompartmentRequest.ifMatch,
      "opc-request-id": changeReplicationCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeReplicationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/replications/{replicationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeReplicationCompartmentRequest.changeReplicationCompartmentDetails,
        "ChangeReplicationCompartmentDetails",
        model.ChangeReplicationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeReplicationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new export in the specified export set, path, and
   * file system.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateExportRequest
   * @return CreateExportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateExport.ts.html |here} to see how to use CreateExport API.
   */
  public async createExport(
    createExportRequest: requests.CreateExportRequest
  ): Promise<responses.CreateExportResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#createExport.");
    const operationName = "createExport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Export/CreateExport";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createExportRequest.opcRetryToken,
      "opc-request-id": createExportRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createExportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/exports",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createExportRequest.createExportDetails,
        "CreateExportDetails",
        model.CreateExportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateExportResponse>{},
        body: await response.json(),
        bodyKey: "export",
        bodyModel: model.Export,
        type: "model.Export",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new file system in the specified compartment and
* availability domain. Instances can mount file systems in
* another availability domain, but doing so might increase
* latency when compared to mounting instances in the same
* availability domain.
* <p>
After you create a file system, you can associate it with a mount
* target. Instances can then mount the file system by connecting to the
* mount target's IP address. You can associate a file system with
* more than one mount target at a time.
* <p>
For information about access control and compartments, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* <p>
For information about Network Security Groups access control, see
* [Network Security Groups](https://docs.cloud.oracle.com/Content/Network/Concepts/networksecuritygroups.htm).
* <p>
For information about availability domains, see [Regions and
* Availability Domains](https://docs.cloud.oracle.com/Content/General/Concepts/regions.htm).
* To get a list of availability domains, use the
* `ListAvailabilityDomains` operation in the Identity and Access
* Management Service API.
* <p>
All Oracle Cloud Infrastructure resources, including
* file systems, get an Oracle-assigned, unique ID called an Oracle
* Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)).
* When you create a resource, you can find its OCID in the response.
* You can also retrieve a resource's OCID by using a List API operation on that resource
* type or by viewing the resource in the Console.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateFileSystemRequest
     * @return CreateFileSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateFileSystem.ts.html |here} to see how to use CreateFileSystem API.
     */
  public async createFileSystem(
    createFileSystemRequest: requests.CreateFileSystemRequest
  ): Promise<responses.CreateFileSystemResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#createFileSystem.");
    const operationName = "createFileSystem";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FileSystem/CreateFileSystem";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFileSystemRequest.opcRetryToken,
      "opc-request-id": createFileSystemRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFileSystemRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fileSystems",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFileSystemRequest.createFileSystemDetails,
        "CreateFileSystemDetails",
        model.CreateFileSystemDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFileSystemResponse>{},
        body: await response.json(),
        bodyKey: "fileSystem",
        bodyModel: model.FileSystem,
        type: "model.FileSystem",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new file system snapshot policy in the specified compartment and
* availability domain.
* <p>
After you create a file system snapshot policy, you can associate it with
* file systems.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateFilesystemSnapshotPolicyRequest
     * @return CreateFilesystemSnapshotPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateFilesystemSnapshotPolicy.ts.html |here} to see how to use CreateFilesystemSnapshotPolicy API.
     */
  public async createFilesystemSnapshotPolicy(
    createFilesystemSnapshotPolicyRequest: requests.CreateFilesystemSnapshotPolicyRequest
  ): Promise<responses.CreateFilesystemSnapshotPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#createFilesystemSnapshotPolicy.");
    const operationName = "createFilesystemSnapshotPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FilesystemSnapshotPolicy/CreateFilesystemSnapshotPolicy";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFilesystemSnapshotPolicyRequest.opcRetryToken,
      "opc-request-id": createFilesystemSnapshotPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFilesystemSnapshotPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/filesystemSnapshotPolicies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFilesystemSnapshotPolicyRequest.createFilesystemSnapshotPolicyDetails,
        "CreateFilesystemSnapshotPolicyDetails",
        model.CreateFilesystemSnapshotPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFilesystemSnapshotPolicyResponse>{},
        body: await response.json(),
        bodyKey: "filesystemSnapshotPolicy",
        bodyModel: model.FilesystemSnapshotPolicy,
        type: "model.FilesystemSnapshotPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new mount target in the specified compartment and
* subnet. You can associate a file system with a mount
* target only when they exist in the same availability domain. Instances
* can connect to mount targets in another availablity domain, but
* you might see higher latency than with instances in the same
* availability domain as the mount target.
* <p>
Mount targets have one or more private IP addresses that you can
* provide as the host portion of remote target parameters in
* client mount commands. These private IP addresses are listed
* in the privateIpIds property of the mount target and are highly available. Mount
* targets also consume additional IP addresses in their subnet.
* Do not use /30 or smaller subnets for mount target creation because they
* do not have sufficient available IP addresses.
* Allow at least three IP addresses for each mount target.
* <p>
For information about access control and compartments, see
* [Overview of the IAM
* Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* <p>
For information about availability domains, see [Regions and
* Availability Domains](https://docs.cloud.oracle.com/Content/General/Concepts/regions.htm).
* To get a list of availability domains, use the
* `ListAvailabilityDomains` operation in the Identity and Access
* Management Service API.
* <p>
All Oracle Cloud Infrastructure Services resources, including
* mount targets, get an Oracle-assigned, unique ID called an
* Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)).
* When you create a resource, you can find its OCID in the response.
* You can also retrieve a resource's OCID by using a List API operation on that resource
* type, or by viewing the resource in the Console.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMountTargetRequest
     * @return CreateMountTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateMountTarget.ts.html |here} to see how to use CreateMountTarget API.
     */
  public async createMountTarget(
    createMountTargetRequest: requests.CreateMountTargetRequest
  ): Promise<responses.CreateMountTargetResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#createMountTarget.");
    const operationName = "createMountTarget";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/MountTarget/CreateMountTarget";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createMountTargetRequest.opcRetryToken,
      "opc-request-id": createMountTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMountTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/mountTargets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMountTargetRequest.createMountTargetDetails,
        "CreateMountTargetDetails",
        model.CreateMountTargetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMountTargetResponse>{},
        body: await response.json(),
        bodyKey: "mountTarget",
        bodyModel: model.MountTarget,
        type: "model.MountTarget",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new outbound connector in the specified compartment.
* You can associate an outbound connector with a mount target only when
* they exist in the same availability domain.
* <p>
For information about access control and compartments, see
* [Overview of the IAM
* Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* <p>
For information about availability domains, see [Regions and
* Availability Domains](https://docs.cloud.oracle.com/Content/General/Concepts/regions.htm).
* To get a list of availability domains, use the
* `ListAvailabilityDomains` operation in the Identity and Access
* Management Service API.
* <p>
All Oracle Cloud Infrastructure Services resources, including
* outbound connectors, get an Oracle-assigned, unique ID called an
* Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)).
* When you create a resource, you can find its OCID in the response.
* You can also retrieve a resource's OCID by using a List API operation on that resource
* type, or by viewing the resource in the Console.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateOutboundConnectorRequest
     * @return CreateOutboundConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateOutboundConnector.ts.html |here} to see how to use CreateOutboundConnector API.
     */
  public async createOutboundConnector(
    createOutboundConnectorRequest: requests.CreateOutboundConnectorRequest
  ): Promise<responses.CreateOutboundConnectorResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#createOutboundConnector.");
    const operationName = "createOutboundConnector";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/OutboundConnector/CreateOutboundConnector";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOutboundConnectorRequest.opcRetryToken,
      "opc-request-id": createOutboundConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOutboundConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/outboundConnectors",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOutboundConnectorRequest.createOutboundConnectorDetails,
        "CreateOutboundConnectorDetails",
        model.CreateOutboundConnectorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOutboundConnectorResponse>{},
        body: await response.json(),
        bodyKey: "outboundConnector",
        bodyModel: model.OutboundConnector,
        type: "model.OutboundConnector",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new replication in the specified compartment.
* Replications are the primary resource that governs the policy of cross-region replication between source
* and target file systems. Replications are associated with a secondary resource called a {@link ReplicationTarget}
* located in another availability domain.
* The associated replication target resource is automatically created along with the replication resource.
* The replication retrieves the delta of data between two snapshots of a source file system
* and sends it to the associated `ReplicationTarget`, which retrieves the delta and applies it to the target
* file system.
* Only unexported file systems can be used as target file systems.
* For more information, see [Using Replication](https://docs.cloud.oracle.com/iaas/Content/File/Tasks/FSreplication.htm).
* <p>
For information about access control and compartments, see
* [Overview of the IAM
* Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* <p>
For information about availability domains, see [Regions and
* Availability Domains](https://docs.cloud.oracle.com/Content/General/Concepts/regions.htm).
* To get a list of availability domains, use the
* `ListAvailabilityDomains` operation in the Identity and Access
* Management Service API.
* <p>
All Oracle Cloud Infrastructure Services resources, including
* replications, get an Oracle-assigned, unique ID called an
* Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)).
* When you create a resource, you can find its OCID in the response.
* You can also retrieve a resource's OCID by using a List API operation on that resource
* type, or by viewing the resource in the Console.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateReplicationRequest
     * @return CreateReplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateReplication.ts.html |here} to see how to use CreateReplication API.
     */
  public async createReplication(
    createReplicationRequest: requests.CreateReplicationRequest
  ): Promise<responses.CreateReplicationResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#createReplication.");
    const operationName = "createReplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Replication/CreateReplication";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createReplicationRequest.opcRetryToken,
      "opc-request-id": createReplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createReplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/replications",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createReplicationRequest.createReplicationDetails,
        "CreateReplicationDetails",
        model.CreateReplicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateReplicationResponse>{},
        body: await response.json(),
        bodyKey: "replication",
        bodyModel: model.Replication,
        type: "model.Replication",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new snapshot of the specified file system. You
   * can access the snapshot at `.snapshot/<name>`.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateSnapshotRequest
   * @return CreateSnapshotResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateSnapshot.ts.html |here} to see how to use CreateSnapshot API.
   */
  public async createSnapshot(
    createSnapshotRequest: requests.CreateSnapshotRequest
  ): Promise<responses.CreateSnapshotResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#createSnapshot.");
    const operationName = "createSnapshot";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Snapshot/CreateSnapshot";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSnapshotRequest.opcRetryToken,
      "opc-request-id": createSnapshotRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSnapshotRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/snapshots",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSnapshotRequest.createSnapshotDetails,
        "CreateSnapshotDetails",
        model.CreateSnapshotDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSnapshotResponse>{},
        body: await response.json(),
        bodyKey: "snapshot",
        bodyModel: model.Snapshot,
        type: "model.Snapshot",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified export.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteExportRequest
   * @return DeleteExportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteExport.ts.html |here} to see how to use DeleteExport API.
   */
  public async deleteExport(
    deleteExportRequest: requests.DeleteExportRequest
  ): Promise<responses.DeleteExportResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#deleteExport.");
    const operationName = "deleteExport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Export/DeleteExport";
    const pathParams = {
      "{exportId}": deleteExportRequest.exportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteExportRequest.ifMatch,
      "opc-request-id": deleteExportRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteExportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/exports/{exportId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteExportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified file system. Before you delete the file system,
   * verify that no remaining export resources still reference it. Deleting a
   * file system also deletes all of its snapshots.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteFileSystemRequest
   * @return DeleteFileSystemResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteFileSystem.ts.html |here} to see how to use DeleteFileSystem API.
   */
  public async deleteFileSystem(
    deleteFileSystemRequest: requests.DeleteFileSystemRequest
  ): Promise<responses.DeleteFileSystemResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#deleteFileSystem.");
    const operationName = "deleteFileSystem";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FileSystem/DeleteFileSystem";
    const pathParams = {
      "{fileSystemId}": deleteFileSystemRequest.fileSystemId
    };

    const queryParams = {
      "canDetachChildFileSystem": deleteFileSystemRequest.canDetachChildFileSystem
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFileSystemRequest.ifMatch,
      "opc-request-id": deleteFileSystemRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFileSystemRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fileSystems/{fileSystemId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFileSystemResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified file system snapshot policy.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteFilesystemSnapshotPolicyRequest
   * @return DeleteFilesystemSnapshotPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteFilesystemSnapshotPolicy.ts.html |here} to see how to use DeleteFilesystemSnapshotPolicy API.
   */
  public async deleteFilesystemSnapshotPolicy(
    deleteFilesystemSnapshotPolicyRequest: requests.DeleteFilesystemSnapshotPolicyRequest
  ): Promise<responses.DeleteFilesystemSnapshotPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#deleteFilesystemSnapshotPolicy.");
    const operationName = "deleteFilesystemSnapshotPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FilesystemSnapshotPolicy/DeleteFilesystemSnapshotPolicy";
    const pathParams = {
      "{filesystemSnapshotPolicyId}":
        deleteFilesystemSnapshotPolicyRequest.filesystemSnapshotPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFilesystemSnapshotPolicyRequest.ifMatch,
      "opc-request-id": deleteFilesystemSnapshotPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFilesystemSnapshotPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/filesystemSnapshotPolicies/{filesystemSnapshotPolicyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFilesystemSnapshotPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified mount target. This operation also deletes the
   * mount target's VNICs.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMountTargetRequest
   * @return DeleteMountTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteMountTarget.ts.html |here} to see how to use DeleteMountTarget API.
   */
  public async deleteMountTarget(
    deleteMountTargetRequest: requests.DeleteMountTargetRequest
  ): Promise<responses.DeleteMountTargetResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#deleteMountTarget.");
    const operationName = "deleteMountTarget";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/MountTarget/DeleteMountTarget";
    const pathParams = {
      "{mountTargetId}": deleteMountTargetRequest.mountTargetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteMountTargetRequest.ifMatch,
      "opc-request-id": deleteMountTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMountTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/mountTargets/{mountTargetId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMountTargetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified outbound connector.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteOutboundConnectorRequest
   * @return DeleteOutboundConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteOutboundConnector.ts.html |here} to see how to use DeleteOutboundConnector API.
   */
  public async deleteOutboundConnector(
    deleteOutboundConnectorRequest: requests.DeleteOutboundConnectorRequest
  ): Promise<responses.DeleteOutboundConnectorResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#deleteOutboundConnector.");
    const operationName = "deleteOutboundConnector";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/OutboundConnector/DeleteOutboundConnector";
    const pathParams = {
      "{outboundConnectorId}": deleteOutboundConnectorRequest.outboundConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOutboundConnectorRequest.ifMatch,
      "opc-request-id": deleteOutboundConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOutboundConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/outboundConnectors/{outboundConnectorId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOutboundConnectorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified replication and the the associated replication target.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteReplicationRequest
   * @return DeleteReplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteReplication.ts.html |here} to see how to use DeleteReplication API.
   */
  public async deleteReplication(
    deleteReplicationRequest: requests.DeleteReplicationRequest
  ): Promise<responses.DeleteReplicationResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#deleteReplication.");
    const operationName = "deleteReplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Replication/DeleteReplication";
    const pathParams = {
      "{replicationId}": deleteReplicationRequest.replicationId
    };

    const queryParams = {
      "deleteMode": deleteReplicationRequest.deleteMode
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteReplicationRequest.ifMatch,
      "opc-request-id": deleteReplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteReplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/replications/{replicationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteReplicationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified replication target.
   * This operation causes the immediate release of the target file system if there are currently no delta application operations.
   * If there is any current delta being applied the delete operation is blocked until the current
   * delta has been completely applied.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteReplicationTargetRequest
   * @return DeleteReplicationTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteReplicationTarget.ts.html |here} to see how to use DeleteReplicationTarget API.
   */
  public async deleteReplicationTarget(
    deleteReplicationTargetRequest: requests.DeleteReplicationTargetRequest
  ): Promise<responses.DeleteReplicationTargetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#deleteReplicationTarget.");
    const operationName = "deleteReplicationTarget";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/ReplicationTarget/DeleteReplicationTarget";
    const pathParams = {
      "{replicationTargetId}": deleteReplicationTargetRequest.replicationTargetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteReplicationTargetRequest.ifMatch,
      "opc-request-id": deleteReplicationTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteReplicationTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/replicationTargets/{replicationTargetId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteReplicationTargetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified snapshot.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteSnapshotRequest
   * @return DeleteSnapshotResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteSnapshot.ts.html |here} to see how to use DeleteSnapshot API.
   */
  public async deleteSnapshot(
    deleteSnapshotRequest: requests.DeleteSnapshotRequest
  ): Promise<responses.DeleteSnapshotResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#deleteSnapshot.");
    const operationName = "deleteSnapshot";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Snapshot/DeleteSnapshot";
    const pathParams = {
      "{snapshotId}": deleteSnapshotRequest.snapshotId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSnapshotRequest.ifMatch,
      "opc-request-id": deleteSnapshotRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSnapshotRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/snapshots/{snapshotId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSnapshotResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detaches the file system from its parent file system
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DetachCloneRequest
   * @return DetachCloneResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DetachClone.ts.html |here} to see how to use DetachClone API.
   */
  public async detachClone(
    detachCloneRequest: requests.DetachCloneRequest
  ): Promise<responses.DetachCloneResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#detachClone.");
    const operationName = "detachClone";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FileSystem/DetachClone";
    const pathParams = {
      "{fileSystemId}": detachCloneRequest.fileSystemId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": detachCloneRequest.ifMatch,
      "opc-request-id": detachCloneRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detachCloneRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fileSystems/{fileSystemId}/actions/detachClone",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachCloneResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Provides estimates for replication created using specific file system.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param EstimateReplicationRequest
   * @return EstimateReplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/EstimateReplication.ts.html |here} to see how to use EstimateReplication API.
   */
  public async estimateReplication(
    estimateReplicationRequest: requests.EstimateReplicationRequest
  ): Promise<responses.EstimateReplicationResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#estimateReplication.");
    const operationName = "estimateReplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FileSystem/EstimateReplication";
    const pathParams = {
      "{fileSystemId}": estimateReplicationRequest.fileSystemId
    };

    const queryParams = {
      "changeRateInMBps": estimateReplicationRequest.changeRateInMBps
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": estimateReplicationRequest.ifMatch,
      "opc-request-id": estimateReplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      estimateReplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fileSystems/{fileSystemId}/actions/estimateReplication",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.EstimateReplicationResponse>{},
        body: await response.json(),
        bodyKey: "replicationEstimate",
        bodyModel: model.ReplicationEstimate,
        type: "model.ReplicationEstimate",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified export's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetExportRequest
   * @return GetExportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetExport.ts.html |here} to see how to use GetExport API.
   */
  public async getExport(
    getExportRequest: requests.GetExportRequest
  ): Promise<responses.GetExportResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#getExport.");
    const operationName = "getExport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Export/GetExport";
    const pathParams = {
      "{exportId}": getExportRequest.exportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getExportRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getExportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/exports/{exportId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetExportResponse>{},
        body: await response.json(),
        bodyKey: "export",
        bodyModel: model.Export,
        type: "model.Export",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified export set's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetExportSetRequest
   * @return GetExportSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetExportSet.ts.html |here} to see how to use GetExportSet API.
   */
  public async getExportSet(
    getExportSetRequest: requests.GetExportSetRequest
  ): Promise<responses.GetExportSetResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#getExportSet.");
    const operationName = "getExportSet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/ExportSet/GetExportSet";
    const pathParams = {
      "{exportSetId}": getExportSetRequest.exportSetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getExportSetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getExportSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/exportSets/{exportSetId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetExportSetResponse>{},
        body: await response.json(),
        bodyKey: "exportSet",
        bodyModel: model.ExportSet,
        type: "model.ExportSet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified file system's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetFileSystemRequest
   * @return GetFileSystemResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetFileSystem.ts.html |here} to see how to use GetFileSystem API.
   */
  public async getFileSystem(
    getFileSystemRequest: requests.GetFileSystemRequest
  ): Promise<responses.GetFileSystemResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#getFileSystem.");
    const operationName = "getFileSystem";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FileSystem/GetFileSystem";
    const pathParams = {
      "{fileSystemId}": getFileSystemRequest.fileSystemId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFileSystemRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFileSystemRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fileSystems/{fileSystemId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFileSystemResponse>{},
        body: await response.json(),
        bodyKey: "fileSystem",
        bodyModel: model.FileSystem,
        type: "model.FileSystem",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified file system snapshot policy's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetFilesystemSnapshotPolicyRequest
   * @return GetFilesystemSnapshotPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetFilesystemSnapshotPolicy.ts.html |here} to see how to use GetFilesystemSnapshotPolicy API.
   */
  public async getFilesystemSnapshotPolicy(
    getFilesystemSnapshotPolicyRequest: requests.GetFilesystemSnapshotPolicyRequest
  ): Promise<responses.GetFilesystemSnapshotPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#getFilesystemSnapshotPolicy.");
    const operationName = "getFilesystemSnapshotPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FilesystemSnapshotPolicy/GetFilesystemSnapshotPolicy";
    const pathParams = {
      "{filesystemSnapshotPolicyId}": getFilesystemSnapshotPolicyRequest.filesystemSnapshotPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFilesystemSnapshotPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFilesystemSnapshotPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/filesystemSnapshotPolicies/{filesystemSnapshotPolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFilesystemSnapshotPolicyResponse>{},
        body: await response.json(),
        bodyKey: "filesystemSnapshotPolicy",
        bodyModel: model.FilesystemSnapshotPolicy,
        type: "model.FilesystemSnapshotPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified mount target's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetMountTargetRequest
   * @return GetMountTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetMountTarget.ts.html |here} to see how to use GetMountTarget API.
   */
  public async getMountTarget(
    getMountTargetRequest: requests.GetMountTargetRequest
  ): Promise<responses.GetMountTargetResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#getMountTarget.");
    const operationName = "getMountTarget";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/MountTarget/GetMountTarget";
    const pathParams = {
      "{mountTargetId}": getMountTargetRequest.mountTargetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMountTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMountTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/mountTargets/{mountTargetId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMountTargetResponse>{},
        body: await response.json(),
        bodyKey: "mountTarget",
        bodyModel: model.MountTarget,
        type: "model.MountTarget",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified outbound connector's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetOutboundConnectorRequest
   * @return GetOutboundConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetOutboundConnector.ts.html |here} to see how to use GetOutboundConnector API.
   */
  public async getOutboundConnector(
    getOutboundConnectorRequest: requests.GetOutboundConnectorRequest
  ): Promise<responses.GetOutboundConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#getOutboundConnector.");
    const operationName = "getOutboundConnector";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/OutboundConnector/GetOutboundConnector";
    const pathParams = {
      "{outboundConnectorId}": getOutboundConnectorRequest.outboundConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOutboundConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOutboundConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/outboundConnectors/{outboundConnectorId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOutboundConnectorResponse>{},
        body: await response.json(),
        bodyKey: "outboundConnector",
        bodyModel: model.OutboundConnector,
        type: "model.OutboundConnector",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified replication's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetReplicationRequest
   * @return GetReplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetReplication.ts.html |here} to see how to use GetReplication API.
   */
  public async getReplication(
    getReplicationRequest: requests.GetReplicationRequest
  ): Promise<responses.GetReplicationResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#getReplication.");
    const operationName = "getReplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Replication/GetReplication";
    const pathParams = {
      "{replicationId}": getReplicationRequest.replicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getReplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getReplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/replications/{replicationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetReplicationResponse>{},
        body: await response.json(),
        bodyKey: "replication",
        bodyModel: model.Replication,
        type: "model.Replication",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified replication target's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetReplicationTargetRequest
   * @return GetReplicationTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetReplicationTarget.ts.html |here} to see how to use GetReplicationTarget API.
   */
  public async getReplicationTarget(
    getReplicationTargetRequest: requests.GetReplicationTargetRequest
  ): Promise<responses.GetReplicationTargetResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#getReplicationTarget.");
    const operationName = "getReplicationTarget";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/ReplicationTarget/GetReplicationTarget";
    const pathParams = {
      "{replicationTargetId}": getReplicationTargetRequest.replicationTargetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getReplicationTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getReplicationTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/replicationTargets/{replicationTargetId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetReplicationTargetResponse>{},
        body: await response.json(),
        bodyKey: "replicationTarget",
        bodyModel: model.ReplicationTarget,
        type: "model.ReplicationTarget",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified snapshot's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSnapshotRequest
   * @return GetSnapshotResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetSnapshot.ts.html |here} to see how to use GetSnapshot API.
   */
  public async getSnapshot(
    getSnapshotRequest: requests.GetSnapshotRequest
  ): Promise<responses.GetSnapshotResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#getSnapshot.");
    const operationName = "getSnapshot";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Snapshot/GetSnapshot";
    const pathParams = {
      "{snapshotId}": getSnapshotRequest.snapshotId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSnapshotRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSnapshotRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/snapshots/{snapshotId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSnapshotResponse>{},
        body: await response.json(),
        bodyKey: "snapshot",
        bodyModel: model.Snapshot,
        type: "model.Snapshot",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the export set resources in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListExportSetsRequest
   * @return ListExportSetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListExportSets.ts.html |here} to see how to use ListExportSets API.
   */
  public async listExportSets(
    listExportSetsRequest: requests.ListExportSetsRequest
  ): Promise<responses.ListExportSetsResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#listExportSets.");
    const operationName = "listExportSets";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/ExportSetSummary/ListExportSets";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listExportSetsRequest.compartmentId,
      "availabilityDomain": listExportSetsRequest.availabilityDomain,
      "limit": listExportSetsRequest.limit,
      "page": listExportSetsRequest.page,
      "displayName": listExportSetsRequest.displayName,
      "lifecycleState": listExportSetsRequest.lifecycleState,
      "id": listExportSetsRequest.id,
      "sortBy": listExportSetsRequest.sortBy,
      "sortOrder": listExportSetsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listExportSetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listExportSetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/exportSets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListExportSetsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ExportSetSummary,
        type: "Array<model.ExportSetSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listExportSetsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ExportSetSummary objects
   * contained in responses from the listExportSets operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllExportSets(
    request: requests.ListExportSetsRequest
  ): AsyncIterableIterator<model.ExportSetSummary> {
    return paginateRecords(request, req => this.listExportSets(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listExportSetsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listExportSets operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllExportSetsResponses(
    request: requests.ListExportSetsRequest
  ): AsyncIterableIterator<responses.ListExportSetsResponse> {
    return paginateResponses(request, req => this.listExportSets(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ExportSetSummary objects
   * contained in responses from the listExportSets operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listExportSetsRecordIterator(
    request: requests.ListExportSetsRequest
  ): AsyncIterableIterator<model.ExportSetSummary> {
    return paginateRecords(request, req => this.listExportSets(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listExportSets operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listExportSetsResponseIterator(
    request: requests.ListExportSetsRequest
  ): AsyncIterableIterator<responses.ListExportSetsResponse> {
    return paginateResponses(request, req => this.listExportSets(req));
  }

  /**
   * Lists export resources by compartment, file system, or export
   * set. You must specify an export set ID, a file system ID, and
   * / or a compartment ID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListExportsRequest
   * @return ListExportsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListExports.ts.html |here} to see how to use ListExports API.
   */
  public async listExports(
    listExportsRequest: requests.ListExportsRequest
  ): Promise<responses.ListExportsResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#listExports.");
    const operationName = "listExports";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/ExportSummary/ListExports";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listExportsRequest.compartmentId,
      "limit": listExportsRequest.limit,
      "page": listExportsRequest.page,
      "exportSetId": listExportsRequest.exportSetId,
      "fileSystemId": listExportsRequest.fileSystemId,
      "lifecycleState": listExportsRequest.lifecycleState,
      "id": listExportsRequest.id,
      "sortBy": listExportsRequest.sortBy,
      "sortOrder": listExportsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listExportsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listExportsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/exports",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListExportsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ExportSummary,
        type: "Array<model.ExportSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listExportsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ExportSummary objects
   * contained in responses from the listExports operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllExports(
    request: requests.ListExportsRequest
  ): AsyncIterableIterator<model.ExportSummary> {
    return paginateRecords(request, req => this.listExports(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listExportsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listExports operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllExportsResponses(
    request: requests.ListExportsRequest
  ): AsyncIterableIterator<responses.ListExportsResponse> {
    return paginateResponses(request, req => this.listExports(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ExportSummary objects
   * contained in responses from the listExports operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listExportsRecordIterator(
    request: requests.ListExportsRequest
  ): AsyncIterableIterator<model.ExportSummary> {
    return paginateRecords(request, req => this.listExports(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listExports operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listExportsResponseIterator(
    request: requests.ListExportsRequest
  ): AsyncIterableIterator<responses.ListExportsResponse> {
    return paginateResponses(request, req => this.listExports(req));
  }

  /**
   * Lists the file system resources in the specified compartment, or by the specified compartment and
   * file system snapshot policy.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListFileSystemsRequest
   * @return ListFileSystemsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListFileSystems.ts.html |here} to see how to use ListFileSystems API.
   */
  public async listFileSystems(
    listFileSystemsRequest: requests.ListFileSystemsRequest
  ): Promise<responses.ListFileSystemsResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#listFileSystems.");
    const operationName = "listFileSystems";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FileSystemSummary/ListFileSystems";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listFileSystemsRequest.compartmentId,
      "availabilityDomain": listFileSystemsRequest.availabilityDomain,
      "limit": listFileSystemsRequest.limit,
      "page": listFileSystemsRequest.page,
      "displayName": listFileSystemsRequest.displayName,
      "lifecycleState": listFileSystemsRequest.lifecycleState,
      "id": listFileSystemsRequest.id,
      "sourceSnapshotId": listFileSystemsRequest.sourceSnapshotId,
      "parentFileSystemId": listFileSystemsRequest.parentFileSystemId,
      "filesystemSnapshotPolicyId": listFileSystemsRequest.filesystemSnapshotPolicyId,
      "sortBy": listFileSystemsRequest.sortBy,
      "sortOrder": listFileSystemsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFileSystemsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFileSystemsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fileSystems",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFileSystemsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.FileSystemSummary,
        type: "Array<model.FileSystemSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listFileSystemsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.FileSystemSummary objects
   * contained in responses from the listFileSystems operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFileSystems(
    request: requests.ListFileSystemsRequest
  ): AsyncIterableIterator<model.FileSystemSummary> {
    return paginateRecords(request, req => this.listFileSystems(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listFileSystemsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listFileSystems operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFileSystemsResponses(
    request: requests.ListFileSystemsRequest
  ): AsyncIterableIterator<responses.ListFileSystemsResponse> {
    return paginateResponses(request, req => this.listFileSystems(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.FileSystemSummary objects
   * contained in responses from the listFileSystems operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFileSystemsRecordIterator(
    request: requests.ListFileSystemsRequest
  ): AsyncIterableIterator<model.FileSystemSummary> {
    return paginateRecords(request, req => this.listFileSystems(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listFileSystems operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFileSystemsResponseIterator(
    request: requests.ListFileSystemsRequest
  ): AsyncIterableIterator<responses.ListFileSystemsResponse> {
    return paginateResponses(request, req => this.listFileSystems(req));
  }

  /**
   * Lists file system snapshot policies in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListFilesystemSnapshotPoliciesRequest
   * @return ListFilesystemSnapshotPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListFilesystemSnapshotPolicies.ts.html |here} to see how to use ListFilesystemSnapshotPolicies API.
   */
  public async listFilesystemSnapshotPolicies(
    listFilesystemSnapshotPoliciesRequest: requests.ListFilesystemSnapshotPoliciesRequest
  ): Promise<responses.ListFilesystemSnapshotPoliciesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#listFilesystemSnapshotPolicies.");
    const operationName = "listFilesystemSnapshotPolicies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FilesystemSnapshotPolicySummary/ListFilesystemSnapshotPolicies";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listFilesystemSnapshotPoliciesRequest.compartmentId,
      "availabilityDomain": listFilesystemSnapshotPoliciesRequest.availabilityDomain,
      "limit": listFilesystemSnapshotPoliciesRequest.limit,
      "page": listFilesystemSnapshotPoliciesRequest.page,
      "displayName": listFilesystemSnapshotPoliciesRequest.displayName,
      "lifecycleState": listFilesystemSnapshotPoliciesRequest.lifecycleState,
      "id": listFilesystemSnapshotPoliciesRequest.id,
      "sortBy": listFilesystemSnapshotPoliciesRequest.sortBy,
      "sortOrder": listFilesystemSnapshotPoliciesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFilesystemSnapshotPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFilesystemSnapshotPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/filesystemSnapshotPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFilesystemSnapshotPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.FilesystemSnapshotPolicySummary,
        type: "Array<model.FilesystemSnapshotPolicySummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listFilesystemSnapshotPoliciesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.FilesystemSnapshotPolicySummary objects
   * contained in responses from the listFilesystemSnapshotPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFilesystemSnapshotPolicies(
    request: requests.ListFilesystemSnapshotPoliciesRequest
  ): AsyncIterableIterator<model.FilesystemSnapshotPolicySummary> {
    return paginateRecords(request, req => this.listFilesystemSnapshotPolicies(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listFilesystemSnapshotPoliciesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listFilesystemSnapshotPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFilesystemSnapshotPoliciesResponses(
    request: requests.ListFilesystemSnapshotPoliciesRequest
  ): AsyncIterableIterator<responses.ListFilesystemSnapshotPoliciesResponse> {
    return paginateResponses(request, req => this.listFilesystemSnapshotPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.FilesystemSnapshotPolicySummary objects
   * contained in responses from the listFilesystemSnapshotPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFilesystemSnapshotPoliciesRecordIterator(
    request: requests.ListFilesystemSnapshotPoliciesRequest
  ): AsyncIterableIterator<model.FilesystemSnapshotPolicySummary> {
    return paginateRecords(request, req => this.listFilesystemSnapshotPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listFilesystemSnapshotPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFilesystemSnapshotPoliciesResponseIterator(
    request: requests.ListFilesystemSnapshotPoliciesRequest
  ): AsyncIterableIterator<responses.ListFilesystemSnapshotPoliciesResponse> {
    return paginateResponses(request, req => this.listFilesystemSnapshotPolicies(req));
  }

  /**
   * Lists the mount target resources in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMountTargetsRequest
   * @return ListMountTargetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListMountTargets.ts.html |here} to see how to use ListMountTargets API.
   */
  public async listMountTargets(
    listMountTargetsRequest: requests.ListMountTargetsRequest
  ): Promise<responses.ListMountTargetsResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#listMountTargets.");
    const operationName = "listMountTargets";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/MountTargetSummary/ListMountTargets";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listMountTargetsRequest.compartmentId,
      "availabilityDomain": listMountTargetsRequest.availabilityDomain,
      "limit": listMountTargetsRequest.limit,
      "page": listMountTargetsRequest.page,
      "displayName": listMountTargetsRequest.displayName,
      "exportSetId": listMountTargetsRequest.exportSetId,
      "lifecycleState": listMountTargetsRequest.lifecycleState,
      "id": listMountTargetsRequest.id,
      "sortBy": listMountTargetsRequest.sortBy,
      "sortOrder": listMountTargetsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMountTargetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMountTargetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/mountTargets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMountTargetsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.MountTargetSummary,
        type: "Array<model.MountTargetSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listMountTargetsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.MountTargetSummary objects
   * contained in responses from the listMountTargets operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllMountTargets(
    request: requests.ListMountTargetsRequest
  ): AsyncIterableIterator<model.MountTargetSummary> {
    return paginateRecords(request, req => this.listMountTargets(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listMountTargetsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listMountTargets operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllMountTargetsResponses(
    request: requests.ListMountTargetsRequest
  ): AsyncIterableIterator<responses.ListMountTargetsResponse> {
    return paginateResponses(request, req => this.listMountTargets(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.MountTargetSummary objects
   * contained in responses from the listMountTargets operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listMountTargetsRecordIterator(
    request: requests.ListMountTargetsRequest
  ): AsyncIterableIterator<model.MountTargetSummary> {
    return paginateRecords(request, req => this.listMountTargets(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listMountTargets operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listMountTargetsResponseIterator(
    request: requests.ListMountTargetsRequest
  ): AsyncIterableIterator<responses.ListMountTargetsResponse> {
    return paginateResponses(request, req => this.listMountTargets(req));
  }

  /**
   * Lists the outbound connector resources in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListOutboundConnectorsRequest
   * @return ListOutboundConnectorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListOutboundConnectors.ts.html |here} to see how to use ListOutboundConnectors API.
   */
  public async listOutboundConnectors(
    listOutboundConnectorsRequest: requests.ListOutboundConnectorsRequest
  ): Promise<responses.ListOutboundConnectorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#listOutboundConnectors.");
    const operationName = "listOutboundConnectors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/OutboundConnectorSummary/ListOutboundConnectors";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOutboundConnectorsRequest.compartmentId,
      "availabilityDomain": listOutboundConnectorsRequest.availabilityDomain,
      "limit": listOutboundConnectorsRequest.limit,
      "page": listOutboundConnectorsRequest.page,
      "lifecycleState": listOutboundConnectorsRequest.lifecycleState,
      "displayName": listOutboundConnectorsRequest.displayName,
      "id": listOutboundConnectorsRequest.id,
      "sortBy": listOutboundConnectorsRequest.sortBy,
      "sortOrder": listOutboundConnectorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOutboundConnectorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOutboundConnectorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/outboundConnectors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOutboundConnectorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.OutboundConnectorSummary,
        type: "Array<model.OutboundConnectorSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listOutboundConnectorsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.OutboundConnectorSummary objects
   * contained in responses from the listOutboundConnectors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllOutboundConnectors(
    request: requests.ListOutboundConnectorsRequest
  ): AsyncIterableIterator<model.OutboundConnectorSummary> {
    return paginateRecords(request, req => this.listOutboundConnectors(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listOutboundConnectorsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listOutboundConnectors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllOutboundConnectorsResponses(
    request: requests.ListOutboundConnectorsRequest
  ): AsyncIterableIterator<responses.ListOutboundConnectorsResponse> {
    return paginateResponses(request, req => this.listOutboundConnectors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.OutboundConnectorSummary objects
   * contained in responses from the listOutboundConnectors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listOutboundConnectorsRecordIterator(
    request: requests.ListOutboundConnectorsRequest
  ): AsyncIterableIterator<model.OutboundConnectorSummary> {
    return paginateRecords(request, req => this.listOutboundConnectors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listOutboundConnectors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listOutboundConnectorsResponseIterator(
    request: requests.ListOutboundConnectorsRequest
  ): AsyncIterableIterator<responses.ListOutboundConnectorsResponse> {
    return paginateResponses(request, req => this.listOutboundConnectors(req));
  }

  /**
   * Lists the replication target resources in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListReplicationTargetsRequest
   * @return ListReplicationTargetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListReplicationTargets.ts.html |here} to see how to use ListReplicationTargets API.
   */
  public async listReplicationTargets(
    listReplicationTargetsRequest: requests.ListReplicationTargetsRequest
  ): Promise<responses.ListReplicationTargetsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#listReplicationTargets.");
    const operationName = "listReplicationTargets";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/ReplicationTargetSummary/ListReplicationTargets";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listReplicationTargetsRequest.compartmentId,
      "availabilityDomain": listReplicationTargetsRequest.availabilityDomain,
      "limit": listReplicationTargetsRequest.limit,
      "page": listReplicationTargetsRequest.page,
      "lifecycleState": listReplicationTargetsRequest.lifecycleState,
      "displayName": listReplicationTargetsRequest.displayName,
      "id": listReplicationTargetsRequest.id,
      "sortBy": listReplicationTargetsRequest.sortBy,
      "sortOrder": listReplicationTargetsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listReplicationTargetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listReplicationTargetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/replicationTargets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListReplicationTargetsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ReplicationTargetSummary,
        type: "Array<model.ReplicationTargetSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listReplicationTargetsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ReplicationTargetSummary objects
   * contained in responses from the listReplicationTargets operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllReplicationTargets(
    request: requests.ListReplicationTargetsRequest
  ): AsyncIterableIterator<model.ReplicationTargetSummary> {
    return paginateRecords(request, req => this.listReplicationTargets(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listReplicationTargetsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listReplicationTargets operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllReplicationTargetsResponses(
    request: requests.ListReplicationTargetsRequest
  ): AsyncIterableIterator<responses.ListReplicationTargetsResponse> {
    return paginateResponses(request, req => this.listReplicationTargets(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ReplicationTargetSummary objects
   * contained in responses from the listReplicationTargets operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listReplicationTargetsRecordIterator(
    request: requests.ListReplicationTargetsRequest
  ): AsyncIterableIterator<model.ReplicationTargetSummary> {
    return paginateRecords(request, req => this.listReplicationTargets(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listReplicationTargets operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listReplicationTargetsResponseIterator(
    request: requests.ListReplicationTargetsRequest
  ): AsyncIterableIterator<responses.ListReplicationTargetsResponse> {
    return paginateResponses(request, req => this.listReplicationTargets(req));
  }

  /**
   * Lists the replication resources in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListReplicationsRequest
   * @return ListReplicationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListReplications.ts.html |here} to see how to use ListReplications API.
   */
  public async listReplications(
    listReplicationsRequest: requests.ListReplicationsRequest
  ): Promise<responses.ListReplicationsResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#listReplications.");
    const operationName = "listReplications";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/ReplicationSummary/ListReplications";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listReplicationsRequest.compartmentId,
      "availabilityDomain": listReplicationsRequest.availabilityDomain,
      "limit": listReplicationsRequest.limit,
      "page": listReplicationsRequest.page,
      "lifecycleState": listReplicationsRequest.lifecycleState,
      "displayName": listReplicationsRequest.displayName,
      "id": listReplicationsRequest.id,
      "sortBy": listReplicationsRequest.sortBy,
      "sortOrder": listReplicationsRequest.sortOrder,
      "fileSystemId": listReplicationsRequest.fileSystemId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listReplicationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listReplicationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/replications",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListReplicationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ReplicationSummary,
        type: "Array<model.ReplicationSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listReplicationsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ReplicationSummary objects
   * contained in responses from the listReplications operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllReplications(
    request: requests.ListReplicationsRequest
  ): AsyncIterableIterator<model.ReplicationSummary> {
    return paginateRecords(request, req => this.listReplications(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listReplicationsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listReplications operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllReplicationsResponses(
    request: requests.ListReplicationsRequest
  ): AsyncIterableIterator<responses.ListReplicationsResponse> {
    return paginateResponses(request, req => this.listReplications(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ReplicationSummary objects
   * contained in responses from the listReplications operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listReplicationsRecordIterator(
    request: requests.ListReplicationsRequest
  ): AsyncIterableIterator<model.ReplicationSummary> {
    return paginateRecords(request, req => this.listReplications(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listReplications operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listReplicationsResponseIterator(
    request: requests.ListReplicationsRequest
  ): AsyncIterableIterator<responses.ListReplicationsResponse> {
    return paginateResponses(request, req => this.listReplications(req));
  }

  /**
     * Lists snapshots of the specified file system, or by file system snapshot policy and compartment,
* or by file system snapshot policy and file system.
* <p>
If file system ID is not specified, a file system snapshot policy ID and compartment ID must be specified.
* <p>
Users can only sort by time created when listing snapshots by file system snapshot policy ID and compartment ID
* (sort by name is NOT supported for listing snapshots by policy and compartment).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSnapshotsRequest
     * @return ListSnapshotsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListSnapshots.ts.html |here} to see how to use ListSnapshots API.
     */
  public async listSnapshots(
    listSnapshotsRequest: requests.ListSnapshotsRequest
  ): Promise<responses.ListSnapshotsResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#listSnapshots.");
    const operationName = "listSnapshots";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/SnapshotSummary/ListSnapshots";
    const pathParams = {};

    const queryParams = {
      "limit": listSnapshotsRequest.limit,
      "page": listSnapshotsRequest.page,
      "lifecycleState": listSnapshotsRequest.lifecycleState,
      "id": listSnapshotsRequest.id,
      "filesystemSnapshotPolicyId": listSnapshotsRequest.filesystemSnapshotPolicyId,
      "compartmentId": listSnapshotsRequest.compartmentId,
      "fileSystemId": listSnapshotsRequest.fileSystemId,
      "sortOrder": listSnapshotsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSnapshotsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSnapshotsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/snapshots",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSnapshotsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SnapshotSummary,
        type: "Array<model.SnapshotSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSnapshotsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SnapshotSummary objects
   * contained in responses from the listSnapshots operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSnapshots(
    request: requests.ListSnapshotsRequest
  ): AsyncIterableIterator<model.SnapshotSummary> {
    return paginateRecords(request, req => this.listSnapshots(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSnapshotsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSnapshots operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSnapshotsResponses(
    request: requests.ListSnapshotsRequest
  ): AsyncIterableIterator<responses.ListSnapshotsResponse> {
    return paginateResponses(request, req => this.listSnapshots(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SnapshotSummary objects
   * contained in responses from the listSnapshots operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSnapshotsRecordIterator(
    request: requests.ListSnapshotsRequest
  ): AsyncIterableIterator<model.SnapshotSummary> {
    return paginateRecords(request, req => this.listSnapshots(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSnapshots operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSnapshotsResponseIterator(
    request: requests.ListSnapshotsRequest
  ): AsyncIterableIterator<responses.ListSnapshotsResponse> {
    return paginateResponses(request, req => this.listSnapshots(req));
  }

  /**
     * This operation pauses the scheduled snapshot creation and snapshot deletion of the policy and updates the lifecycle state of the file system
* snapshot policy from ACTIVE to INACTIVE. When a file system snapshot policy is paused, file systems that are associated with the
* policy will not have scheduled snapshots created or deleted.
* <p>
If the policy is already paused, or in the INACTIVE state, you cannot pause it again. You can't pause a policy
* that is in a DELETING, DELETED, FAILED, CREATING or INACTIVE state; attempts to pause a policy in these states result in a 409 conflict error.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PauseFilesystemSnapshotPolicyRequest
     * @return PauseFilesystemSnapshotPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/PauseFilesystemSnapshotPolicy.ts.html |here} to see how to use PauseFilesystemSnapshotPolicy API.
     */
  public async pauseFilesystemSnapshotPolicy(
    pauseFilesystemSnapshotPolicyRequest: requests.PauseFilesystemSnapshotPolicyRequest
  ): Promise<responses.PauseFilesystemSnapshotPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#pauseFilesystemSnapshotPolicy.");
    const operationName = "pauseFilesystemSnapshotPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FilesystemSnapshotPolicy/PauseFilesystemSnapshotPolicy";
    const pathParams = {
      "{filesystemSnapshotPolicyId}":
        pauseFilesystemSnapshotPolicyRequest.filesystemSnapshotPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": pauseFilesystemSnapshotPolicyRequest.ifMatch,
      "opc-request-id": pauseFilesystemSnapshotPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      pauseFilesystemSnapshotPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/filesystemSnapshotPolicies/{filesystemSnapshotPolicyId}/actions/pause",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PauseFilesystemSnapshotPolicyResponse>{},
        body: await response.json(),
        bodyKey: "filesystemSnapshotPolicy",
        bodyModel: model.FilesystemSnapshotPolicy,
        type: "model.FilesystemSnapshotPolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Schedule a downgrade shape of the mount target.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ScheduleDowngradeShapeMountTargetRequest
   * @return ScheduleDowngradeShapeMountTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ScheduleDowngradeShapeMountTarget.ts.html |here} to see how to use ScheduleDowngradeShapeMountTarget API.
   */
  public async scheduleDowngradeShapeMountTarget(
    scheduleDowngradeShapeMountTargetRequest: requests.ScheduleDowngradeShapeMountTargetRequest
  ): Promise<responses.ScheduleDowngradeShapeMountTargetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#scheduleDowngradeShapeMountTarget.");
    const operationName = "scheduleDowngradeShapeMountTarget";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/MountTarget/ScheduleDowngradeShapeMountTarget";
    const pathParams = {
      "{mountTargetId}": scheduleDowngradeShapeMountTargetRequest.mountTargetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": scheduleDowngradeShapeMountTargetRequest.ifMatch,
      "opc-request-id": scheduleDowngradeShapeMountTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      scheduleDowngradeShapeMountTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/mountTargets/{mountTargetId}/actions/scheduleShapeDowngrade",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        scheduleDowngradeShapeMountTargetRequest.scheduleDowngradeShapeMountTargetDetails,
        "ScheduleDowngradeShapeMountTargetDetails",
        model.ScheduleDowngradeShapeMountTargetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ScheduleDowngradeShapeMountTargetResponse>{},
        body: await response.json(),
        bodyKey: "mountTarget",
        bodyModel: model.MountTarget,
        type: "model.MountTarget",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * This operation unpauses a paused file system snapshot policy and updates the lifecycle state of the file system snapshot policy from 
* INACTIVE to ACTIVE. By default, file system snapshot policies are in the ACTIVE state. When a file system snapshot policy is not paused, or in the ACTIVE state, file systems that are associated with the
* policy will have snapshots created and deleted according to the schedules defined in the policy.
* <p>
If the policy is already in the ACTIVE state, you cannot unpause it. You can't unpause a policy that is in a DELETING, DELETED, FAILED, CREATING, or ACTIVE state; attempts to unpause a policy in these states result in a 409 conflict error.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UnpauseFilesystemSnapshotPolicyRequest
     * @return UnpauseFilesystemSnapshotPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UnpauseFilesystemSnapshotPolicy.ts.html |here} to see how to use UnpauseFilesystemSnapshotPolicy API.
     */
  public async unpauseFilesystemSnapshotPolicy(
    unpauseFilesystemSnapshotPolicyRequest: requests.UnpauseFilesystemSnapshotPolicyRequest
  ): Promise<responses.UnpauseFilesystemSnapshotPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#unpauseFilesystemSnapshotPolicy.");
    const operationName = "unpauseFilesystemSnapshotPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FilesystemSnapshotPolicy/UnpauseFilesystemSnapshotPolicy";
    const pathParams = {
      "{filesystemSnapshotPolicyId}":
        unpauseFilesystemSnapshotPolicyRequest.filesystemSnapshotPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": unpauseFilesystemSnapshotPolicyRequest.ifMatch,
      "opc-request-id": unpauseFilesystemSnapshotPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      unpauseFilesystemSnapshotPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/filesystemSnapshotPolicies/{filesystemSnapshotPolicyId}/actions/unpause",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UnpauseFilesystemSnapshotPolicyResponse>{},
        body: await response.json(),
        bodyKey: "filesystemSnapshotPolicy",
        bodyModel: model.FilesystemSnapshotPolicy,
        type: "model.FilesystemSnapshotPolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified export's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateExportRequest
   * @return UpdateExportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateExport.ts.html |here} to see how to use UpdateExport API.
   */
  public async updateExport(
    updateExportRequest: requests.UpdateExportRequest
  ): Promise<responses.UpdateExportResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#updateExport.");
    const operationName = "updateExport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Export/UpdateExport";
    const pathParams = {
      "{exportId}": updateExportRequest.exportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateExportRequest.ifMatch,
      "opc-request-id": updateExportRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateExportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/exports/{exportId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateExportRequest.updateExportDetails,
        "UpdateExportDetails",
        model.UpdateExportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateExportResponse>{},
        body: await response.json(),
        bodyKey: "export",
        bodyModel: model.Export,
        type: "model.Export",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified export set's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateExportSetRequest
   * @return UpdateExportSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateExportSet.ts.html |here} to see how to use UpdateExportSet API.
   */
  public async updateExportSet(
    updateExportSetRequest: requests.UpdateExportSetRequest
  ): Promise<responses.UpdateExportSetResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#updateExportSet.");
    const operationName = "updateExportSet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/ExportSet/UpdateExportSet";
    const pathParams = {
      "{exportSetId}": updateExportSetRequest.exportSetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateExportSetRequest.ifMatch,
      "opc-request-id": updateExportSetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateExportSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/exportSets/{exportSetId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateExportSetRequest.updateExportSetDetails,
        "UpdateExportSetDetails",
        model.UpdateExportSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateExportSetResponse>{},
        body: await response.json(),
        bodyKey: "exportSet",
        bodyModel: model.ExportSet,
        type: "model.ExportSet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified file system's information.
   * You can use this operation to rename a file system.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateFileSystemRequest
   * @return UpdateFileSystemResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateFileSystem.ts.html |here} to see how to use UpdateFileSystem API.
   */
  public async updateFileSystem(
    updateFileSystemRequest: requests.UpdateFileSystemRequest
  ): Promise<responses.UpdateFileSystemResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#updateFileSystem.");
    const operationName = "updateFileSystem";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FileSystem/UpdateFileSystem";
    const pathParams = {
      "{fileSystemId}": updateFileSystemRequest.fileSystemId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFileSystemRequest.ifMatch,
      "opc-request-id": updateFileSystemRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFileSystemRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fileSystems/{fileSystemId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFileSystemRequest.updateFileSystemDetails,
        "UpdateFileSystemDetails",
        model.UpdateFileSystemDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFileSystemResponse>{},
        body: await response.json(),
        bodyKey: "fileSystem",
        bodyModel: model.FileSystem,
        type: "model.FileSystem",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified file system snapshot policy's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateFilesystemSnapshotPolicyRequest
   * @return UpdateFilesystemSnapshotPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateFilesystemSnapshotPolicy.ts.html |here} to see how to use UpdateFilesystemSnapshotPolicy API.
   */
  public async updateFilesystemSnapshotPolicy(
    updateFilesystemSnapshotPolicyRequest: requests.UpdateFilesystemSnapshotPolicyRequest
  ): Promise<responses.UpdateFilesystemSnapshotPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#updateFilesystemSnapshotPolicy.");
    const operationName = "updateFilesystemSnapshotPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/FilesystemSnapshotPolicy/UpdateFilesystemSnapshotPolicy";
    const pathParams = {
      "{filesystemSnapshotPolicyId}":
        updateFilesystemSnapshotPolicyRequest.filesystemSnapshotPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFilesystemSnapshotPolicyRequest.ifMatch,
      "opc-request-id": updateFilesystemSnapshotPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFilesystemSnapshotPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/filesystemSnapshotPolicies/{filesystemSnapshotPolicyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFilesystemSnapshotPolicyRequest.updateFilesystemSnapshotPolicyDetails,
        "UpdateFilesystemSnapshotPolicyDetails",
        model.UpdateFilesystemSnapshotPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFilesystemSnapshotPolicyResponse>{},
        body: await response.json(),
        bodyKey: "filesystemSnapshotPolicy",
        bodyModel: model.FilesystemSnapshotPolicy,
        type: "model.FilesystemSnapshotPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified mount target's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateMountTargetRequest
   * @return UpdateMountTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateMountTarget.ts.html |here} to see how to use UpdateMountTarget API.
   */
  public async updateMountTarget(
    updateMountTargetRequest: requests.UpdateMountTargetRequest
  ): Promise<responses.UpdateMountTargetResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#updateMountTarget.");
    const operationName = "updateMountTarget";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/MountTarget/UpdateMountTarget";
    const pathParams = {
      "{mountTargetId}": updateMountTargetRequest.mountTargetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateMountTargetRequest.ifMatch,
      "opc-request-id": updateMountTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateMountTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/mountTargets/{mountTargetId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMountTargetRequest.updateMountTargetDetails,
        "UpdateMountTargetDetails",
        model.UpdateMountTargetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMountTargetResponse>{},
        body: await response.json(),
        bodyKey: "mountTarget",
        bodyModel: model.MountTarget,
        type: "model.MountTarget",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified outbound connector's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateOutboundConnectorRequest
   * @return UpdateOutboundConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateOutboundConnector.ts.html |here} to see how to use UpdateOutboundConnector API.
   */
  public async updateOutboundConnector(
    updateOutboundConnectorRequest: requests.UpdateOutboundConnectorRequest
  ): Promise<responses.UpdateOutboundConnectorResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#updateOutboundConnector.");
    const operationName = "updateOutboundConnector";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/OutboundConnector/UpdateOutboundConnector";
    const pathParams = {
      "{outboundConnectorId}": updateOutboundConnectorRequest.outboundConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOutboundConnectorRequest.ifMatch,
      "opc-request-id": updateOutboundConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOutboundConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/outboundConnectors/{outboundConnectorId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOutboundConnectorRequest.updateOutboundConnectorDetails,
        "UpdateOutboundConnectorDetails",
        model.UpdateOutboundConnectorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOutboundConnectorResponse>{},
        body: await response.json(),
        bodyKey: "outboundConnector",
        bodyModel: model.OutboundConnector,
        type: "model.OutboundConnector",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the information for the specified replication and its associated replication target.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateReplicationRequest
   * @return UpdateReplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateReplication.ts.html |here} to see how to use UpdateReplication API.
   */
  public async updateReplication(
    updateReplicationRequest: requests.UpdateReplicationRequest
  ): Promise<responses.UpdateReplicationResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#updateReplication.");
    const operationName = "updateReplication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Replication/UpdateReplication";
    const pathParams = {
      "{replicationId}": updateReplicationRequest.replicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateReplicationRequest.ifMatch,
      "opc-request-id": updateReplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateReplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/replications/{replicationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateReplicationRequest.updateReplicationDetails,
        "UpdateReplicationDetails",
        model.UpdateReplicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateReplicationResponse>{},
        body: await response.json(),
        bodyKey: "replication",
        bodyModel: model.Replication,
        type: "model.Replication",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified snapshot's information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateSnapshotRequest
   * @return UpdateSnapshotResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateSnapshot.ts.html |here} to see how to use UpdateSnapshot API.
   */
  public async updateSnapshot(
    updateSnapshotRequest: requests.UpdateSnapshotRequest
  ): Promise<responses.UpdateSnapshotResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#updateSnapshot.");
    const operationName = "updateSnapshot";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/Snapshot/UpdateSnapshot";
    const pathParams = {
      "{snapshotId}": updateSnapshotRequest.snapshotId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSnapshotRequest.ifMatch,
      "opc-request-id": updateSnapshotRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSnapshotRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/snapshots/{snapshotId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSnapshotRequest.updateSnapshotDetails,
        "UpdateSnapshotDetails",
        model.UpdateSnapshotDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSnapshotResponse>{},
        body: await response.json(),
        bodyKey: "snapshot",
        bodyModel: model.Snapshot,
        type: "model.Snapshot",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Upgrade shape request for mount target.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpgradeShapeMountTargetRequest
   * @return UpgradeShapeMountTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpgradeShapeMountTarget.ts.html |here} to see how to use UpgradeShapeMountTarget API.
   */
  public async upgradeShapeMountTarget(
    upgradeShapeMountTargetRequest: requests.UpgradeShapeMountTargetRequest
  ): Promise<responses.UpgradeShapeMountTargetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FileStorageClient#upgradeShapeMountTarget.");
    const operationName = "upgradeShapeMountTarget";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/MountTarget/UpgradeShapeMountTarget";
    const pathParams = {
      "{mountTargetId}": upgradeShapeMountTargetRequest.mountTargetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": upgradeShapeMountTargetRequest.ifMatch,
      "opc-request-id": upgradeShapeMountTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      upgradeShapeMountTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/mountTargets/{mountTargetId}/actions/upgradeShape",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        upgradeShapeMountTargetRequest.upgradeShapeMountTargetDetails,
        "UpgradeShapeMountTargetDetails",
        model.UpgradeShapeMountTargetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpgradeShapeMountTargetResponse>{},
        body: await response.json(),
        bodyKey: "mountTarget",
        bodyModel: model.MountTarget,
        type: "model.MountTarget",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Validates keytab contents for the secret details passed on the request or validte keytab contents associated with
   * the mount target passed in the request. The keytabs are deserialized, the contents are validated for compatibility
   * and the principal, key version number and encryption type of each entry is provided as part of the response.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ValidateKeyTabsRequest
   * @return ValidateKeyTabsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ValidateKeyTabs.ts.html |here} to see how to use ValidateKeyTabs API.
   */
  public async validateKeyTabs(
    validateKeyTabsRequest: requests.ValidateKeyTabsRequest
  ): Promise<responses.ValidateKeyTabsResponse> {
    if (this.logger) this.logger.debug("Calling operation FileStorageClient#validateKeyTabs.");
    const operationName = "validateKeyTabs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/filestorage/20171215/MountTarget/ValidateKeyTabs";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": validateKeyTabsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      validateKeyTabsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/mountTargets/actions/validateKeyTabs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        validateKeyTabsRequest.validateKeyTabsDetails,
        "ValidateKeyTabsDetails",
        model.ValidateKeyTabsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateKeyTabsResponse>{},
        body: await response.json(),
        bodyKey: "validateKeyTabsResponseDetails",
        bodyModel: model.ValidateKeyTabsResponseDetails,
        type: "model.ValidateKeyTabsResponseDetails",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
