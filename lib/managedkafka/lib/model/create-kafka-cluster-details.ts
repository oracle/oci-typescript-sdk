/**
 * Oracle Streaming with Apache Kafka (OSAK) API
 * Use Oracle Streaming with Apache Kafka Control Plane API to create/update/delete managed Kafka clusters.
 * OpenAPI spec version: 20240901
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The data to create a KafkaCluster.
 */
export interface CreateKafkaClusterDetails {
  /**
   * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
   */
  "displayName"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to create the KafkaCluster in.
   *
   */
  "compartmentId": string;
  /**
   * Subnets where broker/coordinator VNICs will be created.
   */
  "accessSubnets": Array<model.SubnetSet>;
  /**
   * CA certificate bundle for mTLS broker authentication.
   */
  "clientCertificateBundle"?: string;
  /**
   * Version of Kafka to use to spin up the cluster
   */
  "kafkaVersion": string;
  /**
   * Type of the cluster to spin up.
   * DEVELOPMENT - setting that allows to sacrifice HA and spin up cluster on single node
   * PRODUCTION - Minimum allowed broker count is 3
   *
   */
  "clusterType": string;
  "brokerShape": model.BrokerShape;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of Kafka Cluster configuration object
   */
  "clusterConfigId": string;
  /**
   * The version of configuration object Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "clusterConfigVersion": number;
  /**
   * Kafka coordination type. Set of available types depends on Kafka version
   */
  "coordinationType": string;
  /**
    * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
* For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Department\": \"Finance\"}}
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
    * Defined tags for this resource. Each key is predefined and scoped to a namespace.
* For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
* 
    */
  "definedTags"?: { [key: string]: { [key: string]: any } };
}

export namespace CreateKafkaClusterDetails {
  export function getJsonObj(obj: CreateKafkaClusterDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "accessSubnets": obj.accessSubnets
          ? obj.accessSubnets.map(item => {
              return model.SubnetSet.getJsonObj(item);
            })
          : undefined,

        "brokerShape": obj.brokerShape ? model.BrokerShape.getJsonObj(obj.brokerShape) : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateKafkaClusterDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "accessSubnets": obj.accessSubnets
          ? obj.accessSubnets.map(item => {
              return model.SubnetSet.getDeserializedJsonObj(item);
            })
          : undefined,

        "brokerShape": obj.brokerShape
          ? model.BrokerShape.getDeserializedJsonObj(obj.brokerShape)
          : undefined
      }
    };

    return jsonObj;
  }
}
