/**
 * Oracle Integration API
 * Oracle Integration API.
 * OpenAPI spec version: 20190131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
* The information to be updated.
* <p>
Some properties may not be applicable to specific integration types,
* see [Differences in Instance Management](https://www.oracle.com/pls/topic/lookup?ctx=en/cloud/paas/application-integration&id=INTOO-GUID-931B5E33-4FE6-4997-93E5-8748516F46AA__GUID-176E43D5-4116-4828-8120-B929DF2A6B5E)
* for details.
* 
*/
export interface UpdateIntegrationInstanceDetails {
  /**
   * Integration Instance Identifier.
   */
  "displayName"?: string;
  /**
   * Standard or Enterprise type,
   * Oracle Integration Generation 2 uses ENTERPRISE and STANDARD,
   * Oracle Integration 3 uses ENTERPRISEX and STANDARDX
   *
   */
  "integrationInstanceType"?: UpdateIntegrationInstanceDetails.IntegrationInstanceType;
  /**
   * Simple key-value pair that is applied without any predefined name,
   * type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Usage of predefined tag keys. These predefined keys are scoped to
   * namespaces.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Bring your own license.
   */
  "isByol"?: boolean;
  /**
   * The number of configured message packs Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "messagePacks"?: number;
  /**
   * The file server is enabled or not.
   */
  "isFileServerEnabled"?: boolean;
  /**
   * Visual Builder is enabled or not.
   */
  "isVisualBuilderEnabled"?: boolean;
  "customEndpoint"?: model.UpdateCustomEndpointDetails;
  /**
   * A list of alternate custom endpoints to be used for the integration instance URL
   * (contact Oracle for alternateCustomEndpoints availability for a specific instance).
   *
   */
  "alternateCustomEndpoints"?: Array<model.UpdateCustomEndpointDetails>;
}

export namespace UpdateIntegrationInstanceDetails {
  export enum IntegrationInstanceType {
    Standard = "STANDARD",
    Enterprise = "ENTERPRISE",
    Standardx = "STANDARDX",
    Enterprisex = "ENTERPRISEX",
    Healthcare = "HEALTHCARE"
  }

  export function getJsonObj(obj: UpdateIntegrationInstanceDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "customEndpoint": obj.customEndpoint
          ? model.UpdateCustomEndpointDetails.getJsonObj(obj.customEndpoint)
          : undefined,
        "alternateCustomEndpoints": obj.alternateCustomEndpoints
          ? obj.alternateCustomEndpoints.map(item => {
              return model.UpdateCustomEndpointDetails.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: UpdateIntegrationInstanceDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "customEndpoint": obj.customEndpoint
          ? model.UpdateCustomEndpointDetails.getDeserializedJsonObj(obj.customEndpoint)
          : undefined,
        "alternateCustomEndpoints": obj.alternateCustomEndpoints
          ? obj.alternateCustomEndpoints.map(item => {
              return model.UpdateCustomEndpointDetails.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
