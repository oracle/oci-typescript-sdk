/**
 * Vault Key Management API
 * Use the Key Management API to manage vaults and keys. For more information, see [Managing Vaults](/Content/KeyManagement/Tasks/managingvaults.htm) and [Managing Keys](/Content/KeyManagement/Tasks/managingkeys.htm).

 * OpenAPI spec version: release
 * Contact: sparta_kms_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * An object which encapsulates the details of a given HSM.
 */
export interface HsmPartitionSummary {
  /**
   * The OCID of the HSM resource. Each HSM resource will have a unique OCID identifier.
   */
  "id": string;
  /**
   * The OCID of the HSMCluster that contains a particular HSM resource.
   */
  "hsmClusterId": string;
  /**
    * A HSMCluster resource's current lifecycle state.
* <p>
Example: {@code ACTIVE}
* 
    */
  "lifecycleState": string;
  /**
   * The OCID of the compartment that contains a particular HSM resource.
   */
  "compartmentId": string;
  /**
   * Details of a single portInformation item include the PortNumber (an integer used as an identifier) and the PortType (refers to either an enum value of Managementutility,Clientutility, or null)
   */
  "portInformation": Array<model.PortInformation>;
  /**
    * The date and time an HSM was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
* <p>
Example: {@code 2018-04-03T21:10:29.600Z}
* 
    */
  "timeCreated": Date;
  /**
    * The date and time an HSM was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
* <p>
Example: {@code 2018-04-03T21:10:29.600Z}
* 
    */
  "timeUpdated": Date;
}

export namespace HsmPartitionSummary {
  export function getJsonObj(obj: HsmPartitionSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "portInformation": obj.portInformation
          ? obj.portInformation.map(item => {
              return model.PortInformation.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: HsmPartitionSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "portInformation": obj.portInformation
          ? obj.portInformation.map(item => {
              return model.PortInformation.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
