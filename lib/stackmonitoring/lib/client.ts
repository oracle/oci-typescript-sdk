/**
 * Stack Monitoring API
 * Stack Monitoring API.
 * OpenAPI spec version: 20210330
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { StackMonitoringWaiter } from "./stackmonitoring-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum StackMonitoringApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class StackMonitoringClient {
  protected static serviceEndpointTemplate =
    "https://stack-monitoring.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": StackMonitoringWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "StackMonitoring";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("stackmonitoring")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("stackmonitoring");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20210330";
    if (this.logger) this.logger.info(`StackMonitoringClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        StackMonitoringClient.serviceEndpointTemplate,
        this._region,
        StackMonitoringClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        StackMonitoringClient.serviceEndpointTemplate,
        this._regionId,
        StackMonitoringClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      StackMonitoringClient.serviceEndpointTemplate,
      region,
      StackMonitoringClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      StackMonitoringClient.serviceEndpointTemplate,
      regionId,
      StackMonitoringClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new StackMonitoringWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): StackMonitoringWaiter {
    this._waiters = new StackMonitoringWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): StackMonitoringWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Create an association between two monitored resources. Associations can be created
   * between resources from different compartments as long they are in same tenancy.
   * User should have required access in both the compartments.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AssociateMonitoredResourcesRequest
   * @return AssociateMonitoredResourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/AssociateMonitoredResources.ts.html |here} to see how to use AssociateMonitoredResources API.
   */
  public async associateMonitoredResources(
    associateMonitoredResourcesRequest: requests.AssociateMonitoredResourcesRequest
  ): Promise<responses.AssociateMonitoredResourcesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#associateMonitoredResources.");
    const operationName = "associateMonitoredResources";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/AssociateMonitoredResources";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": associateMonitoredResourcesRequest.opcRequestId,
      "opc-retry-token": associateMonitoredResourcesRequest.opcRetryToken,
      "if-match": associateMonitoredResourcesRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      associateMonitoredResourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/actions/associateMonitoredResources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        associateMonitoredResourcesRequest.associateMonitoredResourcesDetails,
        "AssociateMonitoredResourcesDetails",
        model.AssociateMonitoredResourcesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AssociateMonitoredResourcesResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceAssociation",
        bodyModel: model.MonitoredResourceAssociation,
        type: "model.MonitoredResourceAssociation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves the configuration item to another compartment. 
* Basically, this will disable any configuration for this configuration type in thie compartment,
* and will enable it in the new one. 
* <p>
For example, if for a HOST resource type, the configuration with AUTO_PROMOTE in the configuration type  
* and TRUE as value is moved, automatic discovery will not take place in this compartment any more, but in the new one. 
* <p>
So this operation will have the same effect as deleting the configuration item in the old compartment and
* recreating it in another compartment. 
* <p>
When provided, If-Match is checked against ETag values of the resource.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeConfigCompartmentRequest
     * @return ChangeConfigCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ChangeConfigCompartment.ts.html |here} to see how to use ChangeConfigCompartment API.
     */
  public async changeConfigCompartment(
    changeConfigCompartmentRequest: requests.ChangeConfigCompartmentRequest
  ): Promise<responses.ChangeConfigCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#changeConfigCompartment.");
    const operationName = "changeConfigCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/Config/ChangeConfigCompartment";
    const pathParams = {
      "{configId}": changeConfigCompartmentRequest.configId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeConfigCompartmentRequest.ifMatch,
      "opc-request-id": changeConfigCompartmentRequest.opcRequestId,
      "opc-retry-token": changeConfigCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeConfigCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configs/{configId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeConfigCompartmentRequest.changeConfigCompartmentDetails,
        "ChangeConfigCompartmentDetails",
        model.ChangeConfigCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeConfigCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Metric Extension resource from one compartment identifier to another.
   * When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeMetricExtensionCompartmentRequest
   * @return ChangeMetricExtensionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ChangeMetricExtensionCompartment.ts.html |here} to see how to use ChangeMetricExtensionCompartment API.
   */
  public async changeMetricExtensionCompartment(
    changeMetricExtensionCompartmentRequest: requests.ChangeMetricExtensionCompartmentRequest
  ): Promise<responses.ChangeMetricExtensionCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation StackMonitoringClient#changeMetricExtensionCompartment."
      );
    const operationName = "changeMetricExtensionCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MetricExtension/ChangeMetricExtensionCompartment";
    const pathParams = {
      "{metricExtensionId}": changeMetricExtensionCompartmentRequest.metricExtensionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeMetricExtensionCompartmentRequest.ifMatch,
      "opc-request-id": changeMetricExtensionCompartmentRequest.opcRequestId,
      "opc-retry-token": changeMetricExtensionCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeMetricExtensionCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metricExtensions/{metricExtensionId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeMetricExtensionCompartmentRequest.changeMetricExtensionCompartmentDetails,
        "ChangeMetricExtensionCompartmentDetails",
        model.ChangeMetricExtensionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeMetricExtensionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a monitored resource from one compartment to another.
   * When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeMonitoredResourceCompartmentRequest
   * @return ChangeMonitoredResourceCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ChangeMonitoredResourceCompartment.ts.html |here} to see how to use ChangeMonitoredResourceCompartment API.
   */
  public async changeMonitoredResourceCompartment(
    changeMonitoredResourceCompartmentRequest: requests.ChangeMonitoredResourceCompartmentRequest
  ): Promise<responses.ChangeMonitoredResourceCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation StackMonitoringClient#changeMonitoredResourceCompartment."
      );
    const operationName = "changeMonitoredResourceCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/ChangeMonitoredResourceCompartment";
    const pathParams = {
      "{monitoredResourceId}": changeMonitoredResourceCompartmentRequest.monitoredResourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeMonitoredResourceCompartmentRequest.ifMatch,
      "opc-request-id": changeMonitoredResourceCompartmentRequest.opcRequestId,
      "opc-retry-token": changeMonitoredResourceCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeMonitoredResourceCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/{monitoredResourceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeMonitoredResourceCompartmentRequest.changeMonitoredResourceCompartmentDetails,
        "ChangeMonitoredResourceCompartmentDetails",
        model.ChangeMonitoredResourceCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeMonitoredResourceCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a stack monitoring resource task from one compartment to another.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeMonitoredResourceTaskCompartmentRequest
   * @return ChangeMonitoredResourceTaskCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ChangeMonitoredResourceTaskCompartment.ts.html |here} to see how to use ChangeMonitoredResourceTaskCompartment API.
   */
  public async changeMonitoredResourceTaskCompartment(
    changeMonitoredResourceTaskCompartmentRequest: requests.ChangeMonitoredResourceTaskCompartmentRequest
  ): Promise<responses.ChangeMonitoredResourceTaskCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation StackMonitoringClient#changeMonitoredResourceTaskCompartment."
      );
    const operationName = "changeMonitoredResourceTaskCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResourceTask/ChangeMonitoredResourceTaskCompartment";
    const pathParams = {
      "{monitoredResourceTaskId}":
        changeMonitoredResourceTaskCompartmentRequest.monitoredResourceTaskId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeMonitoredResourceTaskCompartmentRequest.ifMatch,
      "opc-request-id": changeMonitoredResourceTaskCompartmentRequest.opcRequestId,
      "opc-retry-token": changeMonitoredResourceTaskCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeMonitoredResourceTaskCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResourceTasks/{monitoredResourceTaskId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeMonitoredResourceTaskCompartmentRequest.changeMonitoredResourceTaskCompartmentDetails,
        "ChangeMonitoredResourceTaskCompartmentDetails",
        model.ChangeMonitoredResourceTaskCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeMonitoredResourceTaskCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a ProcessSet resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeProcessSetCompartmentRequest
   * @return ChangeProcessSetCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ChangeProcessSetCompartment.ts.html |here} to see how to use ChangeProcessSetCompartment API.
   */
  public async changeProcessSetCompartment(
    changeProcessSetCompartmentRequest: requests.ChangeProcessSetCompartmentRequest
  ): Promise<responses.ChangeProcessSetCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#changeProcessSetCompartment.");
    const operationName = "changeProcessSetCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/ProcessSet/ChangeProcessSetCompartment";
    const pathParams = {
      "{processSetId}": changeProcessSetCompartmentRequest.processSetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeProcessSetCompartmentRequest.ifMatch,
      "opc-request-id": changeProcessSetCompartmentRequest.opcRequestId,
      "opc-retry-token": changeProcessSetCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeProcessSetCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/processSets/{processSetId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeProcessSetCompartmentRequest.changeProcessSetCompartmentDetails,
        "ChangeProcessSetCompartmentDetails",
        model.ChangeProcessSetCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeProcessSetCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates the specified Baseline-able metric
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateBaselineableMetricRequest
   * @return CreateBaselineableMetricResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/CreateBaselineableMetric.ts.html |here} to see how to use CreateBaselineableMetric API.
   */
  public async createBaselineableMetric(
    createBaselineableMetricRequest: requests.CreateBaselineableMetricRequest
  ): Promise<responses.CreateBaselineableMetricResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#createBaselineableMetric.");
    const operationName = "createBaselineableMetric";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/BaselineableMetric/CreateBaselineableMetric";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createBaselineableMetricRequest.opcRequestId,
      "opc-retry-token": createBaselineableMetricRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBaselineableMetricRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/baselineableMetrics",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBaselineableMetricRequest.createBaselineableMetricDetails,
        "CreateBaselineableMetricDetails",
        model.CreateBaselineableMetricDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBaselineableMetricResponse>{},
        body: await response.json(),
        bodyKey: "baselineableMetric",
        bodyModel: model.BaselineableMetric,
        type: "model.BaselineableMetric",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a configuration item, for example to define 
* whether resources of a specific type should be discovered automatically. 
* <p>
For example, when a new Management Agent gets registered in a certain compartment, 
* this Management Agent can potentially get promoted to a HOST resource. 
* The configuration item will determine if HOST resources in the selected compartment will be
* discovered automatically.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateConfigRequest
     * @return CreateConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/CreateConfig.ts.html |here} to see how to use CreateConfig API.
     */
  public async createConfig(
    createConfigRequest: requests.CreateConfigRequest
  ): Promise<responses.CreateConfigResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#createConfig.");
    const operationName = "createConfig";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/Config/CreateConfig";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createConfigRequest.opcRetryToken,
      "opc-request-id": createConfigRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createConfigRequest.createConfigDetails,
        "CreateConfigDetails",
        model.CreateConfigDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateConfigResponse>{},
        body: await response.json(),
        bodyKey: "config",
        bodyModel: model.Config,
        type: "model.Config",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * API to create discovery Job and submit discovery Details to agent.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDiscoveryJobRequest
   * @return CreateDiscoveryJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/CreateDiscoveryJob.ts.html |here} to see how to use CreateDiscoveryJob API.
   */
  public async createDiscoveryJob(
    createDiscoveryJobRequest: requests.CreateDiscoveryJobRequest
  ): Promise<responses.CreateDiscoveryJobResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#createDiscoveryJob.");
    const operationName = "createDiscoveryJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/DiscoveryJob/CreateDiscoveryJob";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDiscoveryJobRequest.opcRequestId,
      "opc-retry-token": createDiscoveryJobRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDiscoveryJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDiscoveryJobRequest.createDiscoveryJobDetails,
        "CreateDiscoveryJobDetails",
        model.CreateDiscoveryJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDiscoveryJobResponse>{},
        body: await response.json(),
        bodyKey: "discoveryJob",
        bodyModel: model.DiscoveryJob,
        type: "model.DiscoveryJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new metric extension resource for a given compartment
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMetricExtensionRequest
   * @return CreateMetricExtensionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/CreateMetricExtension.ts.html |here} to see how to use CreateMetricExtension API.
   */
  public async createMetricExtension(
    createMetricExtensionRequest: requests.CreateMetricExtensionRequest
  ): Promise<responses.CreateMetricExtensionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#createMetricExtension.");
    const operationName = "createMetricExtension";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MetricExtension/CreateMetricExtension";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createMetricExtensionRequest.opcRetryToken,
      "opc-request-id": createMetricExtensionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMetricExtensionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metricExtensions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMetricExtensionRequest.createMetricExtensionDetails,
        "CreateMetricExtensionDetails",
        model.CreateMetricExtensionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMetricExtensionResponse>{},
        body: await response.json(),
        bodyKey: "metricExtension",
        bodyModel: model.MetricExtension,
        type: "model.MetricExtension",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new monitored resource for the given resource type with the details and submits
   * a work request for promoting the resource to agent. Once the resource is successfully
   * added to agent, resource state will be marked active.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMonitoredResourceRequest
   * @return CreateMonitoredResourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/CreateMonitoredResource.ts.html |here} to see how to use CreateMonitoredResource API.
   */
  public async createMonitoredResource(
    createMonitoredResourceRequest: requests.CreateMonitoredResourceRequest
  ): Promise<responses.CreateMonitoredResourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#createMonitoredResource.");
    const operationName = "createMonitoredResource";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/CreateMonitoredResource";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createMonitoredResourceRequest.opcRetryToken,
      "opc-request-id": createMonitoredResourceRequest.opcRequestId,
      "external-resource-id": createMonitoredResourceRequest.externalResourceId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMonitoredResourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMonitoredResourceRequest.createMonitoredResourceDetails,
        "CreateMonitoredResourceDetails",
        model.CreateMonitoredResourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMonitoredResourceResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResource",
        bodyModel: model.MonitoredResource,
        type: "model.MonitoredResource",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-monitored-resource-id"),
            key: "opcMonitoredResourceId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new stack monitoring resource task.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateMonitoredResourceTaskRequest
   * @return CreateMonitoredResourceTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/CreateMonitoredResourceTask.ts.html |here} to see how to use CreateMonitoredResourceTask API.
   */
  public async createMonitoredResourceTask(
    createMonitoredResourceTaskRequest: requests.CreateMonitoredResourceTaskRequest
  ): Promise<responses.CreateMonitoredResourceTaskResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#createMonitoredResourceTask.");
    const operationName = "createMonitoredResourceTask";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResourceTask/CreateMonitoredResourceTask";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createMonitoredResourceTaskRequest.opcRequestId,
      "opc-retry-token": createMonitoredResourceTaskRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMonitoredResourceTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResourceTasks",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMonitoredResourceTaskRequest.createMonitoredResourceTaskDetails,
        "CreateMonitoredResourceTaskDetails",
        model.CreateMonitoredResourceTaskDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMonitoredResourceTaskResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceTask",
        bodyModel: model.MonitoredResourceTask,
        type: "model.MonitoredResourceTask",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new monitored resource type.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateMonitoredResourceTypeRequest
   * @return CreateMonitoredResourceTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/CreateMonitoredResourceType.ts.html |here} to see how to use CreateMonitoredResourceType API.
   */
  public async createMonitoredResourceType(
    createMonitoredResourceTypeRequest: requests.CreateMonitoredResourceTypeRequest
  ): Promise<responses.CreateMonitoredResourceTypeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#createMonitoredResourceType.");
    const operationName = "createMonitoredResourceType";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResourceType/CreateMonitoredResourceType";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createMonitoredResourceTypeRequest.opcRequestId,
      "opc-retry-token": createMonitoredResourceTypeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMonitoredResourceTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResourceTypes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMonitoredResourceTypeRequest.createMonitoredResourceTypeDetails,
        "CreateMonitoredResourceTypeDetails",
        model.CreateMonitoredResourceTypeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMonitoredResourceTypeResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceType",
        bodyModel: model.MonitoredResourceType,
        type: "model.MonitoredResourceType",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * API to create Process Set.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateProcessSetRequest
   * @return CreateProcessSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/CreateProcessSet.ts.html |here} to see how to use CreateProcessSet API.
   */
  public async createProcessSet(
    createProcessSetRequest: requests.CreateProcessSetRequest
  ): Promise<responses.CreateProcessSetResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#createProcessSet.");
    const operationName = "createProcessSet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/ProcessSet/CreateProcessSet";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createProcessSetRequest.opcRequestId,
      "opc-retry-token": createProcessSetRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createProcessSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/processSets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProcessSetRequest.createProcessSetDetails,
        "CreateProcessSetDetails",
        model.CreateProcessSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProcessSetResponse>{},
        body: await response.json(),
        bodyKey: "processSet",
        bodyModel: model.ProcessSet,
        type: "model.ProcessSet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the Baseline-able metric for the given id
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteBaselineableMetricRequest
   * @return DeleteBaselineableMetricResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/DeleteBaselineableMetric.ts.html |here} to see how to use DeleteBaselineableMetric API.
   */
  public async deleteBaselineableMetric(
    deleteBaselineableMetricRequest: requests.DeleteBaselineableMetricRequest
  ): Promise<responses.DeleteBaselineableMetricResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#deleteBaselineableMetric.");
    const operationName = "deleteBaselineableMetric";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/BaselineableMetric/DeleteBaselineableMetric";
    const pathParams = {
      "{baselineableMetricId}": deleteBaselineableMetricRequest.baselineableMetricId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteBaselineableMetricRequest.opcRequestId,
      "if-match": deleteBaselineableMetricRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBaselineableMetricRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/baselineableMetrics/{baselineableMetricId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBaselineableMetricResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a configuration identified by the id.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteConfigRequest
   * @return DeleteConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/DeleteConfig.ts.html |here} to see how to use DeleteConfig API.
   */
  public async deleteConfig(
    deleteConfigRequest: requests.DeleteConfigRequest
  ): Promise<responses.DeleteConfigResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#deleteConfig.");
    const operationName = "deleteConfig";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/Config/DeleteConfig";
    const pathParams = {
      "{configId}": deleteConfigRequest.configId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteConfigRequest.ifMatch,
      "opc-request-id": deleteConfigRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configs/{configId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteConfigResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a DiscoveryJob by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDiscoveryJobRequest
   * @return DeleteDiscoveryJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/DeleteDiscoveryJob.ts.html |here} to see how to use DeleteDiscoveryJob API.
   */
  public async deleteDiscoveryJob(
    deleteDiscoveryJobRequest: requests.DeleteDiscoveryJobRequest
  ): Promise<responses.DeleteDiscoveryJobResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#deleteDiscoveryJob.");
    const operationName = "deleteDiscoveryJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/DiscoveryJob/DeleteDiscoveryJob";
    const pathParams = {
      "{discoveryJobId}": deleteDiscoveryJobRequest.discoveryJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDiscoveryJobRequest.ifMatch,
      "opc-request-id": deleteDiscoveryJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDiscoveryJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs/{discoveryJobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDiscoveryJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a metric extension by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMetricExtensionRequest
   * @return DeleteMetricExtensionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/DeleteMetricExtension.ts.html |here} to see how to use DeleteMetricExtension API.
   */
  public async deleteMetricExtension(
    deleteMetricExtensionRequest: requests.DeleteMetricExtensionRequest
  ): Promise<responses.DeleteMetricExtensionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#deleteMetricExtension.");
    const operationName = "deleteMetricExtension";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MetricExtension/DeleteMetricExtension";
    const pathParams = {
      "{metricExtensionId}": deleteMetricExtensionRequest.metricExtensionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteMetricExtensionRequest.ifMatch,
      "opc-request-id": deleteMetricExtensionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMetricExtensionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metricExtensions/{metricExtensionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMetricExtensionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete monitored resource by the given identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
   * By default, only the specified resource is deleted. If the parameter 'isDeleteMembers' is set to true,
   * then the member resources will be deleted too. If the operation fails partially, the deleted entries
   * will not be rolled back.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMonitoredResourceRequest
   * @return DeleteMonitoredResourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/DeleteMonitoredResource.ts.html |here} to see how to use DeleteMonitoredResource API.
   */
  public async deleteMonitoredResource(
    deleteMonitoredResourceRequest: requests.DeleteMonitoredResourceRequest
  ): Promise<responses.DeleteMonitoredResourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#deleteMonitoredResource.");
    const operationName = "deleteMonitoredResource";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/DeleteMonitoredResource";
    const pathParams = {
      "{monitoredResourceId}": deleteMonitoredResourceRequest.monitoredResourceId
    };

    const queryParams = {
      "isDeleteMembers": deleteMonitoredResourceRequest.isDeleteMembers
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteMonitoredResourceRequest.ifMatch,
      "opc-request-id": deleteMonitoredResourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMonitoredResourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/{monitoredResourceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMonitoredResourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a monitored resource type by identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMonitoredResourceTypeRequest
   * @return DeleteMonitoredResourceTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/DeleteMonitoredResourceType.ts.html |here} to see how to use DeleteMonitoredResourceType API.
   */
  public async deleteMonitoredResourceType(
    deleteMonitoredResourceTypeRequest: requests.DeleteMonitoredResourceTypeRequest
  ): Promise<responses.DeleteMonitoredResourceTypeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#deleteMonitoredResourceType.");
    const operationName = "deleteMonitoredResourceType";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResourceType/DeleteMonitoredResourceType";
    const pathParams = {
      "{monitoredResourceTypeId}": deleteMonitoredResourceTypeRequest.monitoredResourceTypeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteMonitoredResourceTypeRequest.ifMatch,
      "opc-request-id": deleteMonitoredResourceTypeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMonitoredResourceTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResourceTypes/{monitoredResourceTypeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMonitoredResourceTypeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Process Set
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteProcessSetRequest
   * @return DeleteProcessSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/DeleteProcessSet.ts.html |here} to see how to use DeleteProcessSet API.
   */
  public async deleteProcessSet(
    deleteProcessSetRequest: requests.DeleteProcessSetRequest
  ): Promise<responses.DeleteProcessSetResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#deleteProcessSet.");
    const operationName = "deleteProcessSet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/ProcessSet/DeleteProcessSet";
    const pathParams = {
      "{processSetId}": deleteProcessSetRequest.processSetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteProcessSetRequest.ifMatch,
      "opc-request-id": deleteProcessSetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteProcessSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/processSets/{processSetId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProcessSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Disable external database resource monitoring. All the references in DBaaS,
   * DBM and resource service will be deleted as part of this operation.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DisableExternalDatabaseRequest
   * @return DisableExternalDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/DisableExternalDatabase.ts.html |here} to see how to use DisableExternalDatabase API.
   */
  public async disableExternalDatabase(
    disableExternalDatabaseRequest: requests.DisableExternalDatabaseRequest
  ): Promise<responses.DisableExternalDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#disableExternalDatabase.");
    const operationName = "disableExternalDatabase";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/DisableExternalDatabase";
    const pathParams = {
      "{monitoredResourceId}": disableExternalDatabaseRequest.monitoredResourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": disableExternalDatabaseRequest.opcRetryToken,
      "opc-request-id": disableExternalDatabaseRequest.opcRequestId,
      "if-match": disableExternalDatabaseRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      disableExternalDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/{monitoredResourceId}/actions/disableExternalDatabase",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DisableExternalDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Submits a request to disable matching metric extension Id for the given Resource IDs
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DisableMetricExtensionRequest
   * @return DisableMetricExtensionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/DisableMetricExtension.ts.html |here} to see how to use DisableMetricExtension API.
   */
  public async disableMetricExtension(
    disableMetricExtensionRequest: requests.DisableMetricExtensionRequest
  ): Promise<responses.DisableMetricExtensionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#disableMetricExtension.");
    const operationName = "disableMetricExtension";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MetricExtension/DisableMetricExtension";
    const pathParams = {
      "{metricExtensionId}": disableMetricExtensionRequest.metricExtensionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": disableMetricExtensionRequest.ifMatch,
      "opc-request-id": disableMetricExtensionRequest.opcRequestId,
      "opc-retry-token": disableMetricExtensionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      disableMetricExtensionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metricExtensions/{metricExtensionId}/actions/disable",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        disableMetricExtensionRequest.disableMetricExtensionDetails,
        "DisableMetricExtensionDetails",
        model.DisableMetricExtensionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DisableMetricExtensionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes associations between two monitored resources.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DisassociateMonitoredResourcesRequest
   * @return DisassociateMonitoredResourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/DisassociateMonitoredResources.ts.html |here} to see how to use DisassociateMonitoredResources API.
   */
  public async disassociateMonitoredResources(
    disassociateMonitoredResourcesRequest: requests.DisassociateMonitoredResourcesRequest
  ): Promise<responses.DisassociateMonitoredResourcesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#disassociateMonitoredResources.");
    const operationName = "disassociateMonitoredResources";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/DisassociateMonitoredResources";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": disassociateMonitoredResourcesRequest.opcRequestId,
      "opc-retry-token": disassociateMonitoredResourcesRequest.opcRetryToken,
      "if-match": disassociateMonitoredResourcesRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      disassociateMonitoredResourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/actions/disassociateMonitoredResources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        disassociateMonitoredResourcesRequest.disassociateMonitoredResourcesDetails,
        "DisassociateMonitoredResourcesDetails",
        model.DisassociateMonitoredResourcesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DisassociateMonitoredResourcesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Submits a request to enable matching metric extension Id for the given Resource IDs
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param EnableMetricExtensionRequest
   * @return EnableMetricExtensionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/EnableMetricExtension.ts.html |here} to see how to use EnableMetricExtension API.
   */
  public async enableMetricExtension(
    enableMetricExtensionRequest: requests.EnableMetricExtensionRequest
  ): Promise<responses.EnableMetricExtensionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#enableMetricExtension.");
    const operationName = "enableMetricExtension";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MetricExtension/EnableMetricExtension";
    const pathParams = {
      "{metricExtensionId}": enableMetricExtensionRequest.metricExtensionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": enableMetricExtensionRequest.ifMatch,
      "opc-request-id": enableMetricExtensionRequest.opcRequestId,
      "opc-retry-token": enableMetricExtensionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      enableMetricExtensionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metricExtensions/{metricExtensionId}/actions/enable",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        enableMetricExtensionRequest.enableMetricExtensionDetails,
        "EnableMetricExtensionDetails",
        model.EnableMetricExtensionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.EnableMetricExtensionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Evaluates metric for anomalies for the given data points
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param EvaluateBaselineableMetricRequest
   * @return EvaluateBaselineableMetricResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/EvaluateBaselineableMetric.ts.html |here} to see how to use EvaluateBaselineableMetric API.
   */
  public async evaluateBaselineableMetric(
    evaluateBaselineableMetricRequest: requests.EvaluateBaselineableMetricRequest
  ): Promise<responses.EvaluateBaselineableMetricResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#evaluateBaselineableMetric.");
    const operationName = "evaluateBaselineableMetric";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/BaselineableMetric/EvaluateBaselineableMetric";
    const pathParams = {
      "{baselineableMetricId}": evaluateBaselineableMetricRequest.baselineableMetricId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": evaluateBaselineableMetricRequest.opcRequestId,
      "if-match": evaluateBaselineableMetricRequest.ifMatch,
      "opc-retry-token": evaluateBaselineableMetricRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      evaluateBaselineableMetricRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/baselineableMetrics/{baselineableMetricId}/actions/evaluate",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        evaluateBaselineableMetricRequest.evaluateBaselineableMetricDetails,
        "EvaluateBaselineableMetricDetails",
        model.EvaluateBaselineableMetricDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.EvaluateBaselineableMetricResponse>{},
        body: await response.json(),
        bodyKey: "evaluateBaselineableMetricResult",
        bodyModel: model.EvaluateBaselineableMetricResult,
        type: "model.EvaluateBaselineableMetricResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Export generates a template used to create new metric extension resources similar to matching metric extension id.
   * Response is a file that contains metric extension definition with placeholders for fields to be changed.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ExportMetricExtensionRequest
   * @return ExportMetricExtensionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ExportMetricExtension.ts.html |here} to see how to use ExportMetricExtension API.
   */
  public async exportMetricExtension(
    exportMetricExtensionRequest: requests.ExportMetricExtensionRequest
  ): Promise<responses.ExportMetricExtensionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#exportMetricExtension.");
    const operationName = "exportMetricExtension";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MetricExtension/ExportMetricExtension";
    const pathParams = {
      "{metricExtensionId}": exportMetricExtensionRequest.metricExtensionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": exportMetricExtensionRequest.ifMatch,
      "opc-request-id": exportMetricExtensionRequest.opcRequestId,
      "opc-retry-token": exportMetricExtensionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      exportMetricExtensionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metricExtensions/{metricExtensionId}/actions/export",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ExportMetricExtensionResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the Baseline-able metric for the given id
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetBaselineableMetricRequest
   * @return GetBaselineableMetricResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/GetBaselineableMetric.ts.html |here} to see how to use GetBaselineableMetric API.
   */
  public async getBaselineableMetric(
    getBaselineableMetricRequest: requests.GetBaselineableMetricRequest
  ): Promise<responses.GetBaselineableMetricResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#getBaselineableMetric.");
    const operationName = "getBaselineableMetric";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/BaselineableMetric/GetBaselineableMetric";
    const pathParams = {
      "{baselineableMetricId}": getBaselineableMetricRequest.baselineableMetricId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBaselineableMetricRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBaselineableMetricRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/baselineableMetrics/{baselineableMetricId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBaselineableMetricResponse>{},
        body: await response.json(),
        bodyKey: "baselineableMetric",
        bodyModel: model.BaselineableMetric,
        type: "model.BaselineableMetric",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of a configuration.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetConfigRequest
   * @return GetConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/GetConfig.ts.html |here} to see how to use GetConfig API.
   */
  public async getConfig(
    getConfigRequest: requests.GetConfigRequest
  ): Promise<responses.GetConfigResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#getConfig.");
    const operationName = "getConfig";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/Config/GetConfig";
    const pathParams = {
      "{configId}": getConfigRequest.configId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConfigRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configs/{configId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConfigResponse>{},
        body: await response.json(),
        bodyKey: "config",
        bodyModel: model.Config,
        type: "model.Config",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * API to get the details of discovery Job by identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDiscoveryJobRequest
   * @return GetDiscoveryJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/GetDiscoveryJob.ts.html |here} to see how to use GetDiscoveryJob API.
   */
  public async getDiscoveryJob(
    getDiscoveryJobRequest: requests.GetDiscoveryJobRequest
  ): Promise<responses.GetDiscoveryJobResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#getDiscoveryJob.");
    const operationName = "getDiscoveryJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/DiscoveryJob/GetDiscoveryJob";
    const pathParams = {
      "{discoveryJobId}": getDiscoveryJobRequest.discoveryJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDiscoveryJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDiscoveryJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs/{discoveryJobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDiscoveryJobResponse>{},
        body: await response.json(),
        bodyKey: "discoveryJob",
        bodyModel: model.DiscoveryJob,
        type: "model.DiscoveryJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Metric Extension by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMetricExtensionRequest
   * @return GetMetricExtensionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/GetMetricExtension.ts.html |here} to see how to use GetMetricExtension API.
   */
  public async getMetricExtension(
    getMetricExtensionRequest: requests.GetMetricExtensionRequest
  ): Promise<responses.GetMetricExtensionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#getMetricExtension.");
    const operationName = "getMetricExtension";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MetricExtension/GetMetricExtension";
    const pathParams = {
      "{metricExtensionId}": getMetricExtensionRequest.metricExtensionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMetricExtensionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMetricExtensionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metricExtensions/{metricExtensionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMetricExtensionResponse>{},
        body: await response.json(),
        bodyKey: "metricExtension",
        bodyModel: model.MetricExtension,
        type: "model.MetricExtension",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get monitored resource for the given identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMonitoredResourceRequest
   * @return GetMonitoredResourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/GetMonitoredResource.ts.html |here} to see how to use GetMonitoredResource API.
   */
  public async getMonitoredResource(
    getMonitoredResourceRequest: requests.GetMonitoredResourceRequest
  ): Promise<responses.GetMonitoredResourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#getMonitoredResource.");
    const operationName = "getMonitoredResource";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/GetMonitoredResource";
    const pathParams = {
      "{monitoredResourceId}": getMonitoredResourceRequest.monitoredResourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMonitoredResourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMonitoredResourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/{monitoredResourceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMonitoredResourceResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResource",
        bodyModel: model.MonitoredResource,
        type: "model.MonitoredResource",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets stack monitoring resource task details by identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMonitoredResourceTaskRequest
   * @return GetMonitoredResourceTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/GetMonitoredResourceTask.ts.html |here} to see how to use GetMonitoredResourceTask API.
   */
  public async getMonitoredResourceTask(
    getMonitoredResourceTaskRequest: requests.GetMonitoredResourceTaskRequest
  ): Promise<responses.GetMonitoredResourceTaskResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#getMonitoredResourceTask.");
    const operationName = "getMonitoredResourceTask";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResourceTask/GetMonitoredResourceTask";
    const pathParams = {
      "{monitoredResourceTaskId}": getMonitoredResourceTaskRequest.monitoredResourceTaskId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMonitoredResourceTaskRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMonitoredResourceTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResourceTasks/{monitoredResourceTaskId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMonitoredResourceTaskResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceTask",
        bodyModel: model.MonitoredResourceTask,
        type: "model.MonitoredResourceTask",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a monitored resource type by identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMonitoredResourceTypeRequest
   * @return GetMonitoredResourceTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/GetMonitoredResourceType.ts.html |here} to see how to use GetMonitoredResourceType API.
   */
  public async getMonitoredResourceType(
    getMonitoredResourceTypeRequest: requests.GetMonitoredResourceTypeRequest
  ): Promise<responses.GetMonitoredResourceTypeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#getMonitoredResourceType.");
    const operationName = "getMonitoredResourceType";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResourceType/GetMonitoredResourceType";
    const pathParams = {
      "{monitoredResourceTypeId}": getMonitoredResourceTypeRequest.monitoredResourceTypeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMonitoredResourceTypeRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMonitoredResourceTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResourceTypes/{monitoredResourceTypeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMonitoredResourceTypeResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceType",
        bodyModel: model.MonitoredResourceType,
        type: "model.MonitoredResourceType",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * API to get the details of a Process Set by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetProcessSetRequest
   * @return GetProcessSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/GetProcessSet.ts.html |here} to see how to use GetProcessSet API.
   */
  public async getProcessSet(
    getProcessSetRequest: requests.GetProcessSetRequest
  ): Promise<responses.GetProcessSetResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#getProcessSet.");
    const operationName = "getProcessSet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/ProcessSet/GetProcessSet";
    const pathParams = {
      "{processSetId}": getProcessSetRequest.processSetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProcessSetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProcessSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/processSets/{processSetId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProcessSetResponse>{},
        body: await response.json(),
        bodyKey: "processSet",
        bodyModel: model.ProcessSet,
        type: "model.ProcessSet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List of summary of baseline-able metrics for a given resource group if specified.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListBaselineableMetricsRequest
   * @return ListBaselineableMetricsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ListBaselineableMetrics.ts.html |here} to see how to use ListBaselineableMetrics API.
   */
  public async listBaselineableMetrics(
    listBaselineableMetricsRequest: requests.ListBaselineableMetricsRequest
  ): Promise<responses.ListBaselineableMetricsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#listBaselineableMetrics.");
    const operationName = "listBaselineableMetrics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/BaselineableMetric/ListBaselineableMetrics";
    const pathParams = {};

    const queryParams = {
      "resourceGroup": listBaselineableMetricsRequest.resourceGroup,
      "resourceType": listBaselineableMetricsRequest.resourceType,
      "isOutOfBox": listBaselineableMetricsRequest.isOutOfBox,
      "name": listBaselineableMetricsRequest.name,
      "metricNamespace": listBaselineableMetricsRequest.metricNamespace,
      "limit": listBaselineableMetricsRequest.limit,
      "page": listBaselineableMetricsRequest.page,
      "compartmentId": listBaselineableMetricsRequest.compartmentId,
      "baselineableMetricId": listBaselineableMetricsRequest.baselineableMetricId,
      "sortOrder": listBaselineableMetricsRequest.sortOrder,
      "sortBy": listBaselineableMetricsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBaselineableMetricsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBaselineableMetricsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/baselineableMetrics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBaselineableMetricsResponse>{},
        body: await response.json(),
        bodyKey: "baselineableMetricSummaryCollection",
        bodyModel: model.BaselineableMetricSummaryCollection,
        type: "model.BaselineableMetricSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a list of configurations in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListConfigsRequest
   * @return ListConfigsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ListConfigs.ts.html |here} to see how to use ListConfigs API.
   */
  public async listConfigs(
    listConfigsRequest: requests.ListConfigsRequest
  ): Promise<responses.ListConfigsResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#listConfigs.");
    const operationName = "listConfigs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/ConfigCollection/ListConfigs";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listConfigsRequest.compartmentId,
      "displayName": listConfigsRequest.displayName,
      "type": listConfigsRequest.type,
      "limit": listConfigsRequest.limit,
      "page": listConfigsRequest.page,
      "lifecycleState": listConfigsRequest.lifecycleState,
      "sortOrder": listConfigsRequest.sortOrder,
      "sortBy": listConfigsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listConfigsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listConfigsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConfigsResponse>{},
        body: await response.json(),
        bodyKey: "configCollection",
        bodyModel: model.ConfigCollection,
        type: "model.ConfigCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * API to get all the logs of a Discovery Job.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDiscoveryJobLogsRequest
   * @return ListDiscoveryJobLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ListDiscoveryJobLogs.ts.html |here} to see how to use ListDiscoveryJobLogs API.
   */
  public async listDiscoveryJobLogs(
    listDiscoveryJobLogsRequest: requests.ListDiscoveryJobLogsRequest
  ): Promise<responses.ListDiscoveryJobLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#listDiscoveryJobLogs.");
    const operationName = "listDiscoveryJobLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/DiscoveryJobLogCollection/ListDiscoveryJobLogs";
    const pathParams = {
      "{discoveryJobId}": listDiscoveryJobLogsRequest.discoveryJobId
    };

    const queryParams = {
      "logType": listDiscoveryJobLogsRequest.logType,
      "limit": listDiscoveryJobLogsRequest.limit,
      "page": listDiscoveryJobLogsRequest.page,
      "sortOrder": listDiscoveryJobLogsRequest.sortOrder,
      "sortBy": listDiscoveryJobLogsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDiscoveryJobLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDiscoveryJobLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs/{discoveryJobId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDiscoveryJobLogsResponse>{},
        body: await response.json(),
        bodyKey: "discoveryJobLogCollection",
        bodyModel: model.DiscoveryJobLogCollection,
        type: "model.DiscoveryJobLogCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * API to get the details of all Discovery Jobs.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDiscoveryJobsRequest
   * @return ListDiscoveryJobsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ListDiscoveryJobs.ts.html |here} to see how to use ListDiscoveryJobs API.
   */
  public async listDiscoveryJobs(
    listDiscoveryJobsRequest: requests.ListDiscoveryJobsRequest
  ): Promise<responses.ListDiscoveryJobsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#listDiscoveryJobs.");
    const operationName = "listDiscoveryJobs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/DiscoveryJobCollection/ListDiscoveryJobs";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDiscoveryJobsRequest.compartmentId,
      "name": listDiscoveryJobsRequest.name,
      "limit": listDiscoveryJobsRequest.limit,
      "page": listDiscoveryJobsRequest.page,
      "sortOrder": listDiscoveryJobsRequest.sortOrder,
      "sortBy": listDiscoveryJobsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDiscoveryJobsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDiscoveryJobsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDiscoveryJobsResponse>{},
        body: await response.json(),
        bodyKey: "discoveryJobCollection",
        bodyModel: model.DiscoveryJobCollection,
        type: "model.DiscoveryJobCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of metric extensions
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMetricExtensionsRequest
   * @return ListMetricExtensionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ListMetricExtensions.ts.html |here} to see how to use ListMetricExtensions API.
   */
  public async listMetricExtensions(
    listMetricExtensionsRequest: requests.ListMetricExtensionsRequest
  ): Promise<responses.ListMetricExtensionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#listMetricExtensions.");
    const operationName = "listMetricExtensions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MetricExtension/ListMetricExtensions";
    const pathParams = {};

    const queryParams = {
      "limit": listMetricExtensionsRequest.limit,
      "page": listMetricExtensionsRequest.page,
      "sortBy": listMetricExtensionsRequest.sortBy,
      "sortOrder": listMetricExtensionsRequest.sortOrder,
      "compartmentId": listMetricExtensionsRequest.compartmentId,
      "resourceType": listMetricExtensionsRequest.resourceType,
      "name": listMetricExtensionsRequest.name,
      "status": listMetricExtensionsRequest.status,
      "lifecycleState": listMetricExtensionsRequest.lifecycleState,
      "enabledOnResourceId": listMetricExtensionsRequest.enabledOnResourceId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMetricExtensionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMetricExtensionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metricExtensions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMetricExtensionsResponse>{},
        body: await response.json(),
        bodyKey: "metricExtensionCollection",
        bodyModel: model.MetricExtensionCollection,
        type: "model.MetricExtensionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of stack monitoring resource tasks in the compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMonitoredResourceTasksRequest
   * @return ListMonitoredResourceTasksResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ListMonitoredResourceTasks.ts.html |here} to see how to use ListMonitoredResourceTasks API.
   */
  public async listMonitoredResourceTasks(
    listMonitoredResourceTasksRequest: requests.ListMonitoredResourceTasksRequest
  ): Promise<responses.ListMonitoredResourceTasksResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#listMonitoredResourceTasks.");
    const operationName = "listMonitoredResourceTasks";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResourceTask/ListMonitoredResourceTasks";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listMonitoredResourceTasksRequest.compartmentId,
      "status": listMonitoredResourceTasksRequest.status,
      "sortBy": listMonitoredResourceTasksRequest.sortBy,
      "sortOrder": listMonitoredResourceTasksRequest.sortOrder,
      "limit": listMonitoredResourceTasksRequest.limit,
      "page": listMonitoredResourceTasksRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMonitoredResourceTasksRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMonitoredResourceTasksRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResourceTasks",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMonitoredResourceTasksResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceTasksCollection",
        bodyModel: model.MonitoredResourceTasksCollection,
        type: "model.MonitoredResourceTasksCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns list of resource types accessible to the customer.
   * There are two types of resource types - System resource types and User resource types.
   * System resource types are available out of the box in the stack monitoring resource service
   * and are accessible to all the tenant users. User resource types are created in the context
   * of a tenancy and are visible only for the tenancy. By default, both System resource types
   * and User resource types are returned.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMonitoredResourceTypesRequest
   * @return ListMonitoredResourceTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ListMonitoredResourceTypes.ts.html |here} to see how to use ListMonitoredResourceTypes API.
   */
  public async listMonitoredResourceTypes(
    listMonitoredResourceTypesRequest: requests.ListMonitoredResourceTypesRequest
  ): Promise<responses.ListMonitoredResourceTypesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#listMonitoredResourceTypes.");
    const operationName = "listMonitoredResourceTypes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResourceType/ListMonitoredResourceTypes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listMonitoredResourceTypesRequest.compartmentId,
      "name": listMonitoredResourceTypesRequest.name,
      "status": listMonitoredResourceTypesRequest.status,
      "isExcludeSystemTypes": listMonitoredResourceTypesRequest.isExcludeSystemTypes,
      "metricNamespace": listMonitoredResourceTypesRequest.metricNamespace,
      "sortBy": listMonitoredResourceTypesRequest.sortBy,
      "sortOrder": listMonitoredResourceTypesRequest.sortOrder,
      "limit": listMonitoredResourceTypesRequest.limit,
      "page": listMonitoredResourceTypesRequest.page,
      "fields": listMonitoredResourceTypesRequest.fields,
      "excludeFields": listMonitoredResourceTypesRequest.excludeFields
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMonitoredResourceTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMonitoredResourceTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResourceTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMonitoredResourceTypesResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceTypesCollection",
        bodyModel: model.MonitoredResourceTypesCollection,
        type: "model.MonitoredResourceTypesCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of monitored resources.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMonitoredResourcesRequest
   * @return ListMonitoredResourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ListMonitoredResources.ts.html |here} to see how to use ListMonitoredResources API.
   */
  public async listMonitoredResources(
    listMonitoredResourcesRequest: requests.ListMonitoredResourcesRequest
  ): Promise<responses.ListMonitoredResourcesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#listMonitoredResources.");
    const operationName = "listMonitoredResources";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/ListMonitoredResources";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listMonitoredResourcesRequest.compartmentId,
      "name": listMonitoredResourcesRequest.name,
      "workRequestId": listMonitoredResourcesRequest.workRequestId,
      "status": listMonitoredResourcesRequest.status,
      "sortBy": listMonitoredResourcesRequest.sortBy,
      "sortOrder": listMonitoredResourcesRequest.sortOrder,
      "limit": listMonitoredResourcesRequest.limit,
      "page": listMonitoredResourcesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMonitoredResourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMonitoredResourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMonitoredResourcesResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceCollection",
        bodyModel: model.MonitoredResourceCollection,
        type: "model.MonitoredResourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * API to get the details of all Process Sets.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListProcessSetsRequest
   * @return ListProcessSetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ListProcessSets.ts.html |here} to see how to use ListProcessSets API.
   */
  public async listProcessSets(
    listProcessSetsRequest: requests.ListProcessSetsRequest
  ): Promise<responses.ListProcessSetsResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#listProcessSets.");
    const operationName = "listProcessSets";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/ProcessSetCollection/ListProcessSets";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listProcessSetsRequest.compartmentId,
      "limit": listProcessSetsRequest.limit,
      "page": listProcessSetsRequest.page,
      "sortOrder": listProcessSetsRequest.sortOrder,
      "sortBy": listProcessSetsRequest.sortBy,
      "displayName": listProcessSetsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProcessSetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProcessSetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/processSets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProcessSetsResponse>{},
        body: await response.json(),
        bodyKey: "processSetCollection",
        bodyModel: model.ProcessSetCollection,
        type: "model.ProcessSetCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of errors for a given work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/WorkRequestErrorCollection/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder,
      "sortBy": listWorkRequestErrorsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of logs for a given work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/WorkRequestLogEntryCollection/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortOrder": listWorkRequestLogsRequest.sortOrder,
      "sortBy": listWorkRequestLogsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/WorkRequestSummaryCollection/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Each resource is assigned a license based on which features are enabled for it.
   * User is charged differently based on license.
   * Specify the license type to be updated for the parent resource in the topology.
   * The license type value is propagated to the member resources as well.
   * Member resource is a resource which has \"contains\" association with the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ManageLicenseRequest
   * @return ManageLicenseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/ManageLicense.ts.html |here} to see how to use ManageLicense API.
   */
  public async manageLicense(
    manageLicenseRequest: requests.ManageLicenseRequest
  ): Promise<responses.ManageLicenseResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#manageLicense.");
    const operationName = "manageLicense";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/ManageLicense";
    const pathParams = {
      "{monitoredResourceId}": manageLicenseRequest.monitoredResourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": manageLicenseRequest.opcRetryToken,
      "opc-request-id": manageLicenseRequest.opcRequestId,
      "if-match": manageLicenseRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      manageLicenseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/{monitoredResourceId}/actions/manageLicense",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        manageLicenseRequest.manageLicenseDetails,
        "ManageLicenseDetails",
        model.ManageLicenseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ManageLicenseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Publish the Metric Extension identified by the id
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PublishMetricExtensionRequest
   * @return PublishMetricExtensionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/PublishMetricExtension.ts.html |here} to see how to use PublishMetricExtension API.
   */
  public async publishMetricExtension(
    publishMetricExtensionRequest: requests.PublishMetricExtensionRequest
  ): Promise<responses.PublishMetricExtensionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#publishMetricExtension.");
    const operationName = "publishMetricExtension";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MetricExtension/PublishMetricExtension";
    const pathParams = {
      "{metricExtensionId}": publishMetricExtensionRequest.metricExtensionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": publishMetricExtensionRequest.opcRequestId,
      "opc-retry-token": publishMetricExtensionRequest.opcRetryToken,
      "if-match": publishMetricExtensionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      publishMetricExtensionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metricExtensions/{metricExtensionId}/actions/publish",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PublishMetricExtensionResponse>{},
        body: await response.json(),
        bodyKey: "metricExtension",
        bodyModel: model.MetricExtension,
        type: "model.MetricExtension",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets resource count based on the aggregation criteria specified using \"groupBy\" parameter.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RequestMonitoredResourcesSummarizedCountRequest
   * @return RequestMonitoredResourcesSummarizedCountResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/RequestMonitoredResourcesSummarizedCount.ts.html |here} to see how to use RequestMonitoredResourcesSummarizedCount API.
   */
  public async requestMonitoredResourcesSummarizedCount(
    requestMonitoredResourcesSummarizedCountRequest: requests.RequestMonitoredResourcesSummarizedCountRequest
  ): Promise<responses.RequestMonitoredResourcesSummarizedCountResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation StackMonitoringClient#requestMonitoredResourcesSummarizedCount."
      );
    const operationName = "requestMonitoredResourcesSummarizedCount";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/RequestMonitoredResourcesSummarizedCount";
    const pathParams = {};

    const queryParams = {
      "compartmentId": requestMonitoredResourcesSummarizedCountRequest.compartmentId,
      "groupBy": requestMonitoredResourcesSummarizedCountRequest.groupBy,
      "license": requestMonitoredResourcesSummarizedCountRequest.license,
      "resourceType": requestMonitoredResourcesSummarizedCountRequest.resourceType,
      "sortBy": requestMonitoredResourcesSummarizedCountRequest.sortBy,
      "sortOrder": requestMonitoredResourcesSummarizedCountRequest.sortOrder,
      "limit": requestMonitoredResourcesSummarizedCountRequest.limit,
      "page": requestMonitoredResourcesSummarizedCountRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestMonitoredResourcesSummarizedCountRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestMonitoredResourcesSummarizedCountRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/actions/summarizeCount",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestMonitoredResourcesSummarizedCountResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourcesCountAggregationCollection",
        bodyModel: model.MonitoredResourcesCountAggregationCollection,
        type: "model.MonitoredResourcesCountAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List all associated resources recursively up-to a specified level,
   * for the monitored resources of type specified.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SearchAssociatedResourcesRequest
   * @return SearchAssociatedResourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/SearchAssociatedResources.ts.html |here} to see how to use SearchAssociatedResources API.
   */
  public async searchAssociatedResources(
    searchAssociatedResourcesRequest: requests.SearchAssociatedResourcesRequest
  ): Promise<responses.SearchAssociatedResourcesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#searchAssociatedResources.");
    const operationName = "searchAssociatedResources";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/SearchAssociatedResources";
    const pathParams = {};

    const queryParams = {
      "fields": searchAssociatedResourcesRequest.fields,
      "excludeFields": searchAssociatedResourcesRequest.excludeFields,
      "limit": searchAssociatedResourcesRequest.limit,
      "page": searchAssociatedResourcesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": searchAssociatedResourcesRequest.opcRequestId,
      "opc-retry-token": searchAssociatedResourcesRequest.opcRetryToken,
      "if-match": searchAssociatedResourcesRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchAssociatedResourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/actions/searchAssociatedResources",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchAssociatedResourcesRequest.searchAssociatedResourcesDetails,
        "SearchAssociatedResourcesDetails",
        model.SearchAssociatedResourcesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchAssociatedResourcesResponse>{},
        body: await response.json(),
        bodyKey: "associatedResourcesCollection",
        bodyModel: model.AssociatedResourcesCollection,
        type: "model.AssociatedResourcesCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search associations in the given compartment based on the search criteria.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SearchMonitoredResourceAssociationsRequest
   * @return SearchMonitoredResourceAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/SearchMonitoredResourceAssociations.ts.html |here} to see how to use SearchMonitoredResourceAssociations API.
   */
  public async searchMonitoredResourceAssociations(
    searchMonitoredResourceAssociationsRequest: requests.SearchMonitoredResourceAssociationsRequest
  ): Promise<responses.SearchMonitoredResourceAssociationsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation StackMonitoringClient#searchMonitoredResourceAssociations."
      );
    const operationName = "searchMonitoredResourceAssociations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/SearchMonitoredResourceAssociations";
    const pathParams = {};

    const queryParams = {
      "limit": searchMonitoredResourceAssociationsRequest.limit,
      "page": searchMonitoredResourceAssociationsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": searchMonitoredResourceAssociationsRequest.opcRequestId,
      "opc-retry-token": searchMonitoredResourceAssociationsRequest.opcRetryToken,
      "if-match": searchMonitoredResourceAssociationsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchMonitoredResourceAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/actions/searchAssociations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchMonitoredResourceAssociationsRequest.searchMonitoredResourceAssociationsDetails,
        "SearchMonitoredResourceAssociationsDetails",
        model.SearchMonitoredResourceAssociationsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchMonitoredResourceAssociationsResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceAssociationsCollection",
        bodyModel: model.MonitoredResourceAssociationsCollection,
        type: "model.MonitoredResourceAssociationsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List the member resources for the given monitored resource identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SearchMonitoredResourceMembersRequest
   * @return SearchMonitoredResourceMembersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/SearchMonitoredResourceMembers.ts.html |here} to see how to use SearchMonitoredResourceMembers API.
   */
  public async searchMonitoredResourceMembers(
    searchMonitoredResourceMembersRequest: requests.SearchMonitoredResourceMembersRequest
  ): Promise<responses.SearchMonitoredResourceMembersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#searchMonitoredResourceMembers.");
    const operationName = "searchMonitoredResourceMembers";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/SearchMonitoredResourceMembers";
    const pathParams = {
      "{monitoredResourceId}": searchMonitoredResourceMembersRequest.monitoredResourceId
    };

    const queryParams = {
      "sortBy": searchMonitoredResourceMembersRequest.sortBy,
      "sortOrder": searchMonitoredResourceMembersRequest.sortOrder,
      "page": searchMonitoredResourceMembersRequest.page,
      "limit": searchMonitoredResourceMembersRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": searchMonitoredResourceMembersRequest.opcRetryToken,
      "opc-request-id": searchMonitoredResourceMembersRequest.opcRequestId,
      "if-match": searchMonitoredResourceMembersRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchMonitoredResourceMembersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/{monitoredResourceId}/actions/listMembers",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchMonitoredResourceMembersRequest.searchMonitoredResourceMembersDetails,
        "SearchMonitoredResourceMembersDetails",
        model.SearchMonitoredResourceMembersDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchMonitoredResourceMembersResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceMembersCollection",
        bodyModel: model.MonitoredResourceMembersCollection,
        type: "model.MonitoredResourceMembersCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all monitored resources in a compartment for the given search criteria.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SearchMonitoredResourcesRequest
   * @return SearchMonitoredResourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/SearchMonitoredResources.ts.html |here} to see how to use SearchMonitoredResources API.
   */
  public async searchMonitoredResources(
    searchMonitoredResourcesRequest: requests.SearchMonitoredResourcesRequest
  ): Promise<responses.SearchMonitoredResourcesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#searchMonitoredResources.");
    const operationName = "searchMonitoredResources";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/SearchMonitoredResources";
    const pathParams = {};

    const queryParams = {
      "limit": searchMonitoredResourcesRequest.limit,
      "page": searchMonitoredResourcesRequest.page,
      "fields": searchMonitoredResourcesRequest.fields,
      "excludeFields": searchMonitoredResourcesRequest.excludeFields
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": searchMonitoredResourcesRequest.opcRequestId,
      "opc-retry-token": searchMonitoredResourcesRequest.opcRetryToken,
      "if-match": searchMonitoredResourcesRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchMonitoredResourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/actions/search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchMonitoredResourcesRequest.searchMonitoredResourcesDetails,
        "SearchMonitoredResourcesDetails",
        model.SearchMonitoredResourcesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchMonitoredResourcesResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceCollection",
        bodyModel: model.MonitoredResourceCollection,
        type: "model.MonitoredResourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Performs test of Metric Extension on a specific resource Id
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param TestMetricExtensionRequest
   * @return TestMetricExtensionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/TestMetricExtension.ts.html |here} to see how to use TestMetricExtension API.
   */
  public async testMetricExtension(
    testMetricExtensionRequest: requests.TestMetricExtensionRequest
  ): Promise<responses.TestMetricExtensionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#testMetricExtension.");
    const operationName = "testMetricExtension";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MetricExtension/TestMetricExtension";
    const pathParams = {
      "{metricExtensionId}": testMetricExtensionRequest.metricExtensionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": testMetricExtensionRequest.ifMatch,
      "opc-request-id": testMetricExtensionRequest.opcRequestId,
      "opc-retry-token": testMetricExtensionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      testMetricExtensionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metricExtensions/{metricExtensionId}/actions/test",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        testMetricExtensionRequest.testMetricExtensionDetails,
        "TestMetricExtensionDetails",
        model.TestMetricExtensionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.TestMetricExtensionResponse>{},
        body: await response.json(),
        bodyKey: "testMetricExtensionData",
        bodyModel: model.TestMetricExtensionData,
        type: "model.TestMetricExtensionData",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Provided tags will be added or updated in the existing list of tags for the affected resources.
   * Resources to be updated are identified based on association types specified.
   * If association types not specified, then tags will be updated only for the resource identified by
   * the given monitored resource identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAndPropagateTagsRequest
   * @return UpdateAndPropagateTagsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/UpdateAndPropagateTags.ts.html |here} to see how to use UpdateAndPropagateTags API.
   */
  public async updateAndPropagateTags(
    updateAndPropagateTagsRequest: requests.UpdateAndPropagateTagsRequest
  ): Promise<responses.UpdateAndPropagateTagsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#updateAndPropagateTags.");
    const operationName = "updateAndPropagateTags";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/UpdateAndPropagateTags";
    const pathParams = {
      "{monitoredResourceId}": updateAndPropagateTagsRequest.monitoredResourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateAndPropagateTagsRequest.opcRetryToken,
      "opc-request-id": updateAndPropagateTagsRequest.opcRequestId,
      "if-match": updateAndPropagateTagsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAndPropagateTagsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/{monitoredResourceId}/actions/updateAndPropagateTags",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateAndPropagateTagsRequest.updateAndPropagateTagsDetails,
        "UpdateAndPropagateTagsDetails",
        model.UpdateAndPropagateTagsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAndPropagateTagsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Baseline-able metric for the given id
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateBaselineableMetricRequest
   * @return UpdateBaselineableMetricResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/UpdateBaselineableMetric.ts.html |here} to see how to use UpdateBaselineableMetric API.
   */
  public async updateBaselineableMetric(
    updateBaselineableMetricRequest: requests.UpdateBaselineableMetricRequest
  ): Promise<responses.UpdateBaselineableMetricResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#updateBaselineableMetric.");
    const operationName = "updateBaselineableMetric";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/BaselineableMetric/UpdateBaselineableMetric";
    const pathParams = {
      "{baselineableMetricId}": updateBaselineableMetricRequest.baselineableMetricId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateBaselineableMetricRequest.ifMatch,
      "opc-request-id": updateBaselineableMetricRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBaselineableMetricRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/baselineableMetrics/{baselineableMetricId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBaselineableMetricRequest.updateBaselineableMetricDetails,
        "UpdateBaselineableMetricDetails",
        model.UpdateBaselineableMetricDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBaselineableMetricResponse>{},
        body: await response.json(),
        bodyKey: "baselineableMetric",
        bodyModel: model.BaselineableMetric,
        type: "model.BaselineableMetric",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the configuration identified by the id given.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateConfigRequest
   * @return UpdateConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/UpdateConfig.ts.html |here} to see how to use UpdateConfig API.
   */
  public async updateConfig(
    updateConfigRequest: requests.UpdateConfigRequest
  ): Promise<responses.UpdateConfigResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#updateConfig.");
    const operationName = "updateConfig";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/Config/UpdateConfig";
    const pathParams = {
      "{configId}": updateConfigRequest.configId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateConfigRequest.ifMatch,
      "opc-request-id": updateConfigRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configs/{configId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateConfigRequest.updateConfigDetails,
        "UpdateConfigDetails",
        model.UpdateConfigDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateConfigResponse>{},
        body: await response.json(),
        bodyKey: "config",
        bodyModel: model.Config,
        type: "model.Config",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Metric Extension
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateMetricExtensionRequest
   * @return UpdateMetricExtensionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/UpdateMetricExtension.ts.html |here} to see how to use UpdateMetricExtension API.
   */
  public async updateMetricExtension(
    updateMetricExtensionRequest: requests.UpdateMetricExtensionRequest
  ): Promise<responses.UpdateMetricExtensionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#updateMetricExtension.");
    const operationName = "updateMetricExtension";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MetricExtension/UpdateMetricExtension";
    const pathParams = {
      "{metricExtensionId}": updateMetricExtensionRequest.metricExtensionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateMetricExtensionRequest.ifMatch,
      "opc-request-id": updateMetricExtensionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateMetricExtensionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metricExtensions/{metricExtensionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMetricExtensionRequest.updateMetricExtensionDetails,
        "UpdateMetricExtensionDetails",
        model.UpdateMetricExtensionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMetricExtensionResponse>{},
        body: await response.json(),
        bodyKey: "metricExtension",
        bodyModel: model.MetricExtension,
        type: "model.MetricExtension",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-location"),
            key: "contentLocation",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update monitored resource by the given identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
   * Note that \"properties\" object, if specified, will entirely replace the existing object,
   * as part this operation.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateMonitoredResourceRequest
   * @return UpdateMonitoredResourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/UpdateMonitoredResource.ts.html |here} to see how to use UpdateMonitoredResource API.
   */
  public async updateMonitoredResource(
    updateMonitoredResourceRequest: requests.UpdateMonitoredResourceRequest
  ): Promise<responses.UpdateMonitoredResourceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#updateMonitoredResource.");
    const operationName = "updateMonitoredResource";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResource/UpdateMonitoredResource";
    const pathParams = {
      "{monitoredResourceId}": updateMonitoredResourceRequest.monitoredResourceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateMonitoredResourceRequest.ifMatch,
      "opc-request-id": updateMonitoredResourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateMonitoredResourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResources/{monitoredResourceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMonitoredResourceRequest.updateMonitoredResourceDetails,
        "UpdateMonitoredResourceDetails",
        model.UpdateMonitoredResourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMonitoredResourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update stack monitoring resource task by the given identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateMonitoredResourceTaskRequest
   * @return UpdateMonitoredResourceTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/UpdateMonitoredResourceTask.ts.html |here} to see how to use UpdateMonitoredResourceTask API.
   */
  public async updateMonitoredResourceTask(
    updateMonitoredResourceTaskRequest: requests.UpdateMonitoredResourceTaskRequest
  ): Promise<responses.UpdateMonitoredResourceTaskResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#updateMonitoredResourceTask.");
    const operationName = "updateMonitoredResourceTask";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResourceTask/UpdateMonitoredResourceTask";
    const pathParams = {
      "{monitoredResourceTaskId}": updateMonitoredResourceTaskRequest.monitoredResourceTaskId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateMonitoredResourceTaskRequest.ifMatch,
      "opc-request-id": updateMonitoredResourceTaskRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateMonitoredResourceTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResourceTasks/{monitoredResourceTaskId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMonitoredResourceTaskRequest.updateMonitoredResourceTaskDetails,
        "UpdateMonitoredResourceTaskDetails",
        model.UpdateMonitoredResourceTaskDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMonitoredResourceTaskResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceTask",
        bodyModel: model.MonitoredResourceTask,
        type: "model.MonitoredResourceTask",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the Monitored Resource Type identified by the identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateMonitoredResourceTypeRequest
   * @return UpdateMonitoredResourceTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/UpdateMonitoredResourceType.ts.html |here} to see how to use UpdateMonitoredResourceType API.
   */
  public async updateMonitoredResourceType(
    updateMonitoredResourceTypeRequest: requests.UpdateMonitoredResourceTypeRequest
  ): Promise<responses.UpdateMonitoredResourceTypeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation StackMonitoringClient#updateMonitoredResourceType.");
    const operationName = "updateMonitoredResourceType";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/MonitoredResourceType/UpdateMonitoredResourceType";
    const pathParams = {
      "{monitoredResourceTypeId}": updateMonitoredResourceTypeRequest.monitoredResourceTypeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateMonitoredResourceTypeRequest.ifMatch,
      "opc-request-id": updateMonitoredResourceTypeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateMonitoredResourceTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/monitoredResourceTypes/{monitoredResourceTypeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMonitoredResourceTypeRequest.updateMonitoredResourceTypeDetails,
        "UpdateMonitoredResourceTypeDetails",
        model.UpdateMonitoredResourceTypeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMonitoredResourceTypeResponse>{},
        body: await response.json(),
        bodyKey: "monitoredResourceType",
        bodyModel: model.MonitoredResourceType,
        type: "model.MonitoredResourceType",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * API to update a Process Set identified by a given ocid.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateProcessSetRequest
   * @return UpdateProcessSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/stackmonitoring/UpdateProcessSet.ts.html |here} to see how to use UpdateProcessSet API.
   */
  public async updateProcessSet(
    updateProcessSetRequest: requests.UpdateProcessSetRequest
  ): Promise<responses.UpdateProcessSetResponse> {
    if (this.logger) this.logger.debug("Calling operation StackMonitoringClient#updateProcessSet.");
    const operationName = "updateProcessSet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/stack-monitoring/20210330/ProcessSet/UpdateProcessSet";
    const pathParams = {
      "{processSetId}": updateProcessSetRequest.processSetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateProcessSetRequest.opcRequestId,
      "if-match": updateProcessSetRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateProcessSetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/processSets/{processSetId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProcessSetRequest.updateProcessSetDetails,
        "UpdateProcessSetDetails",
        model.UpdateProcessSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProcessSetResponse>{},
        body: await response.json(),
        bodyKey: "processSet",
        bodyModel: model.ProcessSet,
        type: "model.ProcessSet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
