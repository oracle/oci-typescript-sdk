/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * ExadataInfrastructure
 */
export interface ExadataInfrastructure {
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
   */
  "id": string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
   */
  "compartmentId": string;
  /**
   * The current lifecycle state of the Exadata infrastructure.
   */
  "lifecycleState": ExadataInfrastructure.LifecycleState;
  /**
   * The user-friendly name for the Exadata Cloud@Customer infrastructure. The name does not need to be unique.
   */
  "displayName": string;
  /**
   * The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
   *
   */
  "shape": string;
  /**
   * The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/Content/Database/References/timezones.htm).
   */
  "timeZone"?: string;
  /**
   * The number of enabled CPU cores. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "cpusEnabled"?: number;
  /**
   * The total number of CPU cores available. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "maxCpuCount"?: number;
  /**
   * The memory allocated in GBs. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "memorySizeInGBs"?: number;
  /**
   * The total memory available in GBs. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "maxMemoryInGBs"?: number;
  /**
   * The local node storage allocated in GBs. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "dbNodeStorageSizeInGBs"?: number;
  /**
   * The total local node storage available in GBs. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "maxDbNodeStorageInGBs"?: number;
  /**
   * Size, in terabytes, of the DATA disk group.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "dataStorageSizeInTBs"?: number;
  /**
   * The total available DATA disk group size. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "maxDataStorageInTBs"?: number;
  /**
   * The serial number for the Exadata infrastructure.
   */
  "rackSerialNumber"?: string;
  /**
   * The number of Exadata storage servers for the Exadata infrastructure. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "storageCount"?: number;
  /**
   * The requested number of additional storage servers for the Exadata infrastructure. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "additionalStorageCount"?: number;
  /**
   * The requested number of additional storage servers activated for the Exadata infrastructure. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "activatedStorageCount"?: number;
  /**
   * The number of compute servers for the Exadata infrastructure. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "computeCount"?: number;
  /**
   * Indicates if deployment is Multi-Rack or not.
   */
  "isMultiRackDeployment"?: boolean;
  /**
   * The base64 encoded Multi-Rack configuration json file.
   */
  "multiRackConfigurationFile"?: string;
  /**
   * The requested number of additional compute servers for the Exadata infrastructure. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "additionalComputeCount"?: number;
  /**
   * Oracle Exadata System Model specification. The system model determines the amount of compute or storage
   * server resources available for use. For more information, please see [System and Shape Configuration Options]
   * (https://docs.oracle.com/en/engineered-systems/exadata-cloud-at-customer/ecccm/ecc-system-config-options.html#GUID-9E090174-5C57-4EB1-9243-B470F9F10D6B)
   *
   */
  "additionalComputeSystemModel"?: ExadataInfrastructure.AdditionalComputeSystemModel;
  /**
   * The IP address for the first control plane server.
   */
  "cloudControlPlaneServer1"?: string;
  /**
   * The IP address for the second control plane server.
   */
  "cloudControlPlaneServer2"?: string;
  /**
   * The netmask for the control plane network.
   */
  "netmask"?: string;
  /**
   * The gateway for the control plane network.
   */
  "gateway"?: string;
  /**
   * The CIDR block for the Exadata administration network.
   */
  "adminNetworkCIDR"?: string;
  /**
   * The CIDR block for the Exadata InfiniBand interconnect.
   */
  "infiniBandNetworkCIDR"?: string;
  /**
   * The corporate network proxy for access to the control plane network.
   */
  "corporateProxy"?: string;
  /**
   * The list of DNS server IP addresses. Maximum of 3 allowed.
   */
  "dnsServer"?: Array<string>;
  /**
   * The list of NTP server IP addresses. Maximum of 3 allowed.
   */
  "ntpServer"?: Array<string>;
  /**
   * The date and time the Exadata infrastructure was created.
   */
  "timeCreated"?: Date;
  /**
   * Additional information about the current lifecycle state.
   */
  "lifecycleDetails"?: string;
  /**
   * The CSI Number of the Exadata infrastructure.
   */
  "csiNumber"?: string;
  /**
   * The list of contacts for the Exadata infrastructure.
   */
  "contacts"?: Array<model.ExadataInfrastructureContact>;
  /**
   * A field to capture \u2018Maintenance SLO Status\u2019 for the Exadata infrastructure with values \u2018OK\u2019, \u2018DEGRADED\u2019. Default is \u2018OK\u2019 when the infrastructure is provisioned.
   */
  "maintenanceSLOStatus"?: ExadataInfrastructure.MaintenanceSLOStatus;
  "maintenanceWindow"?: model.MaintenanceWindow;
  /**
   * The software version of the storage servers (cells) in the Exadata infrastructure.
   */
  "storageServerVersion"?: string;
  /**
   * The software version of the database servers (dom0) in the Exadata infrastructure.
   */
  "dbServerVersion"?: string;
  /**
   * The monthly software version of the database servers (dom0) in the Exadata infrastructure.
   */
  "monthlyDbServerVersion"?: string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the last maintenance run.
   */
  "lastMaintenanceRunId"?: string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the next maintenance run.
   */
  "nextMaintenanceRunId"?: string;
  /**
   * Indicates whether cps offline diagnostic report is enabled for this Exadata infrastructure. This will allow a customer to quickly check status themselves and fix problems on their end, saving time and frustration
   * for both Oracle and the customer when they find the CPS in a disconnected state.You can enable offline diagnostic report during Exadata infrastructure provisioning. You can also disable or enable it at any time
   * using the UpdateExadatainfrastructure API.
   *
   */
  "isCpsOfflineReportEnabled"?: boolean;
  "networkBondingModeDetails"?: model.NetworkBondingModeDetails;
  /**
   * The name of the availability domain that the Exadata infrastructure is located in.
   */
  "availabilityDomain"?: string;
  /**
   * Details of the file system configuration of the Exadata infrastructure.
   */
  "definedFileSystemConfigurations"?: Array<model.DefinedFileSystemConfiguration>;
  /**
    * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
* For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Department\": \"Finance\"}}
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * If true, the infrastructure is using granular maintenance scheduling preference.
   */
  "isSchedulingPolicyAssociated"?: boolean;
}

export namespace ExadataInfrastructure {
  export enum LifecycleState {
    Creating = "CREATING",
    RequiresActivation = "REQUIRES_ACTIVATION",
    Activating = "ACTIVATING",
    Active = "ACTIVE",
    ActivationFailed = "ACTIVATION_FAILED",
    Failed = "FAILED",
    Updating = "UPDATING",
    Deleting = "DELETING",
    Deleted = "DELETED",
    Disconnected = "DISCONNECTED",
    MaintenanceInProgress = "MAINTENANCE_IN_PROGRESS",
    WaitingForConnectivity = "WAITING_FOR_CONNECTIVITY",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum AdditionalComputeSystemModel {
    X7 = "X7",
    X8 = "X8",
    X8M = "X8M",
    X9M = "X9M",
    X10M = "X10M",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum MaintenanceSLOStatus {
    Ok = "OK",
    Degraded = "DEGRADED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ExadataInfrastructure): object {
    const jsonObj = {
      ...obj,
      ...{
        "contacts": obj.contacts
          ? obj.contacts.map(item => {
              return model.ExadataInfrastructureContact.getJsonObj(item);
            })
          : undefined,

        "maintenanceWindow": obj.maintenanceWindow
          ? model.MaintenanceWindow.getJsonObj(obj.maintenanceWindow)
          : undefined,

        "networkBondingModeDetails": obj.networkBondingModeDetails
          ? model.NetworkBondingModeDetails.getJsonObj(obj.networkBondingModeDetails)
          : undefined,

        "definedFileSystemConfigurations": obj.definedFileSystemConfigurations
          ? obj.definedFileSystemConfigurations.map(item => {
              return model.DefinedFileSystemConfiguration.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ExadataInfrastructure): object {
    const jsonObj = {
      ...obj,
      ...{
        "contacts": obj.contacts
          ? obj.contacts.map(item => {
              return model.ExadataInfrastructureContact.getDeserializedJsonObj(item);
            })
          : undefined,

        "maintenanceWindow": obj.maintenanceWindow
          ? model.MaintenanceWindow.getDeserializedJsonObj(obj.maintenanceWindow)
          : undefined,

        "networkBondingModeDetails": obj.networkBondingModeDetails
          ? model.NetworkBondingModeDetails.getDeserializedJsonObj(obj.networkBondingModeDetails)
          : undefined,

        "definedFileSystemConfigurations": obj.definedFileSystemConfigurations
          ? obj.definedFileSystemConfigurations.map(item => {
              return model.DefinedFileSystemConfiguration.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
