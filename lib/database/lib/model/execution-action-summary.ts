/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Details of an execution action.
 *
 */
export interface ExecutionActionSummary {
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the execution action.
   */
  "id": string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the execution window resource the execution action belongs to.
   */
  "executionWindowId": string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
   */
  "compartmentId": string;
  /**
   * The user-friendly name for the execution action. The name does not need to be unique.
   */
  "displayName": string;
  /**
   * Description of the execution action.
   */
  "description"?: string;
  /**
   * The current state of the execution action. Valid states are SCHEDULED, IN_PROGRESS, FAILED, CANCELED,
   * UPDATING, DELETED, SUCCEEDED and PARTIAL_SUCCESS.
   *
   */
  "lifecycleState": ExecutionActionSummary.LifecycleState;
  /**
   * The current sub-state of the execution action. Valid states are DURATION_EXCEEDED, MAINTENANCE_IN_PROGRESS and WAITING.
   *
   */
  "lifecycleSubstate"?: ExecutionActionSummary.LifecycleSubstate;
  /**
   * Additional information about the current lifecycle state.
   */
  "lifecycleDetails"?: string;
  /**
   * The date and time the execution action was created.
   */
  "timeCreated"?: Date;
  /**
   * The last date and time that the execution action was updated.
   */
  "timeUpdated"?: Date;
  /**
   * The estimated time of the execution action in minutes. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "estimatedTimeInMins"?: number;
  /**
   * The total time taken by corresponding resource activity in minutes. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "totalTimeTakenInMins"?: number;
  /**
   * The priority order of the execution action. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "executionActionOrder"?: number;
  /**
   * The action type of the execution action being performed
   */
  "actionType": ExecutionActionSummary.ActionType;
  /**
   * Map<ParamName, ParamValue> where a key value pair describes the specific action parameter.
   * Example: {@code {\"count\": \"3\"}}
   *
   */
  "actionParams": { [key: string]: string };
  /**
   * List of action members of this execution action.
   */
  "actionMembers"?: Array<model.ExecutionActionMember>;
  /**
    * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
* For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Department\": \"Finance\"}}
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
}

export namespace ExecutionActionSummary {
  export enum LifecycleState {
    Scheduled = "SCHEDULED",
    InProgress = "IN_PROGRESS",
    Failed = "FAILED",
    Canceled = "CANCELED",
    Updating = "UPDATING",
    Deleted = "DELETED",
    Succeeded = "SUCCEEDED",
    PartialSuccess = "PARTIAL_SUCCESS",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum LifecycleSubstate {
    DurationExceeded = "DURATION_EXCEEDED",
    MaintenanceInProgress = "MAINTENANCE_IN_PROGRESS",
    Waiting = "WAITING",
    Rescheduled = "RESCHEDULED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum ActionType {
    DbServerFullSoftwareUpdate = "DB_SERVER_FULL_SOFTWARE_UPDATE",
    StorageServerFullSoftwareUpdate = "STORAGE_SERVER_FULL_SOFTWARE_UPDATE",
    NetworkSwitchFullSoftwareUpdate = "NETWORK_SWITCH_FULL_SOFTWARE_UPDATE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ExecutionActionSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "actionMembers": obj.actionMembers
          ? obj.actionMembers.map(item => {
              return model.ExecutionActionMember.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ExecutionActionSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "actionMembers": obj.actionMembers
          ? obj.actionMembers.map(item => {
              return model.ExecutionActionMember.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
