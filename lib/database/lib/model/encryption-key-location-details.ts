/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](https://docs.oracle.com/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Types of providers supported for managing database encryption keys
 */
export interface EncryptionKeyLocationDetails {
  "providerType": string;
}

export namespace EncryptionKeyLocationDetails {
  export function getJsonObj(obj: EncryptionKeyLocationDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "providerType" in obj && obj.providerType) {
      switch (obj.providerType) {
        case "EXTERNAL":
          return model.ExternalHsmEncryptionDetails.getJsonObj(
            <model.ExternalHsmEncryptionDetails>(<object>jsonObj),
            true
          );
        case "GCP":
          return model.GoogleCloudProviderEncryptionKeyDetails.getJsonObj(
            <model.GoogleCloudProviderEncryptionKeyDetails>(<object>jsonObj),
            true
          );
        case "AZURE":
          return model.AzureEncryptionKeyDetails.getJsonObj(
            <model.AzureEncryptionKeyDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.providerType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: EncryptionKeyLocationDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "providerType" in obj && obj.providerType) {
      switch (obj.providerType) {
        case "EXTERNAL":
          return model.ExternalHsmEncryptionDetails.getDeserializedJsonObj(
            <model.ExternalHsmEncryptionDetails>(<object>jsonObj),
            true
          );
        case "GCP":
          return model.GoogleCloudProviderEncryptionKeyDetails.getDeserializedJsonObj(
            <model.GoogleCloudProviderEncryptionKeyDetails>(<object>jsonObj),
            true
          );
        case "AZURE":
          return model.AzureEncryptionKeyDetails.getDeserializedJsonObj(
            <model.AzureEncryptionKeyDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.providerType}`);
      }
    }
    return jsonObj;
  }
}
