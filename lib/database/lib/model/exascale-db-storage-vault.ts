/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](https://docs.oracle.com/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Details of the Exadata Database Storage Vault.
 *
 */
export interface ExascaleDbStorageVault {
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Database Storage Vault.
   */
  "id": string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
   */
  "compartmentId": string;
  /**
   * The name of the availability domain in which the Exadata Database Storage Vault is located.
   */
  "availabilityDomain": string;
  /**
   * The current state of the Exadata Database Storage Vault.
   */
  "lifecycleState": ExascaleDbStorageVault.LifecycleState;
  /**
   * The user-friendly name for the Exadata Database Storage Vault. The name does not need to be unique.
   */
  "displayName": string;
  /**
   * Exadata Database Storage Vault description.
   */
  "description"?: string;
  /**
   * The date and time that the Exadata Database Storage Vault was created.
   */
  "timeCreated"?: Date;
  /**
   * Additional information about the current lifecycle state.
   */
  "lifecycleDetails"?: string;
  /**
   * The time zone that you want to use for the Exadata Database Storage Vault. For details, see [Time Zones](https://docs.oracle.com/iaas/Content/Database/References/timezones.htm).
   *
   */
  "timeZone"?: string;
  /**
   * The List of Exadata VM cluster on Exascale Infrastructure [OCIDs](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
   * **Note:** If Exadata Database Storage Vault is not used for any Exadata VM cluster on Exascale Infrastructure, this list is empty.
   *
   */
  "vmClusterIds"?: Array<string>;
  /**
   * The number of Exadata VM clusters used the Exadata Database Storage Vault.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "vmClusterCount"?: number;
  /**
    * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
* For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
* <p>
Example: {@code {\"Department\": \"Finance\"}}
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
   */
  "exadataInfrastructureId"?: string;
  /**
   * System tags for this resource. Each key is predefined and scoped to a namespace.
   * For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
  "highCapacityDatabaseStorage": model.ExascaleDbStorageDetails;
  /**
   * The size of additional Flash Cache in percentage of High Capacity database storage.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "additionalFlashCacheInPercent"?: number;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cluster placement group of the Exadata Infrastructure or Db System.
   */
  "clusterPlacementGroupId"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subscription with which resource needs to be associated with.
   */
  "subscriptionId"?: string;
  /**
   * Indicates if autoscale feature is enabled for the Database Storage Vault. The default value is {@code FALSE}.
   */
  "isAutoscaleEnabled"?: boolean;
  /**
   * Maximum limit storage size in gigabytes, that is applicable for the Database Storage Vault. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "autoscaleLimitInGBs"?: number;
  /**
   * The shapeAttribute of the Exadata VM cluster(s) associated with the Exadata Database Storage Vault.
   *
   */
  "attachedShapeAttributes"?: Array<ExascaleDbStorageVault.AttachedShapeAttributes>;
}

export namespace ExascaleDbStorageVault {
  export enum LifecycleState {
    Provisioning = "PROVISIONING",
    Available = "AVAILABLE",
    Updating = "UPDATING",
    Terminating = "TERMINATING",
    Terminated = "TERMINATED",
    Failed = "FAILED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum AttachedShapeAttributes {
    SmartStorage = "SMART_STORAGE",
    BlockStorage = "BLOCK_STORAGE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ExascaleDbStorageVault): object {
    const jsonObj = {
      ...obj,
      ...{
        "highCapacityDatabaseStorage": obj.highCapacityDatabaseStorage
          ? model.ExascaleDbStorageDetails.getJsonObj(obj.highCapacityDatabaseStorage)
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ExascaleDbStorageVault): object {
    const jsonObj = {
      ...obj,
      ...{
        "highCapacityDatabaseStorage": obj.highCapacityDatabaseStorage
          ? model.ExascaleDbStorageDetails.getDeserializedJsonObj(obj.highCapacityDatabaseStorage)
          : undefined
      }
    };

    return jsonObj;
  }
}
