/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](https://docs.oracle.com/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Parameters detailing the compute performance for a specified DB system shape.
 *
 */
export interface ComputePerformanceSummary {
  /**
   * The number of CPU cores available. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "cpuCoreCount"?: number;
  /**
   * The amount of memory allocated for the VMDB System. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "memoryInGBs": number;
  /**
   * The network bandwidth of the VMDB system in gbps. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "networkBandwidthInGbps"?: number;
  /**
   * IOPS for the VMDB System. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "networkIops"?: number;
  /**
   * Network throughput for the VMDB System. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "networkThroughputInMbps"?: number;
  /**
   * The compute model for Base Database Service. This is required if using the {@code computeCount} parameter. If using {@code cpuCoreCount} then it is an error to specify {@code computeModel} to a non-null value. The ECPU compute model is the recommended model, and the OCPU compute model is legacy.
   */
  "computeModel"?: ComputePerformanceSummary.ComputeModel;
  /**
   * The number of compute servers for the DB system. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "computeCount"?: number;
}

export namespace ComputePerformanceSummary {
  export enum ComputeModel {
    Ecpu = "ECPU",
    Ocpu = "OCPU",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ComputePerformanceSummary): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ComputePerformanceSummary): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
