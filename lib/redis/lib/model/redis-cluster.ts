/**
 * OCI Cache API
 * Use the OCI Cache API to create and manage clusters. A cluster is a memory-based storage solution. For more information, see [OCI Cache](/iaas/Content/ocicache/home.htm).
 * OpenAPI spec version: 20220315
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * An OCI Cache cluster is a memory-based storage solution. For more information, see [OCI Cache](https://docs.cloud.oracle.com/iaas/Content/ocicache/home.htm).
 */
export interface RedisCluster {
  /**
   * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
   */
  "id": string;
  /**
   * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
   */
  "displayName": string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the compartment that contains the cluster.
   */
  "compartmentId": string;
  /**
   * The current state of the cluster.
   */
  "lifecycleState"?: RedisCluster.LifecycleState;
  /**
   * A message describing the current state in more detail. For example, the message might provide actionable information for a resource in {@code FAILED} state.
   */
  "lifecycleDetails"?: string;
  /**
   * The number of nodes per shard in the cluster when clusterMode is SHARDED. This is the total number of nodes when clusterMode is NONSHARDED. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "nodeCount": number;
  /**
   * The amount of memory allocated to the cluster's nodes, in gigabytes. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "nodeMemoryInGBs": number;
  /**
   * The fully qualified domain name (FQDN) of the API endpoint for the cluster's primary node.
   */
  "primaryFqdn": string;
  /**
   * The private IP address of the API endpoint for the cluster's primary node.
   */
  "primaryEndpointIpAddress": string;
  /**
   * The fully qualified domain name (FQDN) of the API endpoint for the cluster's replica nodes.
   */
  "replicasFqdn": string;
  /**
   * The private IP address of the API endpoint for the cluster's replica nodes.
   */
  "replicasEndpointIpAddress": string;
  /**
   * The OCI Cache engine version that the cluster is running.
   */
  "softwareVersion": RedisCluster.SoftwareVersion;
  /**
   * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster's subnet.
   */
  "subnetId": string;
  /**
   * The date and time the cluster was created. An [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) formatted datetime string.
   */
  "timeCreated"?: Date;
  /**
   * The date and time the cluster was updated. An [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) formatted datetime string.
   */
  "timeUpdated"?: Date;
  "nodeCollection": model.NodeCollection;
  /**
   * Specifies whether the cluster is sharded or non-sharded.
   */
  "clusterMode"?: RedisCluster.ClusterMode;
  /**
   * The number of shards in a sharded cluster. Only applicable when clusterMode is SHARDED. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "shardCount"?: number;
  /**
   * A list of Network Security Group (NSG) [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
   * associated with this cluster. For more information,
   * see [Using an NSG for Clusters](https://docs.cloud.oracle.com/iaas/Content/ocicache/connecttocluster.htm#connecttocluster__networksecuritygroup).
   *
   */
  "nsgIds"?: Array<string>;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
}

export namespace RedisCluster {
  export enum LifecycleState {
    Creating = "CREATING",
    Updating = "UPDATING",
    Active = "ACTIVE",
    Deleting = "DELETING",
    Deleted = "DELETED",
    Failed = "FAILED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum SoftwareVersion {
    V705 = "V7_0_5",
    Redis70 = "REDIS_7_0",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum ClusterMode {
    Sharded = "SHARDED",
    Nonsharded = "NONSHARDED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: RedisCluster): object {
    const jsonObj = {
      ...obj,
      ...{
        "nodeCollection": obj.nodeCollection
          ? model.NodeCollection.getJsonObj(obj.nodeCollection)
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: RedisCluster): object {
    const jsonObj = {
      ...obj,
      ...{
        "nodeCollection": obj.nodeCollection
          ? model.NodeCollection.getDeserializedJsonObj(obj.nodeCollection)
          : undefined
      }
    };

    return jsonObj;
  }
}
