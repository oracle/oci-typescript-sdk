/**
 * OCI Cache API
 * Use the OCI Cache API to create and manage clusters. A cluster is a memory-based storage solution. For more information, see [OCI Cache](https://docs.oracle.com/iaas/Content/ocicache/home.htm).
 * OpenAPI spec version: 20220315
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Configurations for OCI Cache to manage the behavior, performance, and functionality of the underlying cache engine.
 */
export interface OciCacheConfigSet {
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the OCI Cache Config Set.
   */
  "id": string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the default OCI Cache Config Set which the custom OCI Cache Config Set is based upon.
   */
  "defaultConfigSetId"?: string;
  /**
   * A description of the OCI Cache Config Set.
   */
  "description"?: string;
  /**
   * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
   */
  "displayName"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the compartment that contains the OCI Cache Config Set.
   */
  "compartmentId": string;
  /**
   * The current state of the OCI Cache Config Set.
   */
  "lifecycleState": OciCacheConfigSet.LifecycleState;
  /**
   * The date and time the OCI Cache Config Set was created. An [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) formatted datetime string.
   */
  "timeCreated"?: Date;
  /**
   * The date and time the OCI Cache Config Set was updated. An [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) formatted datetime string.
   */
  "timeUpdated"?: Date;
  /**
   * The OCI Cache engine version that the cluster is running.
   */
  "softwareVersion": OciCacheConfigSet.SoftwareVersion;
  "configurationDetails"?: model.ConfigurationDetails;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
}

export namespace OciCacheConfigSet {
  export enum LifecycleState {
    Creating = "CREATING",
    Updating = "UPDATING",
    Active = "ACTIVE",
    Deleting = "DELETING",
    Deleted = "DELETED",
    Failed = "FAILED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum SoftwareVersion {
    V705 = "V7_0_5",
    Redis70 = "REDIS_7_0",
    Valkey72 = "VALKEY_7_2",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: OciCacheConfigSet): object {
    const jsonObj = {
      ...obj,
      ...{
        "configurationDetails": obj.configurationDetails
          ? model.ConfigurationDetails.getJsonObj(obj.configurationDetails)
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: OciCacheConfigSet): object {
    const jsonObj = {
      ...obj,
      ...{
        "configurationDetails": obj.configurationDetails
          ? model.ConfigurationDetails.getDeserializedJsonObj(obj.configurationDetails)
          : undefined
      }
    };

    return jsonObj;
  }
}
