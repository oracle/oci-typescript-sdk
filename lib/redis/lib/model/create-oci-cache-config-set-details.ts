/**
 * OCI Cache API
 * Use the OCI Cache API to create and manage clusters. A cluster is a memory-based storage solution. For more information, see [OCI Cache](https://docs.oracle.com/iaas/Content/ocicache/home.htm).
 * OpenAPI spec version: 20220315
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The information to create a new OCI Cache Config Set.
 */
export interface CreateOciCacheConfigSetDetails {
  /**
   * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
   */
  "displayName": string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the compartment that contains the OCI Cache Config Set.
   */
  "compartmentId": string;
  /**
   * Description for the custom OCI Cache Config Set.
   */
  "description"?: string;
  /**
   * The OCI Cache engine version that the cluster is running.
   */
  "softwareVersion": string;
  "configurationDetails": model.ConfigurationDetails;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
}

export namespace CreateOciCacheConfigSetDetails {
  export function getJsonObj(obj: CreateOciCacheConfigSetDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "configurationDetails": obj.configurationDetails
          ? model.ConfigurationDetails.getJsonObj(obj.configurationDetails)
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateOciCacheConfigSetDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "configurationDetails": obj.configurationDetails
          ? model.ConfigurationDetails.getDeserializedJsonObj(obj.configurationDetails)
          : undefined
      }
    };

    return jsonObj;
  }
}
