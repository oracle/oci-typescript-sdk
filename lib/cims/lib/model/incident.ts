/**
 * Support Management API
 * Use the Support Management API to manage support requests.
For more information, see [Getting Help and Contacting Support](https://docs.oracle.com/iaas/Content/GSG/Tasks/contactingsupport.htm).
**Note**: Before you can create service requests with this API,
complete user registration at My Oracle Cloud Support 
and then ask your tenancy administrator to provide you authorization for the related user groups.

 * OpenAPI spec version: 20181231
 * Contact: oci_ops_cims_dev_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Details about the support request.
 */
export interface Incident {
  /**
   * Unique identifier for the support request.
   */
  "key": string;
  /**
   * The OCID of the tenancy.
   */
  "compartmentId"?: string;
  "contactList"?: model.ContactList;
  "tenancyInformation"?: model.TenancyInformation;
  "ticket"?: model.Ticket;
  "incidentType"?: model.IncidentType;
  /**
   * Technical support type ({@code TECH}) only: The pre-migration identifier of the support request in My Oracle Support (MOS).
   *
   */
  "migratedSrNumber"?: string;
  /**
   * Technical support type ({@code TECH}) only: The identifier of the support request's user group in My Oracle Cloud Support portal.
   *
   */
  "userGroupId"?: string;
  /**
   * Technical support type ({@code TECH}) only: Name of the support request's user group in My Oracle Cloud Support portal.
   *
   */
  "userGroupName"?: string;
  /**
   * Technical support type ({@code TECH}) only: The identifier of the support request's primary contact ({@code primaryContactPartyName}) in My Oracle Cloud Support portal.
   *
   */
  "primaryContactPartyId"?: string;
  /**
   * Technical support type ({@code TECH}) only: The name of the support request's primary contact in My Oracle Cloud Support portal.
   *
   */
  "primaryContactPartyName"?: string;
  /**
   * Technical support type ({@code TECH}) only: Allows update of the support request in My Oracle Cloud Support portal,
   * when the user has write permission to the support request's user group.
   *
   */
  "isWritePermitted"?: boolean;
  /**
   * Technical support type ({@code TECH}) only: Message indicating the user group ({@code userGroupId}) that was auto-selected for a new support request. This message appears when no user group was specified in the create request for a new technical support request.
   *
   */
  "warnMessage"?: string;
  /**
   * The kind of support request (type of support request).
   * For information about {@code ACCOUNT} support requests, see
   * [Creating a Billing Support Request](https://docs.oracle.com/iaas/Content/GSG/support/create-incident-billing.htm).
   * For information about {@code LIMIT} support requests, see
   * [Creating a Service Limit Increase Request](https://docs.oracle.com/iaas/Content/GSG/support/create-incident-limit.htm).
   * For information about {@code TECH} support requests, see
   * [Creating a Technical Support Request](https://docs.oracle.com/iaas/Content/GSG/support/create-incident-technical.htm).
   *
   */
  "problemType"?: model.ProblemType;
  /**
   * The incident referrer. This value is often the URL that the customer used when creating the support request.
   */
  "referrer"?: string;
}

export namespace Incident {
  export function getJsonObj(obj: Incident): object {
    const jsonObj = {
      ...obj,
      ...{
        "contactList": obj.contactList ? model.ContactList.getJsonObj(obj.contactList) : undefined,
        "tenancyInformation": obj.tenancyInformation
          ? model.TenancyInformation.getJsonObj(obj.tenancyInformation)
          : undefined,
        "ticket": obj.ticket ? model.Ticket.getJsonObj(obj.ticket) : undefined,
        "incidentType": obj.incidentType
          ? model.IncidentType.getJsonObj(obj.incidentType)
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: Incident): object {
    const jsonObj = {
      ...obj,
      ...{
        "contactList": obj.contactList
          ? model.ContactList.getDeserializedJsonObj(obj.contactList)
          : undefined,
        "tenancyInformation": obj.tenancyInformation
          ? model.TenancyInformation.getDeserializedJsonObj(obj.tenancyInformation)
          : undefined,
        "ticket": obj.ticket ? model.Ticket.getDeserializedJsonObj(obj.ticket) : undefined,
        "incidentType": obj.incidentType
          ? model.IncidentType.getDeserializedJsonObj(obj.incidentType)
          : undefined
      }
    };

    return jsonObj;
  }
}
