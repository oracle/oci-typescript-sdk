/**
 * Network Firewall API
 * Use the Network Firewall API to create network firewalls and configure policies that regulates network traffic in and across VCNs.
 * OpenAPI spec version: 20230501
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { NetworkFirewallWaiter } from "./networkfirewall-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum NetworkFirewallApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class NetworkFirewallClient {
  protected static serviceEndpointTemplate =
    "https://network-firewall.{region}.ocs.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": NetworkFirewallWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "NetworkFirewall";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("networkfirewall")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("networkfirewall");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20230501";
    if (this.logger) this.logger.info(`NetworkFirewallClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        NetworkFirewallClient.serviceEndpointTemplate,
        this._region,
        NetworkFirewallClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        NetworkFirewallClient.serviceEndpointTemplate,
        this._regionId,
        NetworkFirewallClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      NetworkFirewallClient.serviceEndpointTemplate,
      region,
      NetworkFirewallClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      NetworkFirewallClient.serviceEndpointTemplate,
      regionId,
      NetworkFirewallClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new NetworkFirewallWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): NetworkFirewallWaiter {
    this._waiters = new NetworkFirewallWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): NetworkFirewallWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Applies the candidate version of the NetworkFirewallPolicy resource. When provided, If-Match is checked against ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ApplyNetworkFirewallPolicyRequest
   * @return ApplyNetworkFirewallPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ApplyNetworkFirewallPolicy.ts.html |here} to see how to use ApplyNetworkFirewallPolicy API.
   */
  public async applyNetworkFirewallPolicy(
    applyNetworkFirewallPolicyRequest: requests.ApplyNetworkFirewallPolicyRequest
  ): Promise<responses.ApplyNetworkFirewallPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#applyNetworkFirewallPolicy.");
    const operationName = "applyNetworkFirewallPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": applyNetworkFirewallPolicyRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": applyNetworkFirewallPolicyRequest.ifMatch,
      "opc-request-id": applyNetworkFirewallPolicyRequest.opcRequestId,
      "opc-retry-token": applyNetworkFirewallPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      applyNetworkFirewallPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/actions/applyPolicy",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        applyNetworkFirewallPolicyRequest.applyNetworkFirewallPolicyDetails,
        "ApplyNetworkFirewallPolicyDetails",
        model.ApplyNetworkFirewallPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ApplyNetworkFirewallPolicyResponse>{},
        body: await response.json(),
        bodyKey: "networkFirewallPolicy",
        bodyModel: model.NetworkFirewallPolicy,
        type: "model.NetworkFirewallPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Address Lists at bulk for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkUploadAddressListsRequest
   * @return BulkUploadAddressListsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/BulkUploadAddressLists.ts.html |here} to see how to use BulkUploadAddressLists API.
   */
  public async bulkUploadAddressLists(
    bulkUploadAddressListsRequest: requests.BulkUploadAddressListsRequest
  ): Promise<responses.BulkUploadAddressListsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#bulkUploadAddressLists.");
    const operationName = "bulkUploadAddressLists";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": bulkUploadAddressListsRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": bulkUploadAddressListsRequest.opcRetryToken,
      "opc-request-id": bulkUploadAddressListsRequest.opcRequestId,
      "if-match": bulkUploadAddressListsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUploadAddressListsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/addressLists/actions/bulkUpload",
      method: "POST",
      bodyContent: bulkUploadAddressListsRequest.bulkUploadAddressListsDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUploadAddressListsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Application Group at bulk for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkUploadApplicationGroupsRequest
   * @return BulkUploadApplicationGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/BulkUploadApplicationGroups.ts.html |here} to see how to use BulkUploadApplicationGroups API.
   */
  public async bulkUploadApplicationGroups(
    bulkUploadApplicationGroupsRequest: requests.BulkUploadApplicationGroupsRequest
  ): Promise<responses.BulkUploadApplicationGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#bulkUploadApplicationGroups.");
    const operationName = "bulkUploadApplicationGroups";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": bulkUploadApplicationGroupsRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": bulkUploadApplicationGroupsRequest.opcRetryToken,
      "opc-request-id": bulkUploadApplicationGroupsRequest.opcRequestId,
      "if-match": bulkUploadApplicationGroupsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUploadApplicationGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/applicationGroups/actions/bulkUpload",
      method: "POST",
      bodyContent: bulkUploadApplicationGroupsRequest.bulkUploadApplicationGroupsDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUploadApplicationGroupsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates new Applications at bulk for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkUploadApplicationsRequest
   * @return BulkUploadApplicationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/BulkUploadApplications.ts.html |here} to see how to use BulkUploadApplications API.
   */
  public async bulkUploadApplications(
    bulkUploadApplicationsRequest: requests.BulkUploadApplicationsRequest
  ): Promise<responses.BulkUploadApplicationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#bulkUploadApplications.");
    const operationName = "bulkUploadApplications";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": bulkUploadApplicationsRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": bulkUploadApplicationsRequest.opcRetryToken,
      "opc-request-id": bulkUploadApplicationsRequest.opcRequestId,
      "if-match": bulkUploadApplicationsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUploadApplicationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/applications/actions/bulkUpload",
      method: "POST",
      bodyContent: bulkUploadApplicationsRequest.bulkUploadApplicationsDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUploadApplicationsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates new Decryption Profiles at bulk for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkUploadDecryptionProfilesRequest
   * @return BulkUploadDecryptionProfilesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/BulkUploadDecryptionProfiles.ts.html |here} to see how to use BulkUploadDecryptionProfiles API.
   */
  public async bulkUploadDecryptionProfiles(
    bulkUploadDecryptionProfilesRequest: requests.BulkUploadDecryptionProfilesRequest
  ): Promise<responses.BulkUploadDecryptionProfilesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#bulkUploadDecryptionProfiles.");
    const operationName = "bulkUploadDecryptionProfiles";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": bulkUploadDecryptionProfilesRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": bulkUploadDecryptionProfilesRequest.opcRetryToken,
      "opc-request-id": bulkUploadDecryptionProfilesRequest.opcRequestId,
      "if-match": bulkUploadDecryptionProfilesRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUploadDecryptionProfilesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionProfiles/actions/bulkUpload",
      method: "POST",
      bodyContent: bulkUploadDecryptionProfilesRequest.bulkUploadDecryptionProfilesDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUploadDecryptionProfilesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates Decryption Rules at bulk for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkUploadDecryptionRulesRequest
   * @return BulkUploadDecryptionRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/BulkUploadDecryptionRules.ts.html |here} to see how to use BulkUploadDecryptionRules API.
   */
  public async bulkUploadDecryptionRules(
    bulkUploadDecryptionRulesRequest: requests.BulkUploadDecryptionRulesRequest
  ): Promise<responses.BulkUploadDecryptionRulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#bulkUploadDecryptionRules.");
    const operationName = "bulkUploadDecryptionRules";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": bulkUploadDecryptionRulesRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": bulkUploadDecryptionRulesRequest.opcRetryToken,
      "opc-request-id": bulkUploadDecryptionRulesRequest.opcRequestId,
      "if-match": bulkUploadDecryptionRulesRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUploadDecryptionRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules/actions/bulkUpload",
      method: "POST",
      bodyContent: bulkUploadDecryptionRulesRequest.bulkUploadDecryptionRulesDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUploadDecryptionRulesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates new Mapped Secrets at bulk for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkUploadMappedSecretsRequest
   * @return BulkUploadMappedSecretsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/BulkUploadMappedSecrets.ts.html |here} to see how to use BulkUploadMappedSecrets API.
   */
  public async bulkUploadMappedSecrets(
    bulkUploadMappedSecretsRequest: requests.BulkUploadMappedSecretsRequest
  ): Promise<responses.BulkUploadMappedSecretsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#bulkUploadMappedSecrets.");
    const operationName = "bulkUploadMappedSecrets";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": bulkUploadMappedSecretsRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": bulkUploadMappedSecretsRequest.opcRetryToken,
      "opc-request-id": bulkUploadMappedSecretsRequest.opcRequestId,
      "if-match": bulkUploadMappedSecretsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUploadMappedSecretsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets/actions/bulkUpload",
      method: "POST",
      bodyContent: bulkUploadMappedSecretsRequest.bulkUploadMappedSecretsDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUploadMappedSecretsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Security Rule at bulk for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkUploadSecurityRulesRequest
   * @return BulkUploadSecurityRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/BulkUploadSecurityRules.ts.html |here} to see how to use BulkUploadSecurityRules API.
   */
  public async bulkUploadSecurityRules(
    bulkUploadSecurityRulesRequest: requests.BulkUploadSecurityRulesRequest
  ): Promise<responses.BulkUploadSecurityRulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#bulkUploadSecurityRules.");
    const operationName = "bulkUploadSecurityRules";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": bulkUploadSecurityRulesRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": bulkUploadSecurityRulesRequest.opcRetryToken,
      "opc-request-id": bulkUploadSecurityRulesRequest.opcRequestId,
      "if-match": bulkUploadSecurityRulesRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUploadSecurityRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/securityRules/actions/bulkUpload",
      method: "POST",
      bodyContent: bulkUploadSecurityRulesRequest.bulkUploadSecurityRulesDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUploadSecurityRulesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Service List at bulk for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkUploadServiceListsRequest
   * @return BulkUploadServiceListsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/BulkUploadServiceLists.ts.html |here} to see how to use BulkUploadServiceLists API.
   */
  public async bulkUploadServiceLists(
    bulkUploadServiceListsRequest: requests.BulkUploadServiceListsRequest
  ): Promise<responses.BulkUploadServiceListsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#bulkUploadServiceLists.");
    const operationName = "bulkUploadServiceLists";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": bulkUploadServiceListsRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": bulkUploadServiceListsRequest.opcRetryToken,
      "opc-request-id": bulkUploadServiceListsRequest.opcRequestId,
      "if-match": bulkUploadServiceListsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUploadServiceListsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/serviceLists/actions/bulkUpload",
      method: "POST",
      bodyContent: bulkUploadServiceListsRequest.bulkUploadServiceListsDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUploadServiceListsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates new Services at bulk for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkUploadServicesRequest
   * @return BulkUploadServicesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/BulkUploadServices.ts.html |here} to see how to use BulkUploadServices API.
   */
  public async bulkUploadServices(
    bulkUploadServicesRequest: requests.BulkUploadServicesRequest
  ): Promise<responses.BulkUploadServicesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#bulkUploadServices.");
    const operationName = "bulkUploadServices";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": bulkUploadServicesRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": bulkUploadServicesRequest.opcRetryToken,
      "opc-request-id": bulkUploadServicesRequest.opcRequestId,
      "if-match": bulkUploadServicesRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUploadServicesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/services/actions/bulkUpload",
      method: "POST",
      bodyContent: bulkUploadServicesRequest.bulkUploadServicesDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUploadServicesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Tunnel Inspection Rule at bulk for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkUploadTunnelInspectionRulesRequest
   * @return BulkUploadTunnelInspectionRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/BulkUploadTunnelInspectionRules.ts.html |here} to see how to use BulkUploadTunnelInspectionRules API.
   */
  public async bulkUploadTunnelInspectionRules(
    bulkUploadTunnelInspectionRulesRequest: requests.BulkUploadTunnelInspectionRulesRequest
  ): Promise<responses.BulkUploadTunnelInspectionRulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#bulkUploadTunnelInspectionRules.");
    const operationName = "bulkUploadTunnelInspectionRules";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": bulkUploadTunnelInspectionRulesRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": bulkUploadTunnelInspectionRulesRequest.opcRetryToken,
      "opc-request-id": bulkUploadTunnelInspectionRulesRequest.opcRequestId,
      "if-match": bulkUploadTunnelInspectionRulesRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUploadTunnelInspectionRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules/actions/bulkUpload",
      method: "POST",
      bodyContent: bulkUploadTunnelInspectionRulesRequest.bulkUploadTunnelInspectionRulesDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUploadTunnelInspectionRulesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Url Lists at bulk for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param BulkUploadUrlListsRequest
   * @return BulkUploadUrlListsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/BulkUploadUrlLists.ts.html |here} to see how to use BulkUploadUrlLists API.
   */
  public async bulkUploadUrlLists(
    bulkUploadUrlListsRequest: requests.BulkUploadUrlListsRequest
  ): Promise<responses.BulkUploadUrlListsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#bulkUploadUrlLists.");
    const operationName = "bulkUploadUrlLists";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": bulkUploadUrlListsRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": bulkUploadUrlListsRequest.opcRetryToken,
      "opc-request-id": bulkUploadUrlListsRequest.opcRequestId,
      "if-match": bulkUploadUrlListsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      bulkUploadUrlListsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/urlLists/actions/bulkUpload",
      method: "POST",
      bodyContent: bulkUploadUrlListsRequest.bulkUploadUrlListsDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkUploadUrlListsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancel work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#cancelWorkRequest.");
    const operationName = "cancelWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelWorkRequestRequest.ifMatch,
      "opc-request-id": cancelWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a NetworkFirewall resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeNetworkFirewallCompartmentRequest
   * @return ChangeNetworkFirewallCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ChangeNetworkFirewallCompartment.ts.html |here} to see how to use ChangeNetworkFirewallCompartment API.
   */
  public async changeNetworkFirewallCompartment(
    changeNetworkFirewallCompartmentRequest: requests.ChangeNetworkFirewallCompartmentRequest
  ): Promise<responses.ChangeNetworkFirewallCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation NetworkFirewallClient#changeNetworkFirewallCompartment."
      );
    const operationName = "changeNetworkFirewallCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallId}": changeNetworkFirewallCompartmentRequest.networkFirewallId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeNetworkFirewallCompartmentRequest.ifMatch,
      "opc-request-id": changeNetworkFirewallCompartmentRequest.opcRequestId,
      "opc-retry-token": changeNetworkFirewallCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeNetworkFirewallCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewalls/{networkFirewallId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeNetworkFirewallCompartmentRequest.changeNetworkFirewallCompartmentDetails,
        "ChangeNetworkFirewallCompartmentDetails",
        model.ChangeNetworkFirewallCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeNetworkFirewallCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a NetworkFirewallPolicy resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeNetworkFirewallPolicyCompartmentRequest
   * @return ChangeNetworkFirewallPolicyCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ChangeNetworkFirewallPolicyCompartment.ts.html |here} to see how to use ChangeNetworkFirewallPolicyCompartment API.
   */
  public async changeNetworkFirewallPolicyCompartment(
    changeNetworkFirewallPolicyCompartmentRequest: requests.ChangeNetworkFirewallPolicyCompartmentRequest
  ): Promise<responses.ChangeNetworkFirewallPolicyCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation NetworkFirewallClient#changeNetworkFirewallPolicyCompartment."
      );
    const operationName = "changeNetworkFirewallPolicyCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}":
        changeNetworkFirewallPolicyCompartmentRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeNetworkFirewallPolicyCompartmentRequest.ifMatch,
      "opc-request-id": changeNetworkFirewallPolicyCompartmentRequest.opcRequestId,
      "opc-retry-token": changeNetworkFirewallPolicyCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeNetworkFirewallPolicyCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeNetworkFirewallPolicyCompartmentRequest.changeNetworkFirewallPolicyCompartmentDetails,
        "ChangeNetworkFirewallPolicyCompartmentDetails",
        model.ChangeNetworkFirewallPolicyCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeNetworkFirewallPolicyCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a NetworkFirewallPolicy resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CloneNetworkFirewallPolicyRequest
   * @return CloneNetworkFirewallPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CloneNetworkFirewallPolicy.ts.html |here} to see how to use CloneNetworkFirewallPolicy API.
   */
  public async cloneNetworkFirewallPolicy(
    cloneNetworkFirewallPolicyRequest: requests.CloneNetworkFirewallPolicyRequest
  ): Promise<responses.CloneNetworkFirewallPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#cloneNetworkFirewallPolicy.");
    const operationName = "cloneNetworkFirewallPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": cloneNetworkFirewallPolicyRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cloneNetworkFirewallPolicyRequest.ifMatch,
      "opc-request-id": cloneNetworkFirewallPolicyRequest.opcRequestId,
      "opc-retry-token": cloneNetworkFirewallPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cloneNetworkFirewallPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/actions/clonePolicy",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        cloneNetworkFirewallPolicyRequest.cloneNetworkFirewallPolicyDetails,
        "CloneNetworkFirewallPolicyDetails",
        model.CloneNetworkFirewallPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CloneNetworkFirewallPolicyResponse>{},
        body: await response.json(),
        bodyKey: "networkFirewallPolicy",
        bodyModel: model.NetworkFirewallPolicy,
        type: "model.NetworkFirewallPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Address List for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateAddressListRequest
   * @return CreateAddressListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateAddressList.ts.html |here} to see how to use CreateAddressList API.
   */
  public async createAddressList(
    createAddressListRequest: requests.CreateAddressListRequest
  ): Promise<responses.CreateAddressListResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#createAddressList.");
    const operationName = "createAddressList";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": createAddressListRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createAddressListRequest.opcRetryToken,
      "opc-request-id": createAddressListRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAddressListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/addressLists",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAddressListRequest.createAddressListDetails,
        "CreateAddressListDetails",
        model.CreateAddressListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAddressListResponse>{},
        body: await response.json(),
        bodyKey: "addressList",
        bodyModel: model.AddressList,
        type: "model.AddressList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Application for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateApplicationRequest
   * @return CreateApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateApplication.ts.html |here} to see how to use CreateApplication API.
   */
  public async createApplication(
    createApplicationRequest: requests.CreateApplicationRequest
  ): Promise<responses.CreateApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#createApplication.");
    const operationName = "createApplication";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": createApplicationRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createApplicationRequest.opcRetryToken,
      "opc-request-id": createApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/applications",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createApplicationRequest.createApplicationDetails,
        "CreateApplicationDetails",
        model.CreateApplicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateApplicationResponse>{},
        body: await response.json(),
        bodyKey: "application",
        bodyModel: model.Application,
        type: "model.Application",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new ApplicationGroup for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateApplicationGroupRequest
   * @return CreateApplicationGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateApplicationGroup.ts.html |here} to see how to use CreateApplicationGroup API.
   */
  public async createApplicationGroup(
    createApplicationGroupRequest: requests.CreateApplicationGroupRequest
  ): Promise<responses.CreateApplicationGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#createApplicationGroup.");
    const operationName = "createApplicationGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": createApplicationGroupRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createApplicationGroupRequest.opcRetryToken,
      "opc-request-id": createApplicationGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createApplicationGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/applicationGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createApplicationGroupRequest.createApplicationGroupDetails,
        "CreateApplicationGroupDetails",
        model.CreateApplicationGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateApplicationGroupResponse>{},
        body: await response.json(),
        bodyKey: "applicationGroup",
        bodyModel: model.ApplicationGroup,
        type: "model.ApplicationGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Decryption Profile for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDecryptionProfileRequest
   * @return CreateDecryptionProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateDecryptionProfile.ts.html |here} to see how to use CreateDecryptionProfile API.
   */
  public async createDecryptionProfile(
    createDecryptionProfileRequest: requests.CreateDecryptionProfileRequest
  ): Promise<responses.CreateDecryptionProfileResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#createDecryptionProfile.");
    const operationName = "createDecryptionProfile";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": createDecryptionProfileRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDecryptionProfileRequest.opcRetryToken,
      "opc-request-id": createDecryptionProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDecryptionProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionProfiles",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDecryptionProfileRequest.createDecryptionProfileDetails,
        "CreateDecryptionProfileDetails",
        model.CreateDecryptionProfileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDecryptionProfileResponse>{},
        body: await response.json(),
        bodyKey: "decryptionProfile",
        bodyModel: model.DecryptionProfile,
        type: "model.DecryptionProfile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Decryption Rule for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDecryptionRuleRequest
   * @return CreateDecryptionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateDecryptionRule.ts.html |here} to see how to use CreateDecryptionRule API.
   */
  public async createDecryptionRule(
    createDecryptionRuleRequest: requests.CreateDecryptionRuleRequest
  ): Promise<responses.CreateDecryptionRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#createDecryptionRule.");
    const operationName = "createDecryptionRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": createDecryptionRuleRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDecryptionRuleRequest.opcRetryToken,
      "opc-request-id": createDecryptionRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDecryptionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDecryptionRuleRequest.createDecryptionRuleDetails,
        "CreateDecryptionRuleDetails",
        model.CreateDecryptionRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDecryptionRuleResponse>{},
        body: await response.json(),
        bodyKey: "decryptionRule",
        bodyModel: model.DecryptionRule,
        type: "model.DecryptionRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Mapped Secret for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateMappedSecretRequest
   * @return CreateMappedSecretResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateMappedSecret.ts.html |here} to see how to use CreateMappedSecret API.
   */
  public async createMappedSecret(
    createMappedSecretRequest: requests.CreateMappedSecretRequest
  ): Promise<responses.CreateMappedSecretResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#createMappedSecret.");
    const operationName = "createMappedSecret";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": createMappedSecretRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createMappedSecretRequest.opcRetryToken,
      "opc-request-id": createMappedSecretRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMappedSecretRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMappedSecretRequest.createMappedSecretDetails,
        "CreateMappedSecretDetails",
        model.CreateMappedSecretDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMappedSecretResponse>{},
        body: await response.json(),
        bodyKey: "mappedSecret",
        bodyModel: model.MappedSecret,
        type: "model.MappedSecret",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new NetworkFirewall.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateNetworkFirewallRequest
   * @return CreateNetworkFirewallResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateNetworkFirewall.ts.html |here} to see how to use CreateNetworkFirewall API.
   */
  public async createNetworkFirewall(
    createNetworkFirewallRequest: requests.CreateNetworkFirewallRequest
  ): Promise<responses.CreateNetworkFirewallResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#createNetworkFirewall.");
    const operationName = "createNetworkFirewall";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createNetworkFirewallRequest.opcRetryToken,
      "opc-request-id": createNetworkFirewallRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createNetworkFirewallRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewalls",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createNetworkFirewallRequest.createNetworkFirewallDetails,
        "CreateNetworkFirewallDetails",
        model.CreateNetworkFirewallDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateNetworkFirewallResponse>{},
        body: await response.json(),
        bodyKey: "networkFirewall",
        bodyModel: model.NetworkFirewall,
        type: "model.NetworkFirewall",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateNetworkFirewallPolicyRequest
   * @return CreateNetworkFirewallPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateNetworkFirewallPolicy.ts.html |here} to see how to use CreateNetworkFirewallPolicy API.
   */
  public async createNetworkFirewallPolicy(
    createNetworkFirewallPolicyRequest: requests.CreateNetworkFirewallPolicyRequest
  ): Promise<responses.CreateNetworkFirewallPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#createNetworkFirewallPolicy.");
    const operationName = "createNetworkFirewallPolicy";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createNetworkFirewallPolicyRequest.opcRetryToken,
      "opc-request-id": createNetworkFirewallPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createNetworkFirewallPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createNetworkFirewallPolicyRequest.createNetworkFirewallPolicyDetails,
        "CreateNetworkFirewallPolicyDetails",
        model.CreateNetworkFirewallPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateNetworkFirewallPolicyResponse>{},
        body: await response.json(),
        bodyKey: "networkFirewallPolicy",
        bodyModel: model.NetworkFirewallPolicy,
        type: "model.NetworkFirewallPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Security Rule for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateSecurityRuleRequest
   * @return CreateSecurityRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateSecurityRule.ts.html |here} to see how to use CreateSecurityRule API.
   */
  public async createSecurityRule(
    createSecurityRuleRequest: requests.CreateSecurityRuleRequest
  ): Promise<responses.CreateSecurityRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#createSecurityRule.");
    const operationName = "createSecurityRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": createSecurityRuleRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSecurityRuleRequest.opcRetryToken,
      "opc-request-id": createSecurityRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSecurityRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/securityRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSecurityRuleRequest.createSecurityRuleDetails,
        "CreateSecurityRuleDetails",
        model.CreateSecurityRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSecurityRuleResponse>{},
        body: await response.json(),
        bodyKey: "securityRule",
        bodyModel: model.SecurityRule,
        type: "model.SecurityRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Service for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateServiceRequest
   * @return CreateServiceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateService.ts.html |here} to see how to use CreateService API.
   */
  public async createService(
    createServiceRequest: requests.CreateServiceRequest
  ): Promise<responses.CreateServiceResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#createService.");
    const operationName = "createService";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": createServiceRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createServiceRequest.opcRetryToken,
      "opc-request-id": createServiceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createServiceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/services",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createServiceRequest.createServiceDetails,
        "CreateServiceDetails",
        model.CreateServiceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateServiceResponse>{},
        body: await response.json(),
        bodyKey: "service",
        bodyModel: model.Service,
        type: "model.Service",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new ServiceList for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateServiceListRequest
   * @return CreateServiceListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateServiceList.ts.html |here} to see how to use CreateServiceList API.
   */
  public async createServiceList(
    createServiceListRequest: requests.CreateServiceListRequest
  ): Promise<responses.CreateServiceListResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#createServiceList.");
    const operationName = "createServiceList";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": createServiceListRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createServiceListRequest.opcRetryToken,
      "opc-request-id": createServiceListRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createServiceListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/serviceLists",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createServiceListRequest.createServiceListDetails,
        "CreateServiceListDetails",
        model.CreateServiceListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateServiceListResponse>{},
        body: await response.json(),
        bodyKey: "serviceList",
        bodyModel: model.ServiceList,
        type: "model.ServiceList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new tunnel inspection rule for the network firewall policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateTunnelInspectionRuleRequest
   * @return CreateTunnelInspectionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateTunnelInspectionRule.ts.html |here} to see how to use CreateTunnelInspectionRule API.
   */
  public async createTunnelInspectionRule(
    createTunnelInspectionRuleRequest: requests.CreateTunnelInspectionRuleRequest
  ): Promise<responses.CreateTunnelInspectionRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#createTunnelInspectionRule.");
    const operationName = "createTunnelInspectionRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": createTunnelInspectionRuleRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTunnelInspectionRuleRequest.opcRetryToken,
      "opc-request-id": createTunnelInspectionRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTunnelInspectionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTunnelInspectionRuleRequest.createTunnelInspectionRuleDetails,
        "CreateTunnelInspectionRuleDetails",
        model.CreateTunnelInspectionRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTunnelInspectionRuleResponse>{},
        body: await response.json(),
        bodyKey: "tunnelInspectionRule",
        bodyModel: model.TunnelInspectionRule,
        type: "model.TunnelInspectionRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Url List for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateUrlListRequest
   * @return CreateUrlListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/CreateUrlList.ts.html |here} to see how to use CreateUrlList API.
   */
  public async createUrlList(
    createUrlListRequest: requests.CreateUrlListRequest
  ): Promise<responses.CreateUrlListResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#createUrlList.");
    const operationName = "createUrlList";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": createUrlListRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createUrlListRequest.opcRetryToken,
      "opc-request-id": createUrlListRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createUrlListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/urlLists",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createUrlListRequest.createUrlListDetails,
        "CreateUrlListDetails",
        model.CreateUrlListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateUrlListResponse>{},
        body: await response.json(),
        bodyKey: "urlList",
        bodyModel: model.UrlList,
        type: "model.UrlList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Address List resource with the given identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteAddressListRequest
   * @return DeleteAddressListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteAddressList.ts.html |here} to see how to use DeleteAddressList API.
   */
  public async deleteAddressList(
    deleteAddressListRequest: requests.DeleteAddressListRequest
  ): Promise<responses.DeleteAddressListResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#deleteAddressList.");
    const operationName = "deleteAddressList";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": deleteAddressListRequest.networkFirewallPolicyId,
      "{addressListName}": deleteAddressListRequest.addressListName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteAddressListRequest.ifMatch,
      "opc-request-id": deleteAddressListRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAddressListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/addressLists/{addressListName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAddressListResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Application resource with the given identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteApplicationRequest
   * @return DeleteApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteApplication.ts.html |here} to see how to use DeleteApplication API.
   */
  public async deleteApplication(
    deleteApplicationRequest: requests.DeleteApplicationRequest
  ): Promise<responses.DeleteApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#deleteApplication.");
    const operationName = "deleteApplication";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": deleteApplicationRequest.networkFirewallPolicyId,
      "{applicationName}": deleteApplicationRequest.applicationName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteApplicationRequest.ifMatch,
      "opc-request-id": deleteApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/applications/{applicationName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteApplicationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a ApplicationGroup resource with the given identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteApplicationGroupRequest
   * @return DeleteApplicationGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteApplicationGroup.ts.html |here} to see how to use DeleteApplicationGroup API.
   */
  public async deleteApplicationGroup(
    deleteApplicationGroupRequest: requests.DeleteApplicationGroupRequest
  ): Promise<responses.DeleteApplicationGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#deleteApplicationGroup.");
    const operationName = "deleteApplicationGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": deleteApplicationGroupRequest.networkFirewallPolicyId,
      "{applicationGroupName}": deleteApplicationGroupRequest.applicationGroupName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteApplicationGroupRequest.ifMatch,
      "opc-request-id": deleteApplicationGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteApplicationGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/applicationGroups/{applicationGroupName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteApplicationGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Decryption Profile resource with the given identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDecryptionProfileRequest
   * @return DeleteDecryptionProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteDecryptionProfile.ts.html |here} to see how to use DeleteDecryptionProfile API.
   */
  public async deleteDecryptionProfile(
    deleteDecryptionProfileRequest: requests.DeleteDecryptionProfileRequest
  ): Promise<responses.DeleteDecryptionProfileResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#deleteDecryptionProfile.");
    const operationName = "deleteDecryptionProfile";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": deleteDecryptionProfileRequest.networkFirewallPolicyId,
      "{decryptionProfileName}": deleteDecryptionProfileRequest.decryptionProfileName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDecryptionProfileRequest.ifMatch,
      "opc-request-id": deleteDecryptionProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDecryptionProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionProfiles/{decryptionProfileName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDecryptionProfileResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Decryption Rule resource with the given identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDecryptionRuleRequest
   * @return DeleteDecryptionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteDecryptionRule.ts.html |here} to see how to use DeleteDecryptionRule API.
   */
  public async deleteDecryptionRule(
    deleteDecryptionRuleRequest: requests.DeleteDecryptionRuleRequest
  ): Promise<responses.DeleteDecryptionRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#deleteDecryptionRule.");
    const operationName = "deleteDecryptionRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": deleteDecryptionRuleRequest.networkFirewallPolicyId,
      "{decryptionRuleName}": deleteDecryptionRuleRequest.decryptionRuleName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDecryptionRuleRequest.ifMatch,
      "opc-request-id": deleteDecryptionRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDecryptionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules/{decryptionRuleName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDecryptionRuleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Mapped Secret resource with the given identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteMappedSecretRequest
   * @return DeleteMappedSecretResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteMappedSecret.ts.html |here} to see how to use DeleteMappedSecret API.
   */
  public async deleteMappedSecret(
    deleteMappedSecretRequest: requests.DeleteMappedSecretRequest
  ): Promise<responses.DeleteMappedSecretResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#deleteMappedSecret.");
    const operationName = "deleteMappedSecret";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": deleteMappedSecretRequest.networkFirewallPolicyId,
      "{mappedSecretName}": deleteMappedSecretRequest.mappedSecretName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteMappedSecretRequest.ifMatch,
      "opc-request-id": deleteMappedSecretRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMappedSecretRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets/{mappedSecretName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMappedSecretResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a NetworkFirewall resource by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteNetworkFirewallRequest
   * @return DeleteNetworkFirewallResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteNetworkFirewall.ts.html |here} to see how to use DeleteNetworkFirewall API.
   */
  public async deleteNetworkFirewall(
    deleteNetworkFirewallRequest: requests.DeleteNetworkFirewallRequest
  ): Promise<responses.DeleteNetworkFirewallResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#deleteNetworkFirewall.");
    const operationName = "deleteNetworkFirewall";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallId}": deleteNetworkFirewallRequest.networkFirewallId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteNetworkFirewallRequest.ifMatch,
      "opc-request-id": deleteNetworkFirewallRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteNetworkFirewallRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewalls/{networkFirewallId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteNetworkFirewallResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a NetworkFirewallPolicy resource with the given identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteNetworkFirewallPolicyRequest
   * @return DeleteNetworkFirewallPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteNetworkFirewallPolicy.ts.html |here} to see how to use DeleteNetworkFirewallPolicy API.
   */
  public async deleteNetworkFirewallPolicy(
    deleteNetworkFirewallPolicyRequest: requests.DeleteNetworkFirewallPolicyRequest
  ): Promise<responses.DeleteNetworkFirewallPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#deleteNetworkFirewallPolicy.");
    const operationName = "deleteNetworkFirewallPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": deleteNetworkFirewallPolicyRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteNetworkFirewallPolicyRequest.ifMatch,
      "opc-request-id": deleteNetworkFirewallPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteNetworkFirewallPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteNetworkFirewallPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Security Rule resource with the given identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteSecurityRuleRequest
   * @return DeleteSecurityRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteSecurityRule.ts.html |here} to see how to use DeleteSecurityRule API.
   */
  public async deleteSecurityRule(
    deleteSecurityRuleRequest: requests.DeleteSecurityRuleRequest
  ): Promise<responses.DeleteSecurityRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#deleteSecurityRule.");
    const operationName = "deleteSecurityRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": deleteSecurityRuleRequest.networkFirewallPolicyId,
      "{securityRuleName}": deleteSecurityRuleRequest.securityRuleName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSecurityRuleRequest.ifMatch,
      "opc-request-id": deleteSecurityRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSecurityRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/securityRules/{securityRuleName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSecurityRuleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Service resource with the given identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteServiceRequest
   * @return DeleteServiceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteService.ts.html |here} to see how to use DeleteService API.
   */
  public async deleteService(
    deleteServiceRequest: requests.DeleteServiceRequest
  ): Promise<responses.DeleteServiceResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#deleteService.");
    const operationName = "deleteService";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": deleteServiceRequest.networkFirewallPolicyId,
      "{serviceName}": deleteServiceRequest.serviceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteServiceRequest.ifMatch,
      "opc-request-id": deleteServiceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteServiceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/services/{serviceName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteServiceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a ServiceList resource with the given identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteServiceListRequest
   * @return DeleteServiceListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteServiceList.ts.html |here} to see how to use DeleteServiceList API.
   */
  public async deleteServiceList(
    deleteServiceListRequest: requests.DeleteServiceListRequest
  ): Promise<responses.DeleteServiceListResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#deleteServiceList.");
    const operationName = "deleteServiceList";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": deleteServiceListRequest.networkFirewallPolicyId,
      "{serviceListName}": deleteServiceListRequest.serviceListName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteServiceListRequest.ifMatch,
      "opc-request-id": deleteServiceListRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteServiceListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/serviceLists/{serviceListName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteServiceListResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a tunnel inspection rule resource with the given identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteTunnelInspectionRuleRequest
   * @return DeleteTunnelInspectionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteTunnelInspectionRule.ts.html |here} to see how to use DeleteTunnelInspectionRule API.
   */
  public async deleteTunnelInspectionRule(
    deleteTunnelInspectionRuleRequest: requests.DeleteTunnelInspectionRuleRequest
  ): Promise<responses.DeleteTunnelInspectionRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#deleteTunnelInspectionRule.");
    const operationName = "deleteTunnelInspectionRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": deleteTunnelInspectionRuleRequest.networkFirewallPolicyId,
      "{tunnelInspectionRuleName}": deleteTunnelInspectionRuleRequest.tunnelInspectionRuleName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTunnelInspectionRuleRequest.ifMatch,
      "opc-request-id": deleteTunnelInspectionRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTunnelInspectionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules/{tunnelInspectionRuleName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTunnelInspectionRuleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Url List resource with the given identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteUrlListRequest
   * @return DeleteUrlListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/DeleteUrlList.ts.html |here} to see how to use DeleteUrlList API.
   */
  public async deleteUrlList(
    deleteUrlListRequest: requests.DeleteUrlListRequest
  ): Promise<responses.DeleteUrlListResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#deleteUrlList.");
    const operationName = "deleteUrlList";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": deleteUrlListRequest.networkFirewallPolicyId,
      "{urlListName}": deleteUrlListRequest.urlListName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteUrlListRequest.ifMatch,
      "opc-request-id": deleteUrlListRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteUrlListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/urlLists/{urlListName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteUrlListResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Address List by the given name in the context of network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAddressListRequest
   * @return GetAddressListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetAddressList.ts.html |here} to see how to use GetAddressList API.
   */
  public async getAddressList(
    getAddressListRequest: requests.GetAddressListRequest
  ): Promise<responses.GetAddressListResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#getAddressList.");
    const operationName = "getAddressList";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": getAddressListRequest.networkFirewallPolicyId,
      "{addressListName}": getAddressListRequest.addressListName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAddressListRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAddressListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/addressLists/{addressListName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAddressListResponse>{},
        body: await response.json(),
        bodyKey: "addressList",
        bodyModel: model.AddressList,
        type: "model.AddressList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Application by the given name in the context of network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetApplicationRequest
   * @return GetApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetApplication.ts.html |here} to see how to use GetApplication API.
   */
  public async getApplication(
    getApplicationRequest: requests.GetApplicationRequest
  ): Promise<responses.GetApplicationResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#getApplication.");
    const operationName = "getApplication";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": getApplicationRequest.networkFirewallPolicyId,
      "{applicationName}": getApplicationRequest.applicationName
    };

    const queryParams = {
      "limit": getApplicationRequest.limit,
      "page": getApplicationRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/applications/{applicationName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetApplicationResponse>{},
        body: await response.json(),
        bodyKey: "application",
        bodyModel: model.Application,
        type: "model.Application",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get ApplicationGroup by the given name in the context of network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetApplicationGroupRequest
   * @return GetApplicationGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetApplicationGroup.ts.html |here} to see how to use GetApplicationGroup API.
   */
  public async getApplicationGroup(
    getApplicationGroupRequest: requests.GetApplicationGroupRequest
  ): Promise<responses.GetApplicationGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#getApplicationGroup.");
    const operationName = "getApplicationGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": getApplicationGroupRequest.networkFirewallPolicyId,
      "{applicationGroupName}": getApplicationGroupRequest.applicationGroupName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getApplicationGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getApplicationGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/applicationGroups/{applicationGroupName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetApplicationGroupResponse>{},
        body: await response.json(),
        bodyKey: "applicationGroup",
        bodyModel: model.ApplicationGroup,
        type: "model.ApplicationGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Decryption Profile by the given name in the context of network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDecryptionProfileRequest
   * @return GetDecryptionProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetDecryptionProfile.ts.html |here} to see how to use GetDecryptionProfile API.
   */
  public async getDecryptionProfile(
    getDecryptionProfileRequest: requests.GetDecryptionProfileRequest
  ): Promise<responses.GetDecryptionProfileResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#getDecryptionProfile.");
    const operationName = "getDecryptionProfile";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": getDecryptionProfileRequest.networkFirewallPolicyId,
      "{decryptionProfileName}": getDecryptionProfileRequest.decryptionProfileName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDecryptionProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDecryptionProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionProfiles/{decryptionProfileName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDecryptionProfileResponse>{},
        body: await response.json(),
        bodyKey: "decryptionProfile",
        bodyModel: model.DecryptionProfile,
        type: "model.DecryptionProfile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Decryption Rule by the given name in the context of network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDecryptionRuleRequest
   * @return GetDecryptionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetDecryptionRule.ts.html |here} to see how to use GetDecryptionRule API.
   */
  public async getDecryptionRule(
    getDecryptionRuleRequest: requests.GetDecryptionRuleRequest
  ): Promise<responses.GetDecryptionRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#getDecryptionRule.");
    const operationName = "getDecryptionRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": getDecryptionRuleRequest.networkFirewallPolicyId,
      "{decryptionRuleName}": getDecryptionRuleRequest.decryptionRuleName
    };

    const queryParams = {
      "limit": getDecryptionRuleRequest.limit,
      "page": getDecryptionRuleRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDecryptionRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDecryptionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules/{decryptionRuleName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDecryptionRuleResponse>{},
        body: await response.json(),
        bodyKey: "decryptionRule",
        bodyModel: model.DecryptionRule,
        type: "model.DecryptionRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Mapped Secret by the given name in the context of network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMappedSecretRequest
   * @return GetMappedSecretResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetMappedSecret.ts.html |here} to see how to use GetMappedSecret API.
   */
  public async getMappedSecret(
    getMappedSecretRequest: requests.GetMappedSecretRequest
  ): Promise<responses.GetMappedSecretResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#getMappedSecret.");
    const operationName = "getMappedSecret";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": getMappedSecretRequest.networkFirewallPolicyId,
      "{mappedSecretName}": getMappedSecretRequest.mappedSecretName
    };

    const queryParams = {
      "limit": getMappedSecretRequest.limit,
      "page": getMappedSecretRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMappedSecretRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMappedSecretRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets/{mappedSecretName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMappedSecretResponse>{},
        body: await response.json(),
        bodyKey: "mappedSecret",
        bodyModel: model.MappedSecret,
        type: "model.MappedSecret",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a NetworkFirewall by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetNetworkFirewallRequest
   * @return GetNetworkFirewallResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetNetworkFirewall.ts.html |here} to see how to use GetNetworkFirewall API.
   */
  public async getNetworkFirewall(
    getNetworkFirewallRequest: requests.GetNetworkFirewallRequest
  ): Promise<responses.GetNetworkFirewallResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#getNetworkFirewall.");
    const operationName = "getNetworkFirewall";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallId}": getNetworkFirewallRequest.networkFirewallId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getNetworkFirewallRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNetworkFirewallRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewalls/{networkFirewallId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNetworkFirewallResponse>{},
        body: await response.json(),
        bodyKey: "networkFirewall",
        bodyModel: model.NetworkFirewall,
        type: "model.NetworkFirewall",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a NetworkFirewallPolicy given the network firewall policy identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetNetworkFirewallPolicyRequest
   * @return GetNetworkFirewallPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetNetworkFirewallPolicy.ts.html |here} to see how to use GetNetworkFirewallPolicy API.
   */
  public async getNetworkFirewallPolicy(
    getNetworkFirewallPolicyRequest: requests.GetNetworkFirewallPolicyRequest
  ): Promise<responses.GetNetworkFirewallPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#getNetworkFirewallPolicy.");
    const operationName = "getNetworkFirewallPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": getNetworkFirewallPolicyRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getNetworkFirewallPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNetworkFirewallPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNetworkFirewallPolicyResponse>{},
        body: await response.json(),
        bodyKey: "networkFirewallPolicy",
        bodyModel: model.NetworkFirewallPolicy,
        type: "model.NetworkFirewallPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Security Rule by the given name in the context of network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSecurityRuleRequest
   * @return GetSecurityRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetSecurityRule.ts.html |here} to see how to use GetSecurityRule API.
   */
  public async getSecurityRule(
    getSecurityRuleRequest: requests.GetSecurityRuleRequest
  ): Promise<responses.GetSecurityRuleResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#getSecurityRule.");
    const operationName = "getSecurityRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": getSecurityRuleRequest.networkFirewallPolicyId,
      "{securityRuleName}": getSecurityRuleRequest.securityRuleName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSecurityRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/securityRules/{securityRuleName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityRuleResponse>{},
        body: await response.json(),
        bodyKey: "securityRule",
        bodyModel: model.SecurityRule,
        type: "model.SecurityRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Service by the given name in the context of network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetServiceRequest
   * @return GetServiceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetService.ts.html |here} to see how to use GetService API.
   */
  public async getService(
    getServiceRequest: requests.GetServiceRequest
  ): Promise<responses.GetServiceResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#getService.");
    const operationName = "getService";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": getServiceRequest.networkFirewallPolicyId,
      "{serviceName}": getServiceRequest.serviceName
    };

    const queryParams = {
      "limit": getServiceRequest.limit,
      "page": getServiceRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getServiceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getServiceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/services/{serviceName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetServiceResponse>{},
        body: await response.json(),
        bodyKey: "service",
        bodyModel: model.Service,
        type: "model.Service",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get ServiceList by the given name in the context of network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetServiceListRequest
   * @return GetServiceListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetServiceList.ts.html |here} to see how to use GetServiceList API.
   */
  public async getServiceList(
    getServiceListRequest: requests.GetServiceListRequest
  ): Promise<responses.GetServiceListResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#getServiceList.");
    const operationName = "getServiceList";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": getServiceListRequest.networkFirewallPolicyId,
      "{serviceListName}": getServiceListRequest.serviceListName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getServiceListRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getServiceListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/serviceLists/{serviceListName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetServiceListResponse>{},
        body: await response.json(),
        bodyKey: "serviceList",
        bodyModel: model.ServiceList,
        type: "model.ServiceList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get tunnel inspection rule by the given name in the context of network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetTunnelInspectionRuleRequest
   * @return GetTunnelInspectionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetTunnelInspectionRule.ts.html |here} to see how to use GetTunnelInspectionRule API.
   */
  public async getTunnelInspectionRule(
    getTunnelInspectionRuleRequest: requests.GetTunnelInspectionRuleRequest
  ): Promise<responses.GetTunnelInspectionRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#getTunnelInspectionRule.");
    const operationName = "getTunnelInspectionRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": getTunnelInspectionRuleRequest.networkFirewallPolicyId,
      "{tunnelInspectionRuleName}": getTunnelInspectionRuleRequest.tunnelInspectionRuleName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTunnelInspectionRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTunnelInspectionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules/{tunnelInspectionRuleName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTunnelInspectionRuleResponse>{},
        body: await response.json(),
        bodyKey: "tunnelInspectionRule",
        bodyModel: model.TunnelInspectionRule,
        type: "model.TunnelInspectionRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Url List by the given name in the context of network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetUrlListRequest
   * @return GetUrlListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetUrlList.ts.html |here} to see how to use GetUrlList API.
   */
  public async getUrlList(
    getUrlListRequest: requests.GetUrlListRequest
  ): Promise<responses.GetUrlListResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#getUrlList.");
    const operationName = "getUrlList";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": getUrlListRequest.networkFirewallPolicyId,
      "{urlListName}": getUrlListRequest.urlListName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUrlListRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUrlListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/urlLists/{urlListName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUrlListResponse>{},
        body: await response.json(),
        bodyKey: "urlList",
        bodyModel: model.UrlList,
        type: "model.UrlList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Network Firewall Policies.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAddressListsRequest
   * @return ListAddressListsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListAddressLists.ts.html |here} to see how to use ListAddressLists API.
   */
  public async listAddressLists(
    listAddressListsRequest: requests.ListAddressListsRequest
  ): Promise<responses.ListAddressListsResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#listAddressLists.");
    const operationName = "listAddressLists";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": listAddressListsRequest.networkFirewallPolicyId
    };

    const queryParams = {
      "limit": listAddressListsRequest.limit,
      "page": listAddressListsRequest.page,
      "sortOrder": listAddressListsRequest.sortOrder,
      "sortBy": listAddressListsRequest.sortBy,
      "displayName": listAddressListsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAddressListsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAddressListsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/addressLists",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAddressListsResponse>{},
        body: await response.json(),
        bodyKey: "addressListSummaryCollection",
        bodyModel: model.AddressListSummaryCollection,
        type: "model.AddressListSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of ApplicationGroups for the policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListApplicationGroupsRequest
   * @return ListApplicationGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListApplicationGroups.ts.html |here} to see how to use ListApplicationGroups API.
   */
  public async listApplicationGroups(
    listApplicationGroupsRequest: requests.ListApplicationGroupsRequest
  ): Promise<responses.ListApplicationGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#listApplicationGroups.");
    const operationName = "listApplicationGroups";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": listApplicationGroupsRequest.networkFirewallPolicyId
    };

    const queryParams = {
      "limit": listApplicationGroupsRequest.limit,
      "page": listApplicationGroupsRequest.page,
      "sortOrder": listApplicationGroupsRequest.sortOrder,
      "sortBy": listApplicationGroupsRequest.sortBy,
      "displayName": listApplicationGroupsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listApplicationGroupsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listApplicationGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/applicationGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListApplicationGroupsResponse>{},
        body: await response.json(),
        bodyKey: "applicationGroupSummaryCollection",
        bodyModel: model.ApplicationGroupSummaryCollection,
        type: "model.ApplicationGroupSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Applications for the policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListApplicationsRequest
   * @return ListApplicationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListApplications.ts.html |here} to see how to use ListApplications API.
   */
  public async listApplications(
    listApplicationsRequest: requests.ListApplicationsRequest
  ): Promise<responses.ListApplicationsResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#listApplications.");
    const operationName = "listApplications";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": listApplicationsRequest.networkFirewallPolicyId
    };

    const queryParams = {
      "limit": listApplicationsRequest.limit,
      "page": listApplicationsRequest.page,
      "sortOrder": listApplicationsRequest.sortOrder,
      "sortBy": listApplicationsRequest.sortBy,
      "displayName": listApplicationsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listApplicationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listApplicationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/applications",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListApplicationsResponse>{},
        body: await response.json(),
        bodyKey: "applicationSummaryCollection",
        bodyModel: model.ApplicationSummaryCollection,
        type: "model.ApplicationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Decryption Profile for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDecryptionProfilesRequest
   * @return ListDecryptionProfilesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListDecryptionProfiles.ts.html |here} to see how to use ListDecryptionProfiles API.
   */
  public async listDecryptionProfiles(
    listDecryptionProfilesRequest: requests.ListDecryptionProfilesRequest
  ): Promise<responses.ListDecryptionProfilesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#listDecryptionProfiles.");
    const operationName = "listDecryptionProfiles";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": listDecryptionProfilesRequest.networkFirewallPolicyId
    };

    const queryParams = {
      "limit": listDecryptionProfilesRequest.limit,
      "page": listDecryptionProfilesRequest.page,
      "sortOrder": listDecryptionProfilesRequest.sortOrder,
      "sortBy": listDecryptionProfilesRequest.sortBy,
      "displayName": listDecryptionProfilesRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDecryptionProfilesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDecryptionProfilesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionProfiles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDecryptionProfilesResponse>{},
        body: await response.json(),
        bodyKey: "decryptionProfileSummaryCollection",
        bodyModel: model.DecryptionProfileSummaryCollection,
        type: "model.DecryptionProfileSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Decryption Rule for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDecryptionRulesRequest
   * @return ListDecryptionRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListDecryptionRules.ts.html |here} to see how to use ListDecryptionRules API.
   */
  public async listDecryptionRules(
    listDecryptionRulesRequest: requests.ListDecryptionRulesRequest
  ): Promise<responses.ListDecryptionRulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#listDecryptionRules.");
    const operationName = "listDecryptionRules";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": listDecryptionRulesRequest.networkFirewallPolicyId
    };

    const queryParams = {
      "limit": listDecryptionRulesRequest.limit,
      "page": listDecryptionRulesRequest.page,
      "sortOrder": listDecryptionRulesRequest.sortOrder,
      "sortBy": listDecryptionRulesRequest.sortBy,
      "displayName": listDecryptionRulesRequest.displayName,
      "decryptionRulePriorityOrder": listDecryptionRulesRequest.decryptionRulePriorityOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDecryptionRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDecryptionRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDecryptionRulesResponse>{},
        body: await response.json(),
        bodyKey: "decryptionRuleSummaryCollection",
        bodyModel: model.DecryptionRuleSummaryCollection,
        type: "model.DecryptionRuleSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Mapped Secret for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMappedSecretsRequest
   * @return ListMappedSecretsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListMappedSecrets.ts.html |here} to see how to use ListMappedSecrets API.
   */
  public async listMappedSecrets(
    listMappedSecretsRequest: requests.ListMappedSecretsRequest
  ): Promise<responses.ListMappedSecretsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#listMappedSecrets.");
    const operationName = "listMappedSecrets";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": listMappedSecretsRequest.networkFirewallPolicyId
    };

    const queryParams = {
      "limit": listMappedSecretsRequest.limit,
      "page": listMappedSecretsRequest.page,
      "sortOrder": listMappedSecretsRequest.sortOrder,
      "sortBy": listMappedSecretsRequest.sortBy,
      "displayName": listMappedSecretsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMappedSecretsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMappedSecretsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMappedSecretsResponse>{},
        body: await response.json(),
        bodyKey: "mappedSecretSummaryCollection",
        bodyModel: model.MappedSecretSummaryCollection,
        type: "model.MappedSecretSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Network Firewall Policies.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListNetworkFirewallPoliciesRequest
   * @return ListNetworkFirewallPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListNetworkFirewallPolicies.ts.html |here} to see how to use ListNetworkFirewallPolicies API.
   */
  public async listNetworkFirewallPolicies(
    listNetworkFirewallPoliciesRequest: requests.ListNetworkFirewallPoliciesRequest
  ): Promise<responses.ListNetworkFirewallPoliciesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#listNetworkFirewallPolicies.");
    const operationName = "listNetworkFirewallPolicies";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNetworkFirewallPoliciesRequest.compartmentId,
      "displayName": listNetworkFirewallPoliciesRequest.displayName,
      "id": listNetworkFirewallPoliciesRequest.id,
      "limit": listNetworkFirewallPoliciesRequest.limit,
      "page": listNetworkFirewallPoliciesRequest.page,
      "lifecycleState": listNetworkFirewallPoliciesRequest.lifecycleState,
      "sortOrder": listNetworkFirewallPoliciesRequest.sortOrder,
      "sortBy": listNetworkFirewallPoliciesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNetworkFirewallPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listNetworkFirewallPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkFirewallPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "networkFirewallPolicySummaryCollection",
        bodyModel: model.NetworkFirewallPolicySummaryCollection,
        type: "model.NetworkFirewallPolicySummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of NetworkFirewalls.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListNetworkFirewallsRequest
   * @return ListNetworkFirewallsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListNetworkFirewalls.ts.html |here} to see how to use ListNetworkFirewalls API.
   */
  public async listNetworkFirewalls(
    listNetworkFirewallsRequest: requests.ListNetworkFirewallsRequest
  ): Promise<responses.ListNetworkFirewallsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#listNetworkFirewalls.");
    const operationName = "listNetworkFirewalls";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNetworkFirewallsRequest.compartmentId,
      "displayName": listNetworkFirewallsRequest.displayName,
      "networkFirewallPolicyId": listNetworkFirewallsRequest.networkFirewallPolicyId,
      "id": listNetworkFirewallsRequest.id,
      "availabilityDomain": listNetworkFirewallsRequest.availabilityDomain,
      "limit": listNetworkFirewallsRequest.limit,
      "page": listNetworkFirewallsRequest.page,
      "lifecycleState": listNetworkFirewallsRequest.lifecycleState,
      "sortOrder": listNetworkFirewallsRequest.sortOrder,
      "sortBy": listNetworkFirewallsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNetworkFirewallsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listNetworkFirewallsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewalls",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkFirewallsResponse>{},
        body: await response.json(),
        bodyKey: "networkFirewallCollection",
        bodyModel: model.NetworkFirewallCollection,
        type: "model.NetworkFirewallCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Security Rule for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSecurityRulesRequest
   * @return ListSecurityRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListSecurityRules.ts.html |here} to see how to use ListSecurityRules API.
   */
  public async listSecurityRules(
    listSecurityRulesRequest: requests.ListSecurityRulesRequest
  ): Promise<responses.ListSecurityRulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#listSecurityRules.");
    const operationName = "listSecurityRules";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": listSecurityRulesRequest.networkFirewallPolicyId
    };

    const queryParams = {
      "limit": listSecurityRulesRequest.limit,
      "page": listSecurityRulesRequest.page,
      "sortOrder": listSecurityRulesRequest.sortOrder,
      "sortBy": listSecurityRulesRequest.sortBy,
      "displayName": listSecurityRulesRequest.displayName,
      "securityRulePriorityOrder": listSecurityRulesRequest.securityRulePriorityOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/securityRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityRulesResponse>{},
        body: await response.json(),
        bodyKey: "securityRuleSummaryCollection",
        bodyModel: model.SecurityRuleSummaryCollection,
        type: "model.SecurityRuleSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of ServiceLists for the policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListServiceListsRequest
   * @return ListServiceListsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListServiceLists.ts.html |here} to see how to use ListServiceLists API.
   */
  public async listServiceLists(
    listServiceListsRequest: requests.ListServiceListsRequest
  ): Promise<responses.ListServiceListsResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#listServiceLists.");
    const operationName = "listServiceLists";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": listServiceListsRequest.networkFirewallPolicyId
    };

    const queryParams = {
      "limit": listServiceListsRequest.limit,
      "page": listServiceListsRequest.page,
      "sortOrder": listServiceListsRequest.sortOrder,
      "sortBy": listServiceListsRequest.sortBy,
      "displayName": listServiceListsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listServiceListsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listServiceListsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/serviceLists",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListServiceListsResponse>{},
        body: await response.json(),
        bodyKey: "serviceListSummaryCollection",
        bodyModel: model.ServiceListSummaryCollection,
        type: "model.ServiceListSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Services for the policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListServicesRequest
   * @return ListServicesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListServices.ts.html |here} to see how to use ListServices API.
   */
  public async listServices(
    listServicesRequest: requests.ListServicesRequest
  ): Promise<responses.ListServicesResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#listServices.");
    const operationName = "listServices";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": listServicesRequest.networkFirewallPolicyId
    };

    const queryParams = {
      "limit": listServicesRequest.limit,
      "page": listServicesRequest.page,
      "sortOrder": listServicesRequest.sortOrder,
      "sortBy": listServicesRequest.sortBy,
      "displayName": listServicesRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listServicesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listServicesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/services",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListServicesResponse>{},
        body: await response.json(),
        bodyKey: "serviceSummaryCollection",
        bodyModel: model.ServiceSummaryCollection,
        type: "model.ServiceSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of tunnel inspection rules for the network firewall policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTunnelInspectionRulesRequest
   * @return ListTunnelInspectionRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListTunnelInspectionRules.ts.html |here} to see how to use ListTunnelInspectionRules API.
   */
  public async listTunnelInspectionRules(
    listTunnelInspectionRulesRequest: requests.ListTunnelInspectionRulesRequest
  ): Promise<responses.ListTunnelInspectionRulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#listTunnelInspectionRules.");
    const operationName = "listTunnelInspectionRules";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": listTunnelInspectionRulesRequest.networkFirewallPolicyId
    };

    const queryParams = {
      "limit": listTunnelInspectionRulesRequest.limit,
      "page": listTunnelInspectionRulesRequest.page,
      "sortOrder": listTunnelInspectionRulesRequest.sortOrder,
      "sortBy": listTunnelInspectionRulesRequest.sortBy,
      "displayName": listTunnelInspectionRulesRequest.displayName,
      "tunnelInspectionRulePriorityOrder":
        listTunnelInspectionRulesRequest.tunnelInspectionRulePriorityOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTunnelInspectionRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTunnelInspectionRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTunnelInspectionRulesResponse>{},
        body: await response.json(),
        bodyKey: "tunnelInspectionRuleSummaryCollection",
        bodyModel: model.TunnelInspectionRuleSummaryCollection,
        type: "model.TunnelInspectionRuleSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of URL lists for the Network Firewall Policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListUrlListsRequest
   * @return ListUrlListsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListUrlLists.ts.html |here} to see how to use ListUrlLists API.
   */
  public async listUrlLists(
    listUrlListsRequest: requests.ListUrlListsRequest
  ): Promise<responses.ListUrlListsResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#listUrlLists.");
    const operationName = "listUrlLists";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": listUrlListsRequest.networkFirewallPolicyId
    };

    const queryParams = {
      "limit": listUrlListsRequest.limit,
      "page": listUrlListsRequest.page,
      "sortOrder": listUrlListsRequest.sortOrder,
      "sortBy": listUrlListsRequest.sortBy,
      "displayName": listUrlListsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUrlListsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUrlListsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/urlLists",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUrlListsResponse>{},
        body: await response.json(),
        bodyKey: "urlListSummaryCollection",
        bodyModel: model.UrlListSummaryCollection,
        type: "model.UrlListSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of errors for a given work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of logs for a given work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a NetworkFirewallPolicy resource from one version to latest version. When provided, If-Match is checked against ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param MigrateNetworkFirewallPolicyRequest
   * @return MigrateNetworkFirewallPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/MigrateNetworkFirewallPolicy.ts.html |here} to see how to use MigrateNetworkFirewallPolicy API.
   */
  public async migrateNetworkFirewallPolicy(
    migrateNetworkFirewallPolicyRequest: requests.MigrateNetworkFirewallPolicyRequest
  ): Promise<responses.MigrateNetworkFirewallPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#migrateNetworkFirewallPolicy.");
    const operationName = "migrateNetworkFirewallPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": migrateNetworkFirewallPolicyRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": migrateNetworkFirewallPolicyRequest.ifMatch,
      "opc-request-id": migrateNetworkFirewallPolicyRequest.opcRequestId,
      "opc-retry-token": migrateNetworkFirewallPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      migrateNetworkFirewallPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/actions/migrate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.MigrateNetworkFirewallPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Address list with the given name in the network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAddressListRequest
   * @return UpdateAddressListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateAddressList.ts.html |here} to see how to use UpdateAddressList API.
   */
  public async updateAddressList(
    updateAddressListRequest: requests.UpdateAddressListRequest
  ): Promise<responses.UpdateAddressListResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#updateAddressList.");
    const operationName = "updateAddressList";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": updateAddressListRequest.networkFirewallPolicyId,
      "{addressListName}": updateAddressListRequest.addressListName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAddressListRequest.ifMatch,
      "opc-request-id": updateAddressListRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAddressListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/addressLists/{addressListName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAddressListRequest.updateAddressListDetails,
        "UpdateAddressListDetails",
        model.UpdateAddressListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAddressListResponse>{},
        body: await response.json(),
        bodyKey: "addressList",
        bodyModel: model.AddressList,
        type: "model.AddressList",
        responseHeaders: [
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Application with the given name in the network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateApplicationRequest
   * @return UpdateApplicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateApplication.ts.html |here} to see how to use UpdateApplication API.
   */
  public async updateApplication(
    updateApplicationRequest: requests.UpdateApplicationRequest
  ): Promise<responses.UpdateApplicationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#updateApplication.");
    const operationName = "updateApplication";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": updateApplicationRequest.networkFirewallPolicyId,
      "{applicationName}": updateApplicationRequest.applicationName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateApplicationRequest.ifMatch,
      "opc-request-id": updateApplicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateApplicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/applications/{applicationName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateApplicationRequest.updateApplicationDetails,
        "UpdateApplicationDetails",
        model.UpdateApplicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateApplicationResponse>{},
        body: await response.json(),
        bodyKey: "application",
        bodyModel: model.Application,
        type: "model.Application",
        responseHeaders: [
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the ApplicationGroup with the given name in the network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateApplicationGroupRequest
   * @return UpdateApplicationGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateApplicationGroup.ts.html |here} to see how to use UpdateApplicationGroup API.
   */
  public async updateApplicationGroup(
    updateApplicationGroupRequest: requests.UpdateApplicationGroupRequest
  ): Promise<responses.UpdateApplicationGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#updateApplicationGroup.");
    const operationName = "updateApplicationGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": updateApplicationGroupRequest.networkFirewallPolicyId,
      "{applicationGroupName}": updateApplicationGroupRequest.applicationGroupName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateApplicationGroupRequest.ifMatch,
      "opc-request-id": updateApplicationGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateApplicationGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/applicationGroups/{applicationGroupName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateApplicationGroupRequest.updateApplicationGroupDetails,
        "UpdateApplicationGroupDetails",
        model.UpdateApplicationGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateApplicationGroupResponse>{},
        body: await response.json(),
        bodyKey: "applicationGroup",
        bodyModel: model.ApplicationGroup,
        type: "model.ApplicationGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Decryption Profile with the given name in the network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDecryptionProfileRequest
   * @return UpdateDecryptionProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateDecryptionProfile.ts.html |here} to see how to use UpdateDecryptionProfile API.
   */
  public async updateDecryptionProfile(
    updateDecryptionProfileRequest: requests.UpdateDecryptionProfileRequest
  ): Promise<responses.UpdateDecryptionProfileResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#updateDecryptionProfile.");
    const operationName = "updateDecryptionProfile";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": updateDecryptionProfileRequest.networkFirewallPolicyId,
      "{decryptionProfileName}": updateDecryptionProfileRequest.decryptionProfileName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDecryptionProfileRequest.ifMatch,
      "opc-request-id": updateDecryptionProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDecryptionProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionProfiles/{decryptionProfileName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDecryptionProfileRequest.updateDecryptionProfileDetails,
        "UpdateDecryptionProfileDetails",
        model.UpdateDecryptionProfileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDecryptionProfileResponse>{},
        body: await response.json(),
        bodyKey: "decryptionProfile",
        bodyModel: model.DecryptionProfile,
        type: "model.DecryptionProfile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Decryption Rule with the given name in the network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDecryptionRuleRequest
   * @return UpdateDecryptionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateDecryptionRule.ts.html |here} to see how to use UpdateDecryptionRule API.
   */
  public async updateDecryptionRule(
    updateDecryptionRuleRequest: requests.UpdateDecryptionRuleRequest
  ): Promise<responses.UpdateDecryptionRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#updateDecryptionRule.");
    const operationName = "updateDecryptionRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": updateDecryptionRuleRequest.networkFirewallPolicyId,
      "{decryptionRuleName}": updateDecryptionRuleRequest.decryptionRuleName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDecryptionRuleRequest.ifMatch,
      "opc-request-id": updateDecryptionRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDecryptionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules/{decryptionRuleName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDecryptionRuleRequest.updateDecryptionRuleDetails,
        "UpdateDecryptionRuleDetails",
        model.UpdateDecryptionRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDecryptionRuleResponse>{},
        body: await response.json(),
        bodyKey: "decryptionRule",
        bodyModel: model.DecryptionRule,
        type: "model.DecryptionRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Mapped Secret with the given name in the network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateMappedSecretRequest
   * @return UpdateMappedSecretResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateMappedSecret.ts.html |here} to see how to use UpdateMappedSecret API.
   */
  public async updateMappedSecret(
    updateMappedSecretRequest: requests.UpdateMappedSecretRequest
  ): Promise<responses.UpdateMappedSecretResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#updateMappedSecret.");
    const operationName = "updateMappedSecret";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": updateMappedSecretRequest.networkFirewallPolicyId,
      "{mappedSecretName}": updateMappedSecretRequest.mappedSecretName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateMappedSecretRequest.ifMatch,
      "opc-request-id": updateMappedSecretRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateMappedSecretRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets/{mappedSecretName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMappedSecretRequest.updateMappedSecretDetails,
        "UpdateMappedSecretDetails",
        model.UpdateMappedSecretDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMappedSecretResponse>{},
        body: await response.json(),
        bodyKey: "mappedSecret",
        bodyModel: model.MappedSecret,
        type: "model.MappedSecret",
        responseHeaders: [
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the NetworkFirewall
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateNetworkFirewallRequest
   * @return UpdateNetworkFirewallResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateNetworkFirewall.ts.html |here} to see how to use UpdateNetworkFirewall API.
   */
  public async updateNetworkFirewall(
    updateNetworkFirewallRequest: requests.UpdateNetworkFirewallRequest
  ): Promise<responses.UpdateNetworkFirewallResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#updateNetworkFirewall.");
    const operationName = "updateNetworkFirewall";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallId}": updateNetworkFirewallRequest.networkFirewallId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateNetworkFirewallRequest.ifMatch,
      "opc-request-id": updateNetworkFirewallRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateNetworkFirewallRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewalls/{networkFirewallId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNetworkFirewallRequest.updateNetworkFirewallDetails,
        "UpdateNetworkFirewallDetails",
        model.UpdateNetworkFirewallDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNetworkFirewallResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the NetworkFirewallPolicy
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateNetworkFirewallPolicyRequest
   * @return UpdateNetworkFirewallPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateNetworkFirewallPolicy.ts.html |here} to see how to use UpdateNetworkFirewallPolicy API.
   */
  public async updateNetworkFirewallPolicy(
    updateNetworkFirewallPolicyRequest: requests.UpdateNetworkFirewallPolicyRequest
  ): Promise<responses.UpdateNetworkFirewallPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#updateNetworkFirewallPolicy.");
    const operationName = "updateNetworkFirewallPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": updateNetworkFirewallPolicyRequest.networkFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateNetworkFirewallPolicyRequest.ifMatch,
      "opc-request-id": updateNetworkFirewallPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateNetworkFirewallPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNetworkFirewallPolicyRequest.updateNetworkFirewallPolicyDetails,
        "UpdateNetworkFirewallPolicyDetails",
        model.UpdateNetworkFirewallPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNetworkFirewallPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Security Rule with the given name in the network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSecurityRuleRequest
   * @return UpdateSecurityRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateSecurityRule.ts.html |here} to see how to use UpdateSecurityRule API.
   */
  public async updateSecurityRule(
    updateSecurityRuleRequest: requests.UpdateSecurityRuleRequest
  ): Promise<responses.UpdateSecurityRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#updateSecurityRule.");
    const operationName = "updateSecurityRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": updateSecurityRuleRequest.networkFirewallPolicyId,
      "{securityRuleName}": updateSecurityRuleRequest.securityRuleName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSecurityRuleRequest.ifMatch,
      "opc-request-id": updateSecurityRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSecurityRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/securityRules/{securityRuleName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSecurityRuleRequest.updateSecurityRuleDetails,
        "UpdateSecurityRuleDetails",
        model.UpdateSecurityRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSecurityRuleResponse>{},
        body: await response.json(),
        bodyKey: "securityRule",
        bodyModel: model.SecurityRule,
        type: "model.SecurityRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Service with the given name in the network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateServiceRequest
   * @return UpdateServiceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateService.ts.html |here} to see how to use UpdateService API.
   */
  public async updateService(
    updateServiceRequest: requests.UpdateServiceRequest
  ): Promise<responses.UpdateServiceResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#updateService.");
    const operationName = "updateService";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": updateServiceRequest.networkFirewallPolicyId,
      "{serviceName}": updateServiceRequest.serviceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateServiceRequest.ifMatch,
      "opc-request-id": updateServiceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateServiceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/services/{serviceName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateServiceRequest.updateServiceDetails,
        "UpdateServiceDetails",
        model.UpdateServiceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateServiceResponse>{},
        body: await response.json(),
        bodyKey: "service",
        bodyModel: model.Service,
        type: "model.Service",
        responseHeaders: [
          {
            value: response.headers.get("opc-page-count"),
            key: "opcPageCount",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the ServiceList with the given name in the network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateServiceListRequest
   * @return UpdateServiceListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateServiceList.ts.html |here} to see how to use UpdateServiceList API.
   */
  public async updateServiceList(
    updateServiceListRequest: requests.UpdateServiceListRequest
  ): Promise<responses.UpdateServiceListResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#updateServiceList.");
    const operationName = "updateServiceList";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": updateServiceListRequest.networkFirewallPolicyId,
      "{serviceListName}": updateServiceListRequest.serviceListName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateServiceListRequest.ifMatch,
      "opc-request-id": updateServiceListRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateServiceListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/serviceLists/{serviceListName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateServiceListRequest.updateServiceListDetails,
        "UpdateServiceListDetails",
        model.UpdateServiceListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateServiceListResponse>{},
        body: await response.json(),
        bodyKey: "serviceList",
        bodyModel: model.ServiceList,
        type: "model.ServiceList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the tunnel inspection rule with the given name in the network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateTunnelInspectionRuleRequest
   * @return UpdateTunnelInspectionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateTunnelInspectionRule.ts.html |here} to see how to use UpdateTunnelInspectionRule API.
   */
  public async updateTunnelInspectionRule(
    updateTunnelInspectionRuleRequest: requests.UpdateTunnelInspectionRuleRequest
  ): Promise<responses.UpdateTunnelInspectionRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkFirewallClient#updateTunnelInspectionRule.");
    const operationName = "updateTunnelInspectionRule";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": updateTunnelInspectionRuleRequest.networkFirewallPolicyId,
      "{tunnelInspectionRuleName}": updateTunnelInspectionRuleRequest.tunnelInspectionRuleName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTunnelInspectionRuleRequest.ifMatch,
      "opc-request-id": updateTunnelInspectionRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTunnelInspectionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules/{tunnelInspectionRuleName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTunnelInspectionRuleRequest.updateTunnelInspectionRuleDetails,
        "UpdateTunnelInspectionRuleDetails",
        model.UpdateTunnelInspectionRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTunnelInspectionRuleResponse>{},
        body: await response.json(),
        bodyKey: "tunnelInspectionRule",
        bodyModel: model.TunnelInspectionRule,
        type: "model.TunnelInspectionRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Url list with the given name in the network firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateUrlListRequest
   * @return UpdateUrlListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkfirewall/UpdateUrlList.ts.html |here} to see how to use UpdateUrlList API.
   */
  public async updateUrlList(
    updateUrlListRequest: requests.UpdateUrlListRequest
  ): Promise<responses.UpdateUrlListResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkFirewallClient#updateUrlList.");
    const operationName = "updateUrlList";
    const apiReferenceLink = "";
    const pathParams = {
      "{networkFirewallPolicyId}": updateUrlListRequest.networkFirewallPolicyId,
      "{urlListName}": updateUrlListRequest.urlListName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateUrlListRequest.ifMatch,
      "opc-request-id": updateUrlListRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateUrlListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkFirewallPolicies/{networkFirewallPolicyId}/urlLists/{urlListName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateUrlListRequest.updateUrlListDetails,
        "UpdateUrlListDetails",
        model.UpdateUrlListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateUrlListResponse>{},
        body: await response.json(),
        bodyKey: "urlList",
        bodyModel: model.UrlList,
        type: "model.UrlList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
