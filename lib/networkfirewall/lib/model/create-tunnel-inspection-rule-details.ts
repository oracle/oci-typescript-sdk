/**
 * Network Firewall API
 * Use the Network Firewall API to create network firewalls and configure policies that regulates network traffic in and across VCNs.
 * OpenAPI spec version: 20230501
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Request for creating Tunnel Inspection Rule used in the firewall policy rules.
 * Tunnel Inspection Rule determines whether tunnel inspection is applied on the traffic based on attributes
 * such as Tunnel Inspection protocol, the source and destination IP address.
 *
 */
export interface CreateTunnelInspectionRuleDetails {
  /**
   * Name for the Tunnel Inspection Rule, must be unique within the policy.
   */
  "name": string;
  /**
   * Types of Inspect Action on the traffic flow.
   * <p>
   * INSPECT - Inspect the traffic.
   *   * INSPECT_AND_CAPTURE_LOG - Inspect and capture logs for the traffic.
   *
   */
  "action"?: model.InspectActionType;
  "position"?: model.RulePosition;

  "protocol": string;
}

export namespace CreateTunnelInspectionRuleDetails {
  export function getJsonObj(obj: CreateTunnelInspectionRuleDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "position": obj.position ? model.RulePosition.getJsonObj(obj.position) : undefined
      }
    };

    if (obj && "protocol" in obj && obj.protocol) {
      switch (obj.protocol) {
        case "VXLAN":
          return model.CreateVxlanInspectionRuleDetails.getJsonObj(
            <model.CreateVxlanInspectionRuleDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.protocol}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateTunnelInspectionRuleDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "position": obj.position
          ? model.RulePosition.getDeserializedJsonObj(obj.position)
          : undefined
      }
    };

    if (obj && "protocol" in obj && obj.protocol) {
      switch (obj.protocol) {
        case "VXLAN":
          return model.CreateVxlanInspectionRuleDetails.getDeserializedJsonObj(
            <model.CreateVxlanInspectionRuleDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.protocol}`);
      }
    }
    return jsonObj;
  }
}
