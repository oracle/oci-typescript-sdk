/**
 * Email Delivery API
 * Use the Email Delivery API to do the necessary set up to send high-volume and application-generated emails through the OCI Email Delivery service.
For more information, see [Overview of the Email Delivery Service](https://docs.oracle.com/iaas/Content/Email/Concepts/overview.htm).

 **Note:** Write actions (POST, UPDATE, DELETE) may take several minutes to propagate and be reflected by the API.
 If a subsequent read request fails to reflect your changes, wait a few minutes and try again.

 * OpenAPI spec version: 20170907
 * Contact: email-dev_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { EmailWaiter } from "./email-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum EmailApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class EmailClient {
  protected static serviceEndpointTemplate = "https://ctrl.email.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": EmailWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Email";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("email")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("email");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20170907";
    if (this.logger) this.logger.info(`EmailClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        EmailClient.serviceEndpointTemplate,
        this._region,
        EmailClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        EmailClient.serviceEndpointTemplate,
        this._regionId,
        EmailClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      EmailClient.serviceEndpointTemplate,
      region,
      EmailClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      EmailClient.serviceEndpointTemplate,
      regionId,
      EmailClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new EmailWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): EmailWaiter {
    this._waiters = new EmailWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): EmailWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Adds a lock to a resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddEmailDomainLockRequest
   * @return AddEmailDomainLockResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/AddEmailDomainLock.ts.html |here} to see how to use AddEmailDomainLock API.
   */
  public async addEmailDomainLock(
    addEmailDomainLockRequest: requests.AddEmailDomainLockRequest
  ): Promise<responses.AddEmailDomainLockResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#addEmailDomainLock.");
    const operationName = "addEmailDomainLock";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/AddEmailDomainLock";
    const pathParams = {
      "{emailDomainId}": addEmailDomainLockRequest.emailDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addEmailDomainLockRequest.opcRequestId,
      "if-match": addEmailDomainLockRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addEmailDomainLockRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailDomains/{emailDomainId}/actions/addLock",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addEmailDomainLockRequest.addLockDetails,
        "AddLockDetails",
        model.AddLockDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddEmailDomainLockResponse>{},
        body: await response.json(),
        bodyKey: "emailDomain",
        bodyModel: model.EmailDomain,
        type: "model.EmailDomain",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a lock to a resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddReturnPathLockRequest
   * @return AddReturnPathLockResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/AddReturnPathLock.ts.html |here} to see how to use AddReturnPathLock API.
   */
  public async addReturnPathLock(
    addReturnPathLockRequest: requests.AddReturnPathLockRequest
  ): Promise<responses.AddReturnPathLockResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#addReturnPathLock.");
    const operationName = "addReturnPathLock";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailReturnPath/AddReturnPathLock";
    const pathParams = {
      "{emailReturnPathId}": addReturnPathLockRequest.emailReturnPathId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addReturnPathLockRequest.opcRequestId,
      "if-match": addReturnPathLockRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addReturnPathLockRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailReturnPaths/{emailReturnPathId}/actions/addLock",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addReturnPathLockRequest.addLockDetails,
        "AddLockDetails",
        model.AddLockDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddReturnPathLockResponse>{},
        body: await response.json(),
        bodyKey: "emailReturnPath",
        bodyModel: model.EmailReturnPath,
        type: "model.EmailReturnPath",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a lock to a resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddSenderLockRequest
   * @return AddSenderLockResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/AddSenderLock.ts.html |here} to see how to use AddSenderLock API.
   */
  public async addSenderLock(
    addSenderLockRequest: requests.AddSenderLockRequest
  ): Promise<responses.AddSenderLockResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#addSenderLock.");
    const operationName = "addSenderLock";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/AddSenderLock";
    const pathParams = {
      "{senderId}": addSenderLockRequest.senderId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addSenderLockRequest.opcRequestId,
      "if-match": addSenderLockRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addSenderLockRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/senders/{senderId}/actions/addLock",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addSenderLockRequest.addLockDetails,
        "AddLockDetails",
        model.AddLockDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddSenderLockResponse>{},
        body: await response.json(),
        bodyKey: "sender",
        bodyModel: model.Sender,
        type: "model.Sender",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves an email domain into a different compartment.
   * When provided, If-Match is checked against ETag value of the resource.
   * For information about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   * <p>
   **Note:** All DKIM objects associated with this email domain will also be moved into the provided compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeEmailDomainCompartmentRequest
   * @return ChangeEmailDomainCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ChangeEmailDomainCompartment.ts.html |here} to see how to use ChangeEmailDomainCompartment API.
   */
  public async changeEmailDomainCompartment(
    changeEmailDomainCompartmentRequest: requests.ChangeEmailDomainCompartmentRequest
  ): Promise<responses.ChangeEmailDomainCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation EmailClient#changeEmailDomainCompartment.");
    const operationName = "changeEmailDomainCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/ChangeEmailDomainCompartment";
    const pathParams = {
      "{emailDomainId}": changeEmailDomainCompartmentRequest.emailDomainId
    };

    const queryParams = {
      "isLockOverride": changeEmailDomainCompartmentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeEmailDomainCompartmentRequest.ifMatch,
      "opc-request-id": changeEmailDomainCompartmentRequest.opcRequestId,
      "opc-retry-token": changeEmailDomainCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeEmailDomainCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailDomains/{emailDomainId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeEmailDomainCompartmentRequest.changeEmailDomainCompartmentDetails,
        "ChangeEmailDomainCompartmentDetails",
        model.ChangeEmailDomainCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeEmailDomainCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a sender into a different compartment. When provided, If-Match is checked against ETag values of the resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeSenderCompartmentRequest
   * @return ChangeSenderCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ChangeSenderCompartment.ts.html |here} to see how to use ChangeSenderCompartment API.
   */
  public async changeSenderCompartment(
    changeSenderCompartmentRequest: requests.ChangeSenderCompartmentRequest
  ): Promise<responses.ChangeSenderCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#changeSenderCompartment.");
    const operationName = "changeSenderCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/ChangeSenderCompartment";
    const pathParams = {
      "{senderId}": changeSenderCompartmentRequest.senderId
    };

    const queryParams = {
      "isLockOverride": changeSenderCompartmentRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeSenderCompartmentRequest.ifMatch,
      "opc-request-id": changeSenderCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSenderCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/senders/{senderId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSenderCompartmentRequest.changeSenderCompartmentDetails,
        "ChangeSenderCompartmentDetails",
        model.ChangeSenderCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSenderCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new DKIM for an email domain.
   * This DKIM signs all approved senders in the tenancy that are in this email domain.
   * Best security practices indicate to periodically rotate the DKIM that is doing the signing.
   * When a second DKIM is applied, all senders seamlessly pick up the new key
   * without interruption in signing.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDkimRequest
   * @return CreateDkimResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/CreateDkim.ts.html |here} to see how to use CreateDkim API.
   */
  public async createDkim(
    createDkimRequest: requests.CreateDkimRequest
  ): Promise<responses.CreateDkimResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#createDkim.");
    const operationName = "createDkim";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Dkim/CreateDkim";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDkimRequest.opcRetryToken,
      "opc-request-id": createDkimRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDkimRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dkims",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDkimRequest.createDkimDetails,
        "CreateDkimDetails",
        model.CreateDkimDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDkimResponse>{},
        body: await response.json(),
        bodyKey: "dkim",
        bodyModel: model.Dkim,
        type: "model.Dkim",
        responseHeaders: [
          {
            value: response.headers.get("Content-Location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new email domain. Avoid entering confidential information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateEmailDomainRequest
   * @return CreateEmailDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/CreateEmailDomain.ts.html |here} to see how to use CreateEmailDomain API.
   */
  public async createEmailDomain(
    createEmailDomainRequest: requests.CreateEmailDomainRequest
  ): Promise<responses.CreateEmailDomainResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#createEmailDomain.");
    const operationName = "createEmailDomain";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/CreateEmailDomain";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createEmailDomainRequest.opcRequestId,
      "opc-retry-token": createEmailDomainRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createEmailDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailDomains",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createEmailDomainRequest.createEmailDomainDetails,
        "CreateEmailDomainDetails",
        model.CreateEmailDomainDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateEmailDomainResponse>{},
        body: await response.json(),
        bodyKey: "emailDomain",
        bodyModel: model.EmailDomain,
        type: "model.EmailDomain",
        responseHeaders: [
          {
            value: response.headers.get("Content-Location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new email return path. Avoid entering confidential information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateEmailReturnPathRequest
   * @return CreateEmailReturnPathResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/CreateEmailReturnPath.ts.html |here} to see how to use CreateEmailReturnPath API.
   */
  public async createEmailReturnPath(
    createEmailReturnPathRequest: requests.CreateEmailReturnPathRequest
  ): Promise<responses.CreateEmailReturnPathResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#createEmailReturnPath.");
    const operationName = "createEmailReturnPath";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailReturnPath/CreateEmailReturnPath";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createEmailReturnPathRequest.opcRequestId,
      "opc-retry-token": createEmailReturnPathRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createEmailReturnPathRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailReturnPaths",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createEmailReturnPathRequest.createEmailReturnPathDetails,
        "CreateEmailReturnPathDetails",
        model.CreateEmailReturnPathDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateEmailReturnPathResponse>{},
        body: await response.json(),
        bodyKey: "emailReturnPath",
        bodyModel: model.EmailReturnPath,
        type: "model.EmailReturnPath",
        responseHeaders: [
          {
            value: response.headers.get("Content-Location"),
            key: "contentLocation",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a sender for a tenancy in a given compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateSenderRequest
   * @return CreateSenderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/CreateSender.ts.html |here} to see how to use CreateSender API.
   */
  public async createSender(
    createSenderRequest: requests.CreateSenderRequest
  ): Promise<responses.CreateSenderResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#createSender.");
    const operationName = "createSender";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/CreateSender";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createSenderRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSenderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/senders",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSenderRequest.createSenderDetails,
        "CreateSenderDetails",
        model.CreateSenderDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSenderResponse>{},
        body: await response.json(),
        bodyKey: "sender",
        bodyModel: model.Sender,
        type: "model.Sender",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds recipient email addresses to the suppression list for a tenancy.
   * Addresses added to the suppression list via the API are denoted as
   * \"MANUAL\" in the `reason` field. *Note:* All email addresses added to the
   * suppression list are normalized to include only lowercase letters.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateSuppressionRequest
   * @return CreateSuppressionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/CreateSuppression.ts.html |here} to see how to use CreateSuppression API.
   */
  public async createSuppression(
    createSuppressionRequest: requests.CreateSuppressionRequest
  ): Promise<responses.CreateSuppressionResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#createSuppression.");
    const operationName = "createSuppression";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Suppression/CreateSuppression";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createSuppressionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSuppressionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/suppressions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSuppressionRequest.createSuppressionDetails,
        "CreateSuppressionDetails",
        model.CreateSuppressionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSuppressionResponse>{},
        body: await response.json(),
        bodyKey: "suppression",
        bodyModel: model.Suppression,
        type: "model.Suppression",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a DKIM.
   * If this key is currently the active key for the email domain, deleting the key
   * will stop signing the domain's outgoing mail.
   * DKIM keys are left in DELETING state for about a day to allow DKIM signatures on
   * in-transit mail to be validated.
   * Consider creating a new DKIM for this domain so the signing can be rotated to it instead of deletion.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDkimRequest
   * @return DeleteDkimResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/DeleteDkim.ts.html |here} to see how to use DeleteDkim API.
   */
  public async deleteDkim(
    deleteDkimRequest: requests.DeleteDkimRequest
  ): Promise<responses.DeleteDkimResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#deleteDkim.");
    const operationName = "deleteDkim";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Dkim/DeleteDkim";
    const pathParams = {
      "{dkimId}": deleteDkimRequest.dkimId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDkimRequest.ifMatch,
      "opc-request-id": deleteDkimRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDkimRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dkims/{dkimId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDkimResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an email domain.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteEmailDomainRequest
   * @return DeleteEmailDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/DeleteEmailDomain.ts.html |here} to see how to use DeleteEmailDomain API.
   */
  public async deleteEmailDomain(
    deleteEmailDomainRequest: requests.DeleteEmailDomainRequest
  ): Promise<responses.DeleteEmailDomainResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#deleteEmailDomain.");
    const operationName = "deleteEmailDomain";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/DeleteEmailDomain";
    const pathParams = {
      "{emailDomainId}": deleteEmailDomainRequest.emailDomainId
    };

    const queryParams = {
      "isLockOverride": deleteEmailDomainRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteEmailDomainRequest.ifMatch,
      "opc-request-id": deleteEmailDomainRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteEmailDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailDomains/{emailDomainId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteEmailDomainResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an email return path.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteEmailReturnPathRequest
   * @return DeleteEmailReturnPathResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/DeleteEmailReturnPath.ts.html |here} to see how to use DeleteEmailReturnPath API.
   */
  public async deleteEmailReturnPath(
    deleteEmailReturnPathRequest: requests.DeleteEmailReturnPathRequest
  ): Promise<responses.DeleteEmailReturnPathResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#deleteEmailReturnPath.");
    const operationName = "deleteEmailReturnPath";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailReturnPath/DeleteEmailReturnPath";
    const pathParams = {
      "{emailReturnPathId}": deleteEmailReturnPathRequest.emailReturnPathId
    };

    const queryParams = {
      "isLockOverride": deleteEmailReturnPathRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteEmailReturnPathRequest.ifMatch,
      "opc-request-id": deleteEmailReturnPathRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteEmailReturnPathRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailReturnPaths/{emailReturnPathId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteEmailReturnPathResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an approved sender for a tenancy in a given compartment for a
   * provided `senderId`.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteSenderRequest
   * @return DeleteSenderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/DeleteSender.ts.html |here} to see how to use DeleteSender API.
   */
  public async deleteSender(
    deleteSenderRequest: requests.DeleteSenderRequest
  ): Promise<responses.DeleteSenderResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#deleteSender.");
    const operationName = "deleteSender";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/DeleteSender";
    const pathParams = {
      "{senderId}": deleteSenderRequest.senderId
    };

    const queryParams = {
      "isLockOverride": deleteSenderRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSenderRequest.ifMatch,
      "opc-request-id": deleteSenderRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSenderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/senders/{senderId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSenderResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a suppressed recipient email address from the suppression list
   * for a tenancy in a given compartment for a provided `suppressionId`.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteSuppressionRequest
   * @return DeleteSuppressionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/DeleteSuppression.ts.html |here} to see how to use DeleteSuppression API.
   */
  public async deleteSuppression(
    deleteSuppressionRequest: requests.DeleteSuppressionRequest
  ): Promise<responses.DeleteSuppressionResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#deleteSuppression.");
    const operationName = "deleteSuppression";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Suppression/DeleteSuppression";
    const pathParams = {
      "{suppressionId}": deleteSuppressionRequest.suppressionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteSuppressionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSuppressionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/suppressions/{suppressionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSuppressionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the specified DKIM.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDkimRequest
   * @return GetDkimResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetDkim.ts.html |here} to see how to use GetDkim API.
   */
  public async getDkim(
    getDkimRequest: requests.GetDkimRequest
  ): Promise<responses.GetDkimResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#getDkim.");
    const operationName = "getDkim";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Dkim/GetDkim";
    const pathParams = {
      "{dkimId}": getDkimRequest.dkimId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDkimRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDkimRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dkims/{dkimId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDkimResponse>{},
        body: await response.json(),
        bodyKey: "dkim",
        bodyModel: model.Dkim,
        type: "model.Dkim",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns  email configuration associated with the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetEmailConfigurationRequest
   * @return GetEmailConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetEmailConfiguration.ts.html |here} to see how to use GetEmailConfiguration API.
   */
  public async getEmailConfiguration(
    getEmailConfigurationRequest: requests.GetEmailConfigurationRequest
  ): Promise<responses.GetEmailConfigurationResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#getEmailConfiguration.");
    const operationName = "getEmailConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Configuration/GetEmailConfiguration";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getEmailConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getEmailConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getEmailConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetEmailConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "configuration",
        bodyModel: model.Configuration,
        type: "model.Configuration",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the specified email domain.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetEmailDomainRequest
   * @return GetEmailDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetEmailDomain.ts.html |here} to see how to use GetEmailDomain API.
   */
  public async getEmailDomain(
    getEmailDomainRequest: requests.GetEmailDomainRequest
  ): Promise<responses.GetEmailDomainResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#getEmailDomain.");
    const operationName = "getEmailDomain";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/GetEmailDomain";
    const pathParams = {
      "{emailDomainId}": getEmailDomainRequest.emailDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getEmailDomainRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getEmailDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailDomains/{emailDomainId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetEmailDomainResponse>{},
        body: await response.json(),
        bodyKey: "emailDomain",
        bodyModel: model.EmailDomain,
        type: "model.EmailDomain",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the specified email return path.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetEmailReturnPathRequest
   * @return GetEmailReturnPathResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetEmailReturnPath.ts.html |here} to see how to use GetEmailReturnPath API.
   */
  public async getEmailReturnPath(
    getEmailReturnPathRequest: requests.GetEmailReturnPathRequest
  ): Promise<responses.GetEmailReturnPathResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#getEmailReturnPath.");
    const operationName = "getEmailReturnPath";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailReturnPath/GetEmailReturnPath";
    const pathParams = {
      "{emailReturnPathId}": getEmailReturnPathRequest.emailReturnPathId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getEmailReturnPathRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getEmailReturnPathRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailReturnPaths/{emailReturnPathId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetEmailReturnPathResponse>{},
        body: await response.json(),
        bodyKey: "emailReturnPath",
        bodyModel: model.EmailReturnPath,
        type: "model.EmailReturnPath",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets an approved sender for a given `senderId`.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSenderRequest
   * @return GetSenderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetSender.ts.html |here} to see how to use GetSender API.
   */
  public async getSender(
    getSenderRequest: requests.GetSenderRequest
  ): Promise<responses.GetSenderResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#getSender.");
    const operationName = "getSender";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/GetSender";
    const pathParams = {
      "{senderId}": getSenderRequest.senderId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSenderRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSenderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/senders/{senderId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSenderResponse>{},
        body: await response.json(),
        bodyKey: "sender",
        bodyModel: model.Sender,
        type: "model.Sender",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of a suppressed recipient email address for a given
   * `suppressionId`. Each suppression is given a unique OCID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSuppressionRequest
   * @return GetSuppressionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetSuppression.ts.html |here} to see how to use GetSuppression API.
   */
  public async getSuppression(
    getSuppressionRequest: requests.GetSuppressionRequest
  ): Promise<responses.GetSuppressionResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#getSuppression.");
    const operationName = "getSuppression";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Suppression/GetSuppression";
    const pathParams = {
      "{suppressionId}": getSuppressionRequest.suppressionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSuppressionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSuppressionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/suppressions/{suppressionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSuppressionResponse>{},
        body: await response.json(),
        bodyKey: "suppression",
        bodyModel: model.Suppression,
        type: "model.Suppression",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request with the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists DKIMs for an email domain.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDkimsRequest
   * @return ListDkimsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListDkims.ts.html |here} to see how to use ListDkims API.
   */
  public async listDkims(
    listDkimsRequest: requests.ListDkimsRequest
  ): Promise<responses.ListDkimsResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#listDkims.");
    const operationName = "listDkims";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Dkim/ListDkims";
    const pathParams = {};

    const queryParams = {
      "emailDomainId": listDkimsRequest.emailDomainId,
      "id": listDkimsRequest.id,
      "name": listDkimsRequest.name,
      "limit": listDkimsRequest.limit,
      "page": listDkimsRequest.page,
      "sortOrder": listDkimsRequest.sortOrder,
      "lifecycleState": listDkimsRequest.lifecycleState,
      "sortBy": listDkimsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDkimsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDkimsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dkims",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDkimsResponse>{},
        body: await response.json(),
        bodyKey: "dkimCollection",
        bodyModel: model.DkimCollection,
        type: "model.DkimCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists email domains in the specified compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListEmailDomainsRequest
   * @return ListEmailDomainsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListEmailDomains.ts.html |here} to see how to use ListEmailDomains API.
   */
  public async listEmailDomains(
    listEmailDomainsRequest: requests.ListEmailDomainsRequest
  ): Promise<responses.ListEmailDomainsResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#listEmailDomains.");
    const operationName = "listEmailDomains";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/ListEmailDomains";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listEmailDomainsRequest.compartmentId,
      "id": listEmailDomainsRequest.id,
      "name": listEmailDomainsRequest.name,
      "limit": listEmailDomainsRequest.limit,
      "page": listEmailDomainsRequest.page,
      "sortOrder": listEmailDomainsRequest.sortOrder,
      "lifecycleState": listEmailDomainsRequest.lifecycleState,
      "sortBy": listEmailDomainsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listEmailDomainsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listEmailDomainsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailDomains",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEmailDomainsResponse>{},
        body: await response.json(),
        bodyKey: "emailDomainCollection",
        bodyModel: model.EmailDomainCollection,
        type: "model.EmailDomainCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists email return paths in the specified compartment or emaildomain.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListEmailReturnPathsRequest
   * @return ListEmailReturnPathsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListEmailReturnPaths.ts.html |here} to see how to use ListEmailReturnPaths API.
   */
  public async listEmailReturnPaths(
    listEmailReturnPathsRequest: requests.ListEmailReturnPathsRequest
  ): Promise<responses.ListEmailReturnPathsResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#listEmailReturnPaths.");
    const operationName = "listEmailReturnPaths";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailReturnPath/ListEmailReturnPaths";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listEmailReturnPathsRequest.compartmentId,
      "parentResourceId": listEmailReturnPathsRequest.parentResourceId,
      "id": listEmailReturnPathsRequest.id,
      "name": listEmailReturnPathsRequest.name,
      "limit": listEmailReturnPathsRequest.limit,
      "page": listEmailReturnPathsRequest.page,
      "sortOrder": listEmailReturnPathsRequest.sortOrder,
      "lifecycleState": listEmailReturnPathsRequest.lifecycleState,
      "sortBy": listEmailReturnPathsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listEmailReturnPathsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listEmailReturnPathsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailReturnPaths",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEmailReturnPathsResponse>{},
        body: await response.json(),
        bodyKey: "emailReturnPathCollection",
        bodyModel: model.EmailReturnPathCollection,
        type: "model.EmailReturnPathCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a collection of approved sender email addresses and sender IDs.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSendersRequest
   * @return ListSendersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListSenders.ts.html |here} to see how to use ListSenders API.
   */
  public async listSenders(
    listSendersRequest: requests.ListSendersRequest
  ): Promise<responses.ListSendersResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#listSenders.");
    const operationName = "listSenders";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/ListSenders";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSendersRequest.compartmentId,
      "lifecycleState": listSendersRequest.lifecycleState,
      "domain": listSendersRequest.domain,
      "emailAddress": listSendersRequest.emailAddress,
      "page": listSendersRequest.page,
      "limit": listSendersRequest.limit,
      "sortBy": listSendersRequest.sortBy,
      "sortOrder": listSendersRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSendersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSendersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/senders",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSendersResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SenderSummary,
        type: "Array<model.SenderSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSendersRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SenderSummary objects
   * contained in responses from the listSenders operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSenders(
    request: requests.ListSendersRequest
  ): AsyncIterableIterator<model.SenderSummary> {
    return paginateRecords(request, req => this.listSenders(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSendersResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSenders operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSendersResponses(
    request: requests.ListSendersRequest
  ): AsyncIterableIterator<responses.ListSendersResponse> {
    return paginateResponses(request, req => this.listSenders(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SenderSummary objects
   * contained in responses from the listSenders operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSendersRecordIterator(
    request: requests.ListSendersRequest
  ): AsyncIterableIterator<model.SenderSummary> {
    return paginateRecords(request, req => this.listSenders(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSenders operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSendersResponseIterator(
    request: requests.ListSendersRequest
  ): AsyncIterableIterator<responses.ListSendersResponse> {
    return paginateResponses(request, req => this.listSenders(req));
  }

  /**
   * Gets a list of suppressed recipient email addresses for a user. The
   * `compartmentId` for suppressions must be a tenancy OCID. The returned list
   * is sorted by creation time in descending order.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSuppressionsRequest
   * @return ListSuppressionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListSuppressions.ts.html |here} to see how to use ListSuppressions API.
   */
  public async listSuppressions(
    listSuppressionsRequest: requests.ListSuppressionsRequest
  ): Promise<responses.ListSuppressionsResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#listSuppressions.");
    const operationName = "listSuppressions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Suppression/ListSuppressions";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSuppressionsRequest.compartmentId,
      "emailAddress": listSuppressionsRequest.emailAddress,
      "timeCreatedGreaterThanOrEqualTo": listSuppressionsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listSuppressionsRequest.timeCreatedLessThan,
      "page": listSuppressionsRequest.page,
      "limit": listSuppressionsRequest.limit,
      "sortBy": listSuppressionsRequest.sortBy,
      "sortOrder": listSuppressionsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSuppressionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSuppressionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/suppressions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSuppressionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SuppressionSummary,
        type: "Array<model.SuppressionSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSuppressionsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SuppressionSummary objects
   * contained in responses from the listSuppressions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSuppressions(
    request: requests.ListSuppressionsRequest
  ): AsyncIterableIterator<model.SuppressionSummary> {
    return paginateRecords(request, req => this.listSuppressions(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSuppressionsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSuppressions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSuppressionsResponses(
    request: requests.ListSuppressionsRequest
  ): AsyncIterableIterator<responses.ListSuppressionsResponse> {
    return paginateResponses(request, req => this.listSuppressions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SuppressionSummary objects
   * contained in responses from the listSuppressions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSuppressionsRecordIterator(
    request: requests.ListSuppressionsRequest
  ): AsyncIterableIterator<model.SuppressionSummary> {
    return paginateRecords(request, req => this.listSuppressions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSuppressions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSuppressionsResponseIterator(
    request: requests.ListSuppressionsRequest
  ): AsyncIterableIterator<responses.ListSuppressionsResponse> {
    return paginateResponses(request, req => this.listSuppressions(req));
  }

  /**
   * Return a (paginated) list of errors for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/WorkRequestErrorCollection/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of logs for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/WorkRequestLogEntryCollection/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/WorkRequestSummaryCollection/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove a lock to a resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveEmailDomainLockRequest
   * @return RemoveEmailDomainLockResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/RemoveEmailDomainLock.ts.html |here} to see how to use RemoveEmailDomainLock API.
   */
  public async removeEmailDomainLock(
    removeEmailDomainLockRequest: requests.RemoveEmailDomainLockRequest
  ): Promise<responses.RemoveEmailDomainLockResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#removeEmailDomainLock.");
    const operationName = "removeEmailDomainLock";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/RemoveEmailDomainLock";
    const pathParams = {
      "{emailDomainId}": removeEmailDomainLockRequest.emailDomainId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeEmailDomainLockRequest.opcRequestId,
      "if-match": removeEmailDomainLockRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeEmailDomainLockRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailDomains/{emailDomainId}/actions/removeLock",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeEmailDomainLockRequest.removeLockDetails,
        "RemoveLockDetails",
        model.RemoveLockDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveEmailDomainLockResponse>{},
        body: await response.json(),
        bodyKey: "emailDomain",
        bodyModel: model.EmailDomain,
        type: "model.EmailDomain",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove a lock to a resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveReturnPathLockRequest
   * @return RemoveReturnPathLockResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/RemoveReturnPathLock.ts.html |here} to see how to use RemoveReturnPathLock API.
   */
  public async removeReturnPathLock(
    removeReturnPathLockRequest: requests.RemoveReturnPathLockRequest
  ): Promise<responses.RemoveReturnPathLockResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#removeReturnPathLock.");
    const operationName = "removeReturnPathLock";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailReturnPath/RemoveReturnPathLock";
    const pathParams = {
      "{emailReturnPathId}": removeReturnPathLockRequest.emailReturnPathId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeReturnPathLockRequest.opcRequestId,
      "if-match": removeReturnPathLockRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeReturnPathLockRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailReturnPaths/{emailReturnPathId}/actions/removeLock",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeReturnPathLockRequest.removeLockDetails,
        "RemoveLockDetails",
        model.RemoveLockDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveReturnPathLockResponse>{},
        body: await response.json(),
        bodyKey: "emailReturnPath",
        bodyModel: model.EmailReturnPath,
        type: "model.EmailReturnPath",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove a lock to a resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveSenderLockRequest
   * @return RemoveSenderLockResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/RemoveSenderLock.ts.html |here} to see how to use RemoveSenderLock API.
   */
  public async removeSenderLock(
    removeSenderLockRequest: requests.RemoveSenderLockRequest
  ): Promise<responses.RemoveSenderLockResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#removeSenderLock.");
    const operationName = "removeSenderLock";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/RemoveSenderLock";
    const pathParams = {
      "{senderId}": removeSenderLockRequest.senderId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeSenderLockRequest.opcRequestId,
      "if-match": removeSenderLockRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeSenderLockRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/senders/{senderId}/actions/removeLock",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeSenderLockRequest.removeLockDetails,
        "RemoveLockDetails",
        model.RemoveLockDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveSenderLockResponse>{},
        body: await response.json(),
        bodyKey: "sender",
        bodyModel: model.Sender,
        type: "model.Sender",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies a DKIM.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDkimRequest
   * @return UpdateDkimResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/UpdateDkim.ts.html |here} to see how to use UpdateDkim API.
   */
  public async updateDkim(
    updateDkimRequest: requests.UpdateDkimRequest
  ): Promise<responses.UpdateDkimResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#updateDkim.");
    const operationName = "updateDkim";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Dkim/UpdateDkim";
    const pathParams = {
      "{dkimId}": updateDkimRequest.dkimId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDkimRequest.ifMatch,
      "opc-request-id": updateDkimRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDkimRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dkims/{dkimId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDkimRequest.updateDkimDetails,
        "UpdateDkimDetails",
        model.UpdateDkimDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDkimResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies an email domain.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateEmailDomainRequest
   * @return UpdateEmailDomainResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/UpdateEmailDomain.ts.html |here} to see how to use UpdateEmailDomain API.
   */
  public async updateEmailDomain(
    updateEmailDomainRequest: requests.UpdateEmailDomainRequest
  ): Promise<responses.UpdateEmailDomainResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#updateEmailDomain.");
    const operationName = "updateEmailDomain";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/UpdateEmailDomain";
    const pathParams = {
      "{emailDomainId}": updateEmailDomainRequest.emailDomainId
    };

    const queryParams = {
      "isLockOverride": updateEmailDomainRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateEmailDomainRequest.ifMatch,
      "opc-request-id": updateEmailDomainRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateEmailDomainRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailDomains/{emailDomainId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateEmailDomainRequest.updateEmailDomainDetails,
        "UpdateEmailDomainDetails",
        model.UpdateEmailDomainDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateEmailDomainResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies an email return path.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateEmailReturnPathRequest
   * @return UpdateEmailReturnPathResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/UpdateEmailReturnPath.ts.html |here} to see how to use UpdateEmailReturnPath API.
   */
  public async updateEmailReturnPath(
    updateEmailReturnPathRequest: requests.UpdateEmailReturnPathRequest
  ): Promise<responses.UpdateEmailReturnPathResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#updateEmailReturnPath.");
    const operationName = "updateEmailReturnPath";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailReturnPath/UpdateEmailReturnPath";
    const pathParams = {
      "{emailReturnPathId}": updateEmailReturnPathRequest.emailReturnPathId
    };

    const queryParams = {
      "isLockOverride": updateEmailReturnPathRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateEmailReturnPathRequest.ifMatch,
      "opc-request-id": updateEmailReturnPathRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateEmailReturnPathRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/emailReturnPaths/{emailReturnPathId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateEmailReturnPathRequest.updateEmailReturnPathDetails,
        "UpdateEmailReturnPathDetails",
        model.UpdateEmailReturnPathDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateEmailReturnPathResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replaces the set of tags for a sender with the tags provided. If either freeform
   * or defined tags are omitted, the tags for that set remain the same. Each set must
   * include the full set of tags for the sender, partial updates are not permitted.
   * For more information about tagging, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateSenderRequest
   * @return UpdateSenderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/UpdateSender.ts.html |here} to see how to use UpdateSender API.
   */
  public async updateSender(
    updateSenderRequest: requests.UpdateSenderRequest
  ): Promise<responses.UpdateSenderResponse> {
    if (this.logger) this.logger.debug("Calling operation EmailClient#updateSender.");
    const operationName = "updateSender";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/UpdateSender";
    const pathParams = {
      "{senderId}": updateSenderRequest.senderId
    };

    const queryParams = {
      "isLockOverride": updateSenderRequest.isLockOverride
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSenderRequest.ifMatch,
      "opc-request-id": updateSenderRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSenderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/senders/{senderId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSenderRequest.updateSenderDetails,
        "UpdateSenderDetails",
        model.UpdateSenderDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSenderResponse>{},
        body: await response.json(),
        bodyKey: "sender",
        bodyModel: model.Sender,
        type: "model.Sender",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
