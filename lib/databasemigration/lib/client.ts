/**
 * Database Migration API
 * Use the Oracle Cloud Infrastructure Database Migration APIs to perform database migration operations.
 * OpenAPI spec version: 20230518
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { DatabaseMigrationWaiter } from "./databasemigration-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DatabaseMigrationApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DatabaseMigrationClient {
  protected static serviceEndpointTemplate = "https://odms.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DatabaseMigrationWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "DatabaseMigration";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("databasemigration")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("databasemigration");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20230518";
    if (this.logger) this.logger.info(`DatabaseMigrationClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        DatabaseMigrationClient.serviceEndpointTemplate,
        this._region,
        DatabaseMigrationClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        DatabaseMigrationClient.serviceEndpointTemplate,
        this._regionId,
        DatabaseMigrationClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DatabaseMigrationClient.serviceEndpointTemplate,
      region,
      DatabaseMigrationClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DatabaseMigrationClient.serviceEndpointTemplate,
      regionId,
      DatabaseMigrationClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new DatabaseMigrationWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DatabaseMigrationWaiter {
    this._waiters = new DatabaseMigrationWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DatabaseMigrationWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Aborts a Migration Job (either Evaluation or Migration).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AbortJobRequest
   * @return AbortJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/AbortJob.ts.html |here} to see how to use AbortJob API.
   */
  public async abortJob(
    abortJobRequest: requests.AbortJobRequest
  ): Promise<responses.AbortJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#abortJob.");
    const operationName = "abortJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/AbortJob";
    const pathParams = {
      "{jobId}": abortJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": abortJobRequest.ifMatch,
      "opc-retry-token": abortJobRequest.opcRetryToken,
      "opc-request-id": abortJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      abortJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/actions/abort",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AbortJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add excluded/included object to the list.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AddMigrationObjectsRequest
   * @return AddMigrationObjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/AddMigrationObjects.ts.html |here} to see how to use AddMigrationObjects API.
   */
  public async addMigrationObjects(
    addMigrationObjectsRequest: requests.AddMigrationObjectsRequest
  ): Promise<responses.AddMigrationObjectsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#addMigrationObjects.");
    const operationName = "addMigrationObjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Migration/AddMigrationObjects";
    const pathParams = {
      "{migrationId}": addMigrationObjectsRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addMigrationObjectsRequest.opcRequestId,
      "if-match": addMigrationObjectsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addMigrationObjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}/actions/addMigrationObjects",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addMigrationObjectsRequest.addMigrationObjectsDetails,
        "MigrationObjectCollection",
        model.MigrationObjectCollection.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddMigrationObjectsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Used to change the Database Connection compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeConnectionCompartmentRequest
   * @return ChangeConnectionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ChangeConnectionCompartment.ts.html |here} to see how to use ChangeConnectionCompartment API.
   */
  public async changeConnectionCompartment(
    changeConnectionCompartmentRequest: requests.ChangeConnectionCompartmentRequest
  ): Promise<responses.ChangeConnectionCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#changeConnectionCompartment.");
    const operationName = "changeConnectionCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Connection/ChangeConnectionCompartment";
    const pathParams = {
      "{connectionId}": changeConnectionCompartmentRequest.connectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeConnectionCompartmentRequest.opcRetryToken,
      "opc-request-id": changeConnectionCompartmentRequest.opcRequestId,
      "if-match": changeConnectionCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeConnectionCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeConnectionCompartmentRequest.changeConnectionCompartmentDetails,
        "ChangeConnectionCompartmentDetails",
        model.ChangeConnectionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeConnectionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Used to change the Migration compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeMigrationCompartmentRequest
   * @return ChangeMigrationCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ChangeMigrationCompartment.ts.html |here} to see how to use ChangeMigrationCompartment API.
   */
  public async changeMigrationCompartment(
    changeMigrationCompartmentRequest: requests.ChangeMigrationCompartmentRequest
  ): Promise<responses.ChangeMigrationCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#changeMigrationCompartment.");
    const operationName = "changeMigrationCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Migration/ChangeMigrationCompartment";
    const pathParams = {
      "{migrationId}": changeMigrationCompartmentRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeMigrationCompartmentRequest.opcRetryToken,
      "opc-request-id": changeMigrationCompartmentRequest.opcRequestId,
      "if-match": changeMigrationCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeMigrationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeMigrationCompartmentRequest.changeMigrationCompartmentDetails,
        "ChangeMigrationCompartmentDetails",
        model.ChangeMigrationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeMigrationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Clone a configuration from an existing Migration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CloneMigrationRequest
   * @return CloneMigrationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/CloneMigration.ts.html |here} to see how to use CloneMigration API.
   */
  public async cloneMigration(
    cloneMigrationRequest: requests.CloneMigrationRequest
  ): Promise<responses.CloneMigrationResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#cloneMigration.");
    const operationName = "cloneMigration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Migration/CloneMigration";
    const pathParams = {
      "{migrationId}": cloneMigrationRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cloneMigrationRequest.ifMatch,
      "opc-retry-token": cloneMigrationRequest.opcRetryToken,
      "opc-request-id": cloneMigrationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cloneMigrationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}/actions/clone",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        cloneMigrationRequest.cloneMigrationDetails,
        "CloneMigrationDetails",
        model.CloneMigrationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CloneMigrationResponse>{},
        body: await response.json(),
        bodyKey: "migration",
        bodyModel: model.Migration,
        type: "model.Migration",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Perform connection test for a database connection.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ConnectionDiagnosticsRequest
   * @return ConnectionDiagnosticsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ConnectionDiagnostics.ts.html |here} to see how to use ConnectionDiagnostics API.
   */
  public async connectionDiagnostics(
    connectionDiagnosticsRequest: requests.ConnectionDiagnosticsRequest
  ): Promise<responses.ConnectionDiagnosticsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#connectionDiagnostics.");
    const operationName = "connectionDiagnostics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Connection/ConnectionDiagnostics";
    const pathParams = {
      "{connectionId}": connectionDiagnosticsRequest.connectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": connectionDiagnosticsRequest.ifMatch,
      "opc-request-id": connectionDiagnosticsRequest.opcRequestId,
      "opc-retry-token": connectionDiagnosticsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      connectionDiagnosticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}/actions/diagnostics",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ConnectionDiagnosticsResponse>{},
        body: await response.json(),
        bodyKey: "diagnosticsResult",
        bodyModel: model.DiagnosticsResult,
        type: "model.DiagnosticsResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a Database Connection resource that contains the details to connect to either a Source or Target Database
   * in the migration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateConnectionRequest
   * @return CreateConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/CreateConnection.ts.html |here} to see how to use CreateConnection API.
   */
  public async createConnection(
    createConnectionRequest: requests.CreateConnectionRequest
  ): Promise<responses.CreateConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#createConnection.");
    const operationName = "createConnection";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createConnectionRequest.opcRetryToken,
      "opc-request-id": createConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createConnectionRequest.createConnectionDetails,
        "CreateConnectionDetails",
        model.CreateConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a Migration resource that contains all the details to perform the
   * database migration operation, such as source and destination database
   * details, credentials, etc.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateMigrationRequest
   * @return CreateMigrationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/CreateMigration.ts.html |here} to see how to use CreateMigration API.
   */
  public async createMigration(
    createMigrationRequest: requests.CreateMigrationRequest
  ): Promise<responses.CreateMigrationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#createMigration.");
    const operationName = "createMigration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Migration/CreateMigration";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createMigrationRequest.opcRetryToken,
      "opc-request-id": createMigrationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMigrationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMigrationRequest.createMigrationDetails,
        "CreateMigrationDetails",
        model.CreateMigrationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMigrationResponse>{},
        body: await response.json(),
        bodyKey: "migration",
        bodyModel: model.Migration,
        type: "model.Migration",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new version of the current parameter file contents to the specified value.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateParameterFileVersionRequest
   * @return CreateParameterFileVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/CreateParameterFileVersion.ts.html |here} to see how to use CreateParameterFileVersion API.
   */
  public async createParameterFileVersion(
    createParameterFileVersionRequest: requests.CreateParameterFileVersionRequest
  ): Promise<responses.CreateParameterFileVersionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#createParameterFileVersion.");
    const operationName = "createParameterFileVersion";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/CreateParameterFileVersion";
    const pathParams = {
      "{jobId}": createParameterFileVersionRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": createParameterFileVersionRequest.ifMatch,
      "opc-retry-token": createParameterFileVersionRequest.opcRetryToken,
      "opc-request-id": createParameterFileVersionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createParameterFileVersionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/parameterFileVersions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createParameterFileVersionRequest.createParameterFileVersionDetails,
        "CreateParameterFileVersionDetails",
        model.CreateParameterFileVersionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateParameterFileVersionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the Database Connection represented by the specified connection ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteConnectionRequest
   * @return DeleteConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/DeleteConnection.ts.html |here} to see how to use DeleteConnection API.
   */
  public async deleteConnection(
    deleteConnectionRequest: requests.DeleteConnectionRequest
  ): Promise<responses.DeleteConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#deleteConnection.");
    const operationName = "deleteConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Connection/DeleteConnection";
    const pathParams = {
      "{connectionId}": deleteConnectionRequest.connectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteConnectionRequest.opcRequestId,
      "if-match": deleteConnectionRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the migration job represented by the given job ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteJobRequest
   * @return DeleteJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/DeleteJob.ts.html |here} to see how to use DeleteJob API.
   */
  public async deleteJob(
    deleteJobRequest: requests.DeleteJobRequest
  ): Promise<responses.DeleteJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#deleteJob.");
    const operationName = "deleteJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/DeleteJob";
    const pathParams = {
      "{jobId}": deleteJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteJobRequest.opcRequestId,
      "if-match": deleteJobRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the Migration represented by the specified migration ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteMigrationRequest
   * @return DeleteMigrationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/DeleteMigration.ts.html |here} to see how to use DeleteMigration API.
   */
  public async deleteMigration(
    deleteMigrationRequest: requests.DeleteMigrationRequest
  ): Promise<responses.DeleteMigrationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#deleteMigration.");
    const operationName = "deleteMigration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Migration/DeleteMigration";
    const pathParams = {
      "{migrationId}": deleteMigrationRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteMigrationRequest.opcRequestId,
      "if-match": deleteMigrationRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMigrationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMigrationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the given parameter file version
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteParameterFileVersionRequest
   * @return DeleteParameterFileVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/DeleteParameterFileVersion.ts.html |here} to see how to use DeleteParameterFileVersion API.
   */
  public async deleteParameterFileVersion(
    deleteParameterFileVersionRequest: requests.DeleteParameterFileVersionRequest
  ): Promise<responses.DeleteParameterFileVersionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#deleteParameterFileVersion.");
    const operationName = "deleteParameterFileVersion";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/DeleteParameterFileVersion";
    const pathParams = {
      "{jobId}": deleteParameterFileVersionRequest.jobId,
      "{parameterFileName}": deleteParameterFileVersionRequest.parameterFileName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteParameterFileVersionRequest.opcRequestId,
      "if-match": deleteParameterFileVersionRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteParameterFileVersionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/parameterFileVersions/{parameterFileName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteParameterFileVersionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Start Validate Migration job.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param EvaluateMigrationRequest
   * @return EvaluateMigrationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/EvaluateMigration.ts.html |here} to see how to use EvaluateMigration API.
   */
  public async evaluateMigration(
    evaluateMigrationRequest: requests.EvaluateMigrationRequest
  ): Promise<responses.EvaluateMigrationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#evaluateMigration.");
    const operationName = "evaluateMigration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/EvaluateMigration";
    const pathParams = {
      "{migrationId}": evaluateMigrationRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": evaluateMigrationRequest.ifMatch,
      "opc-retry-token": evaluateMigrationRequest.opcRetryToken,
      "opc-request-id": evaluateMigrationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      evaluateMigrationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}/actions/validate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.EvaluateMigrationResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the Pre-Migration Advisor report details
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAdvisorReportRequest
   * @return GetAdvisorReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/GetAdvisorReport.ts.html |here} to see how to use GetAdvisorReport API.
   */
  public async getAdvisorReport(
    getAdvisorReportRequest: requests.GetAdvisorReportRequest
  ): Promise<responses.GetAdvisorReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#getAdvisorReport.");
    const operationName = "getAdvisorReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/GetAdvisorReport";
    const pathParams = {
      "{jobId}": getAdvisorReportRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAdvisorReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAdvisorReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/advisorReport",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAdvisorReportResponse>{},
        body: await response.json(),
        bodyKey: "advisorReport",
        bodyModel: model.AdvisorReport,
        type: "model.AdvisorReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Display Database Connection details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetConnectionRequest
   * @return GetConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/GetConnection.ts.html |here} to see how to use GetConnection API.
   */
  public async getConnection(
    getConnectionRequest: requests.GetConnectionRequest
  ): Promise<responses.GetConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#getConnection.");
    const operationName = "getConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Connection/GetConnection";
    const pathParams = {
      "{connectionId}": getConnectionRequest.connectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a migration job.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJobRequest
   * @return GetJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/GetJob.ts.html |here} to see how to use GetJob API.
   */
  public async getJob(getJobRequest: requests.GetJobRequest): Promise<responses.GetJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#getJob.");
    const operationName = "getJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/GetJob";
    const pathParams = {
      "{jobId}": getJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the migration Job Output content as a String.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJobOutputContentRequest
   * @return GetJobOutputContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/GetJobOutputContent.ts.html |here} to see how to use GetJobOutputContent API.
   */
  public async getJobOutputContent(
    getJobOutputContentRequest: requests.GetJobOutputContentRequest
  ): Promise<responses.GetJobOutputContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#getJobOutputContent.");
    const operationName = "getJobOutputContent";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/GetJobOutputContent";
    const pathParams = {
      "{jobId}": getJobOutputContentRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobOutputContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJobOutputContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/output/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobOutputContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Display Migration details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMigrationRequest
   * @return GetMigrationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/GetMigration.ts.html |here} to see how to use GetMigration API.
   */
  public async getMigration(
    getMigrationRequest: requests.GetMigrationRequest
  ): Promise<responses.GetMigrationResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#getMigration.");
    const operationName = "getMigration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Migration/GetMigration";
    const pathParams = {
      "{migrationId}": getMigrationRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMigrationRequest.opcRequestId,
      "if-match": getMigrationRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMigrationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMigrationResponse>{},
        body: await response.json(),
        bodyKey: "migration",
        bodyModel: model.Migration,
        type: "model.Migration",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Obtain the parameter file version contents for the specified parameter file name and the associated job. This operation will
   * be allowed only if the job is certain acceptable lifecycle states.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetParameterFileVersionRequest
   * @return GetParameterFileVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/GetParameterFileVersion.ts.html |here} to see how to use GetParameterFileVersion API.
   */
  public async getParameterFileVersion(
    getParameterFileVersionRequest: requests.GetParameterFileVersionRequest
  ): Promise<responses.GetParameterFileVersionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#getParameterFileVersion.");
    const operationName = "getParameterFileVersion";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/GetParameterFileVersion";
    const pathParams = {
      "{parameterFileName}": getParameterFileVersionRequest.parameterFileName,
      "{jobId}": getParameterFileVersionRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getParameterFileVersionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getParameterFileVersionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/parameterFileVersions/{parameterFileName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetParameterFileVersionResponse>{},
        body: await response.json(),
        bodyKey: "parameterFileVersion",
        bodyModel: model.ParameterFileVersion,
        type: "model.ParameterFileVersion",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of a work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List all Database Connections.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListConnectionsRequest
   * @return ListConnectionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ListConnections.ts.html |here} to see how to use ListConnections API.
   */
  public async listConnections(
    listConnectionsRequest: requests.ListConnectionsRequest
  ): Promise<responses.ListConnectionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#listConnections.");
    const operationName = "listConnections";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/ConnectionSummary/ListConnections";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listConnectionsRequest.compartmentId,
      "technologyType": listConnectionsRequest.technologyType,
      "connectionType": listConnectionsRequest.connectionType,
      "sourceConnectionId": listConnectionsRequest.sourceConnectionId,
      "displayName": listConnectionsRequest.displayName,
      "limit": listConnectionsRequest.limit,
      "page": listConnectionsRequest.page,
      "sortBy": listConnectionsRequest.sortBy,
      "sortOrder": listConnectionsRequest.sortOrder,
      "lifecycleState": listConnectionsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listConnectionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listConnectionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConnectionsResponse>{},
        body: await response.json(),
        bodyKey: "connectionCollection",
        bodyModel: model.ConnectionCollection,
        type: "model.ConnectionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List the excluded database objects.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListExcludedObjectsRequest
   * @return ListExcludedObjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ListExcludedObjects.ts.html |here} to see how to use ListExcludedObjects API.
   */
  public async listExcludedObjects(
    listExcludedObjectsRequest: requests.ListExcludedObjectsRequest
  ): Promise<responses.ListExcludedObjectsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#listExcludedObjects.");
    const operationName = "listExcludedObjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/ExcludedObjectSummary/ListExcludedObjects";
    const pathParams = {
      "{jobId}": listExcludedObjectsRequest.jobId
    };

    const queryParams = {
      "limit": listExcludedObjectsRequest.limit,
      "page": listExcludedObjectsRequest.page,
      "sortOrder": listExcludedObjectsRequest.sortOrder,
      "sortBy": listExcludedObjectsRequest.sortBy,
      "type": listExcludedObjectsRequest.type,
      "owner": listExcludedObjectsRequest.owner,
      "object": listExcludedObjectsRequest.object,
      "ownerContains": listExcludedObjectsRequest.ownerContains,
      "objectContains": listExcludedObjectsRequest.objectContains,
      "reasonCategory": listExcludedObjectsRequest.reasonCategory,
      "sourceRule": listExcludedObjectsRequest.sourceRule
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listExcludedObjectsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listExcludedObjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/excludedObjects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListExcludedObjectsResponse>{},
        body: await response.json(),
        bodyKey: "excludedObjectSummaryCollection",
        bodyModel: model.ExcludedObjectSummaryCollection,
        type: "model.ExcludedObjectSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List the Job Outputs
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJobOutputsRequest
   * @return ListJobOutputsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ListJobOutputs.ts.html |here} to see how to use ListJobOutputs API.
   */
  public async listJobOutputs(
    listJobOutputsRequest: requests.ListJobOutputsRequest
  ): Promise<responses.ListJobOutputsResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#listJobOutputs.");
    const operationName = "listJobOutputs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/JobOutputSummary/ListJobOutputs";
    const pathParams = {
      "{jobId}": listJobOutputsRequest.jobId
    };

    const queryParams = {
      "limit": listJobOutputsRequest.limit,
      "page": listJobOutputsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJobOutputsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJobOutputsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/output",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJobOutputsResponse>{},
        body: await response.json(),
        bodyKey: "jobOutputSummaryCollection",
        bodyModel: model.JobOutputSummaryCollection,
        type: "model.JobOutputSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List all the names of the Migration jobs associated to the specified
   * migration site.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJobsRequest
   * @return ListJobsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ListJobs.ts.html |here} to see how to use ListJobs API.
   */
  public async listJobs(
    listJobsRequest: requests.ListJobsRequest
  ): Promise<responses.ListJobsResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#listJobs.");
    const operationName = "listJobs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/JobSummary/ListJobs";
    const pathParams = {};

    const queryParams = {
      "migrationId": listJobsRequest.migrationId,
      "displayName": listJobsRequest.displayName,
      "limit": listJobsRequest.limit,
      "page": listJobsRequest.page,
      "sortBy": listJobsRequest.sortBy,
      "sortOrder": listJobsRequest.sortOrder,
      "lifecycleState": listJobsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJobsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJobsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJobsResponse>{},
        body: await response.json(),
        bodyKey: "jobCollection",
        bodyModel: model.JobCollection,
        type: "model.JobCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Display sample object types to exclude or include for a Migration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMigrationObjectTypesRequest
   * @return ListMigrationObjectTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ListMigrationObjectTypes.ts.html |here} to see how to use ListMigrationObjectTypes API.
   */
  public async listMigrationObjectTypes(
    listMigrationObjectTypesRequest: requests.ListMigrationObjectTypesRequest
  ): Promise<responses.ListMigrationObjectTypesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#listMigrationObjectTypes.");
    const operationName = "listMigrationObjectTypes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/MigrationObjectTypeSummary/ListMigrationObjectTypes";
    const pathParams = {};

    const queryParams = {
      "sortBy": listMigrationObjectTypesRequest.sortBy,
      "sortOrder": listMigrationObjectTypesRequest.sortOrder,
      "limit": listMigrationObjectTypesRequest.limit,
      "page": listMigrationObjectTypesRequest.page,
      "connectionType": listMigrationObjectTypesRequest.connectionType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMigrationObjectTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMigrationObjectTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrationObjectTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMigrationObjectTypesResponse>{},
        body: await response.json(),
        bodyKey: "migrationObjectTypeSummaryCollection",
        bodyModel: model.MigrationObjectTypeSummaryCollection,
        type: "model.MigrationObjectTypeSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Display excluded/included objects.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMigrationObjectsRequest
   * @return ListMigrationObjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ListMigrationObjects.ts.html |here} to see how to use ListMigrationObjects API.
   */
  public async listMigrationObjects(
    listMigrationObjectsRequest: requests.ListMigrationObjectsRequest
  ): Promise<responses.ListMigrationObjectsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#listMigrationObjects.");
    const operationName = "listMigrationObjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/MigrationObjectCollection/ListMigrationObjects";
    const pathParams = {
      "{migrationId}": listMigrationObjectsRequest.migrationId
    };

    const queryParams = {
      "limit": listMigrationObjectsRequest.limit,
      "page": listMigrationObjectsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMigrationObjectsRequest.opcRequestId,
      "if-match": listMigrationObjectsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMigrationObjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}/migrationObjects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMigrationObjectsResponse>{},
        body: await response.json(),
        bodyKey: "migrationObjectCollection",
        bodyModel: model.MigrationObjectCollection,
        type: "model.MigrationObjectCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List of parameters that can be used to customize migrations.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMigrationParametersRequest
   * @return ListMigrationParametersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ListMigrationParameters.ts.html |here} to see how to use ListMigrationParameters API.
   */
  public async listMigrationParameters(
    listMigrationParametersRequest: requests.ListMigrationParametersRequest
  ): Promise<responses.ListMigrationParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#listMigrationParameters.");
    const operationName = "listMigrationParameters";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/MigrationParameterSummary/ListMigrationParameters";
    const pathParams = {};

    const queryParams = {
      "migrationType": listMigrationParametersRequest.migrationType,
      "databaseCombination": listMigrationParametersRequest.databaseCombination,
      "limit": listMigrationParametersRequest.limit,
      "page": listMigrationParametersRequest.page,
      "sortBy": listMigrationParametersRequest.sortBy,
      "sortOrder": listMigrationParametersRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMigrationParametersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMigrationParametersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrationParameters",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMigrationParametersResponse>{},
        body: await response.json(),
        bodyKey: "migrationParameterSummaryCollection",
        bodyModel: model.MigrationParameterSummaryCollection,
        type: "model.MigrationParameterSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List all Migrations.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMigrationsRequest
   * @return ListMigrationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ListMigrations.ts.html |here} to see how to use ListMigrations API.
   */
  public async listMigrations(
    listMigrationsRequest: requests.ListMigrationsRequest
  ): Promise<responses.ListMigrationsResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#listMigrations.");
    const operationName = "listMigrations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/MigrationSummary/ListMigrations";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listMigrationsRequest.compartmentId,
      "displayName": listMigrationsRequest.displayName,
      "limit": listMigrationsRequest.limit,
      "page": listMigrationsRequest.page,
      "sortBy": listMigrationsRequest.sortBy,
      "sortOrder": listMigrationsRequest.sortOrder,
      "lifecycleState": listMigrationsRequest.lifecycleState,
      "lifecycleDetails": listMigrationsRequest.lifecycleDetails
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMigrationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMigrationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMigrationsResponse>{},
        body: await response.json(),
        bodyKey: "migrationCollection",
        bodyModel: model.MigrationCollection,
        type: "model.MigrationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a list of the parameter file metadata of the migration execution of the specified job.  This will
   * only be acceptable if the job is in particular state. It will be accessible if the job is in
   * the FAILED, PAUSED or SUSPENDED state.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListParameterFileVersionsRequest
   * @return ListParameterFileVersionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ListParameterFileVersions.ts.html |here} to see how to use ListParameterFileVersions API.
   */
  public async listParameterFileVersions(
    listParameterFileVersionsRequest: requests.ListParameterFileVersionsRequest
  ): Promise<responses.ListParameterFileVersionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#listParameterFileVersions.");
    const operationName = "listParameterFileVersions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/ListParameterFileVersions";
    const pathParams = {
      "{jobId}": listParameterFileVersionsRequest.jobId
    };

    const queryParams = {
      "name": listParameterFileVersionsRequest.name,
      "limit": listParameterFileVersionsRequest.limit,
      "page": listParameterFileVersionsRequest.page,
      "sortBy": listParameterFileVersionsRequest.sortBy,
      "sortOrder": listParameterFileVersionsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listParameterFileVersionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listParameterFileVersionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/parameterFileVersions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListParameterFileVersionsResponse>{},
        body: await response.json(),
        bodyKey: "parameterFileVersionCollection",
        bodyModel: model.ParameterFileVersionCollection,
        type: "model.ParameterFileVersionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the errors for a work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/WorkRequestError/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "limit": listWorkRequestErrorsRequest.limit,
      "page": listWorkRequestErrorsRequest.page,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the logs for a work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/WorkRequestLogEntry/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "limit": listWorkRequestLogsRequest.limit,
      "page": listWorkRequestLogsRequest.page,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment or for a specified resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/WorkRequestSummary/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "resourceId": listWorkRequestsRequest.resourceId,
      "status": listWorkRequestsRequest.status,
      "limit": listWorkRequestsRequest.limit,
      "page": listWorkRequestsRequest.page,
      "sortBy": listWorkRequestsRequest.sortBy,
      "sortOrder": listWorkRequestsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestCollection",
        bodyModel: model.WorkRequestCollection,
        type: "model.WorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Make current the given parameter file version
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param MakeCurrentParameterFileVersionRequest
   * @return MakeCurrentParameterFileVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/MakeCurrentParameterFileVersion.ts.html |here} to see how to use MakeCurrentParameterFileVersion API.
   */
  public async makeCurrentParameterFileVersion(
    makeCurrentParameterFileVersionRequest: requests.MakeCurrentParameterFileVersionRequest
  ): Promise<responses.MakeCurrentParameterFileVersionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DatabaseMigrationClient#makeCurrentParameterFileVersion."
      );
    const operationName = "makeCurrentParameterFileVersion";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/MakeCurrentParameterFileVersion";
    const pathParams = {
      "{jobId}": makeCurrentParameterFileVersionRequest.jobId,
      "{parameterFileName}": makeCurrentParameterFileVersionRequest.parameterFileName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": makeCurrentParameterFileVersionRequest.ifMatch,
      "opc-retry-token": makeCurrentParameterFileVersionRequest.opcRetryToken,
      "opc-request-id": makeCurrentParameterFileVersionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      makeCurrentParameterFileVersionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/parameterFileVersions/{parameterFileName}/actions/makeCurrent",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.MakeCurrentParameterFileVersionResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove excluded/included objects.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RemoveMigrationObjectsRequest
   * @return RemoveMigrationObjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/RemoveMigrationObjects.ts.html |here} to see how to use RemoveMigrationObjects API.
   */
  public async removeMigrationObjects(
    removeMigrationObjectsRequest: requests.RemoveMigrationObjectsRequest
  ): Promise<responses.RemoveMigrationObjectsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#removeMigrationObjects.");
    const operationName = "removeMigrationObjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Migration/RemoveMigrationObjects";
    const pathParams = {
      "{migrationId}": removeMigrationObjectsRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeMigrationObjectsRequest.opcRequestId,
      "if-match": removeMigrationObjectsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeMigrationObjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}/actions/removeMigrationObjects",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeMigrationObjectsRequest.removeMigrationObjectsDetails,
        "MigrationObjectCollection",
        model.MigrationObjectCollection.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveMigrationObjectsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Resume a migration Job.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ResumeJobRequest
   * @return ResumeJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/ResumeJob.ts.html |here} to see how to use ResumeJob API.
   */
  public async resumeJob(
    resumeJobRequest: requests.ResumeJobRequest
  ): Promise<responses.ResumeJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#resumeJob.");
    const operationName = "resumeJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/ResumeJob";
    const pathParams = {
      "{jobId}": resumeJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": resumeJobRequest.ifMatch,
      "opc-retry-token": resumeJobRequest.opcRetryToken,
      "opc-request-id": resumeJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      resumeJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/actions/resume",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        resumeJobRequest.resumeJobDetails,
        "ResumeJobDetails",
        model.ResumeJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ResumeJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Display Migration Phases for a specified migration.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RetrieveSupportedPhasesRequest
   * @return RetrieveSupportedPhasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/RetrieveSupportedPhases.ts.html |here} to see how to use RetrieveSupportedPhases API.
   */
  public async retrieveSupportedPhases(
    retrieveSupportedPhasesRequest: requests.RetrieveSupportedPhasesRequest
  ): Promise<responses.RetrieveSupportedPhasesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#retrieveSupportedPhases.");
    const operationName = "retrieveSupportedPhases";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Migration/RetrieveSupportedPhases";
    const pathParams = {
      "{migrationId}": retrieveSupportedPhasesRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": retrieveSupportedPhasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      retrieveSupportedPhasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}/actions/getSupportedPhases",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RetrieveSupportedPhasesResponse>{},
        body: await response.json(),
        bodyKey: "migrationPhaseCollection",
        bodyModel: model.MigrationPhaseCollection,
        type: "model.MigrationPhaseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Start Migration job.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StartMigrationRequest
   * @return StartMigrationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/StartMigration.ts.html |here} to see how to use StartMigration API.
   */
  public async startMigration(
    startMigrationRequest: requests.StartMigrationRequest
  ): Promise<responses.StartMigrationResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#startMigration.");
    const operationName = "startMigration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/StartMigration";
    const pathParams = {
      "{migrationId}": startMigrationRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": startMigrationRequest.ifMatch,
      "opc-retry-token": startMigrationRequest.opcRetryToken,
      "opc-request-id": startMigrationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startMigrationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}/actions/start",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        startMigrationRequest.startMigrationDetails,
        "StartMigrationDetails",
        model.StartMigrationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartMigrationResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Place the currently executing migration Job in a Suspended State.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SuspendJobRequest
   * @return SuspendJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/SuspendJob.ts.html |here} to see how to use SuspendJob API.
   */
  public async suspendJob(
    suspendJobRequest: requests.SuspendJobRequest
  ): Promise<responses.SuspendJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#suspendJob.");
    const operationName = "suspendJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/SuspendJob";
    const pathParams = {
      "{jobId}": suspendJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": suspendJobRequest.ifMatch,
      "opc-retry-token": suspendJobRequest.opcRetryToken,
      "opc-request-id": suspendJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      suspendJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/actions/suspend",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SuspendJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update Database Connection resource details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateConnectionRequest
   * @return UpdateConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/UpdateConnection.ts.html |here} to see how to use UpdateConnection API.
   */
  public async updateConnection(
    updateConnectionRequest: requests.UpdateConnectionRequest
  ): Promise<responses.UpdateConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#updateConnection.");
    const operationName = "updateConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Connection/UpdateConnection";
    const pathParams = {
      "{connectionId}": updateConnectionRequest.connectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateConnectionRequest.opcRequestId,
      "if-match": updateConnectionRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateConnectionRequest.updateConnectionDetails,
        "UpdateConnectionDetails",
        model.UpdateConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update Migration Job resource details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateJobRequest
   * @return UpdateJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/UpdateJob.ts.html |here} to see how to use UpdateJob API.
   */
  public async updateJob(
    updateJobRequest: requests.UpdateJobRequest
  ): Promise<responses.UpdateJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DatabaseMigrationClient#updateJob.");
    const operationName = "updateJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Job/UpdateJob";
    const pathParams = {
      "{jobId}": updateJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateJobRequest.opcRequestId,
      "if-match": updateJobRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateJobRequest.updateJobDetails,
        "UpdateJobDetails",
        model.UpdateJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update Migration resource details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateMigrationRequest
   * @return UpdateMigrationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemigration/UpdateMigration.ts.html |here} to see how to use UpdateMigration API.
   */
  public async updateMigration(
    updateMigrationRequest: requests.UpdateMigrationRequest
  ): Promise<responses.UpdateMigrationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DatabaseMigrationClient#updateMigration.");
    const operationName = "updateMigration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/database-migration/20230518/Migration/UpdateMigration";
    const pathParams = {
      "{migrationId}": updateMigrationRequest.migrationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateMigrationRequest.opcRequestId,
      "if-match": updateMigrationRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateMigrationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/migrations/{migrationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMigrationRequest.updateMigrationDetails,
        "UpdateMigrationDetails",
        model.UpdateMigrationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMigrationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
