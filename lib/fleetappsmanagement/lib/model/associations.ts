/**
 * Fleet Application Management Service API
 * Fleet Application Management Service API. Use this API to for all FAMS related activities.
To manage fleets,view complaince report for the Fleet,scedule patches and other lifecycle activities

 * OpenAPI spec version: 20230831
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * JSON content with required associations
 */
export interface Associations {
  /**
   * A set of tasks to execute in the runbook
   */
  "tasks": Array<model.Task>;
  /**
   * The groups of the runbook
   */
  "groups": Array<model.Group>;
  "executionWorkflowDetails": model.ExecutionWorkflowDetails;
  /**
   * The version of the runbook.
   */
  "version"?: string;
}

export namespace Associations {
  export function getJsonObj(obj: Associations): object {
    const jsonObj = {
      ...obj,
      ...{
        "tasks": obj.tasks
          ? obj.tasks.map(item => {
              return model.Task.getJsonObj(item);
            })
          : undefined,
        "groups": obj.groups
          ? obj.groups.map(item => {
              return model.Group.getJsonObj(item);
            })
          : undefined,
        "executionWorkflowDetails": obj.executionWorkflowDetails
          ? model.ExecutionWorkflowDetails.getJsonObj(obj.executionWorkflowDetails)
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: Associations): object {
    const jsonObj = {
      ...obj,
      ...{
        "tasks": obj.tasks
          ? obj.tasks.map(item => {
              return model.Task.getDeserializedJsonObj(item);
            })
          : undefined,
        "groups": obj.groups
          ? obj.groups.map(item => {
              return model.Group.getDeserializedJsonObj(item);
            })
          : undefined,
        "executionWorkflowDetails": obj.executionWorkflowDetails
          ? model.ExecutionWorkflowDetails.getDeserializedJsonObj(obj.executionWorkflowDetails)
          : undefined
      }
    };

    return jsonObj;
  }
}
