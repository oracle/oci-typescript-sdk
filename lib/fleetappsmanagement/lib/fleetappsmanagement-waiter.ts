/**
 * Fleet Application Management Service API
 * Fleet Application Management Service API. Use this API to for all FAMS related activities.
To manage fleets,view complaince report for the Fleet,scedule patches and other lifecycle activities

 * OpenAPI spec version: 20230831
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { FleetAppsManagementClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class FleetAppsManagementWaiter {
  public constructor(
    private client: FleetAppsManagementClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forFleet till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetFleetResponse | null (null in case of 404 response)
   */
  public async forFleet(
    request: serviceRequests.GetFleetRequest,
    ...targetStates: models.Fleet.LifecycleState[]
  ): Promise<serviceResponses.GetFleetResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getFleet(request),
      response => targetStates.includes(response.fleet.lifecycleState!),
      targetStates.includes(models.Fleet.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forFleetCredential till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetFleetCredentialResponse | null (null in case of 404 response)
   */
  public async forFleetCredential(
    request: serviceRequests.GetFleetCredentialRequest,
    ...targetStates: models.FleetCredential.LifecycleState[]
  ): Promise<serviceResponses.GetFleetCredentialResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getFleetCredential(request),
      response => targetStates.includes(response.fleetCredential.lifecycleState!),
      targetStates.includes(models.FleetCredential.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forFleetProperty till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetFleetPropertyResponse | null (null in case of 404 response)
   */
  public async forFleetProperty(
    request: serviceRequests.GetFleetPropertyRequest,
    ...targetStates: models.FleetProperty.LifecycleState[]
  ): Promise<serviceResponses.GetFleetPropertyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getFleetProperty(request),
      response => targetStates.includes(response.fleetProperty.lifecycleState!),
      targetStates.includes(models.FleetProperty.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forFleetResource till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetFleetResourceResponse | null (null in case of 404 response)
   */
  public async forFleetResource(
    request: serviceRequests.GetFleetResourceRequest,
    ...targetStates: models.FleetResource.LifecycleState[]
  ): Promise<serviceResponses.GetFleetResourceResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getFleetResource(request),
      response => targetStates.includes(response.fleetResource.lifecycleState!),
      targetStates.includes(models.FleetResource.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
