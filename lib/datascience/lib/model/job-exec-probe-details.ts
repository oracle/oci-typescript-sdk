/**
 * Data Science API
 * Use the Data Science API to organize your data science work, access data and computing resources, and build, train, deploy and manage models and model deployments. For more information, see [Data Science](https://docs.oracle.com/iaas/data-science/using/data-science.htm).

 * OpenAPI spec version: 20190101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Runs a command in the job run to check whether application is healthy or not.
 */
export interface JobExecProbeDetails extends model.JobProbeDetails {
  /**
   * The commands to run in the target job run to perform the startup probe
   */
  "command": Array<string>;
  /**
   * Number of seconds how often the job run should perform a startup probe Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "periodInSeconds"?: number;
  /**
   * How many times the job will try before giving up when a probe fails. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "failureThreshold"?: number;
  /**
   * Number of seconds after the job run has started before a startup probe is initiated. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "initialDelayInSeconds"?: number;

  "jobProbeCheckType": string;
}

export namespace JobExecProbeDetails {
  export function getJsonObj(obj: JobExecProbeDetails, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.JobProbeDetails.getJsonObj(obj) as JobExecProbeDetails)),
      ...{}
    };

    return jsonObj;
  }
  export const jobProbeCheckType = "EXEC";
  export function getDeserializedJsonObj(
    obj: JobExecProbeDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.JobProbeDetails.getDeserializedJsonObj(obj) as JobExecProbeDetails)),
      ...{}
    };

    return jsonObj;
  }
}
