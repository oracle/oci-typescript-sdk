/**
 * Data Science API
 * Use the Data Science API to organize your data science work, access data and computing resources, and build, train, deploy and manage models and model deployments. For more information, see [Data Science](https://docs.oracle.com/iaas/data-science/using/data-science.htm).

 * OpenAPI spec version: 20190101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * MultiNodeJobNodeConfigurationDetails
 */
export interface MultiNodeJobNodeConfigurationDetails extends model.JobNodeConfigurationDetails {
  /**
   * The execution order of node groups
   */
  "startupOrder"?: MultiNodeJobNodeConfigurationDetails.StartupOrder;
  /**
   * A time bound for the execution of the job run. Timer starts when the job run is in progress.
   *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "maximumRuntimeInMinutes"?: number;
  "jobNetworkConfiguration"?:
    | model.JobCustomNetworkConfiguration
    | model.JobDefaultNetworkConfiguration;
  /**
   * List of JobNodeGroupConfigurationDetails
   */
  "jobNodeGroupConfigurationDetailsList"?: Array<model.JobNodeGroupConfigurationDetails>;

  "jobNodeType": string;
}

export namespace MultiNodeJobNodeConfigurationDetails {
  export enum StartupOrder {
    InOrder = "IN_ORDER",
    InParallel = "IN_PARALLEL",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(
    obj: MultiNodeJobNodeConfigurationDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.JobNodeConfigurationDetails.getJsonObj(
            obj
          ) as MultiNodeJobNodeConfigurationDetails)),
      ...{
        "jobNetworkConfiguration": obj.jobNetworkConfiguration
          ? model.JobNetworkConfiguration.getJsonObj(obj.jobNetworkConfiguration)
          : undefined,
        "jobNodeGroupConfigurationDetailsList": obj.jobNodeGroupConfigurationDetailsList
          ? obj.jobNodeGroupConfigurationDetailsList.map(item => {
              return model.JobNodeGroupConfigurationDetails.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export const jobNodeType = "MULTI_NODE";
  export function getDeserializedJsonObj(
    obj: MultiNodeJobNodeConfigurationDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.JobNodeConfigurationDetails.getDeserializedJsonObj(
            obj
          ) as MultiNodeJobNodeConfigurationDetails)),
      ...{
        "jobNetworkConfiguration": obj.jobNetworkConfiguration
          ? model.JobNetworkConfiguration.getDeserializedJsonObj(obj.jobNetworkConfiguration)
          : undefined,
        "jobNodeGroupConfigurationDetailsList": obj.jobNodeGroupConfigurationDetailsList
          ? obj.jobNodeGroupConfigurationDetailsList.map(item => {
              return model.JobNodeGroupConfigurationDetails.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
