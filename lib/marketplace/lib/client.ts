/**
 * Marketplace Service API
 * Use the Marketplace API to manage applications in Oracle Cloud Infrastructure Marketplace. For more information, see [Overview of Marketplace](https://docs.oracle.com/iaas/Content/Marketplace/Concepts/marketoverview.htm)
 * OpenAPI spec version: 20181001
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { MarketplaceWaiter } from "./marketplace-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AccountApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class AccountClient {
  protected static serviceEndpointTemplate = "https://marketplace.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Account";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("marketplace")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("marketplace");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20181001";
    if (this.logger) this.logger.info(`AccountClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        AccountClient.serviceEndpointTemplate,
        this._region,
        AccountClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        AccountClient.serviceEndpointTemplate,
        this._regionId,
        AccountClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      AccountClient.serviceEndpointTemplate,
      region,
      AccountClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      AccountClient.serviceEndpointTemplate,
      regionId,
      AccountClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Returns Tenant eligibility and other information for launching a PIC image
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetLaunchEligibilityRequest
   * @return GetLaunchEligibilityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/GetLaunchEligibility.ts.html |here} to see how to use GetLaunchEligibility API.
   */
  public async getLaunchEligibility(
    getLaunchEligibilityRequest: requests.GetLaunchEligibilityRequest
  ): Promise<responses.GetLaunchEligibilityResponse> {
    if (this.logger) this.logger.debug("Calling operation AccountClient#getLaunchEligibility.");
    const operationName = "getLaunchEligibility";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/LaunchEligibility/GetLaunchEligibility";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getLaunchEligibilityRequest.compartmentId,
      "imageId": getLaunchEligibilityRequest.imageId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLaunchEligibilityRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLaunchEligibilityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/launchEligibility",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLaunchEligibilityResponse>{},
        body: await response.json(),
        bodyKey: "launchEligibility",
        bodyModel: model.LaunchEligibility,
        type: "model.LaunchEligibility",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns eligibility details of the tenancy to see and launch third party paid listings
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetThirdPartyPaidListingEligibilityRequest
   * @return GetThirdPartyPaidListingEligibilityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/GetThirdPartyPaidListingEligibility.ts.html |here} to see how to use GetThirdPartyPaidListingEligibility API.
   */
  public async getThirdPartyPaidListingEligibility(
    getThirdPartyPaidListingEligibilityRequest: requests.GetThirdPartyPaidListingEligibilityRequest
  ): Promise<responses.GetThirdPartyPaidListingEligibilityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AccountClient#getThirdPartyPaidListingEligibility.");
    const operationName = "getThirdPartyPaidListingEligibility";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/ThirdPartyPaidListingEligibility/GetThirdPartyPaidListingEligibility";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getThirdPartyPaidListingEligibilityRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getThirdPartyPaidListingEligibilityRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getThirdPartyPaidListingEligibilityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/thirdPartyPaidListingEligibility",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetThirdPartyPaidListingEligibilityResponse>{},
        body: await response.json(),
        bodyKey: "thirdPartyPaidListingEligibility",
        bodyModel: model.ThirdPartyPaidListingEligibility,
        type: "model.ThirdPartyPaidListingEligibility",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum MarketplaceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class MarketplaceClient {
  protected static serviceEndpointTemplate = "https://marketplace.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": MarketplaceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "Marketplace";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("marketplace")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("marketplace");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20181001";
    if (this.logger) this.logger.info(`MarketplaceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        MarketplaceClient.serviceEndpointTemplate,
        this._region,
        MarketplaceClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        MarketplaceClient.serviceEndpointTemplate,
        this._regionId,
        MarketplaceClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      MarketplaceClient.serviceEndpointTemplate,
      region,
      MarketplaceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      MarketplaceClient.serviceEndpointTemplate,
      regionId,
      MarketplaceClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new MarketplaceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): MarketplaceWaiter {
    this._waiters = new MarketplaceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): MarketplaceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Moves the specified publication from one compartment to another.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangePublicationCompartmentRequest
   * @return ChangePublicationCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ChangePublicationCompartment.ts.html |here} to see how to use ChangePublicationCompartment API.
   */
  public async changePublicationCompartment(
    changePublicationCompartmentRequest: requests.ChangePublicationCompartmentRequest
  ): Promise<responses.ChangePublicationCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplaceClient#changePublicationCompartment.");
    const operationName = "changePublicationCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/Publication/ChangePublicationCompartment";
    const pathParams = {
      "{publicationId}": changePublicationCompartmentRequest.publicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changePublicationCompartmentRequest.opcRetryToken,
      "opc-request-id": changePublicationCompartmentRequest.opcRequestId,
      "if-match": changePublicationCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changePublicationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publications/{publicationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changePublicationCompartmentRequest.changePublicationCompartmentDetails,
        "ChangePublicationCompartmentDetails",
        model.ChangePublicationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangePublicationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Accepts a terms of use agreement for a specific package version of a listing. You must accept all
   * terms of use for a package before you can deploy the package.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateAcceptedAgreementRequest
   * @return CreateAcceptedAgreementResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/CreateAcceptedAgreement.ts.html |here} to see how to use CreateAcceptedAgreement API.
   */
  public async createAcceptedAgreement(
    createAcceptedAgreementRequest: requests.CreateAcceptedAgreementRequest
  ): Promise<responses.CreateAcceptedAgreementResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplaceClient#createAcceptedAgreement.");
    const operationName = "createAcceptedAgreement";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/AcceptedAgreement/CreateAcceptedAgreement";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createAcceptedAgreementRequest.opcRequestId,
      "opc-retry-token": createAcceptedAgreementRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAcceptedAgreementRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/acceptedAgreements",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAcceptedAgreementRequest.createAcceptedAgreementDetails,
        "CreateAcceptedAgreementDetails",
        model.CreateAcceptedAgreementDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAcceptedAgreementResponse>{},
        body: await response.json(),
        bodyKey: "acceptedAgreement",
        bodyModel: model.AcceptedAgreement,
        type: "model.AcceptedAgreement",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates attested marketplace metadata
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateMarketplaceExternalAttestedMetadataRequest
   * @return CreateMarketplaceExternalAttestedMetadataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/CreateMarketplaceExternalAttestedMetadata.ts.html |here} to see how to use CreateMarketplaceExternalAttestedMetadata API.
   */
  public async createMarketplaceExternalAttestedMetadata(
    createMarketplaceExternalAttestedMetadataRequest: requests.CreateMarketplaceExternalAttestedMetadataRequest
  ): Promise<responses.CreateMarketplaceExternalAttestedMetadataResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation MarketplaceClient#createMarketplaceExternalAttestedMetadata."
      );
    const operationName = "createMarketplaceExternalAttestedMetadata";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/CreateMarketplaceExternalAttestedMetadataDetails/CreateMarketplaceExternalAttestedMetadata";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createMarketplaceExternalAttestedMetadataRequest.opcRequestId,
      "opc-retry-token": createMarketplaceExternalAttestedMetadataRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMarketplaceExternalAttestedMetadataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/marketplaceExternalAttestedMetadata",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMarketplaceExternalAttestedMetadataRequest.createMarketplaceExternalAttestedMetadataDetails,
        "CreateMarketplaceExternalAttestedMetadataDetails",
        model.CreateMarketplaceExternalAttestedMetadataDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMarketplaceExternalAttestedMetadataResponse>{},
        body: await response.json(),
        bodyKey: "marketplaceExternalAttestedMetadata",
        bodyModel: model.MarketplaceExternalAttestedMetadata,
        type: "model.MarketplaceExternalAttestedMetadata",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a publication of the specified listing type with an optional default package.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreatePublicationRequest
   * @return CreatePublicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/CreatePublication.ts.html |here} to see how to use CreatePublication API.
   */
  public async createPublication(
    createPublicationRequest: requests.CreatePublicationRequest
  ): Promise<responses.CreatePublicationResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#createPublication.");
    const operationName = "createPublication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/Publication/CreatePublication";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createPublicationRequest.opcRetryToken,
      "opc-request-id": createPublicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPublicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publications",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPublicationRequest.createPublicationDetails,
        "CreatePublicationDetails",
        model.CreatePublicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePublicationResponse>{},
        body: await response.json(),
        bodyKey: "publication",
        bodyModel: model.Publication,
        type: "model.Publication",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a previously accepted terms of use agreement from the list of agreements that Marketplace checks
   * before initiating a deployment. Listings in Marketplace that require acceptance of the specified terms
   * of use can no longer be deployed, but existing deployments aren't affected.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteAcceptedAgreementRequest
   * @return DeleteAcceptedAgreementResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/DeleteAcceptedAgreement.ts.html |here} to see how to use DeleteAcceptedAgreement API.
   */
  public async deleteAcceptedAgreement(
    deleteAcceptedAgreementRequest: requests.DeleteAcceptedAgreementRequest
  ): Promise<responses.DeleteAcceptedAgreementResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplaceClient#deleteAcceptedAgreement.");
    const operationName = "deleteAcceptedAgreement";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/AcceptedAgreement/DeleteAcceptedAgreement";
    const pathParams = {
      "{acceptedAgreementId}": deleteAcceptedAgreementRequest.acceptedAgreementId
    };

    const queryParams = {
      "signature": deleteAcceptedAgreementRequest.signature
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteAcceptedAgreementRequest.opcRequestId,
      "if-match": deleteAcceptedAgreementRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAcceptedAgreementRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/acceptedAgreements/{acceptedAgreementId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAcceptedAgreementResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a publication, which also removes the associated listing from anywhere it was published, such as Marketplace or Compute.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeletePublicationRequest
   * @return DeletePublicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/DeletePublication.ts.html |here} to see how to use DeletePublication API.
   */
  public async deletePublication(
    deletePublicationRequest: requests.DeletePublicationRequest
  ): Promise<responses.DeletePublicationResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#deletePublication.");
    const operationName = "deletePublication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/Publication/DeletePublication";
    const pathParams = {
      "{publicationId}": deletePublicationRequest.publicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePublicationRequest.ifMatch,
      "opc-request-id": deletePublicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePublicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publications/{publicationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePublicationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Exports container images or helm chart from marketplace to customer's registry.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ExportListingRequest
   * @return ExportListingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ExportListing.ts.html |here} to see how to use ExportListing API.
   */
  public async exportListing(
    exportListingRequest: requests.ExportListingRequest
  ): Promise<responses.ExportListingResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#exportListing.");
    const operationName = "exportListing";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/Listing/ExportListing";
    const pathParams = {
      "{listingId}": exportListingRequest.listingId,
      "{packageVersion}": exportListingRequest.packageVersion
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": exportListingRequest.opcRetryToken,
      "opc-request-id": exportListingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      exportListingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings/{listingId}/packages/{packageVersion}/actions/export",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        exportListingRequest.exportPackageDetails,
        "ExportPackageDetails",
        model.ExportPackageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ExportListingResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of a specific, previously accepted terms of use agreement.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAcceptedAgreementRequest
   * @return GetAcceptedAgreementResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/GetAcceptedAgreement.ts.html |here} to see how to use GetAcceptedAgreement API.
   */
  public async getAcceptedAgreement(
    getAcceptedAgreementRequest: requests.GetAcceptedAgreementRequest
  ): Promise<responses.GetAcceptedAgreementResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#getAcceptedAgreement.");
    const operationName = "getAcceptedAgreement";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/AcceptedAgreement/GetAcceptedAgreement";
    const pathParams = {
      "{acceptedAgreementId}": getAcceptedAgreementRequest.acceptedAgreementId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAcceptedAgreementRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAcceptedAgreementRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/acceptedAgreements/{acceptedAgreementId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAcceptedAgreementResponse>{},
        body: await response.json(),
        bodyKey: "acceptedAgreement",
        bodyModel: model.AcceptedAgreement,
        type: "model.AcceptedAgreement",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a terms of use agreement for a package with a time-based signature that can be used to
   * accept the agreement.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAgreementRequest
   * @return GetAgreementResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/GetAgreement.ts.html |here} to see how to use GetAgreement API.
   */
  public async getAgreement(
    getAgreementRequest: requests.GetAgreementRequest
  ): Promise<responses.GetAgreementResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#getAgreement.");
    const operationName = "getAgreement";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/Agreement/GetAgreement";
    const pathParams = {
      "{listingId}": getAgreementRequest.listingId,
      "{packageVersion}": getAgreementRequest.packageVersion,
      "{agreementId}": getAgreementRequest.agreementId
    };

    const queryParams = {
      "compartmentId": getAgreementRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAgreementRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAgreementRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings/{listingId}/packages/{packageVersion}/agreements/{agreementId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAgreementResponse>{},
        body: await response.json(),
        bodyKey: "agreement",
        bodyModel: model.Agreement,
        type: "model.Agreement",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets detailed information about a listing, including the listing's name, version, description, and
* resources.
* <p>
If you plan to launch an instance from an image listing, you must first subscribe to the listing. When
* you launch the instance, you also need to provide the image ID of the listing resource version that you want.
* <p>
Subscribing to the listing requires you to first get a signature from the terms of use agreement for the
* listing resource version. To get the signature, issue a [GetAppCatalogListingAgreements](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements/GetAppCatalogListingAgreements) API call.
* The [AppCatalogListingResourceVersionAgreements](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements) object, including
* its signature, is returned in the response. With the signature for the terms of use agreement for the desired
* listing resource version, create a subscription by issuing a
* [CreateAppCatalogSubscription](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogSubscription/CreateAppCatalogSubscription) API call.
* <p>
To get the image ID to launch an instance, issue a [GetAppCatalogListingResourceVersion](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersion/GetAppCatalogListingResourceVersion) API call.
* Lastly, to launch the instance, use the image ID of the listing resource version to issue a [LaunchInstance](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/Instance/LaunchInstance) API call.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetListingRequest
     * @return GetListingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/GetListing.ts.html |here} to see how to use GetListing API.
     */
  public async getListing(
    getListingRequest: requests.GetListingRequest
  ): Promise<responses.GetListingResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#getListing.");
    const operationName = "getListing";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/Listing/GetListing";
    const pathParams = {
      "{listingId}": getListingRequest.listingId
    };

    const queryParams = {
      "compartmentId": getListingRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getListingRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getListingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings/{listingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetListingResponse>{},
        body: await response.json(),
        bodyKey: "listing",
        bodyModel: model.Listing,
        type: "model.Listing",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Get the details of the specified version of a package, including information needed to launch the package.
* <p>
If you plan to launch an instance from an image listing, you must first subscribe to the listing. When
* you launch the instance, you also need to provide the image ID of the listing resource version that you want.
* <p>
Subscribing to the listing requires you to first get a signature from the terms of use agreement for the
* listing resource version. To get the signature, issue a [GetAppCatalogListingAgreements](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements/GetAppCatalogListingAgreements) API call.
* The [AppCatalogListingResourceVersionAgreements](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements) object, including
* its signature, is returned in the response. With the signature for the terms of use agreement for the desired
* listing resource version, create a subscription by issuing a
* [CreateAppCatalogSubscription](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogSubscription/CreateAppCatalogSubscription) API call.
* <p>
To get the image ID to launch an instance, issue a [GetAppCatalogListingResourceVersion](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersion/GetAppCatalogListingResourceVersion) API call.
* Lastly, to launch the instance, use the image ID of the listing resource version to issue a [LaunchInstance](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/Instance/LaunchInstance) API call.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPackageRequest
     * @return GetPackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/GetPackage.ts.html |here} to see how to use GetPackage API.
     */
  public async getPackage(
    getPackageRequest: requests.GetPackageRequest
  ): Promise<responses.GetPackageResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#getPackage.");
    const operationName = "getPackage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/ListingPackage/GetPackage";
    const pathParams = {
      "{listingId}": getPackageRequest.listingId,
      "{packageVersion}": getPackageRequest.packageVersion
    };

    const queryParams = {
      "compartmentId": getPackageRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings/{listingId}/packages/{packageVersion}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPackageResponse>{},
        body: await response.json(),
        bodyKey: "listingPackage",
        bodyModel: model.ListingPackage,
        type: "model.ListingPackage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified publication.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPublicationRequest
   * @return GetPublicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/GetPublication.ts.html |here} to see how to use GetPublication API.
   */
  public async getPublication(
    getPublicationRequest: requests.GetPublicationRequest
  ): Promise<responses.GetPublicationResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#getPublication.");
    const operationName = "getPublication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/Publication/GetPublication";
    const pathParams = {
      "{publicationId}": getPublicationRequest.publicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPublicationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPublicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publications/{publicationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPublicationResponse>{},
        body: await response.json(),
        bodyKey: "publication",
        bodyModel: model.Publication,
        type: "model.Publication",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of a specific package version within a given publication.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPublicationPackageRequest
   * @return GetPublicationPackageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/GetPublicationPackage.ts.html |here} to see how to use GetPublicationPackage API.
   */
  public async getPublicationPackage(
    getPublicationPackageRequest: requests.GetPublicationPackageRequest
  ): Promise<responses.GetPublicationPackageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplaceClient#getPublicationPackage.");
    const operationName = "getPublicationPackage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/PublicationPackage/GetPublicationPackage";
    const pathParams = {
      "{publicationId}": getPublicationPackageRequest.publicationId,
      "{packageVersion}": getPublicationPackageRequest.packageVersion
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPublicationPackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPublicationPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publications/{publicationId}/packages/{packageVersion}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPublicationPackageResponse>{},
        body: await response.json(),
        bodyKey: "publicationPackage",
        bodyModel: model.PublicationPackage,
        type: "model.PublicationPackage",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified work request
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the terms of use agreements that have been accepted in the specified compartment.
   * You can filter results by specifying query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAcceptedAgreementsRequest
   * @return ListAcceptedAgreementsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListAcceptedAgreements.ts.html |here} to see how to use ListAcceptedAgreements API.
   */
  public async listAcceptedAgreements(
    listAcceptedAgreementsRequest: requests.ListAcceptedAgreementsRequest
  ): Promise<responses.ListAcceptedAgreementsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplaceClient#listAcceptedAgreements.");
    const operationName = "listAcceptedAgreements";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/AcceptedAgreementSummary/ListAcceptedAgreements";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAcceptedAgreementsRequest.compartmentId,
      "displayName": listAcceptedAgreementsRequest.displayName,
      "listingId": listAcceptedAgreementsRequest.listingId,
      "packageVersion": listAcceptedAgreementsRequest.packageVersion,
      "acceptedAgreementId": listAcceptedAgreementsRequest.acceptedAgreementId,
      "sortBy": listAcceptedAgreementsRequest.sortBy,
      "sortOrder": listAcceptedAgreementsRequest.sortOrder,
      "limit": listAcceptedAgreementsRequest.limit,
      "page": listAcceptedAgreementsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAcceptedAgreementsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAcceptedAgreementsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/acceptedAgreements",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAcceptedAgreementsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.AcceptedAgreementSummary,
        type: "Array<model.AcceptedAgreementSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listAcceptedAgreementsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.AcceptedAgreementSummary objects
   * contained in responses from the listAcceptedAgreements operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAcceptedAgreements(
    request: requests.ListAcceptedAgreementsRequest
  ): AsyncIterableIterator<model.AcceptedAgreementSummary> {
    return paginateRecords(request, req => this.listAcceptedAgreements(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listAcceptedAgreementsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listAcceptedAgreements operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAcceptedAgreementsResponses(
    request: requests.ListAcceptedAgreementsRequest
  ): AsyncIterableIterator<responses.ListAcceptedAgreementsResponse> {
    return paginateResponses(request, req => this.listAcceptedAgreements(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.AcceptedAgreementSummary objects
   * contained in responses from the listAcceptedAgreements operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAcceptedAgreementsRecordIterator(
    request: requests.ListAcceptedAgreementsRequest
  ): AsyncIterableIterator<model.AcceptedAgreementSummary> {
    return paginateRecords(request, req => this.listAcceptedAgreements(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAcceptedAgreements operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAcceptedAgreementsResponseIterator(
    request: requests.ListAcceptedAgreementsRequest
  ): AsyncIterableIterator<responses.ListAcceptedAgreementsResponse> {
    return paginateResponses(request, req => this.listAcceptedAgreements(req));
  }

  /**
   * Returns the terms of use agreements that must be accepted before you can deploy the specified version of a package.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAgreementsRequest
   * @return ListAgreementsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListAgreements.ts.html |here} to see how to use ListAgreements API.
   */
  public async listAgreements(
    listAgreementsRequest: requests.ListAgreementsRequest
  ): Promise<responses.ListAgreementsResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#listAgreements.");
    const operationName = "listAgreements";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/AgreementSummary/ListAgreements";
    const pathParams = {
      "{listingId}": listAgreementsRequest.listingId,
      "{packageVersion}": listAgreementsRequest.packageVersion
    };

    const queryParams = {
      "limit": listAgreementsRequest.limit,
      "page": listAgreementsRequest.page,
      "compartmentId": listAgreementsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAgreementsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAgreementsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings/{listingId}/packages/{packageVersion}/agreements",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAgreementsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.AgreementSummary,
        type: "Array<model.AgreementSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listAgreementsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.AgreementSummary objects
   * contained in responses from the listAgreements operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAgreements(
    request: requests.ListAgreementsRequest
  ): AsyncIterableIterator<model.AgreementSummary> {
    return paginateRecords(request, req => this.listAgreements(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listAgreementsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listAgreements operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAgreementsResponses(
    request: requests.ListAgreementsRequest
  ): AsyncIterableIterator<responses.ListAgreementsResponse> {
    return paginateResponses(request, req => this.listAgreements(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.AgreementSummary objects
   * contained in responses from the listAgreements operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAgreementsRecordIterator(
    request: requests.ListAgreementsRequest
  ): AsyncIterableIterator<model.AgreementSummary> {
    return paginateRecords(request, req => this.listAgreements(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAgreements operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAgreementsResponseIterator(
    request: requests.ListAgreementsRequest
  ): AsyncIterableIterator<responses.ListAgreementsResponse> {
    return paginateResponses(request, req => this.listAgreements(req));
  }

  /**
   * Gets the list of all the categories for listings published to Oracle Cloud Infrastructure Marketplace. Categories apply
   * to the software product provided by the listing.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCategoriesRequest
   * @return ListCategoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListCategories.ts.html |here} to see how to use ListCategories API.
   */
  public async listCategories(
    listCategoriesRequest: requests.ListCategoriesRequest
  ): Promise<responses.ListCategoriesResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#listCategories.");
    const operationName = "listCategories";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/CategorySummary/ListCategories";
    const pathParams = {};

    const queryParams = {
      "limit": listCategoriesRequest.limit,
      "page": listCategoriesRequest.page,
      "compartmentId": listCategoriesRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCategoriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCategoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/categories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCategoriesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.CategorySummary,
        type: "Array<model.CategorySummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listCategoriesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.CategorySummary objects
   * contained in responses from the listCategories operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCategories(
    request: requests.ListCategoriesRequest
  ): AsyncIterableIterator<model.CategorySummary> {
    return paginateRecords(request, req => this.listCategories(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listCategoriesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listCategories operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCategoriesResponses(
    request: requests.ListCategoriesRequest
  ): AsyncIterableIterator<responses.ListCategoriesResponse> {
    return paginateResponses(request, req => this.listCategories(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.CategorySummary objects
   * contained in responses from the listCategories operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCategoriesRecordIterator(
    request: requests.ListCategoriesRequest
  ): AsyncIterableIterator<model.CategorySummary> {
    return paginateRecords(request, req => this.listCategories(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCategories operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listCategoriesResponseIterator(
    request: requests.ListCategoriesRequest
  ): AsyncIterableIterator<responses.ListCategoriesResponse> {
    return paginateResponses(request, req => this.listCategories(req));
  }

  /**
     * Gets a list of listings from Oracle Cloud Infrastructure Marketplace by searching keywords and
* filtering according to listing attributes.
* <p>
If you plan to launch an instance from an image listing, you must first subscribe to the listing. When
* you launch the instance, you also need to provide the image ID of the listing resource version that you want.
* <p>
Subscribing to the listing requires you to first get a signature from the terms of use agreement for the
* listing resource version. To get the signature, issue a [GetAppCatalogListingAgreements](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements/GetAppCatalogListingAgreements) API call.
* The [AppCatalogListingResourceVersionAgreements](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements) object, including
* its signature, is returned in the response. With the signature for the terms of use agreement for the desired
* listing resource version, create a subscription by issuing a
* [CreateAppCatalogSubscription](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogSubscription/CreateAppCatalogSubscription) API call.
* <p>
To get the image ID to launch an instance, issue a [GetAppCatalogListingResourceVersion](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersion/GetAppCatalogListingResourceVersion) API call.
* Lastly, to launch the instance, use the image ID of the listing resource version to issue a [LaunchInstance](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/Instance/LaunchInstance) API call.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListListingsRequest
     * @return ListListingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListListings.ts.html |here} to see how to use ListListings API.
     */
  public async listListings(
    listListingsRequest: requests.ListListingsRequest
  ): Promise<responses.ListListingsResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#listListings.");
    const operationName = "listListings";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/ListingSummary/ListListings";
    const pathParams = {};

    const queryParams = {
      "name": listListingsRequest.name,
      "listingId": listListingsRequest.listingId,
      "imageId": listListingsRequest.imageId,
      "publisherId": listListingsRequest.publisherId,
      "packageType": listListingsRequest.packageType,
      "limit": listListingsRequest.limit,
      "page": listListingsRequest.page,
      "sortBy": listListingsRequest.sortBy,
      "sortOrder": listListingsRequest.sortOrder,
      "category": listListingsRequest.category,
      "pricing": listListingsRequest.pricing,
      "isFeatured": listListingsRequest.isFeatured,
      "listingTypes": listListingsRequest.listingTypes,
      "operatingSystems": listListingsRequest.operatingSystems,
      "compartmentId": listListingsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listListingsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listListingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListListingsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ListingSummary,
        type: "Array<model.ListingSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listListingsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ListingSummary objects
   * contained in responses from the listListings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllListings(
    request: requests.ListListingsRequest
  ): AsyncIterableIterator<model.ListingSummary> {
    return paginateRecords(request, req => this.listListings(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listListingsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listListings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllListingsResponses(
    request: requests.ListListingsRequest
  ): AsyncIterableIterator<responses.ListListingsResponse> {
    return paginateResponses(request, req => this.listListings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ListingSummary objects
   * contained in responses from the listListings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listListingsRecordIterator(
    request: requests.ListListingsRequest
  ): AsyncIterableIterator<model.ListingSummary> {
    return paginateRecords(request, req => this.listListings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listListings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listListingsResponseIterator(
    request: requests.ListListingsRequest
  ): AsyncIterableIterator<responses.ListListingsResponse> {
    return paginateResponses(request, req => this.listListings(req));
  }

  /**
   * Get public certificates used in JWT signing, in JSON Web Key Sets format
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMarketplaceMetadataPublicKeysRequest
   * @return ListMarketplaceMetadataPublicKeysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListMarketplaceMetadataPublicKeys.ts.html |here} to see how to use ListMarketplaceMetadataPublicKeys API.
   */
  public async listMarketplaceMetadataPublicKeys(
    listMarketplaceMetadataPublicKeysRequest: requests.ListMarketplaceMetadataPublicKeysRequest
  ): Promise<responses.ListMarketplaceMetadataPublicKeysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplaceClient#listMarketplaceMetadataPublicKeys.");
    const operationName = "listMarketplaceMetadataPublicKeys";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/MarketplaceMetadataPublicKeySummary/ListMarketplaceMetadataPublicKeys";
    const pathParams = {};

    const queryParams = {
      "limit": listMarketplaceMetadataPublicKeysRequest.limit,
      "page": listMarketplaceMetadataPublicKeysRequest.page,
      "sortOrder": listMarketplaceMetadataPublicKeysRequest.sortOrder,
      "sortBy": listMarketplaceMetadataPublicKeysRequest.sortBy,
      "compartmentId": listMarketplaceMetadataPublicKeysRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMarketplaceMetadataPublicKeysRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMarketplaceMetadataPublicKeysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/marketplaceMetadataPublicKeys",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMarketplaceMetadataPublicKeysResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.MarketplaceMetadataPublicKeySummary,
        type: "Array<model.MarketplaceMetadataPublicKeySummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listMarketplaceMetadataPublicKeysRecordIterator function.
   * Creates a new async iterator which will iterate over the models.MarketplaceMetadataPublicKeySummary objects
   * contained in responses from the listMarketplaceMetadataPublicKeys operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllMarketplaceMetadataPublicKeys(
    request: requests.ListMarketplaceMetadataPublicKeysRequest
  ): AsyncIterableIterator<model.MarketplaceMetadataPublicKeySummary> {
    return paginateRecords(request, req => this.listMarketplaceMetadataPublicKeys(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listMarketplaceMetadataPublicKeysResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listMarketplaceMetadataPublicKeys operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllMarketplaceMetadataPublicKeysResponses(
    request: requests.ListMarketplaceMetadataPublicKeysRequest
  ): AsyncIterableIterator<responses.ListMarketplaceMetadataPublicKeysResponse> {
    return paginateResponses(request, req => this.listMarketplaceMetadataPublicKeys(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.MarketplaceMetadataPublicKeySummary objects
   * contained in responses from the listMarketplaceMetadataPublicKeys operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listMarketplaceMetadataPublicKeysRecordIterator(
    request: requests.ListMarketplaceMetadataPublicKeysRequest
  ): AsyncIterableIterator<model.MarketplaceMetadataPublicKeySummary> {
    return paginateRecords(request, req => this.listMarketplaceMetadataPublicKeys(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listMarketplaceMetadataPublicKeys operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listMarketplaceMetadataPublicKeysResponseIterator(
    request: requests.ListMarketplaceMetadataPublicKeysRequest
  ): AsyncIterableIterator<responses.ListMarketplaceMetadataPublicKeysResponse> {
    return paginateResponses(request, req => this.listMarketplaceMetadataPublicKeys(req));
  }

  /**
     * Gets the list of packages for a listing.
* <p>
If you plan to launch an instance from an image listing, you must first subscribe to the listing. When
* you launch the instance, you also need to provide the image ID of the listing resource version that you want.
* <p>
Subscribing to the listing requires you to first get a signature from the terms of use agreement for the
* listing resource version. To get the signature, issue a [GetAppCatalogListingAgreements](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements/GetAppCatalogListingAgreements) API call.
* The [AppCatalogListingResourceVersionAgreements](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements) object, including
* its signature, is returned in the response. With the signature for the terms of use agreement for the desired
* listing resource version, create a subscription by issuing a
* [CreateAppCatalogSubscription](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogSubscription/CreateAppCatalogSubscription) API call.
* <p>
To get the image ID to launch an instance, issue a [GetAppCatalogListingResourceVersion](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersion/GetAppCatalogListingResourceVersion) API call.
* Lastly, to launch the instance, use the image ID of the listing resource version to issue a [LaunchInstance](https://docs.oracle.com/iaas/en-us/iaas/api/#/en/iaas/latest/Instance/LaunchInstance) API call.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPackagesRequest
     * @return ListPackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListPackages.ts.html |here} to see how to use ListPackages API.
     */
  public async listPackages(
    listPackagesRequest: requests.ListPackagesRequest
  ): Promise<responses.ListPackagesResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#listPackages.");
    const operationName = "listPackages";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/ListingPackageSummary/ListPackages";
    const pathParams = {
      "{listingId}": listPackagesRequest.listingId
    };

    const queryParams = {
      "packageVersion": listPackagesRequest.packageVersion,
      "packageType": listPackagesRequest.packageType,
      "limit": listPackagesRequest.limit,
      "page": listPackagesRequest.page,
      "sortBy": listPackagesRequest.sortBy,
      "sortOrder": listPackagesRequest.sortOrder,
      "compartmentId": listPackagesRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings/{listingId}/packages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPackagesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ListingPackageSummary,
        type: "Array<model.ListingPackageSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPackagesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ListingPackageSummary objects
   * contained in responses from the listPackages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPackages(
    request: requests.ListPackagesRequest
  ): AsyncIterableIterator<model.ListingPackageSummary> {
    return paginateRecords(request, req => this.listPackages(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPackagesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPackages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPackagesResponses(
    request: requests.ListPackagesRequest
  ): AsyncIterableIterator<responses.ListPackagesResponse> {
    return paginateResponses(request, req => this.listPackages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ListingPackageSummary objects
   * contained in responses from the listPackages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPackagesRecordIterator(
    request: requests.ListPackagesRequest
  ): AsyncIterableIterator<model.ListingPackageSummary> {
    return paginateRecords(request, req => this.listPackages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPackages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPackagesResponseIterator(
    request: requests.ListPackagesRequest
  ): AsyncIterableIterator<responses.ListPackagesResponse> {
    return paginateResponses(request, req => this.listPackages(req));
  }

  /**
   * Lists the packages in the specified publication.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPublicationPackagesRequest
   * @return ListPublicationPackagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListPublicationPackages.ts.html |here} to see how to use ListPublicationPackages API.
   */
  public async listPublicationPackages(
    listPublicationPackagesRequest: requests.ListPublicationPackagesRequest
  ): Promise<responses.ListPublicationPackagesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplaceClient#listPublicationPackages.");
    const operationName = "listPublicationPackages";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/PublicationPackageSummary/ListPublicationPackages";
    const pathParams = {
      "{publicationId}": listPublicationPackagesRequest.publicationId
    };

    const queryParams = {
      "packageVersion": listPublicationPackagesRequest.packageVersion,
      "packageType": listPublicationPackagesRequest.packageType,
      "sortBy": listPublicationPackagesRequest.sortBy,
      "sortOrder": listPublicationPackagesRequest.sortOrder,
      "limit": listPublicationPackagesRequest.limit,
      "page": listPublicationPackagesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPublicationPackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPublicationPackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publications/{publicationId}/packages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPublicationPackagesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PublicationPackageSummary,
        type: "Array<model.PublicationPackageSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPublicationPackagesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.PublicationPackageSummary objects
   * contained in responses from the listPublicationPackages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPublicationPackages(
    request: requests.ListPublicationPackagesRequest
  ): AsyncIterableIterator<model.PublicationPackageSummary> {
    return paginateRecords(request, req => this.listPublicationPackages(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPublicationPackagesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPublicationPackages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPublicationPackagesResponses(
    request: requests.ListPublicationPackagesRequest
  ): AsyncIterableIterator<responses.ListPublicationPackagesResponse> {
    return paginateResponses(request, req => this.listPublicationPackages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.PublicationPackageSummary objects
   * contained in responses from the listPublicationPackages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPublicationPackagesRecordIterator(
    request: requests.ListPublicationPackagesRequest
  ): AsyncIterableIterator<model.PublicationPackageSummary> {
    return paginateRecords(request, req => this.listPublicationPackages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPublicationPackages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPublicationPackagesResponseIterator(
    request: requests.ListPublicationPackagesRequest
  ): AsyncIterableIterator<responses.ListPublicationPackagesResponse> {
    return paginateResponses(request, req => this.listPublicationPackages(req));
  }

  /**
   * Lists the publications in the specified compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPublicationsRequest
   * @return ListPublicationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListPublications.ts.html |here} to see how to use ListPublications API.
   */
  public async listPublications(
    listPublicationsRequest: requests.ListPublicationsRequest
  ): Promise<responses.ListPublicationsResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#listPublications.");
    const operationName = "listPublications";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/PublicationSummary/ListPublications";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listPublicationsRequest.compartmentId,
      "name": listPublicationsRequest.name,
      "listingType": listPublicationsRequest.listingType,
      "publicationId": listPublicationsRequest.publicationId,
      "operatingSystems": listPublicationsRequest.operatingSystems,
      "sortBy": listPublicationsRequest.sortBy,
      "sortOrder": listPublicationsRequest.sortOrder,
      "limit": listPublicationsRequest.limit,
      "page": listPublicationsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPublicationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPublicationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publications",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPublicationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PublicationSummary,
        type: "Array<model.PublicationSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPublicationsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.PublicationSummary objects
   * contained in responses from the listPublications operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPublications(
    request: requests.ListPublicationsRequest
  ): AsyncIterableIterator<model.PublicationSummary> {
    return paginateRecords(request, req => this.listPublications(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPublicationsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPublications operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPublicationsResponses(
    request: requests.ListPublicationsRequest
  ): AsyncIterableIterator<responses.ListPublicationsResponse> {
    return paginateResponses(request, req => this.listPublications(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.PublicationSummary objects
   * contained in responses from the listPublications operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPublicationsRecordIterator(
    request: requests.ListPublicationsRequest
  ): AsyncIterableIterator<model.PublicationSummary> {
    return paginateRecords(request, req => this.listPublications(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPublications operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPublicationsResponseIterator(
    request: requests.ListPublicationsRequest
  ): AsyncIterableIterator<responses.ListPublicationsResponse> {
    return paginateResponses(request, req => this.listPublications(req));
  }

  /**
   * Gets the list of all the publishers of listings available in Oracle Cloud Infrastructure Marketplace.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPublishersRequest
   * @return ListPublishersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListPublishers.ts.html |here} to see how to use ListPublishers API.
   */
  public async listPublishers(
    listPublishersRequest: requests.ListPublishersRequest
  ): Promise<responses.ListPublishersResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#listPublishers.");
    const operationName = "listPublishers";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/PublisherSummary/ListPublishers";
    const pathParams = {};

    const queryParams = {
      "publisherId": listPublishersRequest.publisherId,
      "limit": listPublishersRequest.limit,
      "page": listPublishersRequest.page,
      "compartmentId": listPublishersRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPublishersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPublishersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publishers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPublishersResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PublisherSummary,
        type: "Array<model.PublisherSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPublishersRecordIterator function.
   * Creates a new async iterator which will iterate over the models.PublisherSummary objects
   * contained in responses from the listPublishers operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPublishers(
    request: requests.ListPublishersRequest
  ): AsyncIterableIterator<model.PublisherSummary> {
    return paginateRecords(request, req => this.listPublishers(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPublishersResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPublishers operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPublishersResponses(
    request: requests.ListPublishersRequest
  ): AsyncIterableIterator<responses.ListPublishersResponse> {
    return paginateResponses(request, req => this.listPublishers(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.PublisherSummary objects
   * contained in responses from the listPublishers operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPublishersRecordIterator(
    request: requests.ListPublishersRequest
  ): AsyncIterableIterator<model.PublisherSummary> {
    return paginateRecords(request, req => this.listPublishers(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPublishers operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPublishersResponseIterator(
    request: requests.ListPublishersRequest
  ): AsyncIterableIterator<responses.ListPublishersResponse> {
    return paginateResponses(request, req => this.listPublishers(req));
  }

  /**
   * Lists available types of reports for the compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListReportTypesRequest
   * @return ListReportTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListReportTypes.ts.html |here} to see how to use ListReportTypes API.
   */
  public async listReportTypes(
    listReportTypesRequest: requests.ListReportTypesRequest
  ): Promise<responses.ListReportTypesResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#listReportTypes.");
    const operationName = "listReportTypes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/ReportTypeCollection/ListReportTypes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listReportTypesRequest.compartmentId,
      "page": listReportTypesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listReportTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listReportTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reportTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListReportTypesResponse>{},
        body: await response.json(),
        bodyKey: "reportTypeCollection",
        bodyModel: model.ReportTypeCollection,
        type: "model.ReportTypeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists reports in the compartment that match the specified report type and date.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListReportsRequest
   * @return ListReportsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListReports.ts.html |here} to see how to use ListReports API.
   */
  public async listReports(
    listReportsRequest: requests.ListReportsRequest
  ): Promise<responses.ListReportsResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#listReports.");
    const operationName = "listReports";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/ReportCollection/ListReports";
    const pathParams = {};

    const queryParams = {
      "reportType": listReportsRequest.reportType,
      "date": listReportsRequest.date,
      "compartmentId": listReportsRequest.compartmentId,
      "page": listReportsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listReportsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listReportsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reports",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListReportsResponse>{},
        body: await response.json(),
        bodyKey: "reportCollection",
        bodyModel: model.ReportCollection,
        type: "model.ReportCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns list of all tax implications that current tenant may be liable to once they launch the listing.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTaxesRequest
   * @return ListTaxesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListTaxes.ts.html |here} to see how to use ListTaxes API.
   */
  public async listTaxes(
    listTaxesRequest: requests.ListTaxesRequest
  ): Promise<responses.ListTaxesResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#listTaxes.");
    const operationName = "listTaxes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/TaxSummary/ListTaxes";
    const pathParams = {
      "{listingId}": listTaxesRequest.listingId
    };

    const queryParams = {
      "compartmentId": listTaxesRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTaxesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTaxesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/listings/{listingId}/taxes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTaxesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.TaxSummary,
        type: "Array<model.TaxSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List all errors for a work request
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplaceClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/WorkRequest/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder,
      "sortBy": listWorkRequestErrorsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List all logs for a work request
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/WorkRequest/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortOrder": listWorkRequestLogsRequest.sortOrder,
      "sortBy": listWorkRequestLogsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List all work requests in a compartment
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/WorkRequest/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestCollection",
        bodyModel: model.WorkRequestCollection,
        type: "model.WorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Queries all Marketplace Applications to find listings that match the specified criteria. To search
   * for a listing, you can use a free text or structured search.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SearchListingsRequest
   * @return SearchListingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/SearchListings.ts.html |here} to see how to use SearchListings API.
   */
  public async searchListings(
    searchListingsRequest: requests.SearchListingsRequest
  ): Promise<responses.SearchListingsResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#searchListings.");
    const operationName = "searchListings";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/ListingSummary/SearchListings";
    const pathParams = {};

    const queryParams = {
      "page": searchListingsRequest.page,
      "limit": searchListingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": searchListingsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchListingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/searchListings",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchListingsRequest.searchListingsDetails,
        "SearchListingsDetails",
        model.SearchListingsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchListingsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ListingSummary,
        type: "Array<model.ListingSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of searchListingsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ListingSummary objects
   * contained in responses from the searchListings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public searchAllListings(
    request: requests.SearchListingsRequest
  ): AsyncIterableIterator<model.ListingSummary> {
    return paginateRecords(request, req => this.searchListings(req));
  }

  /**
   * NOTE: This function is deprecated in favor of searchListingsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the searchListings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public searchAllListingsResponses(
    request: requests.SearchListingsRequest
  ): AsyncIterableIterator<responses.SearchListingsResponse> {
    return paginateResponses(request, req => this.searchListings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ListingSummary objects
   * contained in responses from the searchListings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public searchListingsRecordIterator(
    request: requests.SearchListingsRequest
  ): AsyncIterableIterator<model.ListingSummary> {
    return paginateRecords(request, req => this.searchListings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the searchListings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public searchListingsResponseIterator(
    request: requests.SearchListingsRequest
  ): AsyncIterableIterator<responses.SearchListingsResponse> {
    return paginateResponses(request, req => this.searchListings(req));
  }

  /**
   * Updates the display name or tags associated with a listing's previously accepted terms of use agreement.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAcceptedAgreementRequest
   * @return UpdateAcceptedAgreementResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/UpdateAcceptedAgreement.ts.html |here} to see how to use UpdateAcceptedAgreement API.
   */
  public async updateAcceptedAgreement(
    updateAcceptedAgreementRequest: requests.UpdateAcceptedAgreementRequest
  ): Promise<responses.UpdateAcceptedAgreementResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MarketplaceClient#updateAcceptedAgreement.");
    const operationName = "updateAcceptedAgreement";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/AcceptedAgreement/UpdateAcceptedAgreement";
    const pathParams = {
      "{acceptedAgreementId}": updateAcceptedAgreementRequest.acceptedAgreementId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateAcceptedAgreementRequest.opcRequestId,
      "opc-retry-token": updateAcceptedAgreementRequest.opcRetryToken,
      "if-match": updateAcceptedAgreementRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAcceptedAgreementRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/acceptedAgreements/{acceptedAgreementId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAcceptedAgreementRequest.updateAcceptedAgreementDetails,
        "UpdateAcceptedAgreementDetails",
        model.UpdateAcceptedAgreementDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAcceptedAgreementResponse>{},
        body: await response.json(),
        bodyKey: "acceptedAgreement",
        bodyModel: model.AcceptedAgreement,
        type: "model.AcceptedAgreement",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the details of an existing publication.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdatePublicationRequest
   * @return UpdatePublicationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplace/UpdatePublication.ts.html |here} to see how to use UpdatePublication API.
   */
  public async updatePublication(
    updatePublicationRequest: requests.UpdatePublicationRequest
  ): Promise<responses.UpdatePublicationResponse> {
    if (this.logger) this.logger.debug("Calling operation MarketplaceClient#updatePublication.");
    const operationName = "updatePublication";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/marketplace/20181001/Publication/UpdatePublication";
    const pathParams = {
      "{publicationId}": updatePublicationRequest.publicationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updatePublicationRequest.opcRequestId,
      "opc-retry-token": updatePublicationRequest.opcRetryToken,
      "if-match": updatePublicationRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePublicationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publications/{publicationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePublicationRequest.updatePublicationDetails,
        "UpdatePublicationDetails",
        model.UpdatePublicationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePublicationResponse>{},
        body: await response.json(),
        bodyKey: "publication",
        bodyModel: model.Publication,
        type: "model.Publication",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
