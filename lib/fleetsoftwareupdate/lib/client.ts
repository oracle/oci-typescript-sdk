/**
 * Exadata Fleet Update service API
 * Use the Exadata Fleet Update service to patch large collections of components directly,
as a single entity, orchestrating the maintenance actions to update all chosen components in the stack in a single cycle.

 * OpenAPI spec version: 20220528
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { FleetSoftwareUpdateWaiter } from "./fleetsoftwareupdate-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum FleetSoftwareUpdateApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class FleetSoftwareUpdateClient {
  protected static serviceEndpointTemplate =
    "https://fleet-software-update.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": FleetSoftwareUpdateWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "FleetSoftwareUpdate";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("fleetsoftwareupdate")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("fleetsoftwareupdate");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220528";
    if (this.logger)
      this.logger.info(`FleetSoftwareUpdateClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        FleetSoftwareUpdateClient.serviceEndpointTemplate,
        this._region,
        FleetSoftwareUpdateClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        FleetSoftwareUpdateClient.serviceEndpointTemplate,
        this._regionId,
        FleetSoftwareUpdateClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      FleetSoftwareUpdateClient.serviceEndpointTemplate,
      region,
      FleetSoftwareUpdateClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      FleetSoftwareUpdateClient.serviceEndpointTemplate,
      regionId,
      FleetSoftwareUpdateClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new FleetSoftwareUpdateWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): FleetSoftwareUpdateWaiter {
    this._waiters = new FleetSoftwareUpdateWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): FleetSoftwareUpdateWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Aborts Exadata Fleet Update Discovery in progress.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AbortFsuDiscoveryRequest
   * @return AbortFsuDiscoveryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/AbortFsuDiscovery.ts.html |here} to see how to use AbortFsuDiscovery API.
   */
  public async abortFsuDiscovery(
    abortFsuDiscoveryRequest: requests.AbortFsuDiscoveryRequest
  ): Promise<responses.AbortFsuDiscoveryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#abortFsuDiscovery.");
    const operationName = "abortFsuDiscovery";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuDiscoveryId}": abortFsuDiscoveryRequest.fsuDiscoveryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": abortFsuDiscoveryRequest.ifMatch,
      "opc-request-id": abortFsuDiscoveryRequest.opcRequestId,
      "opc-retry-token": abortFsuDiscoveryRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      abortFsuDiscoveryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuDiscoveries/{fsuDiscoveryId}/actions/abort",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AbortFsuDiscoveryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds targets to an existing Exadata Fleet Update Collection.
   * Targets that are already part of a different Collection with an active Fleet Software Update Cycle cannot be added.
   * This operation can only be performed on Collections that do not have an Action executing under an active Fleet Software Update Cycle.
   * Additionally, during an active Fleet Software Update Cycle, targets can be added only prior to executing an Apply Action. This will require running a new Stage Action for the active Cycle.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AddFsuCollectionTargetsRequest
   * @return AddFsuCollectionTargetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/AddFsuCollectionTargets.ts.html |here} to see how to use AddFsuCollectionTargets API.
   */
  public async addFsuCollectionTargets(
    addFsuCollectionTargetsRequest: requests.AddFsuCollectionTargetsRequest
  ): Promise<responses.AddFsuCollectionTargetsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#addFsuCollectionTargets.");
    const operationName = "addFsuCollectionTargets";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCollectionId}": addFsuCollectionTargetsRequest.fsuCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": addFsuCollectionTargetsRequest.ifMatch,
      "opc-request-id": addFsuCollectionTargetsRequest.opcRequestId,
      "opc-retry-token": addFsuCollectionTargetsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addFsuCollectionTargetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCollections/{fsuCollectionId}/targets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addFsuCollectionTargetsRequest.addFsuCollectionTargetsDetails,
        "AddFsuCollectionTargetsDetails",
        model.AddFsuCollectionTargetsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddFsuCollectionTargetsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancels a scheduled Action. Only applicable for Actions that have not started executing.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelFsuActionRequest
   * @return CancelFsuActionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/CancelFsuAction.ts.html |here} to see how to use CancelFsuAction API.
   */
  public async cancelFsuAction(
    cancelFsuActionRequest: requests.CancelFsuActionRequest
  ): Promise<responses.CancelFsuActionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#cancelFsuAction.");
    const operationName = "cancelFsuAction";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuActionId}": cancelFsuActionRequest.fsuActionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelFsuActionRequest.ifMatch,
      "opc-request-id": cancelFsuActionRequest.opcRequestId,
      "opc-retry-token": cancelFsuActionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelFsuActionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuActions/{fsuActionId}/actions/cancel",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelFsuActionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Exadata Fleet Update Action resource from one compartment identifier to another.
   * When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeFsuActionCompartmentRequest
   * @return ChangeFsuActionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ChangeFsuActionCompartment.ts.html |here} to see how to use ChangeFsuActionCompartment API.
   */
  public async changeFsuActionCompartment(
    changeFsuActionCompartmentRequest: requests.ChangeFsuActionCompartmentRequest
  ): Promise<responses.ChangeFsuActionCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#changeFsuActionCompartment.");
    const operationName = "changeFsuActionCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuActionId}": changeFsuActionCompartmentRequest.fsuActionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeFsuActionCompartmentRequest.ifMatch,
      "opc-request-id": changeFsuActionCompartmentRequest.opcRequestId,
      "opc-retry-token": changeFsuActionCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeFsuActionCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuActions/{fsuActionId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeFsuActionCompartmentRequest.changeFsuActionCompartmentDetails,
        "ChangeFsuActionCompartmentDetails",
        model.ChangeFsuActionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeFsuActionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Exadata Fleet Update Collection resource from one compartment identifier to another.
   * When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeFsuCollectionCompartmentRequest
   * @return ChangeFsuCollectionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ChangeFsuCollectionCompartment.ts.html |here} to see how to use ChangeFsuCollectionCompartment API.
   */
  public async changeFsuCollectionCompartment(
    changeFsuCollectionCompartmentRequest: requests.ChangeFsuCollectionCompartmentRequest
  ): Promise<responses.ChangeFsuCollectionCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetSoftwareUpdateClient#changeFsuCollectionCompartment."
      );
    const operationName = "changeFsuCollectionCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCollectionId}": changeFsuCollectionCompartmentRequest.fsuCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeFsuCollectionCompartmentRequest.ifMatch,
      "opc-request-id": changeFsuCollectionCompartmentRequest.opcRequestId,
      "opc-retry-token": changeFsuCollectionCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeFsuCollectionCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCollections/{fsuCollectionId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeFsuCollectionCompartmentRequest.changeFsuCollectionCompartmentDetails,
        "ChangeFsuCollectionCompartmentDetails",
        model.ChangeFsuCollectionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeFsuCollectionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Exadata Fleet Update Cycle resource from one compartment identifier to another.
   * When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeFsuCycleCompartmentRequest
   * @return ChangeFsuCycleCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ChangeFsuCycleCompartment.ts.html |here} to see how to use ChangeFsuCycleCompartment API.
   */
  public async changeFsuCycleCompartment(
    changeFsuCycleCompartmentRequest: requests.ChangeFsuCycleCompartmentRequest
  ): Promise<responses.ChangeFsuCycleCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#changeFsuCycleCompartment.");
    const operationName = "changeFsuCycleCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCycleId}": changeFsuCycleCompartmentRequest.fsuCycleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeFsuCycleCompartmentRequest.ifMatch,
      "opc-request-id": changeFsuCycleCompartmentRequest.opcRequestId,
      "opc-retry-token": changeFsuCycleCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeFsuCycleCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCycles/{fsuCycleId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeFsuCycleCompartmentRequest.changeFsuCycleCompartmentDetails,
        "ChangeFsuCycleCompartmentDetails",
        model.ChangeFsuCycleCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeFsuCycleCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Exadata Fleet Update Discovery resource from one compartment identifier to another.
   * When provided, If-Match is checked against ETag values of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeFsuDiscoveryCompartmentRequest
   * @return ChangeFsuDiscoveryCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ChangeFsuDiscoveryCompartment.ts.html |here} to see how to use ChangeFsuDiscoveryCompartment API.
   */
  public async changeFsuDiscoveryCompartment(
    changeFsuDiscoveryCompartmentRequest: requests.ChangeFsuDiscoveryCompartmentRequest
  ): Promise<responses.ChangeFsuDiscoveryCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation FleetSoftwareUpdateClient#changeFsuDiscoveryCompartment."
      );
    const operationName = "changeFsuDiscoveryCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuDiscoveryId}": changeFsuDiscoveryCompartmentRequest.fsuDiscoveryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeFsuDiscoveryCompartmentRequest.ifMatch,
      "opc-request-id": changeFsuDiscoveryCompartmentRequest.opcRequestId,
      "opc-retry-token": changeFsuDiscoveryCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeFsuDiscoveryCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuDiscoveries/{fsuDiscoveryId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeFsuDiscoveryCompartmentRequest.changeFsuDiscoveryCompartmentDetails,
        "ChangeFsuDiscoveryCompartmentDetails",
        model.ChangeFsuDiscoveryCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeFsuDiscoveryCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Clones existing Exadata Fleet Update Cycle details into a new Exadata Fleet Update Cycle resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CloneFsuCycleRequest
   * @return CloneFsuCycleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/CloneFsuCycle.ts.html |here} to see how to use CloneFsuCycle API.
   */
  public async cloneFsuCycle(
    cloneFsuCycleRequest: requests.CloneFsuCycleRequest
  ): Promise<responses.CloneFsuCycleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#cloneFsuCycle.");
    const operationName = "cloneFsuCycle";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCycleId}": cloneFsuCycleRequest.fsuCycleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": cloneFsuCycleRequest.opcRequestId,
      "opc-retry-token": cloneFsuCycleRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cloneFsuCycleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCycles/{fsuCycleId}/actions/clone",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        cloneFsuCycleRequest.cloneFsuCycleDetails,
        "CloneFsuCycleDetails",
        model.CloneFsuCycleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CloneFsuCycleResponse>{},
        body: await response.json(),
        bodyKey: "fsuCycle",
        bodyModel: model.FsuCycle,
        type: "model.FsuCycle",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Exadata Fleet Update Action.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateFsuActionRequest
   * @return CreateFsuActionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/CreateFsuAction.ts.html |here} to see how to use CreateFsuAction API.
   */
  public async createFsuAction(
    createFsuActionRequest: requests.CreateFsuActionRequest
  ): Promise<responses.CreateFsuActionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#createFsuAction.");
    const operationName = "createFsuAction";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFsuActionRequest.opcRetryToken,
      "opc-request-id": createFsuActionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFsuActionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuActions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFsuActionRequest.createFsuActionDetails,
        "CreateFsuActionDetails",
        model.CreateFsuActionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFsuActionResponse>{},
        body: await response.json(),
        bodyKey: "fsuAction",
        bodyModel: model.FsuAction,
        type: "model.FsuAction",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Exadata Fleet Update Collection.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateFsuCollectionRequest
   * @return CreateFsuCollectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/CreateFsuCollection.ts.html |here} to see how to use CreateFsuCollection API.
   */
  public async createFsuCollection(
    createFsuCollectionRequest: requests.CreateFsuCollectionRequest
  ): Promise<responses.CreateFsuCollectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#createFsuCollection.");
    const operationName = "createFsuCollection";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFsuCollectionRequest.opcRetryToken,
      "opc-request-id": createFsuCollectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFsuCollectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCollections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFsuCollectionRequest.createFsuCollectionDetails,
        "CreateFsuCollectionDetails",
        model.CreateFsuCollectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFsuCollectionResponse>{},
        body: await response.json(),
        bodyKey: "fsuCollection",
        bodyModel: model.FsuCollection,
        type: "model.FsuCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Exadata Fleet Update Cycle.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateFsuCycleRequest
   * @return CreateFsuCycleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/CreateFsuCycle.ts.html |here} to see how to use CreateFsuCycle API.
   */
  public async createFsuCycle(
    createFsuCycleRequest: requests.CreateFsuCycleRequest
  ): Promise<responses.CreateFsuCycleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#createFsuCycle.");
    const operationName = "createFsuCycle";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFsuCycleRequest.opcRetryToken,
      "opc-request-id": createFsuCycleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFsuCycleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCycles",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFsuCycleRequest.createFsuCycleDetails,
        "CreateFsuCycleDetails",
        model.CreateFsuCycleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFsuCycleResponse>{},
        body: await response.json(),
        bodyKey: "fsuCycle",
        bodyModel: model.FsuCycle,
        type: "model.FsuCycle",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Exadata Fleet Update Discovery.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateFsuDiscoveryRequest
   * @return CreateFsuDiscoveryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/CreateFsuDiscovery.ts.html |here} to see how to use CreateFsuDiscovery API.
   */
  public async createFsuDiscovery(
    createFsuDiscoveryRequest: requests.CreateFsuDiscoveryRequest
  ): Promise<responses.CreateFsuDiscoveryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#createFsuDiscovery.");
    const operationName = "createFsuDiscovery";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createFsuDiscoveryRequest.opcRetryToken,
      "opc-request-id": createFsuDiscoveryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFsuDiscoveryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuDiscoveries",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFsuDiscoveryRequest.createFsuDiscoveryDetails,
        "CreateFsuDiscoveryDetails",
        model.CreateFsuDiscoveryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFsuDiscoveryResponse>{},
        body: await response.json(),
        bodyKey: "fsuDiscovery",
        bodyModel: model.FsuDiscovery,
        type: "model.FsuDiscovery",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Exadata Fleet Update Action resource by identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteFsuActionRequest
   * @return DeleteFsuActionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/DeleteFsuAction.ts.html |here} to see how to use DeleteFsuAction API.
   */
  public async deleteFsuAction(
    deleteFsuActionRequest: requests.DeleteFsuActionRequest
  ): Promise<responses.DeleteFsuActionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#deleteFsuAction.");
    const operationName = "deleteFsuAction";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuActionId}": deleteFsuActionRequest.fsuActionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFsuActionRequest.ifMatch,
      "opc-request-id": deleteFsuActionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFsuActionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuActions/{fsuActionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFsuActionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Exadata Fleet Update Collection resource by identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteFsuCollectionRequest
   * @return DeleteFsuCollectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/DeleteFsuCollection.ts.html |here} to see how to use DeleteFsuCollection API.
   */
  public async deleteFsuCollection(
    deleteFsuCollectionRequest: requests.DeleteFsuCollectionRequest
  ): Promise<responses.DeleteFsuCollectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#deleteFsuCollection.");
    const operationName = "deleteFsuCollection";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCollectionId}": deleteFsuCollectionRequest.fsuCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFsuCollectionRequest.ifMatch,
      "opc-request-id": deleteFsuCollectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFsuCollectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCollections/{fsuCollectionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFsuCollectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a target from an existing Exadata Fleet Update Collection.
   * This operation can only be performed on Collections that do not have an Action executing under an active Fleet Software Update Cycle.
   * Additionally, during an active Fleet Software Update Cycle, a target can be removed only prior to executing an Apply Action.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteFsuCollectionTargetRequest
   * @return DeleteFsuCollectionTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/DeleteFsuCollectionTarget.ts.html |here} to see how to use DeleteFsuCollectionTarget API.
   */
  public async deleteFsuCollectionTarget(
    deleteFsuCollectionTargetRequest: requests.DeleteFsuCollectionTargetRequest
  ): Promise<responses.DeleteFsuCollectionTargetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#deleteFsuCollectionTarget.");
    const operationName = "deleteFsuCollectionTarget";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCollectionId}": deleteFsuCollectionTargetRequest.fsuCollectionId,
      "{targetId}": deleteFsuCollectionTargetRequest.targetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFsuCollectionTargetRequest.ifMatch,
      "opc-request-id": deleteFsuCollectionTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFsuCollectionTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCollections/{fsuCollectionId}/targets/{targetId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFsuCollectionTargetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Exadata Fleet Update Cycle resource by identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteFsuCycleRequest
   * @return DeleteFsuCycleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/DeleteFsuCycle.ts.html |here} to see how to use DeleteFsuCycle API.
   */
  public async deleteFsuCycle(
    deleteFsuCycleRequest: requests.DeleteFsuCycleRequest
  ): Promise<responses.DeleteFsuCycleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#deleteFsuCycle.");
    const operationName = "deleteFsuCycle";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCycleId}": deleteFsuCycleRequest.fsuCycleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFsuCycleRequest.ifMatch,
      "opc-request-id": deleteFsuCycleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFsuCycleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCycles/{fsuCycleId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFsuCycleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Exadata Fleet Update Discovery resource by identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteFsuDiscoveryRequest
   * @return DeleteFsuDiscoveryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/DeleteFsuDiscovery.ts.html |here} to see how to use DeleteFsuDiscovery API.
   */
  public async deleteFsuDiscovery(
    deleteFsuDiscoveryRequest: requests.DeleteFsuDiscoveryRequest
  ): Promise<responses.DeleteFsuDiscoveryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#deleteFsuDiscovery.");
    const operationName = "deleteFsuDiscovery";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuDiscoveryId}": deleteFsuDiscoveryRequest.fsuDiscoveryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFsuDiscoveryRequest.ifMatch,
      "opc-request-id": deleteFsuDiscoveryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFsuDiscoveryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuDiscoveries/{fsuDiscoveryId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFsuDiscoveryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the Exadata Fleet Update Job resource by identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteFsuJobRequest
   * @return DeleteFsuJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/DeleteFsuJob.ts.html |here} to see how to use DeleteFsuJob API.
   */
  public async deleteFsuJob(
    deleteFsuJobRequest: requests.DeleteFsuJobRequest
  ): Promise<responses.DeleteFsuJobResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetSoftwareUpdateClient#deleteFsuJob.");
    const operationName = "deleteFsuJob";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuJobId}": deleteFsuJobRequest.fsuJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteFsuJobRequest.opcRequestId,
      "if-match": deleteFsuJobRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFsuJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuJobs/{fsuJobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFsuJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Exadata Fleet Update Action by identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFsuActionRequest
   * @return GetFsuActionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/GetFsuAction.ts.html |here} to see how to use GetFsuAction API.
   */
  public async getFsuAction(
    getFsuActionRequest: requests.GetFsuActionRequest
  ): Promise<responses.GetFsuActionResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetSoftwareUpdateClient#getFsuAction.");
    const operationName = "getFsuAction";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuActionId}": getFsuActionRequest.fsuActionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFsuActionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFsuActionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuActions/{fsuActionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFsuActionResponse>{},
        body: await response.json(),
        bodyKey: "fsuAction",
        bodyModel: model.FsuAction,
        type: "model.FsuAction",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Exadata Fleet Update Action Output content as a binary file (string).
   * This will only include the output from FAILED Exadata Fleet Update Jobs. No content in case there are no FAILED jobs.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFsuActionOutputContentRequest
   * @return GetFsuActionOutputContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/GetFsuActionOutputContent.ts.html |here} to see how to use GetFsuActionOutputContent API.
   */
  public async getFsuActionOutputContent(
    getFsuActionOutputContentRequest: requests.GetFsuActionOutputContentRequest
  ): Promise<responses.GetFsuActionOutputContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#getFsuActionOutputContent.");
    const operationName = "getFsuActionOutputContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuActionId}": getFsuActionOutputContentRequest.fsuActionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFsuActionOutputContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFsuActionOutputContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuActions/{fsuActionId}/output/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFsuActionOutputContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Exadata Fleet Update Collection by identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFsuCollectionRequest
   * @return GetFsuCollectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/GetFsuCollection.ts.html |here} to see how to use GetFsuCollection API.
   */
  public async getFsuCollection(
    getFsuCollectionRequest: requests.GetFsuCollectionRequest
  ): Promise<responses.GetFsuCollectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#getFsuCollection.");
    const operationName = "getFsuCollection";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCollectionId}": getFsuCollectionRequest.fsuCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFsuCollectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFsuCollectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCollections/{fsuCollectionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFsuCollectionResponse>{},
        body: await response.json(),
        bodyKey: "fsuCollection",
        bodyModel: model.FsuCollection,
        type: "model.FsuCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Exadata Fleet Update Collection Target by identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFsuCollectionTargetRequest
   * @return GetFsuCollectionTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/GetFsuCollectionTarget.ts.html |here} to see how to use GetFsuCollectionTarget API.
   */
  public async getFsuCollectionTarget(
    getFsuCollectionTargetRequest: requests.GetFsuCollectionTargetRequest
  ): Promise<responses.GetFsuCollectionTargetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#getFsuCollectionTarget.");
    const operationName = "getFsuCollectionTarget";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCollectionId}": getFsuCollectionTargetRequest.fsuCollectionId,
      "{targetId}": getFsuCollectionTargetRequest.targetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFsuCollectionTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFsuCollectionTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCollections/{fsuCollectionId}/targets/{targetId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFsuCollectionTargetResponse>{},
        body: await response.json(),
        bodyKey: "fsuCollectionTarget",
        bodyModel: model.FsuCollectionTarget,
        type: "model.FsuCollectionTarget",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Exadata Fleet Update Cycle by identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFsuCycleRequest
   * @return GetFsuCycleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/GetFsuCycle.ts.html |here} to see how to use GetFsuCycle API.
   */
  public async getFsuCycle(
    getFsuCycleRequest: requests.GetFsuCycleRequest
  ): Promise<responses.GetFsuCycleResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetSoftwareUpdateClient#getFsuCycle.");
    const operationName = "getFsuCycle";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCycleId}": getFsuCycleRequest.fsuCycleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFsuCycleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFsuCycleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCycles/{fsuCycleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFsuCycleResponse>{},
        body: await response.json(),
        bodyKey: "fsuCycle",
        bodyModel: model.FsuCycle,
        type: "model.FsuCycle",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Exadata Fleet Update Discovery by identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFsuDiscoveryRequest
   * @return GetFsuDiscoveryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/GetFsuDiscovery.ts.html |here} to see how to use GetFsuDiscovery API.
   */
  public async getFsuDiscovery(
    getFsuDiscoveryRequest: requests.GetFsuDiscoveryRequest
  ): Promise<responses.GetFsuDiscoveryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#getFsuDiscovery.");
    const operationName = "getFsuDiscovery";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuDiscoveryId}": getFsuDiscoveryRequest.fsuDiscoveryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFsuDiscoveryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFsuDiscoveryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuDiscoveries/{fsuDiscoveryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFsuDiscoveryResponse>{},
        body: await response.json(),
        bodyKey: "fsuDiscovery",
        bodyModel: model.FsuDiscovery,
        type: "model.FsuDiscovery",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Exadata Fleet Update Job by identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFsuJobRequest
   * @return GetFsuJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/GetFsuJob.ts.html |here} to see how to use GetFsuJob API.
   */
  public async getFsuJob(
    getFsuJobRequest: requests.GetFsuJobRequest
  ): Promise<responses.GetFsuJobResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetSoftwareUpdateClient#getFsuJob.");
    const operationName = "getFsuJob";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuJobId}": getFsuJobRequest.fsuJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFsuJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFsuJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuJobs/{fsuJobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFsuJobResponse>{},
        body: await response.json(),
        bodyKey: "fsuJob",
        bodyModel: model.FsuJob,
        type: "model.FsuJob",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the Exadata Fleet Update Job Output content as a binary file (string).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFsuJobOutputContentRequest
   * @return GetFsuJobOutputContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/GetFsuJobOutputContent.ts.html |here} to see how to use GetFsuJobOutputContent API.
   */
  public async getFsuJobOutputContent(
    getFsuJobOutputContentRequest: requests.GetFsuJobOutputContentRequest
  ): Promise<responses.GetFsuJobOutputContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#getFsuJobOutputContent.");
    const operationName = "getFsuJobOutputContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuJobId}": getFsuJobOutputContentRequest.fsuJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFsuJobOutputContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFsuJobOutputContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuJobs/{fsuJobId}/output/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFsuJobOutputContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request with the specified ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all Exadata Fleet Update Actions in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFsuActionsRequest
   * @return ListFsuActionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ListFsuActions.ts.html |here} to see how to use ListFsuActions API.
   */
  public async listFsuActions(
    listFsuActionsRequest: requests.ListFsuActionsRequest
  ): Promise<responses.ListFsuActionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#listFsuActions.");
    const operationName = "listFsuActions";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listFsuActionsRequest.compartmentId,
      "fsuCycleId": listFsuActionsRequest.fsuCycleId,
      "lifecycleState": listFsuActionsRequest.lifecycleState,
      "displayName": listFsuActionsRequest.displayName,
      "type": listFsuActionsRequest.type,
      "limit": listFsuActionsRequest.limit,
      "page": listFsuActionsRequest.page,
      "sortOrder": listFsuActionsRequest.sortOrder,
      "sortBy": listFsuActionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFsuActionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFsuActionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuActions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFsuActionsResponse>{},
        body: await response.json(),
        bodyKey: "fsuActionSummaryCollection",
        bodyModel: model.FsuActionSummaryCollection,
        type: "model.FsuActionSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all Targets that are members of a specific Exadata Fleet Update Collection.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFsuCollectionTargetsRequest
   * @return ListFsuCollectionTargetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ListFsuCollectionTargets.ts.html |here} to see how to use ListFsuCollectionTargets API.
   */
  public async listFsuCollectionTargets(
    listFsuCollectionTargetsRequest: requests.ListFsuCollectionTargetsRequest
  ): Promise<responses.ListFsuCollectionTargetsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#listFsuCollectionTargets.");
    const operationName = "listFsuCollectionTargets";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCollectionId}": listFsuCollectionTargetsRequest.fsuCollectionId
    };

    const queryParams = {
      "compartmentId": listFsuCollectionTargetsRequest.compartmentId,
      "targetId": listFsuCollectionTargetsRequest.targetId,
      "status": listFsuCollectionTargetsRequest.status,
      "limit": listFsuCollectionTargetsRequest.limit,
      "page": listFsuCollectionTargetsRequest.page,
      "sortOrder": listFsuCollectionTargetsRequest.sortOrder,
      "sortBy": listFsuCollectionTargetsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFsuCollectionTargetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFsuCollectionTargetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCollections/{fsuCollectionId}/targets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFsuCollectionTargetsResponse>{},
        body: await response.json(),
        bodyKey: "targetSummaryCollection",
        bodyModel: model.TargetSummaryCollection,
        type: "model.TargetSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all Exadata Fleet Update Collections in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFsuCollectionsRequest
   * @return ListFsuCollectionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ListFsuCollections.ts.html |here} to see how to use ListFsuCollections API.
   */
  public async listFsuCollections(
    listFsuCollectionsRequest: requests.ListFsuCollectionsRequest
  ): Promise<responses.ListFsuCollectionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#listFsuCollections.");
    const operationName = "listFsuCollections";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listFsuCollectionsRequest.compartmentId,
      "lifecycleState": listFsuCollectionsRequest.lifecycleState,
      "displayName": listFsuCollectionsRequest.displayName,
      "type": listFsuCollectionsRequest.type,
      "limit": listFsuCollectionsRequest.limit,
      "page": listFsuCollectionsRequest.page,
      "sortOrder": listFsuCollectionsRequest.sortOrder,
      "sortBy": listFsuCollectionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFsuCollectionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFsuCollectionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCollections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFsuCollectionsResponse>{},
        body: await response.json(),
        bodyKey: "fsuCollectionSummaryCollection",
        bodyModel: model.FsuCollectionSummaryCollection,
        type: "model.FsuCollectionSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all Exadata Fleet Update Cycles in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFsuCyclesRequest
   * @return ListFsuCyclesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ListFsuCycles.ts.html |here} to see how to use ListFsuCycles API.
   */
  public async listFsuCycles(
    listFsuCyclesRequest: requests.ListFsuCyclesRequest
  ): Promise<responses.ListFsuCyclesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#listFsuCycles.");
    const operationName = "listFsuCycles";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listFsuCyclesRequest.compartmentId,
      "fsuCollectionId": listFsuCyclesRequest.fsuCollectionId,
      "lifecycleState": listFsuCyclesRequest.lifecycleState,
      "collectionType": listFsuCyclesRequest.collectionType,
      "displayName": listFsuCyclesRequest.displayName,
      "targetVersion": listFsuCyclesRequest.targetVersion,
      "limit": listFsuCyclesRequest.limit,
      "page": listFsuCyclesRequest.page,
      "sortOrder": listFsuCyclesRequest.sortOrder,
      "sortBy": listFsuCyclesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFsuCyclesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFsuCyclesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCycles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFsuCyclesResponse>{},
        body: await response.json(),
        bodyKey: "fsuCycleSummaryCollection",
        bodyModel: model.FsuCycleSummaryCollection,
        type: "model.FsuCycleSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Exadata Fleet Update Discoveries resources in the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFsuDiscoveriesRequest
   * @return ListFsuDiscoveriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ListFsuDiscoveries.ts.html |here} to see how to use ListFsuDiscoveries API.
   */
  public async listFsuDiscoveries(
    listFsuDiscoveriesRequest: requests.ListFsuDiscoveriesRequest
  ): Promise<responses.ListFsuDiscoveriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#listFsuDiscoveries.");
    const operationName = "listFsuDiscoveries";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listFsuDiscoveriesRequest.compartmentId,
      "lifecycleState": listFsuDiscoveriesRequest.lifecycleState,
      "displayName": listFsuDiscoveriesRequest.displayName,
      "limit": listFsuDiscoveriesRequest.limit,
      "page": listFsuDiscoveriesRequest.page,
      "sortOrder": listFsuDiscoveriesRequest.sortOrder,
      "sortBy": listFsuDiscoveriesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFsuDiscoveriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFsuDiscoveriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuDiscoveries",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFsuDiscoveriesResponse>{},
        body: await response.json(),
        bodyKey: "fsuDiscoverySummaryCollection",
        bodyModel: model.FsuDiscoverySummaryCollection,
        type: "model.FsuDiscoverySummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all Targets in the results of a Exadata Fleet Update Discovery.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFsuDiscoveryTargetsRequest
   * @return ListFsuDiscoveryTargetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ListFsuDiscoveryTargets.ts.html |here} to see how to use ListFsuDiscoveryTargets API.
   */
  public async listFsuDiscoveryTargets(
    listFsuDiscoveryTargetsRequest: requests.ListFsuDiscoveryTargetsRequest
  ): Promise<responses.ListFsuDiscoveryTargetsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#listFsuDiscoveryTargets.");
    const operationName = "listFsuDiscoveryTargets";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuDiscoveryId}": listFsuDiscoveryTargetsRequest.fsuDiscoveryId
    };

    const queryParams = {
      "compartmentId": listFsuDiscoveryTargetsRequest.compartmentId,
      "targetId": listFsuDiscoveryTargetsRequest.targetId,
      "status": listFsuDiscoveryTargetsRequest.status,
      "limit": listFsuDiscoveryTargetsRequest.limit,
      "page": listFsuDiscoveryTargetsRequest.page,
      "sortOrder": listFsuDiscoveryTargetsRequest.sortOrder,
      "sortBy": listFsuDiscoveryTargetsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFsuDiscoveryTargetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFsuDiscoveryTargetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuDiscoveries/{fsuDiscoveryId}/targets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFsuDiscoveryTargetsResponse>{},
        body: await response.json(),
        bodyKey: "targetSummaryCollection",
        bodyModel: model.TargetSummaryCollection,
        type: "model.TargetSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Exadata Fleet Update Job Output messages, if any.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFsuJobOutputsRequest
   * @return ListFsuJobOutputsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ListFsuJobOutputs.ts.html |here} to see how to use ListFsuJobOutputs API.
   */
  public async listFsuJobOutputs(
    listFsuJobOutputsRequest: requests.ListFsuJobOutputsRequest
  ): Promise<responses.ListFsuJobOutputsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#listFsuJobOutputs.");
    const operationName = "listFsuJobOutputs";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuJobId}": listFsuJobOutputsRequest.fsuJobId
    };

    const queryParams = {
      "limit": listFsuJobOutputsRequest.limit,
      "page": listFsuJobOutputsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFsuJobOutputsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFsuJobOutputsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuJobs/{fsuJobId}/output",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFsuJobOutputsResponse>{},
        body: await response.json(),
        bodyKey: "fsuJobOutputSummaryCollection",
        bodyModel: model.FsuJobOutputSummaryCollection,
        type: "model.FsuJobOutputSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all the Exadata Fleet Update Jobs associated to the specified Exadata Fleet Update Action.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFsuJobsRequest
   * @return ListFsuJobsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ListFsuJobs.ts.html |here} to see how to use ListFsuJobs API.
   */
  public async listFsuJobs(
    listFsuJobsRequest: requests.ListFsuJobsRequest
  ): Promise<responses.ListFsuJobsResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetSoftwareUpdateClient#listFsuJobs.");
    const operationName = "listFsuJobs";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "fsuActionId": listFsuJobsRequest.fsuActionId,
      "lifecycleState": listFsuJobsRequest.lifecycleState,
      "displayName": listFsuJobsRequest.displayName,
      "sortBy": listFsuJobsRequest.sortBy,
      "limit": listFsuJobsRequest.limit,
      "page": listFsuJobsRequest.page,
      "sortOrder": listFsuJobsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFsuJobsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFsuJobsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuJobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFsuJobsResponse>{},
        body: await response.json(),
        bodyKey: "fsuJobCollection",
        bodyModel: model.FsuJobCollection,
        type: "model.FsuJobCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a paginated list of errors for a specified Work Request..
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a paginated list of logs for a specified Work Request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes targets from an existing Exadata Fleet Update Collection.
   * This operation can only be performed on Collections that do not have an Action executing under an active Fleet Software Update Cycle.
   * Additionally, during an active Fleet Software Update Cycle, targets can be removed only prior to executing an Apply Action.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RemoveFsuCollectionTargetsRequest
   * @return RemoveFsuCollectionTargetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/RemoveFsuCollectionTargets.ts.html |here} to see how to use RemoveFsuCollectionTargets API.
   */
  public async removeFsuCollectionTargets(
    removeFsuCollectionTargetsRequest: requests.RemoveFsuCollectionTargetsRequest
  ): Promise<responses.RemoveFsuCollectionTargetsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#removeFsuCollectionTargets.");
    const operationName = "removeFsuCollectionTargets";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCollectionId}": removeFsuCollectionTargetsRequest.fsuCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": removeFsuCollectionTargetsRequest.ifMatch,
      "opc-request-id": removeFsuCollectionTargetsRequest.opcRequestId,
      "opc-retry-token": removeFsuCollectionTargetsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeFsuCollectionTargetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCollections/{fsuCollectionId}/targets",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        removeFsuCollectionTargetsRequest.removeFsuCollectionTargetsDetails,
        "RemoveFsuCollectionTargetsDetails",
        model.RemoveFsuCollectionTargetsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveFsuCollectionTargetsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Resumes an Action that has batches of targets waiting to execute.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ResumeFsuActionRequest
   * @return ResumeFsuActionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/ResumeFsuAction.ts.html |here} to see how to use ResumeFsuAction API.
   */
  public async resumeFsuAction(
    resumeFsuActionRequest: requests.ResumeFsuActionRequest
  ): Promise<responses.ResumeFsuActionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#resumeFsuAction.");
    const operationName = "resumeFsuAction";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuActionId}": resumeFsuActionRequest.fsuActionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": resumeFsuActionRequest.ifMatch,
      "opc-request-id": resumeFsuActionRequest.opcRequestId,
      "opc-retry-token": resumeFsuActionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      resumeFsuActionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuActions/{fsuActionId}/actions/resume",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ResumeFsuActionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retry a failed Job, only while the current Action is being executed.
   * After the Action reaches a terminal state, a new Action of the same kind is required to retry on failed targets.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RetryFsuJobRequest
   * @return RetryFsuJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/RetryFsuJob.ts.html |here} to see how to use RetryFsuJob API.
   */
  public async retryFsuJob(
    retryFsuJobRequest: requests.RetryFsuJobRequest
  ): Promise<responses.RetryFsuJobResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetSoftwareUpdateClient#retryFsuJob.");
    const operationName = "retryFsuJob";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuJobId}": retryFsuJobRequest.fsuJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": retryFsuJobRequest.ifMatch,
      "opc-request-id": retryFsuJobRequest.opcRequestId,
      "opc-retry-token": retryFsuJobRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      retryFsuJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuJobs/{fsuJobId}/actions/retry",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RetryFsuJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Exadata Fleet Update Action identified by the ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFsuActionRequest
   * @return UpdateFsuActionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/UpdateFsuAction.ts.html |here} to see how to use UpdateFsuAction API.
   */
  public async updateFsuAction(
    updateFsuActionRequest: requests.UpdateFsuActionRequest
  ): Promise<responses.UpdateFsuActionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#updateFsuAction.");
    const operationName = "updateFsuAction";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuActionId}": updateFsuActionRequest.fsuActionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFsuActionRequest.ifMatch,
      "opc-request-id": updateFsuActionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFsuActionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuActions/{fsuActionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFsuActionRequest.updateFsuActionDetails,
        "UpdateFsuActionDetails",
        model.UpdateFsuActionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFsuActionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Exadata Fleet Update Collection identified by the ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFsuCollectionRequest
   * @return UpdateFsuCollectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/UpdateFsuCollection.ts.html |here} to see how to use UpdateFsuCollection API.
   */
  public async updateFsuCollection(
    updateFsuCollectionRequest: requests.UpdateFsuCollectionRequest
  ): Promise<responses.UpdateFsuCollectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#updateFsuCollection.");
    const operationName = "updateFsuCollection";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCollectionId}": updateFsuCollectionRequest.fsuCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFsuCollectionRequest.ifMatch,
      "opc-request-id": updateFsuCollectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFsuCollectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCollections/{fsuCollectionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFsuCollectionRequest.updateFsuCollectionDetails,
        "UpdateFsuCollectionDetails",
        model.UpdateFsuCollectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFsuCollectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Exadata Fleet Update Cycle identified by the ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFsuCycleRequest
   * @return UpdateFsuCycleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/UpdateFsuCycle.ts.html |here} to see how to use UpdateFsuCycle API.
   */
  public async updateFsuCycle(
    updateFsuCycleRequest: requests.UpdateFsuCycleRequest
  ): Promise<responses.UpdateFsuCycleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#updateFsuCycle.");
    const operationName = "updateFsuCycle";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuCycleId}": updateFsuCycleRequest.fsuCycleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFsuCycleRequest.ifMatch,
      "opc-request-id": updateFsuCycleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFsuCycleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuCycles/{fsuCycleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFsuCycleRequest.updateFsuCycleDetails,
        "UpdateFsuCycleDetails",
        model.UpdateFsuCycleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFsuCycleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Exadata Fleet Update Discovery identified by the ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFsuDiscoveryRequest
   * @return UpdateFsuDiscoveryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/UpdateFsuDiscovery.ts.html |here} to see how to use UpdateFsuDiscovery API.
   */
  public async updateFsuDiscovery(
    updateFsuDiscoveryRequest: requests.UpdateFsuDiscoveryRequest
  ): Promise<responses.UpdateFsuDiscoveryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation FleetSoftwareUpdateClient#updateFsuDiscovery.");
    const operationName = "updateFsuDiscovery";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuDiscoveryId}": updateFsuDiscoveryRequest.fsuDiscoveryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateFsuDiscoveryRequest.ifMatch,
      "opc-request-id": updateFsuDiscoveryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFsuDiscoveryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuDiscoveries/{fsuDiscoveryId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFsuDiscoveryRequest.updateFsuDiscoveryDetails,
        "UpdateFsuDiscoveryDetails",
        model.UpdateFsuDiscoveryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFsuDiscoveryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates Exadata Fleet Update Job resource details.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFsuJobRequest
   * @return UpdateFsuJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/fleetsoftwareupdate/UpdateFsuJob.ts.html |here} to see how to use UpdateFsuJob API.
   */
  public async updateFsuJob(
    updateFsuJobRequest: requests.UpdateFsuJobRequest
  ): Promise<responses.UpdateFsuJobResponse> {
    if (this.logger) this.logger.debug("Calling operation FleetSoftwareUpdateClient#updateFsuJob.");
    const operationName = "updateFsuJob";
    const apiReferenceLink = "";
    const pathParams = {
      "{fsuJobId}": updateFsuJobRequest.fsuJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateFsuJobRequest.opcRequestId,
      "if-match": updateFsuJobRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFsuJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fsuJobs/{fsuJobId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFsuJobRequest.updateFsuJobDetails,
        "UpdateFsuJobDetails",
        model.UpdateFsuJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFsuJobResponse>{},
        body: await response.json(),
        bodyKey: "fsuJob",
        bodyModel: model.FsuJob,
        type: "model.FsuJob",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
