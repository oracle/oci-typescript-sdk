/**
 * Exadata Fleet Update service API
 * Use the Exadata Fleet Update service to patch large collections of components directly,
as a single entity, orchestrating the maintenance actions to update all chosen components in the stack in a single cycle.

 * OpenAPI spec version: 20220528
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Goal version or image details for the Exadata Fleet Update Cycle.
 *
 */
export interface FsuGoalVersionDetails {
  /**
   * Goal home policy to use when Staging the Goal Version during patching.
   * CREATE_NEW: Create a new DBHome (for Database Collections) for the specified image or version.
   * USE_EXISTING: All database targets in the same VMCluster or CloudVmCluster will be moved to a shared database home.
   *   If an existing home for the selected image or version is not found in the VM Cluster for a target database, then a new home will be created.
   *   If more than one existing home for the selected image is found, then the home with the least number of databases will be used.
   *   If multiple homes have the least number of databases, then a home will be selected at random.
   *
   */
  "homePolicy"?: FsuGoalVersionDetails.HomePolicy;
  /**
   * Prefix name used for new DB home resources created as part of the Stage Action.
   * Format: <specified_prefix>_<timestamp>
   * If not specified, a default OCI DB home resource will be generated for the new DB home resources created.
   *
   */
  "newHomePrefix"?: string;

  "type": string;
}

export namespace FsuGoalVersionDetails {
  export enum HomePolicy {
    CreateNew = "CREATE_NEW",
    UseExisting = "USE_EXISTING",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: FsuGoalVersionDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "EXADB_STACK":
          return model.ExadbStackFsuGoalVersionDetails.getJsonObj(
            <model.ExadbStackFsuGoalVersionDetails>(<object>jsonObj),
            true
          );
        case "VERSION":
          return model.VersionFsuTargetDetails.getJsonObj(
            <model.VersionFsuTargetDetails>(<object>jsonObj),
            true
          );
        case "IMAGE_ID":
          return model.ImageIdFsuTargetDetails.getJsonObj(
            <model.ImageIdFsuTargetDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: FsuGoalVersionDetails): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "EXADB_STACK":
          return model.ExadbStackFsuGoalVersionDetails.getDeserializedJsonObj(
            <model.ExadbStackFsuGoalVersionDetails>(<object>jsonObj),
            true
          );
        case "VERSION":
          return model.VersionFsuTargetDetails.getDeserializedJsonObj(
            <model.VersionFsuTargetDetails>(<object>jsonObj),
            true
          );
        case "IMAGE_ID":
          return model.ImageIdFsuTargetDetails.getDeserializedJsonObj(
            <model.ImageIdFsuTargetDetails>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
}
