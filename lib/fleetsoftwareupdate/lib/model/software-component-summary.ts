/**
 * Exadata Fleet Update service API
 * Use the Exadata Fleet Update service to patch large collections of components directly,
as a single entity, orchestrating the maintenance actions to update all chosen components in the stack in a single cycle.

 * OpenAPI spec version: 20220528
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Summary of a component in an Exadata software stack.
 *
 */
export interface SoftwareComponentSummary {
  "componentType": string;
}

export namespace SoftwareComponentSummary {
  export function getJsonObj(obj: SoftwareComponentSummary): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "componentType" in obj && obj.componentType) {
      switch (obj.componentType) {
        case "GUEST_OS":
          return model.GuestOsSoftwareComponentSummary.getJsonObj(
            <model.GuestOsSoftwareComponentSummary>(<object>jsonObj),
            true
          );
        case "GI":
          return model.GiSoftwareComponentSummary.getJsonObj(
            <model.GiSoftwareComponentSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.componentType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: SoftwareComponentSummary): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "componentType" in obj && obj.componentType) {
      switch (obj.componentType) {
        case "GUEST_OS":
          return model.GuestOsSoftwareComponentSummary.getDeserializedJsonObj(
            <model.GuestOsSoftwareComponentSummary>(<object>jsonObj),
            true
          );
        case "GI":
          return model.GiSoftwareComponentSummary.getDeserializedJsonObj(
            <model.GiSoftwareComponentSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.componentType}`);
      }
    }
    return jsonObj;
  }
}
