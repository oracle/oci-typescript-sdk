/**
 * Exadata Fleet Update service API
 * Use the Exadata Fleet Update service to patch large collections of components directly,
as a single entity, orchestrating the maintenance actions to update all chosen components in the stack in a single cycle.

 * OpenAPI spec version: 20220528
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Exadata Release versions to include when discovering Exadata VM Cluster targets for a 'GUEST_OS' collection.
 * Only release versions related to the specified sourceMajorVersion are allowed.
 *
 */
export interface GuestOsExadataReleaseVersionFilter extends model.GuestOsFleetDiscoveryFilter {
  /**
   * List of Exadata Release versions to include when discovering Exadata VM Cluster targets for a 'GUEST_OS' collection.
   *
   */
  "exadataReleases": Array<GuestOsExadataReleaseVersionFilter.ExadataReleases>;

  "type": string;
}

export namespace GuestOsExadataReleaseVersionFilter {
  export enum ExadataReleases {
    ExaOl5111 = "EXA_OL_5_11_1",
    ExaOl5112 = "EXA_OL_5_11_2",
    ExaOl5121 = "EXA_OL_5_12_1",
    ExaOl6122 = "EXA_OL_6_12_2",
    ExaOl6181 = "EXA_OL_6_18_1",
    ExaOl7191 = "EXA_OL_7_19_1",
    ExaOl7192 = "EXA_OL_7_19_2",
    ExaOl7193 = "EXA_OL_7_19_3",
    ExaOl7201 = "EXA_OL_7_20_1",
    ExaOl7212 = "EXA_OL_7_21_2",
    ExaOl7221 = "EXA_OL_7_22_1",
    ExaOl8231 = "EXA_OL_8_23_1",
    ExaOl8241 = "EXA_OL_8_24_1",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(
    obj: GuestOsExadataReleaseVersionFilter,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.GuestOsFleetDiscoveryFilter.getJsonObj(
            obj
          ) as GuestOsExadataReleaseVersionFilter)),
      ...{}
    };

    return jsonObj;
  }
  export const type = "EXADATA_RELEASE_VERSION";
  export function getDeserializedJsonObj(
    obj: GuestOsExadataReleaseVersionFilter,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.GuestOsFleetDiscoveryFilter.getDeserializedJsonObj(
            obj
          ) as GuestOsExadataReleaseVersionFilter)),
      ...{}
    };

    return jsonObj;
  }
}
