/**
 * Exadata Fleet Update service API
 * Use the Exadata Fleet Update service to patch large collections of components directly,
as a single entity, orchestrating the maintenance actions to update all chosen components in the stack in a single cycle.

 * OpenAPI spec version: 20220528
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Discovery filter details of 'GUEST_OS' component in an Exadata software stack.
 *
 */
export interface GuestOsSoftwareComponentDiscoveryDetails
  extends model.SoftwareComponentDiscoveryDetails {
  /**
   * Major version of Exadata Image (Guest OS) release for Exadata VM Cluster targets to be included in the results for an Exadata Fleet Update Discovery.
   * Major Versions of Exadata Software are demarcated by the underlying Oracle Linux OS version.
   * For more details, refer to [Oracle document 2075007.1](https://support.oracle.com/knowledge/Oracle%20Database%20Products/2075007_1.html)
   *
   */
  "sourceMajorVersion": model.GuestOsSourceMajorVersions;
  "criteria":
    | model.GuestOsTargetListDiscovery
    | model.GuestOsSearchQueryDiscovery
    | model.GuestOsDiscoveryResults
    | model.GuestOsFiltersDiscovery;

  "componentType": string;
}

export namespace GuestOsSoftwareComponentDiscoveryDetails {
  export function getJsonObj(
    obj: GuestOsSoftwareComponentDiscoveryDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.SoftwareComponentDiscoveryDetails.getJsonObj(
            obj
          ) as GuestOsSoftwareComponentDiscoveryDetails)),
      ...{
        "criteria": obj.criteria
          ? model.GuestOsFleetDiscoveryDetails.getJsonObj(obj.criteria)
          : undefined
      }
    };

    return jsonObj;
  }
  export const componentType = "GUEST_OS";
  export function getDeserializedJsonObj(
    obj: GuestOsSoftwareComponentDiscoveryDetails,
    isParentJsonObj?: boolean
  ): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.SoftwareComponentDiscoveryDetails.getDeserializedJsonObj(
            obj
          ) as GuestOsSoftwareComponentDiscoveryDetails)),
      ...{
        "criteria": obj.criteria
          ? model.GuestOsFleetDiscoveryDetails.getDeserializedJsonObj(obj.criteria)
          : undefined
      }
    };

    return jsonObj;
  }
}
