/**
 * Exadata Fleet Update service API
 * Use the Exadata Fleet Update service to patch large collections of components directly,
as a single entity, orchestrating the maintenance actions to update all chosen components in the stack in a single cycle.

 * OpenAPI spec version: 20220528
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Add Targets to an Exadata Fleet Update Collection.
 * Targets belonging to another Exadata Fleet Update Collection of the same type will be rejected.
 * If automated maintenance is enabled for the Exadata Fleet Update Collection, then ensure that the scheduling policy and window can accommodate the targets being added.
 *
 */
export interface AddFsuCollectionTargetsDetails {
  /**
   * List of Targets to add into the Exadata Fleet Update Collection.
   *
   */
  "targets": Array<model.TargetEntry>;
}

export namespace AddFsuCollectionTargetsDetails {
  export function getJsonObj(obj: AddFsuCollectionTargetsDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "targets": obj.targets
          ? obj.targets.map(item => {
              return model.TargetEntry.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: AddFsuCollectionTargetsDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "targets": obj.targets
          ? obj.targets.map(item => {
              return model.TargetEntry.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
