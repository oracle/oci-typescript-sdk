/**
 * Exadata Fleet Update service API
 * Use the Exadata Fleet Update service to patch large collections of components directly,
as a single entity, orchestrating the maintenance actions to update all chosen components in the stack in a single cycle.

 * OpenAPI spec version: 20220528
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Exadata Fleet Update Discovery resource details.
 *
 */
export interface FsuDiscovery {
  /**
   * OCID identifier for the Exadata Fleet Update Discovery.
   *
   */
  "id": string;
  /**
   * Exadata Fleet Update Discovery display name.
   *
   */
  "displayName": string;
  /**
   * Compartment Identifier.
   *
   */
  "compartmentId": string;
  "details":
    | model.GiDiscoveryDetails
    | model.DbDiscoveryDetails
    | model.ExadbStackDiscoveryDetails
    | model.GuestOsDiscoveryDetails;
  /**
   * The date and time the Exadata Fleet Update Discovery was created, as described in
   * [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
   *
   */
  "timeCreated": Date;
  /**
   * The date and time the Exadata Fleet Update Discovery was updated,
   * as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339),
   * section 14.29.
   *
   */
  "timeUpdated"?: Date;
  /**
   * The date and time the Exadata Fleet Update Discovery was finished,
   * as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
   *
   */
  "timeFinished"?: Date;
  /**
   * The current state of the Exadata Fleet Update Discovery.
   *
   */
  "lifecycleState": model.DiscoveryLifecycleStates;
  /**
   * A message describing the current state in more detail.
   * For example, can be used to provide actionable information for a resource in Failed state.
   *
   */
  "lifecycleDetails"?: string;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: {@code {\"bar-key\": \"value\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
}

export namespace FsuDiscovery {
  export function getJsonObj(obj: FsuDiscovery): object {
    const jsonObj = {
      ...obj,
      ...{
        "details": obj.details ? model.DiscoveryDetails.getJsonObj(obj.details) : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: FsuDiscovery): object {
    const jsonObj = {
      ...obj,
      ...{
        "details": obj.details
          ? model.DiscoveryDetails.getDeserializedJsonObj(obj.details)
          : undefined
      }
    };

    return jsonObj;
  }
}
