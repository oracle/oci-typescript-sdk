/**
 * Java Management Service Java Download API
 * The APIs for the [Java Download](https://docs.oracle.com/en-us/iaas/jms/doc/java-download.html) feature of Java Management Service.
 * OpenAPI spec version: 20230601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { JavaDownloadClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class JavaDownloadWaiter {
  public constructor(
    private client: JavaDownloadClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forJavaDownloadReport till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetJavaDownloadReportResponse | null (null in case of 404 response)
   */
  public async forJavaDownloadReport(
    request: serviceRequests.GetJavaDownloadReportRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetJavaDownloadReportResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getJavaDownloadReport(request),
      response => targetStates.includes(response.javaDownloadReport.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forJavaDownloadToken till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetJavaDownloadTokenResponse | null (null in case of 404 response)
   */
  public async forJavaDownloadToken(
    request: serviceRequests.GetJavaDownloadTokenRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetJavaDownloadTokenResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getJavaDownloadToken(request),
      response => targetStates.includes(response.javaDownloadToken.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forJavaLicenseAcceptanceRecord till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetJavaLicenseAcceptanceRecordResponse | null (null in case of 404 response)
   */
  public async forJavaLicenseAcceptanceRecord(
    request: serviceRequests.GetJavaLicenseAcceptanceRecordRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetJavaLicenseAcceptanceRecordResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getJavaLicenseAcceptanceRecord(request),
      response => targetStates.includes(response.javaLicenseAcceptanceRecord.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
