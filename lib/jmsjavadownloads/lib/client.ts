/**
 * Java Management Service Java Download API
 * The APIs for the [Java Download](https://docs.oracle.com/en-us/iaas/jms/doc/java-download.html) feature of Java Management Service.
 * OpenAPI spec version: 20230601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { JavaDownloadWaiter } from "./javadownload-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum JavaDownloadApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class JavaDownloadClient {
  protected static serviceEndpointTemplate =
    "https://javamanagementservice-download.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": JavaDownloadWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "JavaDownload";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;
  protected _authProvider: common.AuthenticationDetailsProvider | undefined;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._authProvider = params.authenticationDetailsProvider;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("jmsjavadownloads")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("jmsjavadownloads");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    if (this.logger) this.logger.info(`JavaDownloadClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        JavaDownloadClient.serviceEndpointTemplate,
        this._region,
        JavaDownloadClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        JavaDownloadClient.serviceEndpointTemplate,
        this._regionId,
        JavaDownloadClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      JavaDownloadClient.serviceEndpointTemplate,
      region,
      JavaDownloadClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      JavaDownloadClient.serviceEndpointTemplate,
      regionId,
      JavaDownloadClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new JavaDownloadWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): JavaDownloadWaiter {
    this._waiters = new JavaDownloadWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): JavaDownloadWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the provider if possible which in turn shuts down any associated circuit breaker
   */
  public closeProvider() {
    if (this._authProvider) {
      if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
        (<common.AbstractRequestingAuthenticationDetailsProvider>(
          this._authProvider
        )).closeProvider();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
    this.closeProvider();
  }

  /**
   * Cancels the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation JavaDownloadClient#cancelWorkRequest.");
    const operationName = "cancelWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelWorkRequestRequest.ifMatch,
      "opc-request-id": cancelWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new report in the specified format containing the download details
   * for the tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateJavaDownloadReportRequest
   * @return CreateJavaDownloadReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/CreateJavaDownloadReport.ts.html |here} to see how to use CreateJavaDownloadReport API.
   */
  public async createJavaDownloadReport(
    createJavaDownloadReportRequest: requests.CreateJavaDownloadReportRequest
  ): Promise<responses.CreateJavaDownloadReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#createJavaDownloadReport.");
    const operationName = "createJavaDownloadReport";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createJavaDownloadReportRequest.opcRetryToken,
      "opc-request-id": createJavaDownloadReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createJavaDownloadReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaDownloadReports",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createJavaDownloadReportRequest.createJavaDownloadReportDetails,
        "CreateJavaDownloadReportDetails",
        model.CreateJavaDownloadReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateJavaDownloadReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new JavaDownloadToken in the tenancy with specified attributes.
   * Ensure that you review the license terms before token generation. Visit the <a href=\"https://www.oracle.com/java/technologies/downloads\"/>Oracle Java Downloads</a> page to understand the license terms of the Java version for which you are generating a token. By generating a token, you agree to the associated license terms. See <a href=\"https://www.oracle.com/cis/java/technologies/javase/jdk-faqs.html\">Oracle JDK Licensing - FAQs</a> for detailed information.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateJavaDownloadTokenRequest
   * @return CreateJavaDownloadTokenResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/CreateJavaDownloadToken.ts.html |here} to see how to use CreateJavaDownloadToken API.
   */
  public async createJavaDownloadToken(
    createJavaDownloadTokenRequest: requests.CreateJavaDownloadTokenRequest
  ): Promise<responses.CreateJavaDownloadTokenResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#createJavaDownloadToken.");
    const operationName = "createJavaDownloadToken";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createJavaDownloadTokenRequest.opcRetryToken,
      "opc-request-id": createJavaDownloadTokenRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createJavaDownloadTokenRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaDownloadTokens",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createJavaDownloadTokenRequest.createJavaDownloadTokenDetails,
        "CreateJavaDownloadTokenDetails",
        model.CreateJavaDownloadTokenDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateJavaDownloadTokenResponse>{},
        body: await response.json(),
        bodyKey: "javaDownloadToken",
        bodyModel: model.JavaDownloadToken,
        type: "model.JavaDownloadToken",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a Java license acceptance record for the specified license type in a tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateJavaLicenseAcceptanceRecordRequest
   * @return CreateJavaLicenseAcceptanceRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/CreateJavaLicenseAcceptanceRecord.ts.html |here} to see how to use CreateJavaLicenseAcceptanceRecord API.
   */
  public async createJavaLicenseAcceptanceRecord(
    createJavaLicenseAcceptanceRecordRequest: requests.CreateJavaLicenseAcceptanceRecordRequest
  ): Promise<responses.CreateJavaLicenseAcceptanceRecordResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#createJavaLicenseAcceptanceRecord.");
    const operationName = "createJavaLicenseAcceptanceRecord";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createJavaLicenseAcceptanceRecordRequest.opcRetryToken,
      "opc-request-id": createJavaLicenseAcceptanceRecordRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createJavaLicenseAcceptanceRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaLicenseAcceptanceRecords",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createJavaLicenseAcceptanceRecordRequest.createJavaLicenseAcceptanceRecordDetails,
        "CreateJavaLicenseAcceptanceRecordDetails",
        model.CreateJavaLicenseAcceptanceRecordDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateJavaLicenseAcceptanceRecordResponse>{},
        body: await response.json(),
        bodyKey: "javaLicenseAcceptanceRecord",
        bodyModel: model.JavaLicenseAcceptanceRecord,
        type: "model.JavaLicenseAcceptanceRecord",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a JavaDownloadReport resource by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteJavaDownloadReportRequest
   * @return DeleteJavaDownloadReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/DeleteJavaDownloadReport.ts.html |here} to see how to use DeleteJavaDownloadReport API.
   */
  public async deleteJavaDownloadReport(
    deleteJavaDownloadReportRequest: requests.DeleteJavaDownloadReportRequest
  ): Promise<responses.DeleteJavaDownloadReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#deleteJavaDownloadReport.");
    const operationName = "deleteJavaDownloadReport";
    const apiReferenceLink = "";
    const pathParams = {
      "{javaDownloadReportId}": deleteJavaDownloadReportRequest.javaDownloadReportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteJavaDownloadReportRequest.ifMatch,
      "opc-request-id": deleteJavaDownloadReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteJavaDownloadReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaDownloadReports/{javaDownloadReportId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteJavaDownloadReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a JavaDownloadToken resource by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteJavaDownloadTokenRequest
   * @return DeleteJavaDownloadTokenResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/DeleteJavaDownloadToken.ts.html |here} to see how to use DeleteJavaDownloadToken API.
   */
  public async deleteJavaDownloadToken(
    deleteJavaDownloadTokenRequest: requests.DeleteJavaDownloadTokenRequest
  ): Promise<responses.DeleteJavaDownloadTokenResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#deleteJavaDownloadToken.");
    const operationName = "deleteJavaDownloadToken";
    const apiReferenceLink = "";
    const pathParams = {
      "{javaDownloadTokenId}": deleteJavaDownloadTokenRequest.javaDownloadTokenId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteJavaDownloadTokenRequest.ifMatch,
      "opc-request-id": deleteJavaDownloadTokenRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteJavaDownloadTokenRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaDownloadTokens/{javaDownloadTokenId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteJavaDownloadTokenResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Java license acceptance record with the specified identifier.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteJavaLicenseAcceptanceRecordRequest
   * @return DeleteJavaLicenseAcceptanceRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/DeleteJavaLicenseAcceptanceRecord.ts.html |here} to see how to use DeleteJavaLicenseAcceptanceRecord API.
   */
  public async deleteJavaLicenseAcceptanceRecord(
    deleteJavaLicenseAcceptanceRecordRequest: requests.DeleteJavaLicenseAcceptanceRecordRequest
  ): Promise<responses.DeleteJavaLicenseAcceptanceRecordResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#deleteJavaLicenseAcceptanceRecord.");
    const operationName = "deleteJavaLicenseAcceptanceRecord";
    const apiReferenceLink = "";
    const pathParams = {
      "{javaLicenseAcceptanceRecordId}":
        deleteJavaLicenseAcceptanceRecordRequest.javaLicenseAcceptanceRecordId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteJavaLicenseAcceptanceRecordRequest.ifMatch,
      "opc-request-id": deleteJavaLicenseAcceptanceRecordRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteJavaLicenseAcceptanceRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaLicenseAcceptanceRecords/{javaLicenseAcceptanceRecordId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteJavaLicenseAcceptanceRecordResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Generates a download URL and returns it in the response payload.
* The URL in the response can then be used for downloading the specific Java runtime artifact.
* <p>
Use the {@link #getJavaRelease(GetJavaReleaseRequest) getJavaRelease} API
* to get information about available artifacts for a specific release. Each artifact is uniquely identified by an `artifactId`.
* Refer {@link #javaArtifact(JavaArtifactRequest) javaArtifact} for more details.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateArtifactDownloadUrlRequest
     * @return GenerateArtifactDownloadUrlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/GenerateArtifactDownloadUrl.ts.html |here} to see how to use GenerateArtifactDownloadUrl API.
     */
  public async generateArtifactDownloadUrl(
    generateArtifactDownloadUrlRequest: requests.GenerateArtifactDownloadUrlRequest
  ): Promise<responses.GenerateArtifactDownloadUrlResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#generateArtifactDownloadUrl.");
    const operationName = "generateArtifactDownloadUrl";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateArtifactDownloadUrlRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateArtifactDownloadUrlRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/actions/generateArtifactDownloadUrl",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateArtifactDownloadUrlRequest.generateArtifactDownloadUrlDetails,
        "GenerateArtifactDownloadUrlDetails",
        model.GenerateArtifactDownloadUrlDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateArtifactDownloadUrlResponse>{},
        body: await response.json(),
        bodyKey: "downloadUrl",
        bodyModel: model.DownloadUrl,
        type: "model.DownloadUrl",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a JavaDownloadReport by the specified identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJavaDownloadReportRequest
   * @return GetJavaDownloadReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/GetJavaDownloadReport.ts.html |here} to see how to use GetJavaDownloadReport API.
   */
  public async getJavaDownloadReport(
    getJavaDownloadReportRequest: requests.GetJavaDownloadReportRequest
  ): Promise<responses.GetJavaDownloadReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#getJavaDownloadReport.");
    const operationName = "getJavaDownloadReport";
    const apiReferenceLink = "";
    const pathParams = {
      "{javaDownloadReportId}": getJavaDownloadReportRequest.javaDownloadReportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJavaDownloadReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJavaDownloadReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaDownloadReports/{javaDownloadReportId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJavaDownloadReportResponse>{},
        body: await response.json(),
        bodyKey: "javaDownloadReport",
        bodyModel: model.JavaDownloadReport,
        type: "model.JavaDownloadReport",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve a Java download report with the specified identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJavaDownloadReportContentRequest
   * @return GetJavaDownloadReportContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/GetJavaDownloadReportContent.ts.html |here} to see how to use GetJavaDownloadReportContent API.
   */
  public async getJavaDownloadReportContent(
    getJavaDownloadReportContentRequest: requests.GetJavaDownloadReportContentRequest
  ): Promise<responses.GetJavaDownloadReportContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#getJavaDownloadReportContent.");
    const operationName = "getJavaDownloadReportContent";
    const apiReferenceLink = "";
    const pathParams = {
      "{javaDownloadReportId}": getJavaDownloadReportContentRequest.javaDownloadReportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJavaDownloadReportContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJavaDownloadReportContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaDownloadReports/{javaDownloadReportId}/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJavaDownloadReportContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a JavaDownloadToken by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJavaDownloadTokenRequest
   * @return GetJavaDownloadTokenResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/GetJavaDownloadToken.ts.html |here} to see how to use GetJavaDownloadToken API.
   */
  public async getJavaDownloadToken(
    getJavaDownloadTokenRequest: requests.GetJavaDownloadTokenRequest
  ): Promise<responses.GetJavaDownloadTokenResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#getJavaDownloadToken.");
    const operationName = "getJavaDownloadToken";
    const apiReferenceLink = "";
    const pathParams = {
      "{javaDownloadTokenId}": getJavaDownloadTokenRequest.javaDownloadTokenId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJavaDownloadTokenRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJavaDownloadTokenRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaDownloadTokens/{javaDownloadTokenId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJavaDownloadTokenResponse>{},
        body: await response.json(),
        bodyKey: "javaDownloadToken",
        bodyModel: model.JavaDownloadToken,
        type: "model.JavaDownloadToken",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return details of the specified Java license type.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJavaLicenseRequest
   * @return GetJavaLicenseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/GetJavaLicense.ts.html |here} to see how to use GetJavaLicense API.
   */
  public async getJavaLicense(
    getJavaLicenseRequest: requests.GetJavaLicenseRequest
  ): Promise<responses.GetJavaLicenseResponse> {
    if (this.logger) this.logger.debug("Calling operation JavaDownloadClient#getJavaLicense.");
    const operationName = "getJavaLicense";
    const apiReferenceLink = "";
    const pathParams = {
      "{licenseType}": getJavaLicenseRequest.licenseType
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJavaLicenseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJavaLicenseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaLicenses/{licenseType}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJavaLicenseResponse>{},
        body: await response.json(),
        bodyKey: "javaLicense",
        bodyModel: model.JavaLicense,
        type: "model.JavaLicense",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a specific Java license acceptance record in a tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJavaLicenseAcceptanceRecordRequest
   * @return GetJavaLicenseAcceptanceRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/GetJavaLicenseAcceptanceRecord.ts.html |here} to see how to use GetJavaLicenseAcceptanceRecord API.
   */
  public async getJavaLicenseAcceptanceRecord(
    getJavaLicenseAcceptanceRecordRequest: requests.GetJavaLicenseAcceptanceRecordRequest
  ): Promise<responses.GetJavaLicenseAcceptanceRecordResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#getJavaLicenseAcceptanceRecord.");
    const operationName = "getJavaLicenseAcceptanceRecord";
    const apiReferenceLink = "";
    const pathParams = {
      "{javaLicenseAcceptanceRecordId}":
        getJavaLicenseAcceptanceRecordRequest.javaLicenseAcceptanceRecordId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJavaLicenseAcceptanceRecordRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJavaLicenseAcceptanceRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaLicenseAcceptanceRecords/{javaLicenseAcceptanceRecordId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJavaLicenseAcceptanceRecordResponse>{},
        body: await response.json(),
        bodyKey: "javaLicenseAcceptanceRecord",
        bodyModel: model.JavaLicenseAcceptanceRecord,
        type: "model.JavaLicenseAcceptanceRecord",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets details of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation JavaDownloadClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Java download records in a tenancy based on specified parameters.
   * See {@link #listJavaReleases(ListJavaReleasesRequest) listJavaReleases}
   * for possible values of `javaFamilyVersion` and `javaReleaseVersion` parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJavaDownloadRecordsRequest
   * @return ListJavaDownloadRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/ListJavaDownloadRecords.ts.html |here} to see how to use ListJavaDownloadRecords API.
   */
  public async listJavaDownloadRecords(
    listJavaDownloadRecordsRequest: requests.ListJavaDownloadRecordsRequest
  ): Promise<responses.ListJavaDownloadRecordsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#listJavaDownloadRecords.");
    const operationName = "listJavaDownloadRecords";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJavaDownloadRecordsRequest.compartmentId,
      "familyVersion": listJavaDownloadRecordsRequest.familyVersion,
      "releaseVersion": listJavaDownloadRecordsRequest.releaseVersion,
      "osFamily": listJavaDownloadRecordsRequest.osFamily,
      "architecture": listJavaDownloadRecordsRequest.architecture,
      "packageTypeDetail": listJavaDownloadRecordsRequest.packageTypeDetail,
      "timeStart": listJavaDownloadRecordsRequest.timeStart,
      "timeEnd": listJavaDownloadRecordsRequest.timeEnd,
      "limit": listJavaDownloadRecordsRequest.limit,
      "page": listJavaDownloadRecordsRequest.page,
      "sortOrder": listJavaDownloadRecordsRequest.sortOrder,
      "sortBy": listJavaDownloadRecordsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJavaDownloadRecordsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJavaDownloadRecordsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaDownloadRecords",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJavaDownloadRecordsResponse>{},
        body: await response.json(),
        bodyKey: "javaDownloadRecordCollection",
        bodyModel: model.JavaDownloadRecordCollection,
        type: "model.JavaDownloadRecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of JavaDownloadReports.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJavaDownloadReportsRequest
   * @return ListJavaDownloadReportsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/ListJavaDownloadReports.ts.html |here} to see how to use ListJavaDownloadReports API.
   */
  public async listJavaDownloadReports(
    listJavaDownloadReportsRequest: requests.ListJavaDownloadReportsRequest
  ): Promise<responses.ListJavaDownloadReportsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#listJavaDownloadReports.");
    const operationName = "listJavaDownloadReports";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJavaDownloadReportsRequest.compartmentId,
      "lifecycleState": listJavaDownloadReportsRequest.lifecycleState,
      "displayName": listJavaDownloadReportsRequest.displayName,
      "javaDownloadReportId": listJavaDownloadReportsRequest.javaDownloadReportId,
      "limit": listJavaDownloadReportsRequest.limit,
      "page": listJavaDownloadReportsRequest.page,
      "sortOrder": listJavaDownloadReportsRequest.sortOrder,
      "sortBy": listJavaDownloadReportsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJavaDownloadReportsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJavaDownloadReportsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaDownloadReports",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJavaDownloadReportsResponse>{},
        body: await response.json(),
        bodyKey: "javaDownloadReportCollection",
        bodyModel: model.JavaDownloadReportCollection,
        type: "model.JavaDownloadReportCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of JavaDownloadTokens.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJavaDownloadTokensRequest
   * @return ListJavaDownloadTokensResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/ListJavaDownloadTokens.ts.html |here} to see how to use ListJavaDownloadTokens API.
   */
  public async listJavaDownloadTokens(
    listJavaDownloadTokensRequest: requests.ListJavaDownloadTokensRequest
  ): Promise<responses.ListJavaDownloadTokensResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#listJavaDownloadTokens.");
    const operationName = "listJavaDownloadTokens";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJavaDownloadTokensRequest.compartmentId,
      "lifecycleState": listJavaDownloadTokensRequest.lifecycleState,
      "displayName": listJavaDownloadTokensRequest.displayName,
      "id": listJavaDownloadTokensRequest.id,
      "value": listJavaDownloadTokensRequest.value,
      "familyVersion": listJavaDownloadTokensRequest.familyVersion,
      "searchByUser": listJavaDownloadTokensRequest.searchByUser,
      "limit": listJavaDownloadTokensRequest.limit,
      "page": listJavaDownloadTokensRequest.page,
      "sortOrder": listJavaDownloadTokensRequest.sortOrder,
      "sortBy": listJavaDownloadTokensRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJavaDownloadTokensRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJavaDownloadTokensRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaDownloadTokens",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJavaDownloadTokensResponse>{},
        body: await response.json(),
        bodyKey: "javaDownloadTokenCollection",
        bodyModel: model.JavaDownloadTokenCollection,
        type: "model.JavaDownloadTokenCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of all the Java license acceptance records in a tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJavaLicenseAcceptanceRecordsRequest
   * @return ListJavaLicenseAcceptanceRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/ListJavaLicenseAcceptanceRecords.ts.html |here} to see how to use ListJavaLicenseAcceptanceRecords API.
   */
  public async listJavaLicenseAcceptanceRecords(
    listJavaLicenseAcceptanceRecordsRequest: requests.ListJavaLicenseAcceptanceRecordsRequest
  ): Promise<responses.ListJavaLicenseAcceptanceRecordsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#listJavaLicenseAcceptanceRecords.");
    const operationName = "listJavaLicenseAcceptanceRecords";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJavaLicenseAcceptanceRecordsRequest.compartmentId,
      "searchByUser": listJavaLicenseAcceptanceRecordsRequest.searchByUser,
      "id": listJavaLicenseAcceptanceRecordsRequest.id,
      "licenseType": listJavaLicenseAcceptanceRecordsRequest.licenseType,
      "status": listJavaLicenseAcceptanceRecordsRequest.status,
      "limit": listJavaLicenseAcceptanceRecordsRequest.limit,
      "page": listJavaLicenseAcceptanceRecordsRequest.page,
      "sortOrder": listJavaLicenseAcceptanceRecordsRequest.sortOrder,
      "sortBy": listJavaLicenseAcceptanceRecordsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJavaLicenseAcceptanceRecordsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJavaLicenseAcceptanceRecordsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaLicenseAcceptanceRecords",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJavaLicenseAcceptanceRecordsResponse>{},
        body: await response.json(),
        bodyKey: "javaLicenseAcceptanceRecordCollection",
        bodyModel: model.JavaLicenseAcceptanceRecordCollection,
        type: "model.JavaLicenseAcceptanceRecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a list with details of all Java licenses.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJavaLicensesRequest
   * @return ListJavaLicensesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/ListJavaLicenses.ts.html |here} to see how to use ListJavaLicenses API.
   */
  public async listJavaLicenses(
    listJavaLicensesRequest: requests.ListJavaLicensesRequest
  ): Promise<responses.ListJavaLicensesResponse> {
    if (this.logger) this.logger.debug("Calling operation JavaDownloadClient#listJavaLicenses.");
    const operationName = "listJavaLicenses";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "licenseType": listJavaLicensesRequest.licenseType,
      "displayName": listJavaLicensesRequest.displayName,
      "limit": listJavaLicensesRequest.limit,
      "page": listJavaLicensesRequest.page,
      "sortOrder": listJavaLicensesRequest.sortOrder,
      "sortBy": listJavaLicensesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJavaLicensesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJavaLicensesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaLicenses",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJavaLicensesResponse>{},
        body: await response.json(),
        bodyKey: "javaLicenseCollection",
        bodyModel: model.JavaLicenseCollection,
        type: "model.JavaLicenseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of errors for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of logs for the work request with the given ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation JavaDownloadClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation JavaDownloadClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "id": listWorkRequestsRequest.id,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns list of download counts grouped by the specified property.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RequestSummarizedJavaDownloadCountsRequest
   * @return RequestSummarizedJavaDownloadCountsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/RequestSummarizedJavaDownloadCounts.ts.html |here} to see how to use RequestSummarizedJavaDownloadCounts API.
   */
  public async requestSummarizedJavaDownloadCounts(
    requestSummarizedJavaDownloadCountsRequest: requests.RequestSummarizedJavaDownloadCountsRequest
  ): Promise<responses.RequestSummarizedJavaDownloadCountsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation JavaDownloadClient#requestSummarizedJavaDownloadCounts."
      );
    const operationName = "requestSummarizedJavaDownloadCounts";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSummarizedJavaDownloadCountsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSummarizedJavaDownloadCountsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/actions/requestSummarizedJavaDownloadCounts",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        requestSummarizedJavaDownloadCountsRequest.requestSummarizedJavaDownloadCountsDetails,
        "RequestSummarizedJavaDownloadCountsDetails",
        model.RequestSummarizedJavaDownloadCountsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSummarizedJavaDownloadCountsResponse>{},
        body: await response.json(),
        bodyKey: "javaDownloadCountAggregationCollection",
        bodyModel: model.JavaDownloadCountAggregationCollection,
        type: "model.JavaDownloadCountAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the JavaDownloadToken specified by the identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateJavaDownloadTokenRequest
   * @return UpdateJavaDownloadTokenResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/UpdateJavaDownloadToken.ts.html |here} to see how to use UpdateJavaDownloadToken API.
   */
  public async updateJavaDownloadToken(
    updateJavaDownloadTokenRequest: requests.UpdateJavaDownloadTokenRequest
  ): Promise<responses.UpdateJavaDownloadTokenResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#updateJavaDownloadToken.");
    const operationName = "updateJavaDownloadToken";
    const apiReferenceLink = "";
    const pathParams = {
      "{javaDownloadTokenId}": updateJavaDownloadTokenRequest.javaDownloadTokenId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateJavaDownloadTokenRequest.ifMatch,
      "opc-request-id": updateJavaDownloadTokenRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateJavaDownloadTokenRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaDownloadTokens/{javaDownloadTokenId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateJavaDownloadTokenRequest.updateJavaDownloadTokenDetails,
        "UpdateJavaDownloadTokenDetails",
        model.UpdateJavaDownloadTokenDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateJavaDownloadTokenResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a specific Java license acceptance record in a tenancy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateJavaLicenseAcceptanceRecordRequest
   * @return UpdateJavaLicenseAcceptanceRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/jmsjavadownloads/UpdateJavaLicenseAcceptanceRecord.ts.html |here} to see how to use UpdateJavaLicenseAcceptanceRecord API.
   */
  public async updateJavaLicenseAcceptanceRecord(
    updateJavaLicenseAcceptanceRecordRequest: requests.UpdateJavaLicenseAcceptanceRecordRequest
  ): Promise<responses.UpdateJavaLicenseAcceptanceRecordResponse> {
    if (this.logger)
      this.logger.debug("Calling operation JavaDownloadClient#updateJavaLicenseAcceptanceRecord.");
    const operationName = "updateJavaLicenseAcceptanceRecord";
    const apiReferenceLink = "";
    const pathParams = {
      "{javaLicenseAcceptanceRecordId}":
        updateJavaLicenseAcceptanceRecordRequest.javaLicenseAcceptanceRecordId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateJavaLicenseAcceptanceRecordRequest.ifMatch,
      "opc-request-id": updateJavaLicenseAcceptanceRecordRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateJavaLicenseAcceptanceRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/20230601/javaLicenseAcceptanceRecords/{javaLicenseAcceptanceRecordId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateJavaLicenseAcceptanceRecordRequest.updateJavaLicenseAcceptanceRecordDetails,
        "UpdateJavaLicenseAcceptanceRecordDetails",
        model.UpdateJavaLicenseAcceptanceRecordDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateJavaLicenseAcceptanceRecordResponse>{},
        body: await response.json(),
        bodyKey: "javaLicenseAcceptanceRecord",
        bodyModel: model.JavaLicenseAcceptanceRecord,
        type: "model.JavaLicenseAcceptanceRecord",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
