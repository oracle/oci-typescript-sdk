/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The security rule to be evaluated by security assessment to create finding.
 */
export interface Check {
  /**
   * A unique identifier for the check.
   */
  "key": string;
  /**
   * The short title for the check.
   */
  "title"?: string;
  /**
   * The explanation of the issue in this check. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
   */
  "remarks"?: string;
  /**
   * Provides information on whether the check is related to a CIS Oracle Database Benchmark recommendation, STIG rule, GDPR Article/Recital or related to the Oracle Recommended Practice.
   */
  "references"?: model.References;
  /**
   * The category to which the check belongs to.
   */
  "category"?: string;
  /**
   * Provides a recommended approach to take to remediate the check reported.
   */
  "oneline"?: string;
  /**
   * The severity of the check as suggested by Data Safe security assessment. This will be the default severity in the template baseline security assessment.
   */
  "suggestedSeverity"?: Check.SuggestedSeverity;
}

export namespace Check {
  export enum SuggestedSeverity {
    High = "HIGH",
    Medium = "MEDIUM",
    Low = "LOW",
    Evaluate = "EVALUATE",
    Advisory = "ADVISORY",
    Pass = "PASS",
    Deferred = "DEFERRED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: Check): object {
    const jsonObj = {
      ...obj,
      ...{
        "references": obj.references ? model.References.getJsonObj(obj.references) : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: Check): object {
    const jsonObj = {
      ...obj,
      ...{
        "references": obj.references
          ? model.References.getDeserializedJsonObj(obj.references)
          : undefined
      }
    };

    return jsonObj;
  }
}
