/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The particular finding reported by the security assessment.
 */
export interface FindingSummary {
  /**
   * The severity of the finding as determined by security assessment and is same as oracleDefinedSeverity, unless modified by user.
   */
  "severity"?: FindingSummary.Severity;
  /**
   * The OCID of the assessment that generated this finding.
   */
  "assessmentId"?: string;
  /**
   * The OCID of the target database.
   */
  "targetId"?: string;
  /**
   * The unique finding key. This is a system-generated identifier. To get the finding key for a finding, use ListFindings.
   */
  "key"?: string;
  /**
   * Indicates whether a given finding is marked as topFinding or not.
   */
  "isTopFinding"?: boolean;
  /**
   * The short title for the finding.
   */
  "title"?: string;
  /**
   * The category to which the finding belongs to.
   */
  "category"?: string;
  /**
   * The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
   */
  "remarks"?: string;
  /**
   * The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
   */
  "details"?: any;
  /**
   * The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
   */
  "summary"?: string;
  /**
   * Provides a recommended approach to take to remediate the finding reported.
   */
  "oneline"?: string;
  /**
   * Documentation link provided by Oracle that explains a specific security finding or check.
   */
  "doclink"?: string;
  /**
   * Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, a STIG rule, or a GDPR Article/Recital.
   */
  "references"?: model.References;
  /**
   * The severity of the finding as determined by security assessment. This cannot be modified by user.
   */
  "oracleDefinedSeverity"?: string;
  /**
   * Determines if this risk level was modified by user.
   */
  "isRiskModified"?: boolean;
  /**
   * Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
   */
  "hasTargetDbRiskLevelChanged"?: boolean;
  /**
   * User provided reason for accepting or modifying this finding if they choose to do so.
   */
  "justification"?: string;
  /**
   * The time until which the change in severity(deferred / modified) of this finding is valid.
   */
  "timeValidUntil"?: Date;
  /**
   * The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   *
   */
  "timeUpdated"?: Date;
  /**
   * The current state of the finding.
   */
  "lifecycleState"?: model.FindingLifecycleState;
  /**
   * Details about the current state of the finding.
   */
  "lifecycleDetails"?: string;
}

export namespace FindingSummary {
  export enum Severity {
    High = "HIGH",
    Medium = "MEDIUM",
    Low = "LOW",
    Evaluate = "EVALUATE",
    Advisory = "ADVISORY",
    Pass = "PASS",
    Deferred = "DEFERRED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: FindingSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "references": obj.references ? model.References.getJsonObj(obj.references) : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: FindingSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "references": obj.references
          ? model.References.getDeserializedJsonObj(obj.references)
          : undefined
      }
    };

    return jsonObj;
  }
}
