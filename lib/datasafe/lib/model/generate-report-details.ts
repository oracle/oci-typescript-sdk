/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Details for the report generation.
 */
export interface GenerateReportDetails {
  /**
   * The name of the report to be generated
   */
  "displayName": string;
  /**
   * Array of database target OCIDs.
   */
  "targetIds"?: Array<string>;
  /**
   * Array of target group OCIDs.
   */
  "targetGroupIds"?: Array<string>;
  /**
   * The description of the report to be generated
   */
  "description"?: string;
  /**
   * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment
   * into which the resource should be moved.
   *
   */
  "compartmentId": string;
  /**
   * Specifies the format of report to be .xls or .pdf or .json
   */
  "mimeType": GenerateReportDetails.MimeType;
  /**
   * Specifies the time until which the data needs to be reported.
   */
  "timeLessThan"?: Date;
  /**
   * Specifies the time after which the data needs to be reported.
   */
  "timeGreaterThan"?: Date;
  /**
   * Specifies the limit on the number of rows in the report. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "rowLimit"?: number;
}

export namespace GenerateReportDetails {
  export enum MimeType {
    Pdf = "PDF",
    Xls = "XLS",
    Json = "JSON"
  }

  export function getJsonObj(obj: GenerateReportDetails): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: GenerateReportDetails): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
