/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The audit policy provisioning conditions.
 */
export interface PolicyCondition {
  /**
   * Specifies whether to include or exclude the specified users or roles.
   */
  "entitySelection": PolicyCondition.EntitySelection;
  /**
   * The operation status that the policy must be enabled for.
   */
  "operationStatus": PolicyCondition.OperationStatus;

  "entityType": string;
}

export namespace PolicyCondition {
  export enum EntitySelection {
    Include = "INCLUDE",
    Exclude = "EXCLUDE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum OperationStatus {
    Success = "SUCCESS",
    Failure = "FAILURE",
    Both = "BOTH",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: PolicyCondition): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "entityType" in obj && obj.entityType) {
      switch (obj.entityType) {
        case "ATTRIBUTE_SET":
          return model.AttributeSetCondition.getJsonObj(
            <model.AttributeSetCondition>(<object>jsonObj),
            true
          );
        case "USER":
          return model.UserCondition.getJsonObj(<model.UserCondition>(<object>jsonObj), true);
        case "ROLE":
          return model.RoleCondition.getJsonObj(<model.RoleCondition>(<object>jsonObj), true);
        case "ALL_USERS":
          return model.AllUserCondition.getJsonObj(<model.AllUserCondition>(<object>jsonObj), true);
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.entityType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: PolicyCondition): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "entityType" in obj && obj.entityType) {
      switch (obj.entityType) {
        case "ATTRIBUTE_SET":
          return model.AttributeSetCondition.getDeserializedJsonObj(
            <model.AttributeSetCondition>(<object>jsonObj),
            true
          );
        case "USER":
          return model.UserCondition.getDeserializedJsonObj(
            <model.UserCondition>(<object>jsonObj),
            true
          );
        case "ROLE":
          return model.RoleCondition.getDeserializedJsonObj(
            <model.RoleCondition>(<object>jsonObj),
            true
          );
        case "ALL_USERS":
          return model.AllUserCondition.getDeserializedJsonObj(
            <model.AllUserCondition>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.entityType}`);
      }
    }
    return jsonObj;
  }
}
