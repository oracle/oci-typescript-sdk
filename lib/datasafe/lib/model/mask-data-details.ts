/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Details to mask data.
 */
export interface MaskDataDetails {
  /**
   * The OCID of the target database to be masked. If it's not provided, the value of the
   * targetId attribute in the MaskingPolicy resource is used. The OCID of the target
   * database to be masked. If it's not provided, the value of the targetId attribute in
   * the MaskingPolicy resource is used.
   *
   */
  "targetId"?: string;
  /**
   * Indicates if the masking request is to decrypt the data values previously encrypted using Deterministic Encryption. Note that, to
   * correctly decrypt the encrypted data values, it requires the same seed value that was provided to encrypt those data values.
   *
   */
  "isDecrypt"?: boolean;
  /**
   * Indicates if the masking request is to rerun the previously failed masking steps. If a masking request is submitted with the
   * isIgnoreErrorsEnabled attribute set to true, the masking process tracks the failed masking steps. Another masking request can be
   * submitted with the isRun attribute set to true to rerun those failed masking steps. It helps save time by executing only the failed
   * masking steps and not doing the whole masking again.
   *
   */
  "isRerun"?: boolean;
  /**
   * Specifies the step from which masking needs to be rerun. This param will be used only when isRerun attribute is true.
   * If PRE_MASKING_SCRIPT is passed, it will rerun the pre-masking script, followed by masking, and then the post-masking script.
   * If POST_MASKING_SCRIPT is passed, it will rerun only the post-masking script.
   * If this field is not set and isRerun is set to true, then it will default to the last failed step.
   *
   */
  "reRunFromStep"?: MaskDataDetails.ReRunFromStep;
  /**
   * The tablespace that should be used to create the mapping tables, DMASK objects, and other temporary tables for data masking.
   * If no tablespace is provided, the DEFAULT tablespace is used.
   *
   */
  "tablespace"?: string;
  /**
   * Indicates if the masking process should continue on hitting an error. It provides fault tolerance support and is enabled by
   * default. In fault-tolerant mode, the masking process saves the failed step and continues. You can then submit another masking
   * request (with isRerun attribute set to true) to execute only the failed steps.
   *
   */
  "isIgnoreErrorsEnabled"?: boolean;
  /**
   * The seed value to be used in case of Deterministic Encryption and Deterministic Substitution masking formats.
   */
  "seed"?: string;
  /**
   * The seed value to be used in case of User Defined Function masking format. This is an optional parameter and needs to be passed only if any User Defined Function uses seed.
   */
  "userDefinedFunctionSeed"?: string;
  /**
   * Indicates if the interim DMASK tables should be moved to the user-specified tablespace. As interim tables can be large in size,
   * set it to false if moving them causes performance overhead during masking.
   *
   */
  "isMoveInterimTablesEnabled"?: boolean;
  /**
   * Indicates if data masking should be performed using a saved masking script. Setting this attribute to true skips masking script
   * generation and executes the masking script stored in the Data Safe repository. It helps save time if there are no changes in
   * the database tables and their dependencies.
   *
   */
  "isExecuteSavedScriptEnabled"?: boolean;
  /**
   * Indicates if the temporary tables created during a masking operation should be dropped after masking.
   * Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive
   * data values to mask values. These temporary tables are dropped after masking if this attribute is set as true. But, in some cases, you may want
   * to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables
   * must be dropped before the database is available for unprivileged users.
   * If it's not provided, the value of the isDropTempTablesEnabled attribute in the MaskingPolicy resource is used.
   *
   */
  "isDropTempTablesEnabled"?: boolean;
  /**
   * Indicates if redo logging is enabled during a masking operation. Set this attribute to true to
   * enable redo logging. If set as false, masking disables redo logging and flashback logging to purge any original unmasked
   * data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking,
   * you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
   * If it's not provided, the value of the isRedoLoggingEnabled attribute in the MaskingPolicy resource is used.
   *
   */
  "isRedoLoggingEnabled"?: boolean;
  /**
   * Indicates if statistics gathering is enabled. Set this attribute to false to disable statistics
   * gathering. The masking process gathers statistics on masked database tables after masking completes.
   * If it's not provided, the value of the isRefreshStatsEnabled attribute in the MaskingPolicy resource is used.
   *
   */
  "isRefreshStatsEnabled"?: boolean;
  /**
   * Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism),
   * 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree
   * of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the
   * Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
   * https://www.oracle.com/pls/topic/lookup?ctx=dblatest&en/database/oracle/oracle-database&id=VLDBG-GUID-3E2AE088-2505-465E-A8B2-AC38813EA355
   * If it's not provided, the value of the parallelDegree attribute in the MaskingPolicy resource is used.
   *
   */
  "parallelDegree"?: string;
  /**
   * Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),
   * 'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree
   * attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
   * If it's not provided, the value of the parallelDegree attribute in the MaskingPolicy resource is used.
   *
   */
  "recompile"?: string;
}

export namespace MaskDataDetails {
  export enum ReRunFromStep {
    PreMaskingScript = "PRE_MASKING_SCRIPT",
    PostMaskingScript = "POST_MASKING_SCRIPT"
  }

  export function getJsonObj(obj: MaskDataDetails): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: MaskDataDetails): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
