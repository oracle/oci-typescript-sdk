/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The resource represents the audit events collected from the target database by Oracle Data Safe.
 */
export interface AuditEventSummary {
  /**
   * The OCID of the audit event.
   */
  "id": string;
  /**
   * The OCID of the compartment containing the audit event. The compartment is the same as that of audit profile of the target database resource.
   */
  "compartmentId": string;
  /**
   * The name of the database user whose actions were audited.
   */
  "dbUserName"?: string;
  /**
   * The OCID of the target database that was audited.
   */
  "targetId": string;
  /**
   * The name of the target database that was audited.
   */
  "targetName": string;
  /**
   * The type of the target database that was audited. Allowed values are
   *   - DATABASE_CLOUD_SERVICE - Represents Oracle Database Cloud Services.
   *   - AUTONOMOUS_DATABASE - Represents Oracle Autonomous Databases.
   *   - INSTALLED_DATABASE - Represents databases running on-premises or on compute instances.
   *
   */
  "databaseType": AuditEventSummary.DatabaseType;
  /**
   * The class of the target that was audited.
   */
  "targetClass"?: AuditEventSummary.TargetClass;
  /**
   * The time that the audit event occurs in the target database.
   */
  "auditEventTime": Date;
  /**
   * The timestamp when this audit event was collected from the target database by Data Safe.
   */
  "timeCollected": Date;
  /**
   * The name of the operating system user for the database session.
   */
  "osUserName"?: string;
  /**
   * The name of the action executed by the user on the target database. For example ALTER, CREATE or DROP.
   */
  "operation"?: string;
  /**
   * Indicates whether the operation was a success or a failure.
   */
  "operationStatus"?: AuditEventSummary.OperationStatus;
  /**
   * The name of the detail action executed by the user on the target database. For example ALTER SEQUENCE, CREATE TRIGGER or CREATE INDEX.
   */
  "eventName"?: string;
  /**
   * Oracle Error code generated by the action. Zero indicates the action was successful.
   */
  "errorCode"?: string;
  /**
   * The detailed message on why the error occurred.
   */
  "errorMessage"?: string;
  /**
   * The type of the object in the source database affected by the action. For example PL/SQL, SYNONYM or PACKAGE BODY.
   */
  "objectType"?: string;
  /**
   * The name of the object affected by the action.
   */
  "objectName"?: string;
  /**
   * The schema name of the object affected by the action.
   */
  "objectOwner"?: string;
  /**
   * The name of the host machine from which the session was spawned.
   */
  "clientHostname"?: string;
  /**
   * The IP address of the host machine from which the session was spawned.
   */
  "clientIp"?: string;
  /**
   * The OCID of the audit trail that generated this audit event. To be noted, this field has been deprecated.
   */
  "auditTrailId"?: string;
  /**
   * Indicates whether an alert was raised for this audit event.
   */
  "isAlerted": boolean;
  /**
   * The action taken for this audit event.
   */
  "actionTaken"?: string;
  /**
   * The application from which the audit event was generated. For example SQL Plus or SQL Developer.
   */
  "clientProgram"?: string;
  /**
   * The SQL associated with the audit event.
   */
  "commandText"?: string;
  /**
   * List of bind variables associated with the command text.
   */
  "commandParam"?: string;
  /**
   * List of all other attributes of the audit event seperated by a colon other than the one returned in audit record.
   */
  "extendedEventAttributes"?: string;
  /**
   * The location of the audit. Currently the value is audit table.
   */
  "auditLocation"?: AuditEventSummary.AuditLocation;
  /**
   * The operating system terminal of the user session.
   */
  "osTerminal"?: string;
  /**
   * The client identifier in each Oracle session.
   */
  "clientId"?: string;
  /**
   * Comma-seperated list of audit policies that caused the current audit event.
   */
  "auditPolicies"?: string;
  /**
   * The type of the auditing.
   */
  "auditType"?: AuditEventSummary.AuditType;
  /**
   * The user ID of the external user of the audit event.
   */
  "externalUserId"?: string;
  /**
   * The user on whom the GRANT/REVOKE/AUDIT/NOAUDIT statement was executed.
   */
  "targetUser"?: string;
  /**
   * The secondary id assigned for the peer database registered with Data Safe. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "peerTargetDatabaseKey"?: number;
  /**
   * The underlying source of unified audit trail.
   */
  "trailSource"?: model.AuditTrailSource;
  /**
   * Unique name of the database associated to the peer target database.
   */
  "databaseUniqueName"?: string;
  /**
   * Semicolon-seperated list of application context namespace, attribute, value information in (APPCTX_NSPACE,APPCTX_ATTRIBUTE=<value>) format.
   */
  "applicationContexts"?: string;
  /**
   * Fine-grained auditing (FGA) policy name that generated this audit record.
   */
  "fgaPolicyName"?: string;
  /**
    * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)
* <p>
Example: {@code {\"Department\": \"Finance\"}}
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)
   * Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
}

export namespace AuditEventSummary {
  export enum DatabaseType {
    DatabaseCloudService = "DATABASE_CLOUD_SERVICE",
    AutonomousDatabase = "AUTONOMOUS_DATABASE",
    InstalledDatabase = "INSTALLED_DATABASE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum TargetClass {
    Database = "DATABASE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum OperationStatus {
    Success = "SUCCESS",
    Failure = "FAILURE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum AuditLocation {
    AuditTable = "AUDIT_TABLE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum AuditType {
    Standard = "STANDARD",
    FineGrained = "FINE_GRAINED",
    Xs = "XS",
    DatabaseVault = "DATABASE_VAULT",
    LabelSecurity = "LABEL_SECURITY",
    Rman = "RMAN",
    Datapump = "DATAPUMP",
    DirectPathApi = "DIRECT_PATH_API",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: AuditEventSummary): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: AuditEventSummary): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
