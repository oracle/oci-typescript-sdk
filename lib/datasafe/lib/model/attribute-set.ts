/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Represents an attribute set. An attribute set is a collection of data attributes defined by the user. i.e an attribute set of ip addresses, os user names or database privileged users.
 *
 */
export interface AttributeSet {
  /**
   * The OCID of an attribute set.
   */
  "id": string;
  /**
   * The OCID of the compartment where the attribute set is stored.
   */
  "compartmentId": string;
  /**
   * The display name of an attribute set. The name does not have to be unique, and is changeable.
   */
  "displayName": string;
  /**
   * Description of an attribute set.
   */
  "description"?: string;
  /**
   * The current state of an attribute set.
   */
  "lifecycleState": AttributeSet.LifecycleState;
  /**
   * The date and time an attribute set was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   */
  "timeCreated": Date;
  /**
   * The date and time an attribute set was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   */
  "timeUpdated"?: Date;
  /**
   * The type of attribute set.
   */
  "attributeSetType": AttributeSet.AttributeSetType;
  /**
   * The list of values in an attribute set
   */
  "attributeSetValues": Array<string>;
  /**
   * A boolean flag indicating to list user defined or seeded attribute sets.
   */
  "isUserDefined"?: boolean;
  /**
   * Indicates whether the attribute set is in use by other resource.
   */
  "inUse"?: AttributeSet.InUse;
  /**
    * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)
* <p>
Example: {@code {\"Department\": \"Finance\"}}
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)
   * Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
}

export namespace AttributeSet {
  export enum LifecycleState {
    Creating = "CREATING",
    Active = "ACTIVE",
    Failed = "FAILED",
    Deleting = "DELETING",
    Updating = "UPDATING",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum AttributeSetType {
    IpAddress = "IP_ADDRESS",
    ClientProgram = "CLIENT_PROGRAM",
    OsUser = "OS_USER",
    DatabaseUser = "DATABASE_USER",
    DatabaseObject = "DATABASE_OBJECT",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum InUse {
    Yes = "YES",
    No = "NO",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: AttributeSet): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: AttributeSet): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
