/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DataSafeClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class DataSafeWaiter {
  public constructor(
    private client: DataSafeClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forAlert till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAlertResponse
   */
  public async forAlert(
    request: serviceRequests.GetAlertRequest,
    ...targetStates: models.AlertLifecycleState[]
  ): Promise<serviceResponses.GetAlertResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getAlert(request),
      response => targetStates.includes(response.alert.lifecycleState!)
    );
  }

  /**
   * Waits forAlertPolicy till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAlertPolicyResponse | null (null in case of 404 response)
   */
  public async forAlertPolicy(
    request: serviceRequests.GetAlertPolicyRequest,
    ...targetStates: models.AlertPolicyLifecycleState[]
  ): Promise<serviceResponses.GetAlertPolicyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAlertPolicy(request),
      response => targetStates.includes(response.alertPolicy.lifecycleState!),
      targetStates.includes(models.AlertPolicyLifecycleState.Deleted)
    );
  }

  /**
   * Waits forAlertPolicyRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAlertPolicyRuleResponse
   */
  public async forAlertPolicyRule(
    request: serviceRequests.GetAlertPolicyRuleRequest,
    ...targetStates: models.AlertPolicyRuleLifecycleState[]
  ): Promise<serviceResponses.GetAlertPolicyRuleResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getAlertPolicyRule(request),
      response => targetStates.includes(response.alertPolicyRule.lifecycleState!)
    );
  }

  /**
   * Waits forAuditArchiveRetrieval till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAuditArchiveRetrievalResponse | null (null in case of 404 response)
   */
  public async forAuditArchiveRetrieval(
    request: serviceRequests.GetAuditArchiveRetrievalRequest,
    ...targetStates: models.AuditArchiveRetrievalLifecycleState[]
  ): Promise<serviceResponses.GetAuditArchiveRetrievalResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAuditArchiveRetrieval(request),
      response => targetStates.includes(response.auditArchiveRetrieval.lifecycleState!),
      targetStates.includes(models.AuditArchiveRetrievalLifecycleState.Deleted)
    );
  }

  /**
   * Waits forAuditPolicy till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAuditPolicyResponse | null (null in case of 404 response)
   */
  public async forAuditPolicy(
    request: serviceRequests.GetAuditPolicyRequest,
    ...targetStates: models.AuditPolicyLifecycleState[]
  ): Promise<serviceResponses.GetAuditPolicyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAuditPolicy(request),
      response => targetStates.includes(response.auditPolicy.lifecycleState!),
      targetStates.includes(models.AuditPolicyLifecycleState.Deleted)
    );
  }

  /**
   * Waits forAuditProfile till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAuditProfileResponse | null (null in case of 404 response)
   */
  public async forAuditProfile(
    request: serviceRequests.GetAuditProfileRequest,
    ...targetStates: models.AuditProfileLifecycleState[]
  ): Promise<serviceResponses.GetAuditProfileResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAuditProfile(request),
      response => targetStates.includes(response.auditProfile.lifecycleState!),
      targetStates.includes(models.AuditProfileLifecycleState.Deleted)
    );
  }

  /**
   * Waits forAuditTrail till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAuditTrailResponse
   */
  public async forAuditTrail(
    request: serviceRequests.GetAuditTrailRequest,
    ...targetStates: models.AuditTrailLifecycleState[]
  ): Promise<serviceResponses.GetAuditTrailResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getAuditTrail(request),
      response => targetStates.includes(response.auditTrail.lifecycleState!)
    );
  }

  /**
   * Waits forDataSafeConfiguration till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDataSafeConfigurationResponse | null (null in case of 404 response)
   */
  public async forDataSafeConfiguration(
    request: serviceRequests.GetDataSafeConfigurationRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDataSafeConfigurationResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDataSafeConfiguration(request),
      response => targetStates.includes(response.dataSafeConfiguration.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDataSafePrivateEndpoint till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDataSafePrivateEndpointResponse | null (null in case of 404 response)
   */
  public async forDataSafePrivateEndpoint(
    request: serviceRequests.GetDataSafePrivateEndpointRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDataSafePrivateEndpointResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDataSafePrivateEndpoint(request),
      response => targetStates.includes(response.dataSafePrivateEndpoint.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDatabaseSecurityConfig till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDatabaseSecurityConfigResponse | null (null in case of 404 response)
   */
  public async forDatabaseSecurityConfig(
    request: serviceRequests.GetDatabaseSecurityConfigRequest,
    ...targetStates: models.DatabaseSecurityConfigLifecycleState[]
  ): Promise<serviceResponses.GetDatabaseSecurityConfigResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDatabaseSecurityConfig(request),
      response => targetStates.includes(response.databaseSecurityConfig.lifecycleState!),
      targetStates.includes(models.DatabaseSecurityConfigLifecycleState.Deleted)
    );
  }

  /**
   * Waits forDiscoveryJob till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDiscoveryJobResponse | null (null in case of 404 response)
   */
  public async forDiscoveryJob(
    request: serviceRequests.GetDiscoveryJobRequest,
    ...targetStates: models.DiscoveryLifecycleState[]
  ): Promise<serviceResponses.GetDiscoveryJobResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDiscoveryJob(request),
      response => targetStates.includes(response.discoveryJob.lifecycleState!),
      targetStates.includes(models.DiscoveryLifecycleState.Deleted)
    );
  }

  /**
   * Waits forLibraryMaskingFormat till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetLibraryMaskingFormatResponse | null (null in case of 404 response)
   */
  public async forLibraryMaskingFormat(
    request: serviceRequests.GetLibraryMaskingFormatRequest,
    ...targetStates: models.MaskingLifecycleState[]
  ): Promise<serviceResponses.GetLibraryMaskingFormatResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getLibraryMaskingFormat(request),
      response => targetStates.includes(response.libraryMaskingFormat.lifecycleState!),
      targetStates.includes(models.MaskingLifecycleState.Deleted)
    );
  }

  /**
   * Waits forMaskingColumn till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMaskingColumnResponse
   */
  public async forMaskingColumn(
    request: serviceRequests.GetMaskingColumnRequest,
    ...targetStates: models.MaskingColumnLifecycleState[]
  ): Promise<serviceResponses.GetMaskingColumnResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getMaskingColumn(request),
      response => targetStates.includes(response.maskingColumn.lifecycleState!)
    );
  }

  /**
   * Waits forMaskingPolicy till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMaskingPolicyResponse | null (null in case of 404 response)
   */
  public async forMaskingPolicy(
    request: serviceRequests.GetMaskingPolicyRequest,
    ...targetStates: models.MaskingLifecycleState[]
  ): Promise<serviceResponses.GetMaskingPolicyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getMaskingPolicy(request),
      response => targetStates.includes(response.maskingPolicy.lifecycleState!),
      targetStates.includes(models.MaskingLifecycleState.Deleted)
    );
  }

  /**
   * Waits forMaskingPolicyHealthReport till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMaskingPolicyHealthReportResponse
   */
  public async forMaskingPolicyHealthReport(
    request: serviceRequests.GetMaskingPolicyHealthReportRequest,
    ...targetStates: models.MaskingPolicyHealthReport.LifecycleState[]
  ): Promise<serviceResponses.GetMaskingPolicyHealthReportResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getMaskingPolicyHealthReport(request),
      response => targetStates.includes(response.maskingPolicyHealthReport.lifecycleState!)
    );
  }

  /**
   * Waits forMaskingReport till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMaskingReportResponse | null (null in case of 404 response)
   */
  public async forMaskingReport(
    request: serviceRequests.GetMaskingReportRequest,
    ...targetStates: models.MaskingLifecycleState[]
  ): Promise<serviceResponses.GetMaskingReportResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getMaskingReport(request),
      response => targetStates.includes(response.maskingReport.lifecycleState!),
      targetStates.includes(models.MaskingLifecycleState.Deleted)
    );
  }

  /**
   * Waits forOnPremConnector till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetOnPremConnectorResponse | null (null in case of 404 response)
   */
  public async forOnPremConnector(
    request: serviceRequests.GetOnPremConnectorRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetOnPremConnectorResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getOnPremConnector(request),
      response => targetStates.includes(response.onPremConnector.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forPeerTargetDatabase till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetPeerTargetDatabaseResponse | null (null in case of 404 response)
   */
  public async forPeerTargetDatabase(
    request: serviceRequests.GetPeerTargetDatabaseRequest,
    ...targetStates: models.TargetDatabaseLifecycleState[]
  ): Promise<serviceResponses.GetPeerTargetDatabaseResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getPeerTargetDatabase(request),
      response => targetStates.includes(response.peerTargetDatabase.lifecycleState!),
      targetStates.includes(models.TargetDatabaseLifecycleState.Deleted)
    );
  }

  /**
   * Waits forReport till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetReportResponse
   */
  public async forReport(
    request: serviceRequests.GetReportRequest,
    ...targetStates: models.ReportLifecycleState[]
  ): Promise<serviceResponses.GetReportResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getReport(request),
      response => targetStates.includes(response.report.lifecycleState!)
    );
  }

  /**
   * Waits forReportDefinition till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetReportDefinitionResponse | null (null in case of 404 response)
   */
  public async forReportDefinition(
    request: serviceRequests.GetReportDefinitionRequest,
    ...targetStates: models.ReportDefinitionLifecycleState[]
  ): Promise<serviceResponses.GetReportDefinitionResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getReportDefinition(request),
      response => targetStates.includes(response.reportDefinition.lifecycleState!),
      targetStates.includes(models.ReportDefinitionLifecycleState.Deleted)
    );
  }

  /**
   * Waits forSdmMaskingPolicyDifference till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSdmMaskingPolicyDifferenceResponse | null (null in case of 404 response)
   */
  public async forSdmMaskingPolicyDifference(
    request: serviceRequests.GetSdmMaskingPolicyDifferenceRequest,
    ...targetStates: models.SdmMaskingPolicyDifference.LifecycleState[]
  ): Promise<serviceResponses.GetSdmMaskingPolicyDifferenceResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSdmMaskingPolicyDifference(request),
      response => targetStates.includes(response.sdmMaskingPolicyDifference.lifecycleState!),
      targetStates.includes(models.SdmMaskingPolicyDifference.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forSecurityAssessment till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSecurityAssessmentResponse | null (null in case of 404 response)
   */
  public async forSecurityAssessment(
    request: serviceRequests.GetSecurityAssessmentRequest,
    ...targetStates: models.SecurityAssessmentLifecycleState[]
  ): Promise<serviceResponses.GetSecurityAssessmentResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSecurityAssessment(request),
      response => targetStates.includes(response.securityAssessment.lifecycleState!),
      targetStates.includes(models.SecurityAssessmentLifecycleState.Deleted)
    );
  }

  /**
   * Waits forSecurityAssessmentComparison till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSecurityAssessmentComparisonResponse
   */
  public async forSecurityAssessmentComparison(
    request: serviceRequests.GetSecurityAssessmentComparisonRequest,
    ...targetStates: models.SecurityAssessmentComparison.LifecycleState[]
  ): Promise<serviceResponses.GetSecurityAssessmentComparisonResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getSecurityAssessmentComparison(request),
      response => targetStates.includes(response.securityAssessmentComparison.lifecycleState!)
    );
  }

  /**
   * Waits forSecurityPolicy till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSecurityPolicyResponse | null (null in case of 404 response)
   */
  public async forSecurityPolicy(
    request: serviceRequests.GetSecurityPolicyRequest,
    ...targetStates: models.SecurityPolicyLifecycleState[]
  ): Promise<serviceResponses.GetSecurityPolicyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSecurityPolicy(request),
      response => targetStates.includes(response.securityPolicy.lifecycleState!),
      targetStates.includes(models.SecurityPolicyLifecycleState.Deleted)
    );
  }

  /**
   * Waits forSecurityPolicyDeployment till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSecurityPolicyDeploymentResponse | null (null in case of 404 response)
   */
  public async forSecurityPolicyDeployment(
    request: serviceRequests.GetSecurityPolicyDeploymentRequest,
    ...targetStates: models.SecurityPolicyDeploymentLifecycleState[]
  ): Promise<serviceResponses.GetSecurityPolicyDeploymentResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSecurityPolicyDeployment(request),
      response => targetStates.includes(response.securityPolicyDeployment.lifecycleState!),
      targetStates.includes(models.SecurityPolicyDeploymentLifecycleState.Deleted)
    );
  }

  /**
   * Waits forSecurityPolicyReport till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSecurityPolicyReportResponse | null (null in case of 404 response)
   */
  public async forSecurityPolicyReport(
    request: serviceRequests.GetSecurityPolicyReportRequest,
    ...targetStates: models.SecurityPolicyReportLifecycleState[]
  ): Promise<serviceResponses.GetSecurityPolicyReportResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSecurityPolicyReport(request),
      response => targetStates.includes(response.securityPolicyReport.lifecycleState!),
      targetStates.includes(models.SecurityPolicyReportLifecycleState.Deleted)
    );
  }

  /**
   * Waits forSensitiveColumn till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSensitiveColumnResponse
   */
  public async forSensitiveColumn(
    request: serviceRequests.GetSensitiveColumnRequest,
    ...targetStates: models.SensitiveColumnLifecycleState[]
  ): Promise<serviceResponses.GetSensitiveColumnResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getSensitiveColumn(request),
      response => targetStates.includes(response.sensitiveColumn.lifecycleState!)
    );
  }

  /**
   * Waits forSensitiveDataModel till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSensitiveDataModelResponse | null (null in case of 404 response)
   */
  public async forSensitiveDataModel(
    request: serviceRequests.GetSensitiveDataModelRequest,
    ...targetStates: models.DiscoveryLifecycleState[]
  ): Promise<serviceResponses.GetSensitiveDataModelResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSensitiveDataModel(request),
      response => targetStates.includes(response.sensitiveDataModel.lifecycleState!),
      targetStates.includes(models.DiscoveryLifecycleState.Deleted)
    );
  }

  /**
   * Waits forSensitiveType till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSensitiveTypeResponse | null (null in case of 404 response)
   */
  public async forSensitiveType(
    request: serviceRequests.GetSensitiveTypeRequest,
    ...targetStates: models.DiscoveryLifecycleState[]
  ): Promise<serviceResponses.GetSensitiveTypeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSensitiveType(request),
      response => targetStates.includes(response.sensitiveType.lifecycleState!),
      targetStates.includes(models.DiscoveryLifecycleState.Deleted)
    );
  }

  /**
   * Waits forSqlCollection till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSqlCollectionResponse | null (null in case of 404 response)
   */
  public async forSqlCollection(
    request: serviceRequests.GetSqlCollectionRequest,
    ...targetStates: models.SqlCollectionLifecycleState[]
  ): Promise<serviceResponses.GetSqlCollectionResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSqlCollection(request),
      response => targetStates.includes(response.sqlCollection.lifecycleState!),
      targetStates.includes(models.SqlCollectionLifecycleState.Deleted)
    );
  }

  /**
   * Waits forSqlFirewallPolicy till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSqlFirewallPolicyResponse | null (null in case of 404 response)
   */
  public async forSqlFirewallPolicy(
    request: serviceRequests.GetSqlFirewallPolicyRequest,
    ...targetStates: models.SqlFirewallPolicyLifecycleState[]
  ): Promise<serviceResponses.GetSqlFirewallPolicyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSqlFirewallPolicy(request),
      response => targetStates.includes(response.sqlFirewallPolicy.lifecycleState!),
      targetStates.includes(models.SqlFirewallPolicyLifecycleState.Deleted)
    );
  }

  /**
   * Waits forTargetAlertPolicyAssociation till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTargetAlertPolicyAssociationResponse | null (null in case of 404 response)
   */
  public async forTargetAlertPolicyAssociation(
    request: serviceRequests.GetTargetAlertPolicyAssociationRequest,
    ...targetStates: models.AlertPolicyLifecycleState[]
  ): Promise<serviceResponses.GetTargetAlertPolicyAssociationResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTargetAlertPolicyAssociation(request),
      response => targetStates.includes(response.targetAlertPolicyAssociation.lifecycleState!),
      targetStates.includes(models.AlertPolicyLifecycleState.Deleted)
    );
  }

  /**
   * Waits forTargetDatabase till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTargetDatabaseResponse | null (null in case of 404 response)
   */
  public async forTargetDatabase(
    request: serviceRequests.GetTargetDatabaseRequest,
    ...targetStates: models.TargetDatabaseLifecycleState[]
  ): Promise<serviceResponses.GetTargetDatabaseResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTargetDatabase(request),
      response => targetStates.includes(response.targetDatabase.lifecycleState!),
      targetStates.includes(models.TargetDatabaseLifecycleState.Deleted)
    );
  }

  /**
   * Waits forUserAssessment till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetUserAssessmentResponse | null (null in case of 404 response)
   */
  public async forUserAssessment(
    request: serviceRequests.GetUserAssessmentRequest,
    ...targetStates: models.UserAssessmentLifecycleState[]
  ): Promise<serviceResponses.GetUserAssessmentResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getUserAssessment(request),
      response => targetStates.includes(response.userAssessment.lifecycleState!),
      targetStates.includes(models.UserAssessmentLifecycleState.Deleted)
    );
  }

  /**
   * Waits forUserAssessmentComparison till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetUserAssessmentComparisonResponse
   */
  public async forUserAssessmentComparison(
    request: serviceRequests.GetUserAssessmentComparisonRequest,
    ...targetStates: models.UserAssessmentComparison.LifecycleState[]
  ): Promise<serviceResponses.GetUserAssessmentComparisonResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getUserAssessmentComparison(request),
      response => targetStates.includes(response.userAssessmentComparison.lifecycleState!)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
