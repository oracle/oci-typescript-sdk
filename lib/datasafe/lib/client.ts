/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { DataSafeWaiter } from "./datasafe-waiter";
import {
  composeResponse,
  composeRequest,
  GenericRetrier,
  developerToolConfiguration
} from "oci-common";
const Breaker = require("opossum");

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DataSafeApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DataSafeClient {
  protected static serviceEndpointTemplate = "https://datasafe.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined = undefined;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DataSafeWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker: typeof Breaker | null = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "DataSafe";
  protected _regionId: string = "";
  protected "_region": common.Region;
  protected _lastSetRegionOrRegionId: string = "";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }

    if (!developerToolConfiguration.isServiceEnabled("datasafe")) {
      let errmsg =
        "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
      throw errmsg.concat("datasafe");
    }

    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20181201";
    if (this.logger) this.logger.info(`DataSafeClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
    if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
        DataSafeClient.serviceEndpointTemplate,
        this._region,
        DataSafeClient.endpointServiceName
      );
    } else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
      this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
        DataSafeClient.serviceEndpointTemplate,
        this._regionId,
        DataSafeClient.endpointServiceName
      );
    }
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this._region = region;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DataSafeClient.serviceEndpointTemplate,
      region,
      DataSafeClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this._regionId = regionId;
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DataSafeClient.serviceEndpointTemplate,
      regionId,
      DataSafeClient.endpointServiceName
    );
    this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
  }

  /**
   * Creates a new DataSafeWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DataSafeWaiter {
    this._waiters = new DataSafeWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DataSafeWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Shutdown the circuit breaker used by the client when it is no longer needed
   */
  public shutdownCircuitBreaker() {
    if (this._circuitBreaker) {
      this._circuitBreaker.shutdown();
    }
  }

  /**
   * Close the client once it is no longer needed
   */
  public close() {
    this.shutdownCircuitBreaker();
  }

  /**
   * Reactivates a previously deactivated Data Safe target database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ActivateTargetDatabaseRequest
   * @return ActivateTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ActivateTargetDatabase.ts.html |here} to see how to use ActivateTargetDatabase API.
   */
  public async activateTargetDatabase(
    activateTargetDatabaseRequest: requests.ActivateTargetDatabaseRequest
  ): Promise<responses.ActivateTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#activateTargetDatabase.");
    const operationName = "activateTargetDatabase";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/ActivateTargetDatabase";
    const pathParams = {
      "{targetDatabaseId}": activateTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": activateTargetDatabaseRequest.opcRetryToken,
      "if-match": activateTargetDatabaseRequest.ifMatch,
      "opc-request-id": activateTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      activateTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/actions/activate",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        activateTargetDatabaseRequest.activateTargetDatabaseDetails,
        "ActivateTargetDatabaseDetails",
        model.ActivateTargetDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ActivateTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds columns to the specified masking policy from the associated sensitive data model. It
   * automatically pulls all the sensitive columns and their relationships from the sensitive
   * data model and uses this information to create columns in the masking policy. It also assigns
   * default masking formats to these columns based on the associated sensitive types.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AddMaskingColumnsFromSdmRequest
   * @return AddMaskingColumnsFromSdmResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/AddMaskingColumnsFromSdm.ts.html |here} to see how to use AddMaskingColumnsFromSdm API.
   */
  public async addMaskingColumnsFromSdm(
    addMaskingColumnsFromSdmRequest: requests.AddMaskingColumnsFromSdmRequest
  ): Promise<responses.AddMaskingColumnsFromSdmResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#addMaskingColumnsFromSdm.");
    const operationName = "addMaskingColumnsFromSdm";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/AddMaskingColumnsFromSdm";
    const pathParams = {
      "{maskingPolicyId}": addMaskingColumnsFromSdmRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": addMaskingColumnsFromSdmRequest.ifMatch,
      "opc-request-id": addMaskingColumnsFromSdmRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addMaskingColumnsFromSdmRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/actions/addMaskingColumnsFromSdm",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddMaskingColumnsFromSdmResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates alerts in the specified compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param AlertsUpdateRequest
   * @return AlertsUpdateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/AlertsUpdate.ts.html |here} to see how to use AlertsUpdate API.
   */
  public async alertsUpdate(
    alertsUpdateRequest: requests.AlertsUpdateRequest
  ): Promise<responses.AlertsUpdateResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#alertsUpdate.");
    const operationName = "alertsUpdate";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Alert/AlertsUpdate";
    const pathParams = {};

    const queryParams = {
      "compartmentIdInSubtree": alertsUpdateRequest.compartmentIdInSubtree,
      "accessLevel": alertsUpdateRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": alertsUpdateRequest.opcRequestId,
      "if-match": alertsUpdateRequest.ifMatch,
      "opc-retry-token": alertsUpdateRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      alertsUpdateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alerts/actions/updateAll",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        alertsUpdateRequest.alertsUpdateDetails,
        "AlertsUpdateDetails",
        model.AlertsUpdateDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AlertsUpdateResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Applies the results of a discovery job to the specified sensitive data model. Note that the plannedAction attribute
   * of discovery results is used for processing them. You should first use PatchDiscoveryJobResults to set the plannedAction
   * attribute of the discovery results you want to process. ApplyDiscoveryJobResults automatically reads the plannedAction
   * attribute and updates the sensitive data model to reflect the actions you planned.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ApplyDiscoveryJobResultsRequest
   * @return ApplyDiscoveryJobResultsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ApplyDiscoveryJobResults.ts.html |here} to see how to use ApplyDiscoveryJobResults API.
   */
  public async applyDiscoveryJobResults(
    applyDiscoveryJobResultsRequest: requests.ApplyDiscoveryJobResultsRequest
  ): Promise<responses.ApplyDiscoveryJobResultsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#applyDiscoveryJobResults.");
    const operationName = "applyDiscoveryJobResults";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/ApplyDiscoveryJobResults";
    const pathParams = {
      "{sensitiveDataModelId}": applyDiscoveryJobResultsRequest.sensitiveDataModelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": applyDiscoveryJobResultsRequest.ifMatch,
      "opc-request-id": applyDiscoveryJobResultsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      applyDiscoveryJobResultsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns/actions/applyDiscoveryJobResults",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        applyDiscoveryJobResultsRequest.applyDiscoveryJobResultsDetails,
        "ApplyDiscoveryJobResultsDetails",
        model.ApplyDiscoveryJobResultsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ApplyDiscoveryJobResultsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Applies the difference of a SDM Masking policy difference resource to the specified masking policy. Note that the plannedAction attribute
   * of difference columns is used for processing. You should first use PatchSdmMaskingPolicyDifferenceColumns to set the plannedAction
   * attribute of the difference columns you want to process. ApplySdmMaskingPolicyDifference automatically reads the plannedAction
   * attribute and updates the masking policy to reflect the actions you planned. If the sdmMaskingPolicydifferenceId is not passed, the
   * latest sdmMaskingPolicydifference is used. Note that if the masking policy associated with the SdmMaskingPolicyDifference used for this
   * operation is not associated with the original SDM anymore, this operation won't be allowed.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ApplySdmMaskingPolicyDifferenceRequest
   * @return ApplySdmMaskingPolicyDifferenceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ApplySdmMaskingPolicyDifference.ts.html |here} to see how to use ApplySdmMaskingPolicyDifference API.
   */
  public async applySdmMaskingPolicyDifference(
    applySdmMaskingPolicyDifferenceRequest: requests.ApplySdmMaskingPolicyDifferenceRequest
  ): Promise<responses.ApplySdmMaskingPolicyDifferenceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#applySdmMaskingPolicyDifference.");
    const operationName = "applySdmMaskingPolicyDifference";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/ApplySdmMaskingPolicyDifference";
    const pathParams = {
      "{maskingPolicyId}": applySdmMaskingPolicyDifferenceRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": applySdmMaskingPolicyDifferenceRequest.ifMatch,
      "opc-request-id": applySdmMaskingPolicyDifferenceRequest.opcRequestId,
      "opc-retry-token": applySdmMaskingPolicyDifferenceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      applySdmMaskingPolicyDifferenceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/maskingPolicies/{maskingPolicyId}/maskingColumns/actions/applyDifferenceToMaskingColumns",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        applySdmMaskingPolicyDifferenceRequest.applySdmMaskingPolicyDifferenceDetails,
        "ApplySdmMaskingPolicyDifferenceDetails",
        model.ApplySdmMaskingPolicyDifferenceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ApplySdmMaskingPolicyDifferenceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Calculates the volume of audit events available on the target database to be collected. Measurable up to the defined retention period of the audit target resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CalculateAuditVolumeAvailableRequest
   * @return CalculateAuditVolumeAvailableResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CalculateAuditVolumeAvailable.ts.html |here} to see how to use CalculateAuditVolumeAvailable API.
   */
  public async calculateAuditVolumeAvailable(
    calculateAuditVolumeAvailableRequest: requests.CalculateAuditVolumeAvailableRequest
  ): Promise<responses.CalculateAuditVolumeAvailableResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#calculateAuditVolumeAvailable.");
    const operationName = "calculateAuditVolumeAvailable";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/CalculateAuditVolumeAvailable";
    const pathParams = {
      "{auditProfileId}": calculateAuditVolumeAvailableRequest.auditProfileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": calculateAuditVolumeAvailableRequest.ifMatch,
      "opc-retry-token": calculateAuditVolumeAvailableRequest.opcRetryToken,
      "opc-request-id": calculateAuditVolumeAvailableRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      calculateAuditVolumeAvailableRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditProfiles/{auditProfileId}/actions/calculateAuditVolumeAvailable",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        calculateAuditVolumeAvailableRequest.calculateAuditVolumeAvailableDetails,
        "CalculateAuditVolumeAvailableDetails",
        model.CalculateAuditVolumeAvailableDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CalculateAuditVolumeAvailableResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Calculates the volume of audit events collected by data safe.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CalculateAuditVolumeCollectedRequest
   * @return CalculateAuditVolumeCollectedResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CalculateAuditVolumeCollected.ts.html |here} to see how to use CalculateAuditVolumeCollected API.
   */
  public async calculateAuditVolumeCollected(
    calculateAuditVolumeCollectedRequest: requests.CalculateAuditVolumeCollectedRequest
  ): Promise<responses.CalculateAuditVolumeCollectedResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#calculateAuditVolumeCollected.");
    const operationName = "calculateAuditVolumeCollected";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/CalculateAuditVolumeCollected";
    const pathParams = {
      "{auditProfileId}": calculateAuditVolumeCollectedRequest.auditProfileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": calculateAuditVolumeCollectedRequest.ifMatch,
      "opc-retry-token": calculateAuditVolumeCollectedRequest.opcRetryToken,
      "opc-request-id": calculateAuditVolumeCollectedRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      calculateAuditVolumeCollectedRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditProfiles/{auditProfileId}/actions/calculateAuditVolumeCollected",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        calculateAuditVolumeCollectedRequest.calculateAuditVolumeCollectedDetails,
        "CalculateAuditVolumeCollectedDetails",
        model.CalculateAuditVolumeCollectedDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CalculateAuditVolumeCollectedResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancel the specified work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#cancelWorkRequest.");
    const operationName = "cancelWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequest/CancelWorkRequest";
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": cancelWorkRequestRequest.opcRetryToken,
      "opc-request-id": cancelWorkRequestRequest.opcRequestId,
      "if-match": cancelWorkRequestRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified alert into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeAlertCompartmentRequest
   * @return ChangeAlertCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeAlertCompartment.ts.html |here} to see how to use ChangeAlertCompartment API.
   */
  public async changeAlertCompartment(
    changeAlertCompartmentRequest: requests.ChangeAlertCompartmentRequest
  ): Promise<responses.ChangeAlertCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#changeAlertCompartment.");
    const operationName = "changeAlertCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Alert/ChangeAlertCompartment";
    const pathParams = {
      "{alertId}": changeAlertCompartmentRequest.alertId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeAlertCompartmentRequest.opcRequestId,
      "if-match": changeAlertCompartmentRequest.ifMatch,
      "opc-retry-token": changeAlertCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeAlertCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alerts/{alertId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeAlertCompartmentRequest.changeAlertCompartmentDetails,
        "ChangeAlertCompartmentDetails",
        model.ChangeAlertCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeAlertCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified alert policy into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeAlertPolicyCompartmentRequest
   * @return ChangeAlertPolicyCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeAlertPolicyCompartment.ts.html |here} to see how to use ChangeAlertPolicyCompartment API.
   */
  public async changeAlertPolicyCompartment(
    changeAlertPolicyCompartmentRequest: requests.ChangeAlertPolicyCompartmentRequest
  ): Promise<responses.ChangeAlertPolicyCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeAlertPolicyCompartment.");
    const operationName = "changeAlertPolicyCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicy/ChangeAlertPolicyCompartment";
    const pathParams = {
      "{alertPolicyId}": changeAlertPolicyCompartmentRequest.alertPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeAlertPolicyCompartmentRequest.opcRequestId,
      "if-match": changeAlertPolicyCompartmentRequest.ifMatch,
      "opc-retry-token": changeAlertPolicyCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeAlertPolicyCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alertPolicies/{alertPolicyId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeAlertPolicyCompartmentRequest.changeAlertPolicyCompartmentDetails,
        "ChangeAlertPolicyCompartmentDetails",
        model.ChangeAlertPolicyCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeAlertPolicyCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the archive retreival to the specified compartment. When provided, if-Match is checked against ETag value of the resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeAuditArchiveRetrievalCompartmentRequest
   * @return ChangeAuditArchiveRetrievalCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeAuditArchiveRetrievalCompartment.ts.html |here} to see how to use ChangeAuditArchiveRetrievalCompartment API.
   */
  public async changeAuditArchiveRetrievalCompartment(
    changeAuditArchiveRetrievalCompartmentRequest: requests.ChangeAuditArchiveRetrievalCompartmentRequest
  ): Promise<responses.ChangeAuditArchiveRetrievalCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeAuditArchiveRetrievalCompartment.");
    const operationName = "changeAuditArchiveRetrievalCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditArchiveRetrieval/ChangeAuditArchiveRetrievalCompartment";
    const pathParams = {
      "{auditArchiveRetrievalId}":
        changeAuditArchiveRetrievalCompartmentRequest.auditArchiveRetrievalId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeAuditArchiveRetrievalCompartmentRequest.ifMatch,
      "opc-request-id": changeAuditArchiveRetrievalCompartmentRequest.opcRequestId,
      "opc-retry-token": changeAuditArchiveRetrievalCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeAuditArchiveRetrievalCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditArchiveRetrievals/{auditArchiveRetrievalId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeAuditArchiveRetrievalCompartmentRequest.changeAuditArchiveRetrievalCompartmentDetails,
        "ChangeAuditArchiveRetrievalCompartmentDetails",
        model.ChangeAuditArchiveRetrievalCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeAuditArchiveRetrievalCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified audit policy and its dependent resources into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeAuditPolicyCompartmentRequest
   * @return ChangeAuditPolicyCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeAuditPolicyCompartment.ts.html |here} to see how to use ChangeAuditPolicyCompartment API.
   */
  public async changeAuditPolicyCompartment(
    changeAuditPolicyCompartmentRequest: requests.ChangeAuditPolicyCompartmentRequest
  ): Promise<responses.ChangeAuditPolicyCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeAuditPolicyCompartment.");
    const operationName = "changeAuditPolicyCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicy/ChangeAuditPolicyCompartment";
    const pathParams = {
      "{auditPolicyId}": changeAuditPolicyCompartmentRequest.auditPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeAuditPolicyCompartmentRequest.ifMatch,
      "opc-request-id": changeAuditPolicyCompartmentRequest.opcRequestId,
      "opc-retry-token": changeAuditPolicyCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeAuditPolicyCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditPolicies/{auditPolicyId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeAuditPolicyCompartmentRequest.changeAuditPolicyCompartmentDetails,
        "ChangeAuditPolicyCompartmentDetails",
        model.ChangeAuditPolicyCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeAuditPolicyCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified audit profile and its dependent resources into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeAuditProfileCompartmentRequest
   * @return ChangeAuditProfileCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeAuditProfileCompartment.ts.html |here} to see how to use ChangeAuditProfileCompartment API.
   */
  public async changeAuditProfileCompartment(
    changeAuditProfileCompartmentRequest: requests.ChangeAuditProfileCompartmentRequest
  ): Promise<responses.ChangeAuditProfileCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeAuditProfileCompartment.");
    const operationName = "changeAuditProfileCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/ChangeAuditProfileCompartment";
    const pathParams = {
      "{auditProfileId}": changeAuditProfileCompartmentRequest.auditProfileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeAuditProfileCompartmentRequest.ifMatch,
      "opc-retry-token": changeAuditProfileCompartmentRequest.opcRetryToken,
      "opc-request-id": changeAuditProfileCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeAuditProfileCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditProfiles/{auditProfileId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeAuditProfileCompartmentRequest.changeAuditProfileCompartmentDetails,
        "ChangeAuditProfileCompartmentDetails",
        model.ChangeAuditProfileCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeAuditProfileCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Data Safe private endpoint and its dependent resources to the specified compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDataSafePrivateEndpointCompartmentRequest
   * @return ChangeDataSafePrivateEndpointCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeDataSafePrivateEndpointCompartment.ts.html |here} to see how to use ChangeDataSafePrivateEndpointCompartment API.
   */
  public async changeDataSafePrivateEndpointCompartment(
    changeDataSafePrivateEndpointCompartmentRequest: requests.ChangeDataSafePrivateEndpointCompartmentRequest
  ): Promise<responses.ChangeDataSafePrivateEndpointCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataSafeClient#changeDataSafePrivateEndpointCompartment."
      );
    const operationName = "changeDataSafePrivateEndpointCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafePrivateEndpoint/ChangeDataSafePrivateEndpointCompartment";
    const pathParams = {
      "{dataSafePrivateEndpointId}":
        changeDataSafePrivateEndpointCompartmentRequest.dataSafePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDataSafePrivateEndpointCompartmentRequest.opcRequestId,
      "if-match": changeDataSafePrivateEndpointCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDataSafePrivateEndpointCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDataSafePrivateEndpointCompartmentRequest.changeDataSafePrivateEndpointCompartmentDetails,
        "ChangeDataSafePrivateEndpointCompartmentDetails",
        model.ChangeDataSafePrivateEndpointCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDataSafePrivateEndpointCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified database security configuration and its dependent resources into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDatabaseSecurityConfigCompartmentRequest
   * @return ChangeDatabaseSecurityConfigCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeDatabaseSecurityConfigCompartment.ts.html |here} to see how to use ChangeDatabaseSecurityConfigCompartment API.
   */
  public async changeDatabaseSecurityConfigCompartment(
    changeDatabaseSecurityConfigCompartmentRequest: requests.ChangeDatabaseSecurityConfigCompartmentRequest
  ): Promise<responses.ChangeDatabaseSecurityConfigCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataSafeClient#changeDatabaseSecurityConfigCompartment."
      );
    const operationName = "changeDatabaseSecurityConfigCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DatabaseSecurityConfig/ChangeDatabaseSecurityConfigCompartment";
    const pathParams = {
      "{databaseSecurityConfigId}":
        changeDatabaseSecurityConfigCompartmentRequest.databaseSecurityConfigId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDatabaseSecurityConfigCompartmentRequest.ifMatch,
      "opc-request-id": changeDatabaseSecurityConfigCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDatabaseSecurityConfigCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDatabaseSecurityConfigCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseSecurityConfigs/{databaseSecurityConfigId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDatabaseSecurityConfigCompartmentRequest.changeDatabaseSecurityConfigCompartmentDetails,
        "ChangeDatabaseSecurityConfigCompartmentDetails",
        model.ChangeDatabaseSecurityConfigCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDatabaseSecurityConfigCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified discovery job and its dependent resources into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeDiscoveryJobCompartmentRequest
   * @return ChangeDiscoveryJobCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeDiscoveryJobCompartment.ts.html |here} to see how to use ChangeDiscoveryJobCompartment API.
   */
  public async changeDiscoveryJobCompartment(
    changeDiscoveryJobCompartmentRequest: requests.ChangeDiscoveryJobCompartmentRequest
  ): Promise<responses.ChangeDiscoveryJobCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeDiscoveryJobCompartment.");
    const operationName = "changeDiscoveryJobCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJob/ChangeDiscoveryJobCompartment";
    const pathParams = {
      "{discoveryJobId}": changeDiscoveryJobCompartmentRequest.discoveryJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDiscoveryJobCompartmentRequest.ifMatch,
      "opc-request-id": changeDiscoveryJobCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDiscoveryJobCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDiscoveryJobCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs/{discoveryJobId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDiscoveryJobCompartmentRequest.changeDiscoveryJobCompartmentDetails,
        "ChangeDiscoveryJobCompartmentDetails",
        model.ChangeDiscoveryJobCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDiscoveryJobCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified library masking format into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeLibraryMaskingFormatCompartmentRequest
   * @return ChangeLibraryMaskingFormatCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeLibraryMaskingFormatCompartment.ts.html |here} to see how to use ChangeLibraryMaskingFormatCompartment API.
   */
  public async changeLibraryMaskingFormatCompartment(
    changeLibraryMaskingFormatCompartmentRequest: requests.ChangeLibraryMaskingFormatCompartmentRequest
  ): Promise<responses.ChangeLibraryMaskingFormatCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeLibraryMaskingFormatCompartment.");
    const operationName = "changeLibraryMaskingFormatCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/LibraryMaskingFormat/ChangeLibraryMaskingFormatCompartment";
    const pathParams = {
      "{libraryMaskingFormatId}":
        changeLibraryMaskingFormatCompartmentRequest.libraryMaskingFormatId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeLibraryMaskingFormatCompartmentRequest.ifMatch,
      "opc-retry-token": changeLibraryMaskingFormatCompartmentRequest.opcRetryToken,
      "opc-request-id": changeLibraryMaskingFormatCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeLibraryMaskingFormatCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/libraryMaskingFormats/{libraryMaskingFormatId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeLibraryMaskingFormatCompartmentRequest.changeLibraryMaskingFormatCompartmentDetails,
        "ChangeLibraryMaskingFormatCompartmentDetails",
        model.ChangeLibraryMaskingFormatCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeLibraryMaskingFormatCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified masking policy and its dependent resources into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeMaskingPolicyCompartmentRequest
   * @return ChangeMaskingPolicyCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeMaskingPolicyCompartment.ts.html |here} to see how to use ChangeMaskingPolicyCompartment API.
   */
  public async changeMaskingPolicyCompartment(
    changeMaskingPolicyCompartmentRequest: requests.ChangeMaskingPolicyCompartmentRequest
  ): Promise<responses.ChangeMaskingPolicyCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeMaskingPolicyCompartment.");
    const operationName = "changeMaskingPolicyCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/ChangeMaskingPolicyCompartment";
    const pathParams = {
      "{maskingPolicyId}": changeMaskingPolicyCompartmentRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeMaskingPolicyCompartmentRequest.ifMatch,
      "opc-retry-token": changeMaskingPolicyCompartmentRequest.opcRetryToken,
      "opc-request-id": changeMaskingPolicyCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeMaskingPolicyCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeMaskingPolicyCompartmentRequest.changeMaskingPolicyCompartmentDetails,
        "ChangeMaskingPolicyCompartmentDetails",
        model.ChangeMaskingPolicyCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeMaskingPolicyCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified masking policy health report and its dependent resources into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeMaskingPolicyHealthReportCompartmentRequest
   * @return ChangeMaskingPolicyHealthReportCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeMaskingPolicyHealthReportCompartment.ts.html |here} to see how to use ChangeMaskingPolicyHealthReportCompartment API.
   */
  public async changeMaskingPolicyHealthReportCompartment(
    changeMaskingPolicyHealthReportCompartmentRequest: requests.ChangeMaskingPolicyHealthReportCompartmentRequest
  ): Promise<responses.ChangeMaskingPolicyHealthReportCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataSafeClient#changeMaskingPolicyHealthReportCompartment."
      );
    const operationName = "changeMaskingPolicyHealthReportCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicyHealthReport/ChangeMaskingPolicyHealthReportCompartment";
    const pathParams = {
      "{maskingPolicyHealthReportId}":
        changeMaskingPolicyHealthReportCompartmentRequest.maskingPolicyHealthReportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeMaskingPolicyHealthReportCompartmentRequest.ifMatch,
      "opc-retry-token": changeMaskingPolicyHealthReportCompartmentRequest.opcRetryToken,
      "opc-request-id": changeMaskingPolicyHealthReportCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeMaskingPolicyHealthReportCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicyHealthReports/{maskingPolicyHealthReportId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeMaskingPolicyHealthReportCompartmentRequest.changeMaskingPolicyHealthReportCompartmentDetails,
        "ChangeMaskingPolicyHealthReportCompartmentDetails",
        model.ChangeMaskingPolicyHealthReportCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeMaskingPolicyHealthReportCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified on-premises connector into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeOnPremConnectorCompartmentRequest
   * @return ChangeOnPremConnectorCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeOnPremConnectorCompartment.ts.html |here} to see how to use ChangeOnPremConnectorCompartment API.
   */
  public async changeOnPremConnectorCompartment(
    changeOnPremConnectorCompartmentRequest: requests.ChangeOnPremConnectorCompartmentRequest
  ): Promise<responses.ChangeOnPremConnectorCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeOnPremConnectorCompartment.");
    const operationName = "changeOnPremConnectorCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/ChangeOnPremConnectorCompartment";
    const pathParams = {
      "{onPremConnectorId}": changeOnPremConnectorCompartmentRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeOnPremConnectorCompartmentRequest.opcRequestId,
      "if-match": changeOnPremConnectorCompartmentRequest.ifMatch,
      "opc-retry-token": changeOnPremConnectorCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeOnPremConnectorCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeOnPremConnectorCompartmentRequest.changeOnPremConnectorCompartmentDetails,
        "ChangeOnPremConnectorCompartmentDetails",
        model.ChangeOnPremConnectorCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeOnPremConnectorCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a resource into a different compartment. When provided, If-Match is checked against ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeReportCompartmentRequest
   * @return ChangeReportCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeReportCompartment.ts.html |here} to see how to use ChangeReportCompartment API.
   */
  public async changeReportCompartment(
    changeReportCompartmentRequest: requests.ChangeReportCompartmentRequest
  ): Promise<responses.ChangeReportCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#changeReportCompartment.");
    const operationName = "changeReportCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Report/ChangeReportCompartment";
    const pathParams = {
      "{reportId}": changeReportCompartmentRequest.reportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeReportCompartmentRequest.ifMatch,
      "opc-request-id": changeReportCompartmentRequest.opcRequestId,
      "opc-retry-token": changeReportCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeReportCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reports/{reportId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeReportCompartmentRequest.changeReportCompartmentDetails,
        "ChangeReportCompartmentDetails",
        model.ChangeReportCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeReportCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a resource into a different compartment. When provided, If-Match is checked against ETag values of the resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeReportDefinitionCompartmentRequest
   * @return ChangeReportDefinitionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeReportDefinitionCompartment.ts.html |here} to see how to use ChangeReportDefinitionCompartment API.
   */
  public async changeReportDefinitionCompartment(
    changeReportDefinitionCompartmentRequest: requests.ChangeReportDefinitionCompartmentRequest
  ): Promise<responses.ChangeReportDefinitionCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeReportDefinitionCompartment.");
    const operationName = "changeReportDefinitionCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/ChangeReportDefinitionCompartment";
    const pathParams = {
      "{reportDefinitionId}": changeReportDefinitionCompartmentRequest.reportDefinitionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeReportDefinitionCompartmentRequest.ifMatch,
      "opc-request-id": changeReportDefinitionCompartmentRequest.opcRequestId,
      "opc-retry-token": changeReportDefinitionCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeReportDefinitionCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reportDefinitions/{reportDefinitionId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeReportDefinitionCompartmentRequest.changeReportDefinitionCompartmentDetails,
        "ChangeReportDefinitionCompartmentDetails",
        model.ChangeReportDefinitionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeReportDefinitionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Change the online and offline months .
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeRetentionRequest
   * @return ChangeRetentionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeRetention.ts.html |here} to see how to use ChangeRetention API.
   */
  public async changeRetention(
    changeRetentionRequest: requests.ChangeRetentionRequest
  ): Promise<responses.ChangeRetentionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#changeRetention.");
    const operationName = "changeRetention";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/ChangeRetention";
    const pathParams = {
      "{auditProfileId}": changeRetentionRequest.auditProfileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeRetentionRequest.ifMatch,
      "opc-request-id": changeRetentionRequest.opcRequestId,
      "opc-retry-token": changeRetentionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeRetentionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditProfiles/{auditProfileId}/actions/changeRetention",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeRetentionRequest.changeRetentionDetails,
        "ChangeRetentionDetails",
        model.ChangeRetentionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeRetentionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified SDM masking policy difference into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeSdmMaskingPolicyDifferenceCompartmentRequest
   * @return ChangeSdmMaskingPolicyDifferenceCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSdmMaskingPolicyDifferenceCompartment.ts.html |here} to see how to use ChangeSdmMaskingPolicyDifferenceCompartment API.
   */
  public async changeSdmMaskingPolicyDifferenceCompartment(
    changeSdmMaskingPolicyDifferenceCompartmentRequest: requests.ChangeSdmMaskingPolicyDifferenceCompartmentRequest
  ): Promise<responses.ChangeSdmMaskingPolicyDifferenceCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataSafeClient#changeSdmMaskingPolicyDifferenceCompartment."
      );
    const operationName = "changeSdmMaskingPolicyDifferenceCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/ChangeSdmMaskingPolicyDifferenceCompartment";
    const pathParams = {
      "{sdmMaskingPolicyDifferenceId}":
        changeSdmMaskingPolicyDifferenceCompartmentRequest.sdmMaskingPolicyDifferenceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeSdmMaskingPolicyDifferenceCompartmentRequest.ifMatch,
      "opc-request-id": changeSdmMaskingPolicyDifferenceCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSdmMaskingPolicyDifferenceCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSdmMaskingPolicyDifferenceCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSdmMaskingPolicyDifferenceCompartmentRequest.changeSdmMaskingPolicyDifferenceCompartmentDetails,
        "ChangeSdmMaskingPolicyDifferenceCompartmentDetails",
        model.ChangeSdmMaskingPolicyDifferenceCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSdmMaskingPolicyDifferenceCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves the specified saved security assessment or future scheduled assessments into a different compartment.
* <p>
To start, call first the operation ListSecurityAssessments with filters \"type = save_schedule\". This returns the scheduleAssessmentId. Then, call this changeCompartment with the scheduleAssessmentId.
* <p>
The existing saved security assessments created due to the schedule are not moved. However, all new saves will be associated with the new compartment.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSecurityAssessmentCompartmentRequest
     * @return ChangeSecurityAssessmentCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSecurityAssessmentCompartment.ts.html |here} to see how to use ChangeSecurityAssessmentCompartment API.
     */
  public async changeSecurityAssessmentCompartment(
    changeSecurityAssessmentCompartmentRequest: requests.ChangeSecurityAssessmentCompartmentRequest
  ): Promise<responses.ChangeSecurityAssessmentCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeSecurityAssessmentCompartment.");
    const operationName = "changeSecurityAssessmentCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/ChangeSecurityAssessmentCompartment";
    const pathParams = {
      "{securityAssessmentId}": changeSecurityAssessmentCompartmentRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeSecurityAssessmentCompartmentRequest.opcRequestId,
      "if-match": changeSecurityAssessmentCompartmentRequest.ifMatch,
      "opc-retry-token": changeSecurityAssessmentCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSecurityAssessmentCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSecurityAssessmentCompartmentRequest.changeSecurityAssessmentCompartmentDetails,
        "ChangeSecurityAssessmentCompartmentDetails",
        model.ChangeSecurityAssessmentCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSecurityAssessmentCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified security policy and its dependent resources into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeSecurityPolicyCompartmentRequest
   * @return ChangeSecurityPolicyCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSecurityPolicyCompartment.ts.html |here} to see how to use ChangeSecurityPolicyCompartment API.
   */
  public async changeSecurityPolicyCompartment(
    changeSecurityPolicyCompartmentRequest: requests.ChangeSecurityPolicyCompartmentRequest
  ): Promise<responses.ChangeSecurityPolicyCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeSecurityPolicyCompartment.");
    const operationName = "changeSecurityPolicyCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityPolicy/ChangeSecurityPolicyCompartment";
    const pathParams = {
      "{securityPolicyId}": changeSecurityPolicyCompartmentRequest.securityPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeSecurityPolicyCompartmentRequest.ifMatch,
      "opc-request-id": changeSecurityPolicyCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSecurityPolicyCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSecurityPolicyCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicies/{securityPolicyId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSecurityPolicyCompartmentRequest.changeSecurityPolicyCompartmentDetails,
        "ChangeSecurityPolicyCompartmentDetails",
        model.ChangeSecurityPolicyCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSecurityPolicyCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified security policy deployment and its dependent resources into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeSecurityPolicyDeploymentCompartmentRequest
   * @return ChangeSecurityPolicyDeploymentCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSecurityPolicyDeploymentCompartment.ts.html |here} to see how to use ChangeSecurityPolicyDeploymentCompartment API.
   */
  public async changeSecurityPolicyDeploymentCompartment(
    changeSecurityPolicyDeploymentCompartmentRequest: requests.ChangeSecurityPolicyDeploymentCompartmentRequest
  ): Promise<responses.ChangeSecurityPolicyDeploymentCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataSafeClient#changeSecurityPolicyDeploymentCompartment."
      );
    const operationName = "changeSecurityPolicyDeploymentCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityPolicyDeployment/ChangeSecurityPolicyDeploymentCompartment";
    const pathParams = {
      "{securityPolicyDeploymentId}":
        changeSecurityPolicyDeploymentCompartmentRequest.securityPolicyDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeSecurityPolicyDeploymentCompartmentRequest.ifMatch,
      "opc-request-id": changeSecurityPolicyDeploymentCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSecurityPolicyDeploymentCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSecurityPolicyDeploymentCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicyDeployments/{securityPolicyDeploymentId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSecurityPolicyDeploymentCompartmentRequest.changeSecurityPolicyDeploymentCompartmentDetails,
        "ChangeSecurityPolicyDeploymentCompartmentDetails",
        model.ChangeSecurityPolicyDeploymentCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSecurityPolicyDeploymentCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified sensitive data model and its dependent resources into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeSensitiveDataModelCompartmentRequest
   * @return ChangeSensitiveDataModelCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSensitiveDataModelCompartment.ts.html |here} to see how to use ChangeSensitiveDataModelCompartment API.
   */
  public async changeSensitiveDataModelCompartment(
    changeSensitiveDataModelCompartmentRequest: requests.ChangeSensitiveDataModelCompartmentRequest
  ): Promise<responses.ChangeSensitiveDataModelCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeSensitiveDataModelCompartment.");
    const operationName = "changeSensitiveDataModelCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/ChangeSensitiveDataModelCompartment";
    const pathParams = {
      "{sensitiveDataModelId}": changeSensitiveDataModelCompartmentRequest.sensitiveDataModelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeSensitiveDataModelCompartmentRequest.ifMatch,
      "opc-request-id": changeSensitiveDataModelCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSensitiveDataModelCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSensitiveDataModelCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSensitiveDataModelCompartmentRequest.changeSensitiveDataModelCompartmentDetails,
        "ChangeSensitiveDataModelCompartmentDetails",
        model.ChangeSensitiveDataModelCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSensitiveDataModelCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified sensitive type into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeSensitiveTypeCompartmentRequest
   * @return ChangeSensitiveTypeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSensitiveTypeCompartment.ts.html |here} to see how to use ChangeSensitiveTypeCompartment API.
   */
  public async changeSensitiveTypeCompartment(
    changeSensitiveTypeCompartmentRequest: requests.ChangeSensitiveTypeCompartmentRequest
  ): Promise<responses.ChangeSensitiveTypeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeSensitiveTypeCompartment.");
    const operationName = "changeSensitiveTypeCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveType/ChangeSensitiveTypeCompartment";
    const pathParams = {
      "{sensitiveTypeId}": changeSensitiveTypeCompartmentRequest.sensitiveTypeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeSensitiveTypeCompartmentRequest.ifMatch,
      "opc-request-id": changeSensitiveTypeCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSensitiveTypeCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSensitiveTypeCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveTypes/{sensitiveTypeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSensitiveTypeCompartmentRequest.changeSensitiveTypeCompartmentDetails,
        "ChangeSensitiveTypeCompartmentDetails",
        model.ChangeSensitiveTypeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSensitiveTypeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified SQL collection and its dependent resources into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeSqlCollectionCompartmentRequest
   * @return ChangeSqlCollectionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSqlCollectionCompartment.ts.html |here} to see how to use ChangeSqlCollectionCompartment API.
   */
  public async changeSqlCollectionCompartment(
    changeSqlCollectionCompartmentRequest: requests.ChangeSqlCollectionCompartmentRequest
  ): Promise<responses.ChangeSqlCollectionCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeSqlCollectionCompartment.");
    const operationName = "changeSqlCollectionCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlCollection/ChangeSqlCollectionCompartment";
    const pathParams = {
      "{sqlCollectionId}": changeSqlCollectionCompartmentRequest.sqlCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeSqlCollectionCompartmentRequest.ifMatch,
      "opc-request-id": changeSqlCollectionCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSqlCollectionCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSqlCollectionCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollections/{sqlCollectionId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSqlCollectionCompartmentRequest.changeSqlCollectionCompartmentDetails,
        "ChangeSqlCollectionCompartmentDetails",
        model.ChangeSqlCollectionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSqlCollectionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified SQL Firewall policy and its dependent resources into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeSqlFirewallPolicyCompartmentRequest
   * @return ChangeSqlFirewallPolicyCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSqlFirewallPolicyCompartment.ts.html |here} to see how to use ChangeSqlFirewallPolicyCompartment API.
   */
  public async changeSqlFirewallPolicyCompartment(
    changeSqlFirewallPolicyCompartmentRequest: requests.ChangeSqlFirewallPolicyCompartmentRequest
  ): Promise<responses.ChangeSqlFirewallPolicyCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeSqlFirewallPolicyCompartment.");
    const operationName = "changeSqlFirewallPolicyCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlFirewallPolicy/ChangeSqlFirewallPolicyCompartment";
    const pathParams = {
      "{sqlFirewallPolicyId}": changeSqlFirewallPolicyCompartmentRequest.sqlFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeSqlFirewallPolicyCompartmentRequest.ifMatch,
      "opc-request-id": changeSqlFirewallPolicyCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSqlFirewallPolicyCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSqlFirewallPolicyCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlFirewallPolicies/{sqlFirewallPolicyId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSqlFirewallPolicyCompartmentRequest.changeSqlFirewallPolicyCompartmentDetails,
        "ChangeSqlFirewallPolicyCompartmentDetails",
        model.ChangeSqlFirewallPolicyCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSqlFirewallPolicyCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified target-alert policy Association into a different compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeTargetAlertPolicyAssociationCompartmentRequest
   * @return ChangeTargetAlertPolicyAssociationCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeTargetAlertPolicyAssociationCompartment.ts.html |here} to see how to use ChangeTargetAlertPolicyAssociationCompartment API.
   */
  public async changeTargetAlertPolicyAssociationCompartment(
    changeTargetAlertPolicyAssociationCompartmentRequest: requests.ChangeTargetAlertPolicyAssociationCompartmentRequest
  ): Promise<responses.ChangeTargetAlertPolicyAssociationCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataSafeClient#changeTargetAlertPolicyAssociationCompartment."
      );
    const operationName = "changeTargetAlertPolicyAssociationCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociation/ChangeTargetAlertPolicyAssociationCompartment";
    const pathParams = {
      "{targetAlertPolicyAssociationId}":
        changeTargetAlertPolicyAssociationCompartmentRequest.targetAlertPolicyAssociationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeTargetAlertPolicyAssociationCompartmentRequest.opcRequestId,
      "if-match": changeTargetAlertPolicyAssociationCompartmentRequest.ifMatch,
      "opc-retry-token": changeTargetAlertPolicyAssociationCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeTargetAlertPolicyAssociationCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/targetAlertPolicyAssociations/{targetAlertPolicyAssociationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeTargetAlertPolicyAssociationCompartmentRequest.changeTargetAlertPolicyAssociationCompartmentDetails,
        "ChangeTargetAlertPolicyAssociationCompartmentDetails",
        model.ChangeTargetAlertPolicyAssociationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeTargetAlertPolicyAssociationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Data Safe target database to the specified compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeTargetDatabaseCompartmentRequest
   * @return ChangeTargetDatabaseCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeTargetDatabaseCompartment.ts.html |here} to see how to use ChangeTargetDatabaseCompartment API.
   */
  public async changeTargetDatabaseCompartment(
    changeTargetDatabaseCompartmentRequest: requests.ChangeTargetDatabaseCompartmentRequest
  ): Promise<responses.ChangeTargetDatabaseCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeTargetDatabaseCompartment.");
    const operationName = "changeTargetDatabaseCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/ChangeTargetDatabaseCompartment";
    const pathParams = {
      "{targetDatabaseId}": changeTargetDatabaseCompartmentRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeTargetDatabaseCompartmentRequest.ifMatch,
      "opc-request-id": changeTargetDatabaseCompartmentRequest.opcRequestId,
      "opc-retry-token": changeTargetDatabaseCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeTargetDatabaseCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeTargetDatabaseCompartmentRequest.changeTargetDatabaseCompartmentDetails,
        "ChangeTargetDatabaseCompartmentDetails",
        model.ChangeTargetDatabaseCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeTargetDatabaseCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified saved user assessment or future scheduled assessments into a different compartment.
   * To start storing scheduled user assessments on a different compartment, first call the operation ListUserAssessments with
   * the filters \"type = save_schedule\". That call returns the scheduleAssessmentId. Then call
   * ChangeUserAssessmentCompartment with the scheduleAssessmentId. The existing saved user assessments created per the schedule
   * are not be moved. However, all new saves will be associated with the new compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeUserAssessmentCompartmentRequest
   * @return ChangeUserAssessmentCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeUserAssessmentCompartment.ts.html |here} to see how to use ChangeUserAssessmentCompartment API.
   */
  public async changeUserAssessmentCompartment(
    changeUserAssessmentCompartmentRequest: requests.ChangeUserAssessmentCompartmentRequest
  ): Promise<responses.ChangeUserAssessmentCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeUserAssessmentCompartment.");
    const operationName = "changeUserAssessmentCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/ChangeUserAssessmentCompartment";
    const pathParams = {
      "{userAssessmentId}": changeUserAssessmentCompartmentRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeUserAssessmentCompartmentRequest.ifMatch,
      "opc-retry-token": changeUserAssessmentCompartmentRequest.opcRetryToken,
      "opc-request-id": changeUserAssessmentCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeUserAssessmentCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeUserAssessmentCompartmentRequest.changeUserAssessmentCompartmentDetails,
        "ChangeUserAssessmentCompartmentDetails",
        model.ChangeUserAssessmentCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeUserAssessmentCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Compares two security assessments. For this comparison, a security assessment can be a saved assessment, a latest assessment, or a baseline assessment.
   * For example, you can compare saved assessment or a latest assessment against a baseline.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CompareSecurityAssessmentRequest
   * @return CompareSecurityAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CompareSecurityAssessment.ts.html |here} to see how to use CompareSecurityAssessment API.
   */
  public async compareSecurityAssessment(
    compareSecurityAssessmentRequest: requests.CompareSecurityAssessmentRequest
  ): Promise<responses.CompareSecurityAssessmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#compareSecurityAssessment.");
    const operationName = "compareSecurityAssessment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/CompareSecurityAssessment";
    const pathParams = {
      "{securityAssessmentId}": compareSecurityAssessmentRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": compareSecurityAssessmentRequest.opcRetryToken,
      "opc-request-id": compareSecurityAssessmentRequest.opcRequestId,
      "if-match": compareSecurityAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      compareSecurityAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/compare",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        compareSecurityAssessmentRequest.compareSecurityAssessmentDetails,
        "CompareSecurityAssessmentDetails",
        model.CompareSecurityAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CompareSecurityAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Compares two user assessments. For this comparison, a user assessment can be a saved, a latest assessment, or a baseline.
   * As an example, it can be used to compare a user assessment saved or a latest assessment with a baseline.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CompareUserAssessmentRequest
   * @return CompareUserAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CompareUserAssessment.ts.html |here} to see how to use CompareUserAssessment API.
   */
  public async compareUserAssessment(
    compareUserAssessmentRequest: requests.CompareUserAssessmentRequest
  ): Promise<responses.CompareUserAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#compareUserAssessment.");
    const operationName = "compareUserAssessment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/CompareUserAssessment";
    const pathParams = {
      "{userAssessmentId}": compareUserAssessmentRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": compareUserAssessmentRequest.opcRetryToken,
      "opc-request-id": compareUserAssessmentRequest.opcRequestId,
      "if-match": compareUserAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      compareUserAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/compare",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        compareUserAssessmentRequest.compareUserAssessmentDetails,
        "CompareUserAssessmentDetails",
        model.CompareUserAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CompareUserAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new user-defined alert policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateAlertPolicyRequest
   * @return CreateAlertPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateAlertPolicy.ts.html |here} to see how to use CreateAlertPolicy API.
   */
  public async createAlertPolicy(
    createAlertPolicyRequest: requests.CreateAlertPolicyRequest
  ): Promise<responses.CreateAlertPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createAlertPolicy.");
    const operationName = "createAlertPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicy/CreateAlertPolicy";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createAlertPolicyRequest.opcRetryToken,
      "opc-request-id": createAlertPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAlertPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alertPolicies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAlertPolicyRequest.createAlertPolicyDetails,
        "CreateAlertPolicyDetails",
        model.CreateAlertPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAlertPolicyResponse>{},
        body: await response.json(),
        bodyKey: "alertPolicy",
        bodyModel: model.AlertPolicy,
        type: "model.AlertPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new rule for the alert policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateAlertPolicyRuleRequest
   * @return CreateAlertPolicyRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateAlertPolicyRule.ts.html |here} to see how to use CreateAlertPolicyRule API.
   */
  public async createAlertPolicyRule(
    createAlertPolicyRuleRequest: requests.CreateAlertPolicyRuleRequest
  ): Promise<responses.CreateAlertPolicyRuleResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createAlertPolicyRule.");
    const operationName = "createAlertPolicyRule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicyRule/CreateAlertPolicyRule";
    const pathParams = {
      "{alertPolicyId}": createAlertPolicyRuleRequest.alertPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createAlertPolicyRuleRequest.opcRetryToken,
      "opc-request-id": createAlertPolicyRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAlertPolicyRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alertPolicies/{alertPolicyId}/rules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAlertPolicyRuleRequest.createAlertPolicyRuleDetails,
        "CreateAlertPolicyRuleDetails",
        model.CreateAlertPolicyRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAlertPolicyRuleResponse>{},
        body: await response.json(),
        bodyKey: "alertPolicyRule",
        bodyModel: model.AlertPolicyRule,
        type: "model.AlertPolicyRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a work request to retrieve archived audit data. This asynchronous process will usually take over an hour to complete.
   * Save the id from the response of this operation. Call GetAuditArchiveRetrieval operation after an hour, passing the id to know the status of
   * this operation.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateAuditArchiveRetrievalRequest
   * @return CreateAuditArchiveRetrievalResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateAuditArchiveRetrieval.ts.html |here} to see how to use CreateAuditArchiveRetrieval API.
   */
  public async createAuditArchiveRetrieval(
    createAuditArchiveRetrievalRequest: requests.CreateAuditArchiveRetrievalRequest
  ): Promise<responses.CreateAuditArchiveRetrievalResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#createAuditArchiveRetrieval.");
    const operationName = "createAuditArchiveRetrieval";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createAuditArchiveRetrievalRequest.opcRetryToken,
      "opc-request-id": createAuditArchiveRetrievalRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAuditArchiveRetrievalRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditArchiveRetrievals",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAuditArchiveRetrievalRequest.createAuditArchiveRetrievalDetails,
        "CreateAuditArchiveRetrievalDetails",
        model.CreateAuditArchiveRetrievalDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAuditArchiveRetrievalResponse>{},
        body: await response.json(),
        bodyKey: "auditArchiveRetrieval",
        bodyModel: model.AuditArchiveRetrieval,
        type: "model.AuditArchiveRetrieval",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Data Safe private endpoint.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDataSafePrivateEndpointRequest
   * @return CreateDataSafePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateDataSafePrivateEndpoint.ts.html |here} to see how to use CreateDataSafePrivateEndpoint API.
   */
  public async createDataSafePrivateEndpoint(
    createDataSafePrivateEndpointRequest: requests.CreateDataSafePrivateEndpointRequest
  ): Promise<responses.CreateDataSafePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#createDataSafePrivateEndpoint.");
    const operationName = "createDataSafePrivateEndpoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafePrivateEndpoint/CreateDataSafePrivateEndpoint";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDataSafePrivateEndpointRequest.opcRetryToken,
      "opc-request-id": createDataSafePrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDataSafePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDataSafePrivateEndpointRequest.createDataSafePrivateEndpointDetails,
        "CreateDataSafePrivateEndpointDetails",
        model.CreateDataSafePrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDataSafePrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "dataSafePrivateEndpoint",
        bodyModel: model.DataSafePrivateEndpoint,
        type: "model.DataSafePrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Performs incremental data discovery for the specified sensitive data model. It uses the target database associated
   * with the sensitive data model.
   * After performing data discovery, you can use ListDiscoveryJobResults to view the discovery results, PatchDiscoveryJobResults
   * to specify the action you want perform on these results, and then ApplyDiscoveryJobResults to process the results
   * and apply them to the sensitive data model.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDiscoveryJobRequest
   * @return CreateDiscoveryJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateDiscoveryJob.ts.html |here} to see how to use CreateDiscoveryJob API.
   */
  public async createDiscoveryJob(
    createDiscoveryJobRequest: requests.CreateDiscoveryJobRequest
  ): Promise<responses.CreateDiscoveryJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createDiscoveryJob.");
    const operationName = "createDiscoveryJob";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDiscoveryJobRequest.opcRetryToken,
      "opc-request-id": createDiscoveryJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDiscoveryJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDiscoveryJobRequest.createDiscoveryJobDetails,
        "CreateDiscoveryJobDetails",
        model.CreateDiscoveryJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDiscoveryJobResponse>{},
        body: await response.json(),
        bodyKey: "discoveryJob",
        bodyModel: model.DiscoveryJob,
        type: "model.DiscoveryJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new library masking format. A masking format can have one or more
   * format entries. The combined output of all the format entries is used for masking.
   * It provides the flexibility to define a masking format that can generate different
   * parts of a data value separately and then combine them to get the final data value
   * for masking. Note that you cannot define masking condition in a library masking format.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateLibraryMaskingFormatRequest
   * @return CreateLibraryMaskingFormatResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateLibraryMaskingFormat.ts.html |here} to see how to use CreateLibraryMaskingFormat API.
   */
  public async createLibraryMaskingFormat(
    createLibraryMaskingFormatRequest: requests.CreateLibraryMaskingFormatRequest
  ): Promise<responses.CreateLibraryMaskingFormatResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#createLibraryMaskingFormat.");
    const operationName = "createLibraryMaskingFormat";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/LibraryMaskingFormat/CreateLibraryMaskingFormat";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createLibraryMaskingFormatRequest.opcRetryToken,
      "opc-request-id": createLibraryMaskingFormatRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createLibraryMaskingFormatRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/libraryMaskingFormats",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLibraryMaskingFormatRequest.createLibraryMaskingFormatDetails,
        "CreateLibraryMaskingFormatDetails",
        model.CreateLibraryMaskingFormatDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLibraryMaskingFormatResponse>{},
        body: await response.json(),
        bodyKey: "libraryMaskingFormat",
        bodyModel: model.LibraryMaskingFormat,
        type: "model.LibraryMaskingFormat",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new masking column in the specified masking policy. Use this operation
* to add parent columns only. It automatically adds the child columns from the
* associated sensitive data model or target database. If you provide the
* sensitiveTypeId attribute but not the maskingFormats attribute, it automatically
* assigns the default masking format associated with the specified sensitive type.
* Alternatively, if you provide the maskingFormats attribute, the specified masking
* formats are assigned to the column.
* <p>
Using the maskingFormats attribute, you can assign one or more masking formats
* to a column. You need to specify a condition as part of each masking format. It
* enables you to do <a href=\"https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html\">conditional masking</a>
* so that you can mask the column data values differently using different
* masking conditions. A masking format can have one or more format entries. The
* combined output of all the format entries is used for masking. It provides the
* flexibility to define a masking format that can generate different parts of a data
* value separately and then combine them to get the final data value for masking.
* <p>
You can use the maskingColumnGroup attribute to group the columns that you would
* like to mask together. It enables you to do <a href=\"https://docs.oracle.com/en/cloud/paas/data-safe/udscs/group-masking1.html#GUID-755056B9-9540-48C0-9491-262A44A85037\">group or compound masking</a> that ensures that the
* masked data across the columns in a group continue to retain the same logical relationship.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMaskingColumnRequest
     * @return CreateMaskingColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateMaskingColumn.ts.html |here} to see how to use CreateMaskingColumn API.
     */
  public async createMaskingColumn(
    createMaskingColumnRequest: requests.CreateMaskingColumnRequest
  ): Promise<responses.CreateMaskingColumnResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createMaskingColumn.");
    const operationName = "createMaskingColumn";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/CreateMaskingColumn";
    const pathParams = {
      "{maskingPolicyId}": createMaskingColumnRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createMaskingColumnRequest.opcRetryToken,
      "opc-request-id": createMaskingColumnRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMaskingColumnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/maskingColumns",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMaskingColumnRequest.createMaskingColumnDetails,
        "CreateMaskingColumnDetails",
        model.CreateMaskingColumnDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMaskingColumnResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new masking policy and associates it with a sensitive data model or a target database.
* <p>
To use a sensitive data model as the source of masking columns, set the columnSource attribute to
* SENSITIVE_DATA_MODEL and provide the sensitiveDataModelId attribute. After creating a masking policy,
* you can use the AddMaskingColumnsFromSdm operation to automatically add all the columns from
* the associated sensitive data model. In this case, the target database associated with the
* sensitive data model is used for column and masking format validations.
* <p>
You can also create a masking policy without using a sensitive data model. In this case,
* you need to associate your masking policy with a target database by setting the columnSource
* attribute to TARGET and providing the targetId attribute. The specified target database
* is used for column and masking format validations.
* <p>
After creating a masking policy, you can use the CreateMaskingColumn or PatchMaskingColumns
* operation to manually add columns to the policy. You need to add the parent columns only,
* and it automatically adds the child columns (in referential relationship with the parent columns)
* from the associated sensitive data model or target database.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMaskingPolicyRequest
     * @return CreateMaskingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateMaskingPolicy.ts.html |here} to see how to use CreateMaskingPolicy API.
     */
  public async createMaskingPolicy(
    createMaskingPolicyRequest: requests.CreateMaskingPolicyRequest
  ): Promise<responses.CreateMaskingPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createMaskingPolicy.");
    const operationName = "createMaskingPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/CreateMaskingPolicy";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createMaskingPolicyRequest.opcRetryToken,
      "opc-request-id": createMaskingPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMaskingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMaskingPolicyRequest.createMaskingPolicyDetails,
        "CreateMaskingPolicyDetails",
        model.CreateMaskingPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMaskingPolicyResponse>{},
        body: await response.json(),
        bodyKey: "maskingPolicy",
        bodyModel: model.MaskingPolicy,
        type: "model.MaskingPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new on-premises connector.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateOnPremConnectorRequest
   * @return CreateOnPremConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateOnPremConnector.ts.html |here} to see how to use CreateOnPremConnector API.
   */
  public async createOnPremConnector(
    createOnPremConnectorRequest: requests.CreateOnPremConnectorRequest
  ): Promise<responses.CreateOnPremConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createOnPremConnector.");
    const operationName = "createOnPremConnector";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/CreateOnPremConnector";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOnPremConnectorRequest.opcRetryToken,
      "opc-request-id": createOnPremConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOnPremConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOnPremConnectorRequest.createOnPremConnectorDetails,
        "CreateOnPremConnectorDetails",
        model.CreateOnPremConnectorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOnPremConnectorResponse>{},
        body: await response.json(),
        bodyKey: "onPremConnector",
        bodyModel: model.OnPremConnector,
        type: "model.OnPremConnector",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates the peer target database under the primary target database in Data Safe.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreatePeerTargetDatabaseRequest
   * @return CreatePeerTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreatePeerTargetDatabase.ts.html |here} to see how to use CreatePeerTargetDatabase API.
   */
  public async createPeerTargetDatabase(
    createPeerTargetDatabaseRequest: requests.CreatePeerTargetDatabaseRequest
  ): Promise<responses.CreatePeerTargetDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#createPeerTargetDatabase.");
    const operationName = "createPeerTargetDatabase";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/PeerTargetDatabase/CreatePeerTargetDatabase";
    const pathParams = {
      "{targetDatabaseId}": createPeerTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": createPeerTargetDatabaseRequest.ifMatch,
      "opc-request-id": createPeerTargetDatabaseRequest.opcRequestId,
      "opc-retry-token": createPeerTargetDatabaseRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPeerTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/peerTargetDatabases",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPeerTargetDatabaseRequest.createPeerTargetDatabaseDetails,
        "CreatePeerTargetDatabaseDetails",
        model.CreatePeerTargetDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePeerTargetDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "peerTargetDatabase",
        bodyModel: model.PeerTargetDatabase,
        type: "model.PeerTargetDatabase",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new report definition with parameters specified in the body. The report definition is stored in the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateReportDefinitionRequest
   * @return CreateReportDefinitionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateReportDefinition.ts.html |here} to see how to use CreateReportDefinition API.
   */
  public async createReportDefinition(
    createReportDefinitionRequest: requests.CreateReportDefinitionRequest
  ): Promise<responses.CreateReportDefinitionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createReportDefinition.");
    const operationName = "createReportDefinition";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/CreateReportDefinition";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createReportDefinitionRequest.opcRetryToken,
      "opc-request-id": createReportDefinitionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createReportDefinitionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reportDefinitions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createReportDefinitionRequest.createReportDefinitionDetails,
        "CreateReportDefinitionDetails",
        model.CreateReportDefinitionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateReportDefinitionResponse>{},
        body: await response.json(),
        bodyKey: "reportDefinition",
        bodyModel: model.ReportDefinition,
        type: "model.ReportDefinition",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates SDM masking policy difference for the specified masking policy. It finds the difference between
   * masking columns of the masking policy and sensitive columns of the SDM. After performing this operation,
   * you can use ListDifferenceColumns to view the difference columns, PatchSdmMaskingPolicyDifferenceColumns
   * to specify the action you want perform on these columns, and then ApplySdmMaskingPolicyDifference to process the
   * difference columns and apply them to the masking policy.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateSdmMaskingPolicyDifferenceRequest
   * @return CreateSdmMaskingPolicyDifferenceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSdmMaskingPolicyDifference.ts.html |here} to see how to use CreateSdmMaskingPolicyDifference API.
   */
  public async createSdmMaskingPolicyDifference(
    createSdmMaskingPolicyDifferenceRequest: requests.CreateSdmMaskingPolicyDifferenceRequest
  ): Promise<responses.CreateSdmMaskingPolicyDifferenceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#createSdmMaskingPolicyDifference.");
    const operationName = "createSdmMaskingPolicyDifference";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSdmMaskingPolicyDifferenceRequest.opcRetryToken,
      "opc-request-id": createSdmMaskingPolicyDifferenceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSdmMaskingPolicyDifferenceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sdmMaskingPolicyDifferences",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSdmMaskingPolicyDifferenceRequest.createSdmMaskingPolicyDifferenceDetails,
        "CreateSdmMaskingPolicyDifferenceDetails",
        model.CreateSdmMaskingPolicyDifferenceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSdmMaskingPolicyDifferenceResponse>{},
        body: await response.json(),
        bodyKey: "sdmMaskingPolicyDifference",
        bodyModel: model.SdmMaskingPolicyDifference,
        type: "model.SdmMaskingPolicyDifference",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new saved security assessment for one or multiple targets in a compartment. When this operation is performed,
   * it will save the latest assessments in the specified compartment. If a schedule is passed, it will persist the latest assessments,
   * at the defined date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateSecurityAssessmentRequest
   * @return CreateSecurityAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSecurityAssessment.ts.html |here} to see how to use CreateSecurityAssessment API.
   */
  public async createSecurityAssessment(
    createSecurityAssessmentRequest: requests.CreateSecurityAssessmentRequest
  ): Promise<responses.CreateSecurityAssessmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#createSecurityAssessment.");
    const operationName = "createSecurityAssessment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/CreateSecurityAssessment";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSecurityAssessmentRequest.opcRetryToken,
      "opc-request-id": createSecurityAssessmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSecurityAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSecurityAssessmentRequest.createSecurityAssessmentDetails,
        "CreateSecurityAssessmentDetails",
        model.CreateSecurityAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSecurityAssessmentResponse>{},
        body: await response.json(),
        bodyKey: "securityAssessment",
        bodyModel: model.SecurityAssessment,
        type: "model.SecurityAssessment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new sensitive column in the specified sensitive data model.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateSensitiveColumnRequest
   * @return CreateSensitiveColumnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSensitiveColumn.ts.html |here} to see how to use CreateSensitiveColumn API.
   */
  public async createSensitiveColumn(
    createSensitiveColumnRequest: requests.CreateSensitiveColumnRequest
  ): Promise<responses.CreateSensitiveColumnResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createSensitiveColumn.");
    const operationName = "createSensitiveColumn";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveColumn/CreateSensitiveColumn";
    const pathParams = {
      "{sensitiveDataModelId}": createSensitiveColumnRequest.sensitiveDataModelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSensitiveColumnRequest.opcRetryToken,
      "opc-request-id": createSensitiveColumnRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSensitiveColumnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSensitiveColumnRequest.createSensitiveColumnDetails,
        "CreateSensitiveColumnDetails",
        model.CreateSensitiveColumnDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSensitiveColumnResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new sensitive data model. If schemas and sensitive types are provided, it automatically runs data discovery
   * and adds the discovered columns to the sensitive data model. Otherwise, it creates an empty sensitive data model
   * that can be updated later.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateSensitiveDataModelRequest
   * @return CreateSensitiveDataModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSensitiveDataModel.ts.html |here} to see how to use CreateSensitiveDataModel API.
   */
  public async createSensitiveDataModel(
    createSensitiveDataModelRequest: requests.CreateSensitiveDataModelRequest
  ): Promise<responses.CreateSensitiveDataModelResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#createSensitiveDataModel.");
    const operationName = "createSensitiveDataModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/CreateSensitiveDataModel";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSensitiveDataModelRequest.opcRetryToken,
      "opc-request-id": createSensitiveDataModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSensitiveDataModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSensitiveDataModelRequest.createSensitiveDataModelDetails,
        "CreateSensitiveDataModelDetails",
        model.CreateSensitiveDataModelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSensitiveDataModelResponse>{},
        body: await response.json(),
        bodyKey: "sensitiveDataModel",
        bodyModel: model.SensitiveDataModel,
        type: "model.SensitiveDataModel",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new sensitive type, which can be a basic sensitive type with regular expressions or a sensitive category.
   * While sensitive types are used for data discovery, sensitive categories are used for logically grouping the related
   * or similar sensitive types.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateSensitiveTypeRequest
   * @return CreateSensitiveTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSensitiveType.ts.html |here} to see how to use CreateSensitiveType API.
   */
  public async createSensitiveType(
    createSensitiveTypeRequest: requests.CreateSensitiveTypeRequest
  ): Promise<responses.CreateSensitiveTypeResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createSensitiveType.");
    const operationName = "createSensitiveType";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSensitiveTypeRequest.opcRetryToken,
      "opc-request-id": createSensitiveTypeRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSensitiveTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveTypes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSensitiveTypeRequest.createSensitiveTypeDetails,
        "CreateSensitiveTypeDetails",
        model.CreateSensitiveTypeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSensitiveTypeResponse>{},
        body: await response.json(),
        bodyKey: "sensitiveType",
        bodyModel: model.SensitiveType,
        type: "model.SensitiveType",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new SQL collection resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateSqlCollectionRequest
   * @return CreateSqlCollectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSqlCollection.ts.html |here} to see how to use CreateSqlCollection API.
   */
  public async createSqlCollection(
    createSqlCollectionRequest: requests.CreateSqlCollectionRequest
  ): Promise<responses.CreateSqlCollectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createSqlCollection.");
    const operationName = "createSqlCollection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlCollection/CreateSqlCollection";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSqlCollectionRequest.opcRetryToken,
      "opc-request-id": createSqlCollectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSqlCollectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSqlCollectionRequest.createSqlCollectionDetails,
        "CreateSqlCollectionDetails",
        model.CreateSqlCollectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSqlCollectionResponse>{},
        body: await response.json(),
        bodyKey: "sqlCollection",
        bodyModel: model.SqlCollection,
        type: "model.SqlCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new target-alert policy association to track a alert policy applied on target.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateTargetAlertPolicyAssociationRequest
   * @return CreateTargetAlertPolicyAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateTargetAlertPolicyAssociation.ts.html |here} to see how to use CreateTargetAlertPolicyAssociation API.
   */
  public async createTargetAlertPolicyAssociation(
    createTargetAlertPolicyAssociationRequest: requests.CreateTargetAlertPolicyAssociationRequest
  ): Promise<responses.CreateTargetAlertPolicyAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#createTargetAlertPolicyAssociation.");
    const operationName = "createTargetAlertPolicyAssociation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociation/CreateTargetAlertPolicyAssociation";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTargetAlertPolicyAssociationRequest.opcRetryToken,
      "opc-request-id": createTargetAlertPolicyAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTargetAlertPolicyAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetAlertPolicyAssociations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTargetAlertPolicyAssociationRequest.createTargetAlertPolicyAssociationDetails,
        "CreateTargetAlertPolicyAssociationDetails",
        model.CreateTargetAlertPolicyAssociationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTargetAlertPolicyAssociationResponse>{},
        body: await response.json(),
        bodyKey: "targetAlertPolicyAssociation",
        bodyModel: model.TargetAlertPolicyAssociation,
        type: "model.TargetAlertPolicyAssociation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Registers the specified database with Data Safe and creates a Data Safe target database in the Data Safe Console.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateTargetDatabaseRequest
   * @return CreateTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateTargetDatabase.ts.html |here} to see how to use CreateTargetDatabase API.
   */
  public async createTargetDatabase(
    createTargetDatabaseRequest: requests.CreateTargetDatabaseRequest
  ): Promise<responses.CreateTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createTargetDatabase.");
    const operationName = "createTargetDatabase";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/CreateTargetDatabase";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTargetDatabaseRequest.opcRetryToken,
      "opc-request-id": createTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTargetDatabaseRequest.createTargetDatabaseDetails,
        "CreateTargetDatabaseDetails",
        model.CreateTargetDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTargetDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "targetDatabase",
        bodyModel: model.TargetDatabase,
        type: "model.TargetDatabase",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new saved user assessment for one or multiple targets in a compartment. It saves the latest assessments in the
   * specified compartment. If a scheduled is passed in, this operation persists the latest assessments that exist at the defined
   * date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateUserAssessmentRequest
   * @return CreateUserAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateUserAssessment.ts.html |here} to see how to use CreateUserAssessment API.
   */
  public async createUserAssessment(
    createUserAssessmentRequest: requests.CreateUserAssessmentRequest
  ): Promise<responses.CreateUserAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createUserAssessment.");
    const operationName = "createUserAssessment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/CreateUserAssessment";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createUserAssessmentRequest.opcRetryToken,
      "opc-request-id": createUserAssessmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createUserAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createUserAssessmentRequest.createUserAssessmentDetails,
        "CreateUserAssessmentDetails",
        model.CreateUserAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateUserAssessmentResponse>{},
        body: await response.json(),
        bodyKey: "userAssessment",
        bodyModel: model.UserAssessment,
        type: "model.UserAssessment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deactivates a target database in Data Safe.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeactivateTargetDatabaseRequest
   * @return DeactivateTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeactivateTargetDatabase.ts.html |here} to see how to use DeactivateTargetDatabase API.
   */
  public async deactivateTargetDatabase(
    deactivateTargetDatabaseRequest: requests.DeactivateTargetDatabaseRequest
  ): Promise<responses.DeactivateTargetDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deactivateTargetDatabase.");
    const operationName = "deactivateTargetDatabase";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/DeactivateTargetDatabase";
    const pathParams = {
      "{targetDatabaseId}": deactivateTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": deactivateTargetDatabaseRequest.opcRetryToken,
      "if-match": deactivateTargetDatabaseRequest.ifMatch,
      "opc-request-id": deactivateTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deactivateTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/actions/deactivate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeactivateTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified user-defined alert policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteAlertPolicyRequest
   * @return DeleteAlertPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteAlertPolicy.ts.html |here} to see how to use DeleteAlertPolicy API.
   */
  public async deleteAlertPolicy(
    deleteAlertPolicyRequest: requests.DeleteAlertPolicyRequest
  ): Promise<responses.DeleteAlertPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteAlertPolicy.");
    const operationName = "deleteAlertPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicy/DeleteAlertPolicy";
    const pathParams = {
      "{alertPolicyId}": deleteAlertPolicyRequest.alertPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteAlertPolicyRequest.ifMatch,
      "opc-request-id": deleteAlertPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAlertPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alertPolicies/{alertPolicyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAlertPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified user-defined alert policy rule.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteAlertPolicyRuleRequest
   * @return DeleteAlertPolicyRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteAlertPolicyRule.ts.html |here} to see how to use DeleteAlertPolicyRule API.
   */
  public async deleteAlertPolicyRule(
    deleteAlertPolicyRuleRequest: requests.DeleteAlertPolicyRuleRequest
  ): Promise<responses.DeleteAlertPolicyRuleResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteAlertPolicyRule.");
    const operationName = "deleteAlertPolicyRule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicyRule/DeleteAlertPolicyRule";
    const pathParams = {
      "{alertPolicyId}": deleteAlertPolicyRuleRequest.alertPolicyId,
      "{ruleKey}": deleteAlertPolicyRuleRequest.ruleKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteAlertPolicyRuleRequest.ifMatch,
      "opc-request-id": deleteAlertPolicyRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAlertPolicyRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alertPolicies/{alertPolicyId}/rules/{ruleKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAlertPolicyRuleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * To unload retrieved archive data, call the operation ListAuditArchiveRetrieval first.
   * This will return the auditArchiveRetrievalId. Then call this operation with auditArchiveRetrievalId.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteAuditArchiveRetrievalRequest
   * @return DeleteAuditArchiveRetrievalResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteAuditArchiveRetrieval.ts.html |here} to see how to use DeleteAuditArchiveRetrieval API.
   */
  public async deleteAuditArchiveRetrieval(
    deleteAuditArchiveRetrievalRequest: requests.DeleteAuditArchiveRetrievalRequest
  ): Promise<responses.DeleteAuditArchiveRetrievalResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deleteAuditArchiveRetrieval.");
    const operationName = "deleteAuditArchiveRetrieval";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditArchiveRetrieval/DeleteAuditArchiveRetrieval";
    const pathParams = {
      "{auditArchiveRetrievalId}": deleteAuditArchiveRetrievalRequest.auditArchiveRetrievalId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteAuditArchiveRetrievalRequest.ifMatch,
      "opc-request-id": deleteAuditArchiveRetrievalRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAuditArchiveRetrievalRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditArchiveRetrievals/{auditArchiveRetrievalId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAuditArchiveRetrievalResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified audit trail.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteAuditTrailRequest
   * @return DeleteAuditTrailResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteAuditTrail.ts.html |here} to see how to use DeleteAuditTrail API.
   */
  public async deleteAuditTrail(
    deleteAuditTrailRequest: requests.DeleteAuditTrailRequest
  ): Promise<responses.DeleteAuditTrailResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteAuditTrail.");
    const operationName = "deleteAuditTrail";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/DeleteAuditTrail";
    const pathParams = {
      "{auditTrailId}": deleteAuditTrailRequest.auditTrailId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteAuditTrailRequest.ifMatch,
      "opc-request-id": deleteAuditTrailRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAuditTrailRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditTrails/{auditTrailId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAuditTrailResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified Data Safe private endpoint.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDataSafePrivateEndpointRequest
   * @return DeleteDataSafePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteDataSafePrivateEndpoint.ts.html |here} to see how to use DeleteDataSafePrivateEndpoint API.
   */
  public async deleteDataSafePrivateEndpoint(
    deleteDataSafePrivateEndpointRequest: requests.DeleteDataSafePrivateEndpointRequest
  ): Promise<responses.DeleteDataSafePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deleteDataSafePrivateEndpoint.");
    const operationName = "deleteDataSafePrivateEndpoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafePrivateEndpoint/DeleteDataSafePrivateEndpoint";
    const pathParams = {
      "{dataSafePrivateEndpointId}": deleteDataSafePrivateEndpointRequest.dataSafePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDataSafePrivateEndpointRequest.ifMatch,
      "opc-request-id": deleteDataSafePrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDataSafePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDataSafePrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified discovery job.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDiscoveryJobRequest
   * @return DeleteDiscoveryJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteDiscoveryJob.ts.html |here} to see how to use DeleteDiscoveryJob API.
   */
  public async deleteDiscoveryJob(
    deleteDiscoveryJobRequest: requests.DeleteDiscoveryJobRequest
  ): Promise<responses.DeleteDiscoveryJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteDiscoveryJob.");
    const operationName = "deleteDiscoveryJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJob/DeleteDiscoveryJob";
    const pathParams = {
      "{discoveryJobId}": deleteDiscoveryJobRequest.discoveryJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDiscoveryJobRequest.ifMatch,
      "opc-request-id": deleteDiscoveryJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDiscoveryJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs/{discoveryJobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDiscoveryJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified discovery result.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDiscoveryJobResultRequest
   * @return DeleteDiscoveryJobResultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteDiscoveryJobResult.ts.html |here} to see how to use DeleteDiscoveryJobResult API.
   */
  public async deleteDiscoveryJobResult(
    deleteDiscoveryJobResultRequest: requests.DeleteDiscoveryJobResultRequest
  ): Promise<responses.DeleteDiscoveryJobResultResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deleteDiscoveryJobResult.");
    const operationName = "deleteDiscoveryJobResult";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJobResult/DeleteDiscoveryJobResult";
    const pathParams = {
      "{discoveryJobId}": deleteDiscoveryJobResultRequest.discoveryJobId,
      "{resultKey}": deleteDiscoveryJobResultRequest.resultKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDiscoveryJobResultRequest.ifMatch,
      "opc-request-id": deleteDiscoveryJobResultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDiscoveryJobResultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs/{discoveryJobId}/results/{resultKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDiscoveryJobResultResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified library masking format.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteLibraryMaskingFormatRequest
   * @return DeleteLibraryMaskingFormatResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteLibraryMaskingFormat.ts.html |here} to see how to use DeleteLibraryMaskingFormat API.
   */
  public async deleteLibraryMaskingFormat(
    deleteLibraryMaskingFormatRequest: requests.DeleteLibraryMaskingFormatRequest
  ): Promise<responses.DeleteLibraryMaskingFormatResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deleteLibraryMaskingFormat.");
    const operationName = "deleteLibraryMaskingFormat";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/LibraryMaskingFormat/DeleteLibraryMaskingFormat";
    const pathParams = {
      "{libraryMaskingFormatId}": deleteLibraryMaskingFormatRequest.libraryMaskingFormatId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteLibraryMaskingFormatRequest.ifMatch,
      "opc-request-id": deleteLibraryMaskingFormatRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteLibraryMaskingFormatRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/libraryMaskingFormats/{libraryMaskingFormatId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLibraryMaskingFormatResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified masking column.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteMaskingColumnRequest
   * @return DeleteMaskingColumnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteMaskingColumn.ts.html |here} to see how to use DeleteMaskingColumn API.
   */
  public async deleteMaskingColumn(
    deleteMaskingColumnRequest: requests.DeleteMaskingColumnRequest
  ): Promise<responses.DeleteMaskingColumnResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteMaskingColumn.");
    const operationName = "deleteMaskingColumn";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/DeleteMaskingColumn";
    const pathParams = {
      "{maskingColumnKey}": deleteMaskingColumnRequest.maskingColumnKey,
      "{maskingPolicyId}": deleteMaskingColumnRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteMaskingColumnRequest.ifMatch,
      "opc-request-id": deleteMaskingColumnRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMaskingColumnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/maskingColumns/{maskingColumnKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMaskingColumnResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified masking policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteMaskingPolicyRequest
   * @return DeleteMaskingPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteMaskingPolicy.ts.html |here} to see how to use DeleteMaskingPolicy API.
   */
  public async deleteMaskingPolicy(
    deleteMaskingPolicyRequest: requests.DeleteMaskingPolicyRequest
  ): Promise<responses.DeleteMaskingPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteMaskingPolicy.");
    const operationName = "deleteMaskingPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/DeleteMaskingPolicy";
    const pathParams = {
      "{maskingPolicyId}": deleteMaskingPolicyRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteMaskingPolicyRequest.ifMatch,
      "opc-request-id": deleteMaskingPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMaskingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMaskingPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified masking policy health report.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteMaskingPolicyHealthReportRequest
   * @return DeleteMaskingPolicyHealthReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteMaskingPolicyHealthReport.ts.html |here} to see how to use DeleteMaskingPolicyHealthReport API.
   */
  public async deleteMaskingPolicyHealthReport(
    deleteMaskingPolicyHealthReportRequest: requests.DeleteMaskingPolicyHealthReportRequest
  ): Promise<responses.DeleteMaskingPolicyHealthReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deleteMaskingPolicyHealthReport.");
    const operationName = "deleteMaskingPolicyHealthReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicyHealthReport/DeleteMaskingPolicyHealthReport";
    const pathParams = {
      "{maskingPolicyHealthReportId}":
        deleteMaskingPolicyHealthReportRequest.maskingPolicyHealthReportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteMaskingPolicyHealthReportRequest.ifMatch,
      "opc-request-id": deleteMaskingPolicyHealthReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMaskingPolicyHealthReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicyHealthReports/{maskingPolicyHealthReportId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMaskingPolicyHealthReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified on-premises connector.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteOnPremConnectorRequest
   * @return DeleteOnPremConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteOnPremConnector.ts.html |here} to see how to use DeleteOnPremConnector API.
   */
  public async deleteOnPremConnector(
    deleteOnPremConnectorRequest: requests.DeleteOnPremConnectorRequest
  ): Promise<responses.DeleteOnPremConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteOnPremConnector.");
    const operationName = "deleteOnPremConnector";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/DeleteOnPremConnector";
    const pathParams = {
      "{onPremConnectorId}": deleteOnPremConnectorRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOnPremConnectorRequest.ifMatch,
      "opc-request-id": deleteOnPremConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOnPremConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOnPremConnectorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the specified peer target database from Data Safe.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeletePeerTargetDatabaseRequest
   * @return DeletePeerTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeletePeerTargetDatabase.ts.html |here} to see how to use DeletePeerTargetDatabase API.
   */
  public async deletePeerTargetDatabase(
    deletePeerTargetDatabaseRequest: requests.DeletePeerTargetDatabaseRequest
  ): Promise<responses.DeletePeerTargetDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deletePeerTargetDatabase.");
    const operationName = "deletePeerTargetDatabase";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/PeerTargetDatabase/DeletePeerTargetDatabase";
    const pathParams = {
      "{targetDatabaseId}": deletePeerTargetDatabaseRequest.targetDatabaseId,
      "{peerTargetDatabaseId}": deletePeerTargetDatabaseRequest.peerTargetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePeerTargetDatabaseRequest.ifMatch,
      "opc-request-id": deletePeerTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePeerTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/peerTargetDatabases/{peerTargetDatabaseId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePeerTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified report definition. Only the user created report definition can be deleted. The seeded report definitions cannot be deleted.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteReportDefinitionRequest
   * @return DeleteReportDefinitionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteReportDefinition.ts.html |here} to see how to use DeleteReportDefinition API.
   */
  public async deleteReportDefinition(
    deleteReportDefinitionRequest: requests.DeleteReportDefinitionRequest
  ): Promise<responses.DeleteReportDefinitionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteReportDefinition.");
    const operationName = "deleteReportDefinition";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/DeleteReportDefinition";
    const pathParams = {
      "{reportDefinitionId}": deleteReportDefinitionRequest.reportDefinitionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteReportDefinitionRequest.ifMatch,
      "opc-request-id": deleteReportDefinitionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteReportDefinitionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reportDefinitions/{reportDefinitionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteReportDefinitionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified SDM Masking policy difference.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteSdmMaskingPolicyDifferenceRequest
   * @return DeleteSdmMaskingPolicyDifferenceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSdmMaskingPolicyDifference.ts.html |here} to see how to use DeleteSdmMaskingPolicyDifference API.
   */
  public async deleteSdmMaskingPolicyDifference(
    deleteSdmMaskingPolicyDifferenceRequest: requests.DeleteSdmMaskingPolicyDifferenceRequest
  ): Promise<responses.DeleteSdmMaskingPolicyDifferenceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deleteSdmMaskingPolicyDifference.");
    const operationName = "deleteSdmMaskingPolicyDifference";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/DeleteSdmMaskingPolicyDifference";
    const pathParams = {
      "{sdmMaskingPolicyDifferenceId}":
        deleteSdmMaskingPolicyDifferenceRequest.sdmMaskingPolicyDifferenceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSdmMaskingPolicyDifferenceRequest.ifMatch,
      "opc-request-id": deleteSdmMaskingPolicyDifferenceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSdmMaskingPolicyDifferenceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSdmMaskingPolicyDifferenceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified saved security assessment or schedule. To delete a security assessment schedule,
   * first call the operation ListSecurityAssessments with filters \"type = save_schedule\".
   * That operation returns the scheduleAssessmentId. Then, call DeleteSecurityAssessment with the scheduleAssessmentId.
   * If the assessment being deleted is the baseline for that compartment, then it will impact all baselines in the compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteSecurityAssessmentRequest
   * @return DeleteSecurityAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSecurityAssessment.ts.html |here} to see how to use DeleteSecurityAssessment API.
   */
  public async deleteSecurityAssessment(
    deleteSecurityAssessmentRequest: requests.DeleteSecurityAssessmentRequest
  ): Promise<responses.DeleteSecurityAssessmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deleteSecurityAssessment.");
    const operationName = "deleteSecurityAssessment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/DeleteSecurityAssessment";
    const pathParams = {
      "{securityAssessmentId}": deleteSecurityAssessmentRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteSecurityAssessmentRequest.opcRequestId,
      "if-match": deleteSecurityAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSecurityAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSecurityAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified sensitive column.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteSensitiveColumnRequest
   * @return DeleteSensitiveColumnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSensitiveColumn.ts.html |here} to see how to use DeleteSensitiveColumn API.
   */
  public async deleteSensitiveColumn(
    deleteSensitiveColumnRequest: requests.DeleteSensitiveColumnRequest
  ): Promise<responses.DeleteSensitiveColumnResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteSensitiveColumn.");
    const operationName = "deleteSensitiveColumn";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveColumn/DeleteSensitiveColumn";
    const pathParams = {
      "{sensitiveDataModelId}": deleteSensitiveColumnRequest.sensitiveDataModelId,
      "{sensitiveColumnKey}": deleteSensitiveColumnRequest.sensitiveColumnKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSensitiveColumnRequest.ifMatch,
      "opc-request-id": deleteSensitiveColumnRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSensitiveColumnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns/{sensitiveColumnKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSensitiveColumnResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified sensitive data model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteSensitiveDataModelRequest
   * @return DeleteSensitiveDataModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSensitiveDataModel.ts.html |here} to see how to use DeleteSensitiveDataModel API.
   */
  public async deleteSensitiveDataModel(
    deleteSensitiveDataModelRequest: requests.DeleteSensitiveDataModelRequest
  ): Promise<responses.DeleteSensitiveDataModelResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deleteSensitiveDataModel.");
    const operationName = "deleteSensitiveDataModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/DeleteSensitiveDataModel";
    const pathParams = {
      "{sensitiveDataModelId}": deleteSensitiveDataModelRequest.sensitiveDataModelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSensitiveDataModelRequest.ifMatch,
      "opc-request-id": deleteSensitiveDataModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSensitiveDataModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSensitiveDataModelResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified sensitive type.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteSensitiveTypeRequest
   * @return DeleteSensitiveTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSensitiveType.ts.html |here} to see how to use DeleteSensitiveType API.
   */
  public async deleteSensitiveType(
    deleteSensitiveTypeRequest: requests.DeleteSensitiveTypeRequest
  ): Promise<responses.DeleteSensitiveTypeResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteSensitiveType.");
    const operationName = "deleteSensitiveType";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveType/DeleteSensitiveType";
    const pathParams = {
      "{sensitiveTypeId}": deleteSensitiveTypeRequest.sensitiveTypeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSensitiveTypeRequest.ifMatch,
      "opc-request-id": deleteSensitiveTypeRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSensitiveTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveTypes/{sensitiveTypeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSensitiveTypeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified SQL collection.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteSqlCollectionRequest
   * @return DeleteSqlCollectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSqlCollection.ts.html |here} to see how to use DeleteSqlCollection API.
   */
  public async deleteSqlCollection(
    deleteSqlCollectionRequest: requests.DeleteSqlCollectionRequest
  ): Promise<responses.DeleteSqlCollectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteSqlCollection.");
    const operationName = "deleteSqlCollection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlCollection/DeleteSqlCollection";
    const pathParams = {
      "{sqlCollectionId}": deleteSqlCollectionRequest.sqlCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSqlCollectionRequest.ifMatch,
      "opc-request-id": deleteSqlCollectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSqlCollectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollections/{sqlCollectionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSqlCollectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the SQL Firewall policy resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteSqlFirewallPolicyRequest
   * @return DeleteSqlFirewallPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSqlFirewallPolicy.ts.html |here} to see how to use DeleteSqlFirewallPolicy API.
   */
  public async deleteSqlFirewallPolicy(
    deleteSqlFirewallPolicyRequest: requests.DeleteSqlFirewallPolicyRequest
  ): Promise<responses.DeleteSqlFirewallPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteSqlFirewallPolicy.");
    const operationName = "deleteSqlFirewallPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlFirewallPolicy/DeleteSqlFirewallPolicy";
    const pathParams = {
      "{sqlFirewallPolicyId}": deleteSqlFirewallPolicyRequest.sqlFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSqlFirewallPolicyRequest.ifMatch,
      "opc-request-id": deleteSqlFirewallPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSqlFirewallPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlFirewallPolicies/{sqlFirewallPolicyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSqlFirewallPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified target-alert policy Association.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteTargetAlertPolicyAssociationRequest
   * @return DeleteTargetAlertPolicyAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteTargetAlertPolicyAssociation.ts.html |here} to see how to use DeleteTargetAlertPolicyAssociation API.
   */
  public async deleteTargetAlertPolicyAssociation(
    deleteTargetAlertPolicyAssociationRequest: requests.DeleteTargetAlertPolicyAssociationRequest
  ): Promise<responses.DeleteTargetAlertPolicyAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deleteTargetAlertPolicyAssociation.");
    const operationName = "deleteTargetAlertPolicyAssociation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociation/DeleteTargetAlertPolicyAssociation";
    const pathParams = {
      "{targetAlertPolicyAssociationId}":
        deleteTargetAlertPolicyAssociationRequest.targetAlertPolicyAssociationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTargetAlertPolicyAssociationRequest.ifMatch,
      "opc-request-id": deleteTargetAlertPolicyAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTargetAlertPolicyAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetAlertPolicyAssociations/{targetAlertPolicyAssociationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTargetAlertPolicyAssociationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deregisters the specified database from Data Safe and removes the target database from the Data Safe Console.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteTargetDatabaseRequest
   * @return DeleteTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteTargetDatabase.ts.html |here} to see how to use DeleteTargetDatabase API.
   */
  public async deleteTargetDatabase(
    deleteTargetDatabaseRequest: requests.DeleteTargetDatabaseRequest
  ): Promise<responses.DeleteTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteTargetDatabase.");
    const operationName = "deleteTargetDatabase";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/DeleteTargetDatabase";
    const pathParams = {
      "{targetDatabaseId}": deleteTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTargetDatabaseRequest.ifMatch,
      "opc-request-id": deleteTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified saved user assessment or schedule. To delete a user assessment schedule, first call the operation
   * ListUserAssessments with filters \"type = save_schedule\".
   * That call returns the scheduleAssessmentId. Then call DeleteUserAssessment with the scheduleAssessmentId.
   * If the assessment being deleted is the baseline for that compartment, then it will impact all baselines in the compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteUserAssessmentRequest
   * @return DeleteUserAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteUserAssessment.ts.html |here} to see how to use DeleteUserAssessment API.
   */
  public async deleteUserAssessment(
    deleteUserAssessmentRequest: requests.DeleteUserAssessmentRequest
  ): Promise<responses.DeleteUserAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteUserAssessment.");
    const operationName = "deleteUserAssessment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/DeleteUserAssessment";
    const pathParams = {
      "{userAssessmentId}": deleteUserAssessmentRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteUserAssessmentRequest.ifMatch,
      "opc-request-id": deleteUserAssessmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteUserAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteUserAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the list of audit trails created under audit profile.The
   * operation can be used to create new audit trails for target database
   * when they become available for audit collection because of change of database version
   * or change of database unified mode or change of data base  edition or being deleted previously etc.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DiscoverAuditTrailsRequest
   * @return DiscoverAuditTrailsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DiscoverAuditTrails.ts.html |here} to see how to use DiscoverAuditTrails API.
   */
  public async discoverAuditTrails(
    discoverAuditTrailsRequest: requests.DiscoverAuditTrailsRequest
  ): Promise<responses.DiscoverAuditTrailsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#discoverAuditTrails.");
    const operationName = "discoverAuditTrails";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/DiscoverAuditTrails";
    const pathParams = {
      "{auditProfileId}": discoverAuditTrailsRequest.auditProfileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": discoverAuditTrailsRequest.opcRequestId,
      "if-match": discoverAuditTrailsRequest.ifMatch,
      "opc-retry-token": discoverAuditTrailsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      discoverAuditTrailsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditProfiles/{auditProfileId}/actions/discoverAuditTrails",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DiscoverAuditTrailsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads an already-generated discovery report. Note that the GenerateDiscoveryReportForDownload operation is a
   * prerequisite for the DownloadDiscoveryReport operation. Use GenerateDiscoveryReportForDownload to generate a discovery
   * report file and then use DownloadDiscoveryReport to download the generated file. By default, it downloads report for
   * all the columns in a sensitive data model. Use the discoveryJobId attribute to download report for a specific discovery job.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DownloadDiscoveryReportRequest
   * @return DownloadDiscoveryReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadDiscoveryReport.ts.html |here} to see how to use DownloadDiscoveryReport API.
   */
  public async downloadDiscoveryReport(
    downloadDiscoveryReportRequest: requests.DownloadDiscoveryReportRequest
  ): Promise<responses.DownloadDiscoveryReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#downloadDiscoveryReport.");
    const operationName = "downloadDiscoveryReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/DownloadDiscoveryReport";
    const pathParams = {
      "{sensitiveDataModelId}": downloadDiscoveryReportRequest.sensitiveDataModelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": downloadDiscoveryReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadDiscoveryReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/actions/downloadReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        downloadDiscoveryReportRequest.downloadDiscoveryReportDetails,
        "DownloadDiscoveryReportDetails",
        model.DownloadDiscoveryReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadDiscoveryReportResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads the masking log generated by the last masking operation on a target database using the specified masking policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DownloadMaskingLogRequest
   * @return DownloadMaskingLogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadMaskingLog.ts.html |here} to see how to use DownloadMaskingLog API.
   */
  public async downloadMaskingLog(
    downloadMaskingLogRequest: requests.DownloadMaskingLogRequest
  ): Promise<responses.DownloadMaskingLogResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#downloadMaskingLog.");
    const operationName = "downloadMaskingLog";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/DownloadMaskingLog";
    const pathParams = {
      "{maskingPolicyId}": downloadMaskingLogRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": downloadMaskingLogRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadMaskingLogRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/actions/downloadLog",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        downloadMaskingLogRequest.downloadMaskingLogDetails,
        "DownloadMaskingLogDetails",
        model.DownloadMaskingLogDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadMaskingLogResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads an already-generated file corresponding to the specified masking policy.
   * Note that the GenerateMaskingPolicyForDownload operation is a prerequisite for the
   * DownloadMaskingPolicy operation. Use GenerateMaskingPolicyForDownload to generate
   * a masking policy file and then use DownloadMaskingPolicy to download the generated file.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DownloadMaskingPolicyRequest
   * @return DownloadMaskingPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadMaskingPolicy.ts.html |here} to see how to use DownloadMaskingPolicy API.
   */
  public async downloadMaskingPolicy(
    downloadMaskingPolicyRequest: requests.DownloadMaskingPolicyRequest
  ): Promise<responses.DownloadMaskingPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#downloadMaskingPolicy.");
    const operationName = "downloadMaskingPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/DownloadMaskingPolicy";
    const pathParams = {
      "{maskingPolicyId}": downloadMaskingPolicyRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": downloadMaskingPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadMaskingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/actions/download",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        downloadMaskingPolicyRequest.downloadMaskingPolicyDetails,
        "DownloadMaskingPolicyDetails",
        model.DownloadMaskingPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadMaskingPolicyResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads an already-generated masking report. Note that the GenerateMaskingReportForDownload
   * operation is a prerequisite for the DownloadMaskingReport operation. Use GenerateMaskingReportForDownload
   * to generate a masking report file and then use DownloadMaskingReport to download the generated file.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DownloadMaskingReportRequest
   * @return DownloadMaskingReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadMaskingReport.ts.html |here} to see how to use DownloadMaskingReport API.
   */
  public async downloadMaskingReport(
    downloadMaskingReportRequest: requests.DownloadMaskingReportRequest
  ): Promise<responses.DownloadMaskingReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#downloadMaskingReport.");
    const operationName = "downloadMaskingReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/DownloadMaskingReport";
    const pathParams = {
      "{maskingPolicyId}": downloadMaskingReportRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": downloadMaskingReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadMaskingReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/actions/downloadReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        downloadMaskingReportRequest.downloadMaskingReportDetails,
        "DownloadMaskingReportDetails",
        model.DownloadMaskingReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadMaskingReportResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads the privilege script to grant/revoke required roles from the Data Safe account on the target database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DownloadPrivilegeScriptRequest
   * @return DownloadPrivilegeScriptResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadPrivilegeScript.ts.html |here} to see how to use DownloadPrivilegeScript API.
   */
  public async downloadPrivilegeScript(
    downloadPrivilegeScriptRequest: requests.DownloadPrivilegeScriptRequest
  ): Promise<responses.DownloadPrivilegeScriptResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#downloadPrivilegeScript.");
    const operationName = "downloadPrivilegeScript";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/DownloadPrivilegeScript";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": downloadPrivilegeScriptRequest.opcRetryToken,
      "opc-request-id": downloadPrivilegeScriptRequest.opcRequestId,
      "if-match": downloadPrivilegeScriptRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadPrivilegeScriptRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/downloadPrivilegeScript",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadPrivilegeScriptResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads the report of the specified security assessment. To download the security assessment report, it needs to be generated first.
   * Please use GenerateSecurityAssessmentReport to generate a downloadable report in the preferred format (PDF, XLS).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DownloadSecurityAssessmentReportRequest
   * @return DownloadSecurityAssessmentReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadSecurityAssessmentReport.ts.html |here} to see how to use DownloadSecurityAssessmentReport API.
   */
  public async downloadSecurityAssessmentReport(
    downloadSecurityAssessmentReportRequest: requests.DownloadSecurityAssessmentReportRequest
  ): Promise<responses.DownloadSecurityAssessmentReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#downloadSecurityAssessmentReport.");
    const operationName = "downloadSecurityAssessmentReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/DownloadSecurityAssessmentReport";
    const pathParams = {
      "{securityAssessmentId}": downloadSecurityAssessmentReportRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": downloadSecurityAssessmentReportRequest.ifMatch,
      "opc-retry-token": downloadSecurityAssessmentReportRequest.opcRetryToken,
      "opc-request-id": downloadSecurityAssessmentReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadSecurityAssessmentReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/downloadReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        downloadSecurityAssessmentReportRequest.downloadSecurityAssessmentReportDetails,
        "DownloadSecurityAssessmentReportDetails",
        model.DownloadSecurityAssessmentReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadSecurityAssessmentReportResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads an already-generated file corresponding to the specified sensitive data model. Note that the
   * GenerateSensitiveDataModelForDownload operation is a prerequisite for the DownloadSensitiveDataModel operation.
   * Use GenerateSensitiveDataModelForDownload to generate a data model file and then use DownloadSensitiveDataModel
   * to download the generated file.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DownloadSensitiveDataModelRequest
   * @return DownloadSensitiveDataModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadSensitiveDataModel.ts.html |here} to see how to use DownloadSensitiveDataModel API.
   */
  public async downloadSensitiveDataModel(
    downloadSensitiveDataModelRequest: requests.DownloadSensitiveDataModelRequest
  ): Promise<responses.DownloadSensitiveDataModelResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#downloadSensitiveDataModel.");
    const operationName = "downloadSensitiveDataModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/DownloadSensitiveDataModel";
    const pathParams = {
      "{sensitiveDataModelId}": downloadSensitiveDataModelRequest.sensitiveDataModelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": downloadSensitiveDataModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadSensitiveDataModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/actions/download",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        downloadSensitiveDataModelRequest.downloadSensitiveDataModelDetails,
        "DownloadSensitiveDataModelDetails",
        model.DownloadSensitiveDataModelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadSensitiveDataModelResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads the report of the specified user assessment. To download the user assessment report, it needs to be generated first.
   * Please use GenerateUserAssessmentReport to generate a downloadable report in the preferred format (PDF, XLS).
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DownloadUserAssessmentReportRequest
   * @return DownloadUserAssessmentReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadUserAssessmentReport.ts.html |here} to see how to use DownloadUserAssessmentReport API.
   */
  public async downloadUserAssessmentReport(
    downloadUserAssessmentReportRequest: requests.DownloadUserAssessmentReportRequest
  ): Promise<responses.DownloadUserAssessmentReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#downloadUserAssessmentReport.");
    const operationName = "downloadUserAssessmentReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/DownloadUserAssessmentReport";
    const pathParams = {
      "{userAssessmentId}": downloadUserAssessmentReportRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": downloadUserAssessmentReportRequest.ifMatch,
      "opc-retry-token": downloadUserAssessmentReportRequest.opcRetryToken,
      "opc-request-id": downloadUserAssessmentReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadUserAssessmentReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/downloadReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        downloadUserAssessmentReportRequest.downloadUserAssessmentReportDetails,
        "DownloadUserAssessmentReportDetails",
        model.DownloadUserAssessmentReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadUserAssessmentReportResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enables Data Safe in the tenancy and region.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param EnableDataSafeConfigurationRequest
   * @return EnableDataSafeConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/EnableDataSafeConfiguration.ts.html |here} to see how to use EnableDataSafeConfiguration API.
   */
  public async enableDataSafeConfiguration(
    enableDataSafeConfigurationRequest: requests.EnableDataSafeConfigurationRequest
  ): Promise<responses.EnableDataSafeConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#enableDataSafeConfiguration.");
    const operationName = "enableDataSafeConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafeConfiguration/EnableDataSafeConfiguration";
    const pathParams = {};

    const queryParams = {
      "compartmentId": enableDataSafeConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": enableDataSafeConfigurationRequest.ifMatch,
      "opc-request-id": enableDataSafeConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      enableDataSafeConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        enableDataSafeConfigurationRequest.enableDataSafeConfigurationDetails,
        "EnableDataSafeConfigurationDetails",
        model.EnableDataSafeConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.EnableDataSafeConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates a downloadable discovery report. It's a prerequisite for the DownloadDiscoveryReport operation. Use this
   * endpoint to generate a discovery report file and then use DownloadDiscoveryReport to download the generated file.
   * By default, it generates report for all the columns in a sensitive data model. Use the discoveryJobId attribute
   * to generate report for a specific discovery job.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateDiscoveryReportForDownloadRequest
   * @return GenerateDiscoveryReportForDownloadResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateDiscoveryReportForDownload.ts.html |here} to see how to use GenerateDiscoveryReportForDownload API.
   */
  public async generateDiscoveryReportForDownload(
    generateDiscoveryReportForDownloadRequest: requests.GenerateDiscoveryReportForDownloadRequest
  ): Promise<responses.GenerateDiscoveryReportForDownloadResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#generateDiscoveryReportForDownload.");
    const operationName = "generateDiscoveryReportForDownload";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/GenerateDiscoveryReportForDownload";
    const pathParams = {
      "{sensitiveDataModelId}": generateDiscoveryReportForDownloadRequest.sensitiveDataModelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateDiscoveryReportForDownloadRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateDiscoveryReportForDownloadRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/actions/generateReportForDownload",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateDiscoveryReportForDownloadRequest.generateDiscoveryReportForDownloadDetails,
        "GenerateDiscoveryReportForDownloadDetails",
        model.GenerateDiscoveryReportForDownloadDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateDiscoveryReportForDownloadResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Performs health check on the masking policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateHealthReportRequest
   * @return GenerateHealthReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateHealthReport.ts.html |here} to see how to use GenerateHealthReport API.
   */
  public async generateHealthReport(
    generateHealthReportRequest: requests.GenerateHealthReportRequest
  ): Promise<responses.GenerateHealthReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#generateHealthReport.");
    const operationName = "generateHealthReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicyHealthReport/GenerateHealthReport";
    const pathParams = {
      "{maskingPolicyId}": generateHealthReportRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateHealthReportRequest.opcRequestId,
      "opc-retry-token": generateHealthReportRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateHealthReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/actions/generateHealthReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateHealthReportRequest.generateHealthReportDetails,
        "GenerateHealthReportDetails",
        model.GenerateHealthReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateHealthReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates a downloadable file corresponding to the specified masking policy. It's
   * a prerequisite for the DownloadMaskingPolicy operation. Use this endpoint to generate
   * a masking policy file and then use DownloadMaskingPolicy to download the generated file.
   * Note that file generation and download are serial operations. The download operation
   * can't be invoked while the generate operation is in progress.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateMaskingPolicyForDownloadRequest
   * @return GenerateMaskingPolicyForDownloadResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateMaskingPolicyForDownload.ts.html |here} to see how to use GenerateMaskingPolicyForDownload API.
   */
  public async generateMaskingPolicyForDownload(
    generateMaskingPolicyForDownloadRequest: requests.GenerateMaskingPolicyForDownloadRequest
  ): Promise<responses.GenerateMaskingPolicyForDownloadResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#generateMaskingPolicyForDownload.");
    const operationName = "generateMaskingPolicyForDownload";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/GenerateMaskingPolicyForDownload";
    const pathParams = {
      "{maskingPolicyId}": generateMaskingPolicyForDownloadRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateMaskingPolicyForDownloadRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateMaskingPolicyForDownloadRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/actions/generatePolicyForDownload",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateMaskingPolicyForDownloadRequest.generateMaskingPolicyForDownloadDetails,
        "GenerateMaskingPolicyForDownloadDetails",
        model.GenerateMaskingPolicyForDownloadDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateMaskingPolicyForDownloadResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates a downloadable masking report. It's a prerequisite for the
   * DownloadMaskingReport operation. Use this endpoint to generate a
   * masking report file and then use DownloadMaskingReport to download
   * the generated file.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateMaskingReportForDownloadRequest
   * @return GenerateMaskingReportForDownloadResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateMaskingReportForDownload.ts.html |here} to see how to use GenerateMaskingReportForDownload API.
   */
  public async generateMaskingReportForDownload(
    generateMaskingReportForDownloadRequest: requests.GenerateMaskingReportForDownloadRequest
  ): Promise<responses.GenerateMaskingReportForDownloadResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#generateMaskingReportForDownload.");
    const operationName = "generateMaskingReportForDownload";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/GenerateMaskingReportForDownload";
    const pathParams = {
      "{maskingPolicyId}": generateMaskingReportForDownloadRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateMaskingReportForDownloadRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateMaskingReportForDownloadRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/actions/generateReportForDownload",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateMaskingReportForDownloadRequest.generateMaskingReportForDownloadDetails,
        "GenerateMaskingReportForDownloadDetails",
        model.GenerateMaskingReportForDownloadDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateMaskingReportForDownloadResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates and downloads the configuration of the specified on-premises connector.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateOnPremConnectorConfigurationRequest
   * @return GenerateOnPremConnectorConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateOnPremConnectorConfiguration.ts.html |here} to see how to use GenerateOnPremConnectorConfiguration API.
   */
  public async generateOnPremConnectorConfiguration(
    generateOnPremConnectorConfigurationRequest: requests.GenerateOnPremConnectorConfigurationRequest
  ): Promise<responses.GenerateOnPremConnectorConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#generateOnPremConnectorConfiguration.");
    const operationName = "generateOnPremConnectorConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/GenerateOnPremConnectorConfiguration";
    const pathParams = {
      "{onPremConnectorId}": generateOnPremConnectorConfigurationRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": generateOnPremConnectorConfigurationRequest.opcRetryToken,
      "opc-request-id": generateOnPremConnectorConfigurationRequest.opcRequestId,
      "if-match": generateOnPremConnectorConfigurationRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateOnPremConnectorConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}/actions/generateConfiguration",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateOnPremConnectorConfigurationRequest.generateOnPremConnectorConfigurationDetails,
        "GenerateOnPremConnectorConfigurationDetails",
        model.GenerateOnPremConnectorConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateOnPremConnectorConfigurationResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates a .xls or .pdf report based on parameters and report definition.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateReportRequest
   * @return GenerateReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateReport.ts.html |here} to see how to use GenerateReport API.
   */
  public async generateReport(
    generateReportRequest: requests.GenerateReportRequest
  ): Promise<responses.GenerateReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#generateReport.");
    const operationName = "generateReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/GenerateReport";
    const pathParams = {
      "{reportDefinitionId}": generateReportRequest.reportDefinitionId
    };

    const queryParams = {
      "scimQuery": generateReportRequest.scimQuery
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": generateReportRequest.ifMatch,
      "opc-request-id": generateReportRequest.opcRequestId,
      "opc-retry-token": generateReportRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reportDefinitions/{reportDefinitionId}/actions/generateReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateReportRequest.generateReportDetails,
        "GenerateReportDetails",
        model.GenerateReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates the report of the specified security assessment. You can get the report in PDF or XLS format.
   * After generating the report, use DownloadSecurityAssessmentReport to download it in the preferred format.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateSecurityAssessmentReportRequest
   * @return GenerateSecurityAssessmentReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateSecurityAssessmentReport.ts.html |here} to see how to use GenerateSecurityAssessmentReport API.
   */
  public async generateSecurityAssessmentReport(
    generateSecurityAssessmentReportRequest: requests.GenerateSecurityAssessmentReportRequest
  ): Promise<responses.GenerateSecurityAssessmentReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#generateSecurityAssessmentReport.");
    const operationName = "generateSecurityAssessmentReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/GenerateSecurityAssessmentReport";
    const pathParams = {
      "{securityAssessmentId}": generateSecurityAssessmentReportRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": generateSecurityAssessmentReportRequest.ifMatch,
      "opc-retry-token": generateSecurityAssessmentReportRequest.opcRetryToken,
      "opc-request-id": generateSecurityAssessmentReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateSecurityAssessmentReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/generateReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateSecurityAssessmentReportRequest.generateSecurityAssessmentReportDetails,
        "GenerateSecurityAssessmentReportDetails",
        model.GenerateSecurityAssessmentReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateSecurityAssessmentReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates a downloadable file corresponding to the specified sensitive data model. It's a prerequisite for the
   * DownloadSensitiveDataModel operation. Use this endpoint to generate a data model file and then use DownloadSensitiveDataModel
   * to download the generated file. Note that file generation and download are serial operations. The download operation
   * can't be invoked while the generate operation is in progress.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateSensitiveDataModelForDownloadRequest
   * @return GenerateSensitiveDataModelForDownloadResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateSensitiveDataModelForDownload.ts.html |here} to see how to use GenerateSensitiveDataModelForDownload API.
   */
  public async generateSensitiveDataModelForDownload(
    generateSensitiveDataModelForDownloadRequest: requests.GenerateSensitiveDataModelForDownloadRequest
  ): Promise<responses.GenerateSensitiveDataModelForDownloadResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#generateSensitiveDataModelForDownload.");
    const operationName = "generateSensitiveDataModelForDownload";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/GenerateSensitiveDataModelForDownload";
    const pathParams = {
      "{sensitiveDataModelId}": generateSensitiveDataModelForDownloadRequest.sensitiveDataModelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": generateSensitiveDataModelForDownloadRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateSensitiveDataModelForDownloadRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/actions/generateDataModelForDownload",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateSensitiveDataModelForDownloadRequest.generateSensitiveDataModelForDownloadDetails,
        "GenerateSensitiveDataModelForDownloadDetails",
        model.GenerateSensitiveDataModelForDownloadDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateSensitiveDataModelForDownloadResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates or appends to the SQL Firewall policy using the specified SQL collection.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateSqlFirewallPolicyRequest
   * @return GenerateSqlFirewallPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateSqlFirewallPolicy.ts.html |here} to see how to use GenerateSqlFirewallPolicy API.
   */
  public async generateSqlFirewallPolicy(
    generateSqlFirewallPolicyRequest: requests.GenerateSqlFirewallPolicyRequest
  ): Promise<responses.GenerateSqlFirewallPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#generateSqlFirewallPolicy.");
    const operationName = "generateSqlFirewallPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlCollection/GenerateSqlFirewallPolicy";
    const pathParams = {
      "{sqlCollectionId}": generateSqlFirewallPolicyRequest.sqlCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": generateSqlFirewallPolicyRequest.ifMatch,
      "opc-request-id": generateSqlFirewallPolicyRequest.opcRequestId,
      "opc-retry-token": generateSqlFirewallPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateSqlFirewallPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollections/{sqlCollectionId}/actions/generateSqlFirewallPolicy",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateSqlFirewallPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates the report of the specified user assessment. The report is available in PDF or XLS format.
   * After generating the report, use DownloadUserAssessmentReport to download it in the preferred format.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GenerateUserAssessmentReportRequest
   * @return GenerateUserAssessmentReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateUserAssessmentReport.ts.html |here} to see how to use GenerateUserAssessmentReport API.
   */
  public async generateUserAssessmentReport(
    generateUserAssessmentReportRequest: requests.GenerateUserAssessmentReportRequest
  ): Promise<responses.GenerateUserAssessmentReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#generateUserAssessmentReport.");
    const operationName = "generateUserAssessmentReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/GenerateUserAssessmentReport";
    const pathParams = {
      "{userAssessmentId}": generateUserAssessmentReportRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": generateUserAssessmentReportRequest.ifMatch,
      "opc-retry-token": generateUserAssessmentReportRequest.opcRetryToken,
      "opc-request-id": generateUserAssessmentReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateUserAssessmentReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/generateReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateUserAssessmentReportRequest.generateUserAssessmentReportDetails,
        "GenerateUserAssessmentReportDetails",
        model.GenerateUserAssessmentReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateUserAssessmentReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified alerts.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAlertRequest
   * @return GetAlertResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAlert.ts.html |here} to see how to use GetAlert API.
   */
  public async getAlert(
    getAlertRequest: requests.GetAlertRequest
  ): Promise<responses.GetAlertResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getAlert.");
    const operationName = "getAlert";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Alert/GetAlert";
    const pathParams = {
      "{alertId}": getAlertRequest.alertId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAlertRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAlertRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alerts/{alertId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAlertResponse>{},
        body: await response.json(),
        bodyKey: "alert",
        bodyModel: model.Alert,
        type: "model.Alert",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of alert policy by its ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAlertPolicyRequest
   * @return GetAlertPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAlertPolicy.ts.html |here} to see how to use GetAlertPolicy API.
   */
  public async getAlertPolicy(
    getAlertPolicyRequest: requests.GetAlertPolicyRequest
  ): Promise<responses.GetAlertPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getAlertPolicy.");
    const operationName = "getAlertPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicy/GetAlertPolicy";
    const pathParams = {
      "{alertPolicyId}": getAlertPolicyRequest.alertPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAlertPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAlertPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alertPolicies/{alertPolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAlertPolicyResponse>{},
        body: await response.json(),
        bodyKey: "alertPolicy",
        bodyModel: model.AlertPolicy,
        type: "model.AlertPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of a policy rule by its key.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAlertPolicyRuleRequest
   * @return GetAlertPolicyRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAlertPolicyRule.ts.html |here} to see how to use GetAlertPolicyRule API.
   */
  public async getAlertPolicyRule(
    getAlertPolicyRuleRequest: requests.GetAlertPolicyRuleRequest
  ): Promise<responses.GetAlertPolicyRuleResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getAlertPolicyRule.");
    const operationName = "getAlertPolicyRule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicyRule/GetAlertPolicyRule";
    const pathParams = {
      "{alertPolicyId}": getAlertPolicyRuleRequest.alertPolicyId,
      "{ruleKey}": getAlertPolicyRuleRequest.ruleKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAlertPolicyRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAlertPolicyRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alertPolicies/{alertPolicyId}/rules/{ruleKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAlertPolicyRuleResponse>{},
        body: await response.json(),
        bodyKey: "alertPolicyRule",
        bodyModel: model.AlertPolicyRule,
        type: "model.AlertPolicyRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified archive retreival.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAuditArchiveRetrievalRequest
   * @return GetAuditArchiveRetrievalResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAuditArchiveRetrieval.ts.html |here} to see how to use GetAuditArchiveRetrieval API.
   */
  public async getAuditArchiveRetrieval(
    getAuditArchiveRetrievalRequest: requests.GetAuditArchiveRetrievalRequest
  ): Promise<responses.GetAuditArchiveRetrievalResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getAuditArchiveRetrieval.");
    const operationName = "getAuditArchiveRetrieval";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditArchiveRetrieval/GetAuditArchiveRetrieval";
    const pathParams = {
      "{auditArchiveRetrievalId}": getAuditArchiveRetrievalRequest.auditArchiveRetrievalId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": getAuditArchiveRetrievalRequest.ifMatch,
      "opc-request-id": getAuditArchiveRetrievalRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAuditArchiveRetrievalRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditArchiveRetrievals/{auditArchiveRetrievalId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAuditArchiveRetrievalResponse>{},
        body: await response.json(),
        bodyKey: "auditArchiveRetrieval",
        bodyModel: model.AuditArchiveRetrieval,
        type: "model.AuditArchiveRetrieval",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a audit policy by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAuditPolicyRequest
   * @return GetAuditPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAuditPolicy.ts.html |here} to see how to use GetAuditPolicy API.
   */
  public async getAuditPolicy(
    getAuditPolicyRequest: requests.GetAuditPolicyRequest
  ): Promise<responses.GetAuditPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getAuditPolicy.");
    const operationName = "getAuditPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicy/GetAuditPolicy";
    const pathParams = {
      "{auditPolicyId}": getAuditPolicyRequest.auditPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAuditPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAuditPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditPolicies/{auditPolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAuditPolicyResponse>{},
        body: await response.json(),
        bodyKey: "auditPolicy",
        bodyModel: model.AuditPolicy,
        type: "model.AuditPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of audit profile resource and associated audit trails of the audit profile.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAuditProfileRequest
   * @return GetAuditProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAuditProfile.ts.html |here} to see how to use GetAuditProfile API.
   */
  public async getAuditProfile(
    getAuditProfileRequest: requests.GetAuditProfileRequest
  ): Promise<responses.GetAuditProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getAuditProfile.");
    const operationName = "getAuditProfile";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/GetAuditProfile";
    const pathParams = {
      "{auditProfileId}": getAuditProfileRequest.auditProfileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAuditProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAuditProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditProfiles/{auditProfileId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAuditProfileResponse>{},
        body: await response.json(),
        bodyKey: "auditProfile",
        bodyModel: model.AuditProfile,
        type: "model.AuditProfile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of audit trail.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetAuditTrailRequest
   * @return GetAuditTrailResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAuditTrail.ts.html |here} to see how to use GetAuditTrail API.
   */
  public async getAuditTrail(
    getAuditTrailRequest: requests.GetAuditTrailRequest
  ): Promise<responses.GetAuditTrailResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getAuditTrail.");
    const operationName = "getAuditTrail";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/GetAuditTrail";
    const pathParams = {
      "{auditTrailId}": getAuditTrailRequest.auditTrailId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAuditTrailRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAuditTrailRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditTrails/{auditTrailId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAuditTrailResponse>{},
        body: await response.json(),
        bodyKey: "auditTrail",
        bodyModel: model.AuditTrail,
        type: "model.AuditTrail",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of basic masking formats compatible with the supported data types.
   * The data types are grouped into the following categories -
   * Character - Includes CHAR, NCHAR, VARCHAR2, and NVARCHAR2
   * Numeric - Includes NUMBER, FLOAT, RAW, BINARY_FLOAT, and BINARY_DOUBLE
   * Date - Includes DATE and TIMESTAMP
   * LOB - Includes BLOB, CLOB, and NCLOB
   * All - Includes all the supported data types
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCompatibleFormatsForDataTypesRequest
   * @return GetCompatibleFormatsForDataTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetCompatibleFormatsForDataTypes.ts.html |here} to see how to use GetCompatibleFormatsForDataTypes API.
   */
  public async getCompatibleFormatsForDataTypes(
    getCompatibleFormatsForDataTypesRequest: requests.GetCompatibleFormatsForDataTypesRequest
  ): Promise<responses.GetCompatibleFormatsForDataTypesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getCompatibleFormatsForDataTypes.");
    const operationName = "getCompatibleFormatsForDataTypes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/GetCompatibleFormatsForDataTypes";
    const pathParams = {};

    const queryParams = {
      "limit": getCompatibleFormatsForDataTypesRequest.limit,
      "page": getCompatibleFormatsForDataTypesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCompatibleFormatsForDataTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCompatibleFormatsForDataTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/compatibleFormatsForDataTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCompatibleFormatsForDataTypesResponse>{},
        body: await response.json(),
        bodyKey: "compatibleFormatsForDataTypes",
        bodyModel: model.CompatibleFormatsForDataTypes,
        type: "model.CompatibleFormatsForDataTypes",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of library masking formats compatible with the existing sensitive types.
   * For each sensitive type, it returns the assigned default masking format as well as
   * the other library masking formats that have the sensitiveTypeIds attribute containing
   * the OCID of the sensitive type.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCompatibleFormatsForSensitiveTypesRequest
   * @return GetCompatibleFormatsForSensitiveTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetCompatibleFormatsForSensitiveTypes.ts.html |here} to see how to use GetCompatibleFormatsForSensitiveTypes API.
   */
  public async getCompatibleFormatsForSensitiveTypes(
    getCompatibleFormatsForSensitiveTypesRequest: requests.GetCompatibleFormatsForSensitiveTypesRequest
  ): Promise<responses.GetCompatibleFormatsForSensitiveTypesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getCompatibleFormatsForSensitiveTypes.");
    const operationName = "getCompatibleFormatsForSensitiveTypes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/GetCompatibleFormatsForSensitiveTypes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getCompatibleFormatsForSensitiveTypesRequest.compartmentId,
      "compartmentIdInSubtree": getCompatibleFormatsForSensitiveTypesRequest.compartmentIdInSubtree,
      "accessLevel": getCompatibleFormatsForSensitiveTypesRequest.accessLevel,
      "limit": getCompatibleFormatsForSensitiveTypesRequest.limit,
      "page": getCompatibleFormatsForSensitiveTypesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCompatibleFormatsForSensitiveTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCompatibleFormatsForSensitiveTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/compatibleFormatsForSensitiveTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCompatibleFormatsForSensitiveTypesResponse>{},
        body: await response.json(),
        bodyKey: "compatibleFormatsForSensitiveTypes",
        bodyModel: model.CompatibleFormatsForSensitiveTypes,
        type: "model.CompatibleFormatsForSensitiveTypes",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the Data Safe configuration.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDataSafeConfigurationRequest
   * @return GetDataSafeConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDataSafeConfiguration.ts.html |here} to see how to use GetDataSafeConfiguration API.
   */
  public async getDataSafeConfiguration(
    getDataSafeConfigurationRequest: requests.GetDataSafeConfigurationRequest
  ): Promise<responses.GetDataSafeConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getDataSafeConfiguration.");
    const operationName = "getDataSafeConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafeConfiguration/GetDataSafeConfiguration";
    const pathParams = {};

    const queryParams = {
      "compartmentId": getDataSafeConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataSafeConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDataSafeConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataSafeConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "dataSafeConfiguration",
        bodyModel: model.DataSafeConfiguration,
        type: "model.DataSafeConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified Data Safe private endpoint.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDataSafePrivateEndpointRequest
   * @return GetDataSafePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDataSafePrivateEndpoint.ts.html |here} to see how to use GetDataSafePrivateEndpoint API.
   */
  public async getDataSafePrivateEndpoint(
    getDataSafePrivateEndpointRequest: requests.GetDataSafePrivateEndpointRequest
  ): Promise<responses.GetDataSafePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getDataSafePrivateEndpoint.");
    const operationName = "getDataSafePrivateEndpoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafePrivateEndpoint/GetDataSafePrivateEndpoint";
    const pathParams = {
      "{dataSafePrivateEndpointId}": getDataSafePrivateEndpointRequest.dataSafePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataSafePrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDataSafePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataSafePrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "dataSafePrivateEndpoint",
        bodyModel: model.DataSafePrivateEndpoint,
        type: "model.DataSafePrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a database security configuration by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDatabaseSecurityConfigRequest
   * @return GetDatabaseSecurityConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDatabaseSecurityConfig.ts.html |here} to see how to use GetDatabaseSecurityConfig API.
   */
  public async getDatabaseSecurityConfig(
    getDatabaseSecurityConfigRequest: requests.GetDatabaseSecurityConfigRequest
  ): Promise<responses.GetDatabaseSecurityConfigResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getDatabaseSecurityConfig.");
    const operationName = "getDatabaseSecurityConfig";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DatabaseSecurityConfig/GetDatabaseSecurityConfig";
    const pathParams = {
      "{databaseSecurityConfigId}": getDatabaseSecurityConfigRequest.databaseSecurityConfigId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDatabaseSecurityConfigRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDatabaseSecurityConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseSecurityConfigs/{databaseSecurityConfigId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDatabaseSecurityConfigResponse>{},
        body: await response.json(),
        bodyKey: "databaseSecurityConfig",
        bodyModel: model.DatabaseSecurityConfig,
        type: "model.DatabaseSecurityConfig",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a database table access entry object by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDatabaseTableAccessEntryRequest
   * @return GetDatabaseTableAccessEntryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDatabaseTableAccessEntry.ts.html |here} to see how to use GetDatabaseTableAccessEntry API.
   */
  public async getDatabaseTableAccessEntry(
    getDatabaseTableAccessEntryRequest: requests.GetDatabaseTableAccessEntryRequest
  ): Promise<responses.GetDatabaseTableAccessEntryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getDatabaseTableAccessEntry.");
    const operationName = "getDatabaseTableAccessEntry";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DatabaseTableAccessEntry/GetDatabaseTableAccessEntry";
    const pathParams = {
      "{securityPolicyReportId}": getDatabaseTableAccessEntryRequest.securityPolicyReportId,
      "{databaseTableAccessEntryKey}":
        getDatabaseTableAccessEntryRequest.databaseTableAccessEntryKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDatabaseTableAccessEntryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDatabaseTableAccessEntryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/securityPolicyReports/{securityPolicyReportId}/databaseTableAccessEntries/{databaseTableAccessEntryKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDatabaseTableAccessEntryResponse>{},
        body: await response.json(),
        bodyKey: "databaseTableAccessEntry",
        bodyModel: model.DatabaseTableAccessEntry,
        type: "model.DatabaseTableAccessEntry",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a database view access object by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDatabaseViewAccessEntryRequest
   * @return GetDatabaseViewAccessEntryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDatabaseViewAccessEntry.ts.html |here} to see how to use GetDatabaseViewAccessEntry API.
   */
  public async getDatabaseViewAccessEntry(
    getDatabaseViewAccessEntryRequest: requests.GetDatabaseViewAccessEntryRequest
  ): Promise<responses.GetDatabaseViewAccessEntryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getDatabaseViewAccessEntry.");
    const operationName = "getDatabaseViewAccessEntry";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DatabaseViewAccessEntry/GetDatabaseViewAccessEntry";
    const pathParams = {
      "{securityPolicyReportId}": getDatabaseViewAccessEntryRequest.securityPolicyReportId,
      "{databaseViewAccessEntryKey}": getDatabaseViewAccessEntryRequest.databaseViewAccessEntryKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDatabaseViewAccessEntryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDatabaseViewAccessEntryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/securityPolicyReports/{securityPolicyReportId}/databaseViewAccessEntries/{databaseViewAccessEntryKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDatabaseViewAccessEntryResponse>{},
        body: await response.json(),
        bodyKey: "databaseViewAccessEntry",
        bodyModel: model.DatabaseViewAccessEntry,
        type: "model.DatabaseViewAccessEntry",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified SDM Masking policy difference column.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDifferenceColumnRequest
   * @return GetDifferenceColumnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDifferenceColumn.ts.html |here} to see how to use GetDifferenceColumn API.
   */
  public async getDifferenceColumn(
    getDifferenceColumnRequest: requests.GetDifferenceColumnRequest
  ): Promise<responses.GetDifferenceColumnResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getDifferenceColumn.");
    const operationName = "getDifferenceColumn";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DifferenceColumn/GetDifferenceColumn";
    const pathParams = {
      "{sdmMaskingPolicyDifferenceId}": getDifferenceColumnRequest.sdmMaskingPolicyDifferenceId,
      "{differenceColumnKey}": getDifferenceColumnRequest.differenceColumnKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDifferenceColumnRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDifferenceColumnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}/differenceColumns/{differenceColumnKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDifferenceColumnResponse>{},
        body: await response.json(),
        bodyKey: "differenceColumn",
        bodyModel: model.DifferenceColumn,
        type: "model.DifferenceColumn",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified discovery job.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDiscoveryJobRequest
   * @return GetDiscoveryJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDiscoveryJob.ts.html |here} to see how to use GetDiscoveryJob API.
   */
  public async getDiscoveryJob(
    getDiscoveryJobRequest: requests.GetDiscoveryJobRequest
  ): Promise<responses.GetDiscoveryJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getDiscoveryJob.");
    const operationName = "getDiscoveryJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJob/GetDiscoveryJob";
    const pathParams = {
      "{discoveryJobId}": getDiscoveryJobRequest.discoveryJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDiscoveryJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDiscoveryJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs/{discoveryJobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDiscoveryJobResponse>{},
        body: await response.json(),
        bodyKey: "discoveryJob",
        bodyModel: model.DiscoveryJob,
        type: "model.DiscoveryJob",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified discovery result.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDiscoveryJobResultRequest
   * @return GetDiscoveryJobResultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDiscoveryJobResult.ts.html |here} to see how to use GetDiscoveryJobResult API.
   */
  public async getDiscoveryJobResult(
    getDiscoveryJobResultRequest: requests.GetDiscoveryJobResultRequest
  ): Promise<responses.GetDiscoveryJobResultResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getDiscoveryJobResult.");
    const operationName = "getDiscoveryJobResult";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJobResult/GetDiscoveryJobResult";
    const pathParams = {
      "{discoveryJobId}": getDiscoveryJobResultRequest.discoveryJobId,
      "{resultKey}": getDiscoveryJobResultRequest.resultKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDiscoveryJobResultRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDiscoveryJobResultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs/{discoveryJobId}/results/{resultKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDiscoveryJobResultResponse>{},
        body: await response.json(),
        bodyKey: "discoveryJobResult",
        bodyModel: model.DiscoveryJobResult,
        type: "model.DiscoveryJobResult",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified library masking format.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetLibraryMaskingFormatRequest
   * @return GetLibraryMaskingFormatResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetLibraryMaskingFormat.ts.html |here} to see how to use GetLibraryMaskingFormat API.
   */
  public async getLibraryMaskingFormat(
    getLibraryMaskingFormatRequest: requests.GetLibraryMaskingFormatRequest
  ): Promise<responses.GetLibraryMaskingFormatResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getLibraryMaskingFormat.");
    const operationName = "getLibraryMaskingFormat";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/LibraryMaskingFormat/GetLibraryMaskingFormat";
    const pathParams = {
      "{libraryMaskingFormatId}": getLibraryMaskingFormatRequest.libraryMaskingFormatId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLibraryMaskingFormatRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLibraryMaskingFormatRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/libraryMaskingFormats/{libraryMaskingFormatId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLibraryMaskingFormatResponse>{},
        body: await response.json(),
        bodyKey: "libraryMaskingFormat",
        bodyModel: model.LibraryMaskingFormat,
        type: "model.LibraryMaskingFormat",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified masking column.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMaskingColumnRequest
   * @return GetMaskingColumnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetMaskingColumn.ts.html |here} to see how to use GetMaskingColumn API.
   */
  public async getMaskingColumn(
    getMaskingColumnRequest: requests.GetMaskingColumnRequest
  ): Promise<responses.GetMaskingColumnResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getMaskingColumn.");
    const operationName = "getMaskingColumn";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/GetMaskingColumn";
    const pathParams = {
      "{maskingPolicyId}": getMaskingColumnRequest.maskingPolicyId,
      "{maskingColumnKey}": getMaskingColumnRequest.maskingColumnKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMaskingColumnRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMaskingColumnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/maskingColumns/{maskingColumnKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMaskingColumnResponse>{},
        body: await response.json(),
        bodyKey: "maskingColumn",
        bodyModel: model.MaskingColumn,
        type: "model.MaskingColumn",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified masking policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMaskingPolicyRequest
   * @return GetMaskingPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetMaskingPolicy.ts.html |here} to see how to use GetMaskingPolicy API.
   */
  public async getMaskingPolicy(
    getMaskingPolicyRequest: requests.GetMaskingPolicyRequest
  ): Promise<responses.GetMaskingPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getMaskingPolicy.");
    const operationName = "getMaskingPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/GetMaskingPolicy";
    const pathParams = {
      "{maskingPolicyId}": getMaskingPolicyRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMaskingPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMaskingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMaskingPolicyResponse>{},
        body: await response.json(),
        bodyKey: "maskingPolicy",
        bodyModel: model.MaskingPolicy,
        type: "model.MaskingPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified masking policy health report.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMaskingPolicyHealthReportRequest
   * @return GetMaskingPolicyHealthReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetMaskingPolicyHealthReport.ts.html |here} to see how to use GetMaskingPolicyHealthReport API.
   */
  public async getMaskingPolicyHealthReport(
    getMaskingPolicyHealthReportRequest: requests.GetMaskingPolicyHealthReportRequest
  ): Promise<responses.GetMaskingPolicyHealthReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getMaskingPolicyHealthReport.");
    const operationName = "getMaskingPolicyHealthReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicyHealthReport/GetMaskingPolicyHealthReport";
    const pathParams = {
      "{maskingPolicyHealthReportId}":
        getMaskingPolicyHealthReportRequest.maskingPolicyHealthReportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMaskingPolicyHealthReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMaskingPolicyHealthReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicyHealthReports/{maskingPolicyHealthReportId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMaskingPolicyHealthReportResponse>{},
        body: await response.json(),
        bodyKey: "maskingPolicyHealthReport",
        bodyModel: model.MaskingPolicyHealthReport,
        type: "model.MaskingPolicyHealthReport",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified masking report.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMaskingReportRequest
   * @return GetMaskingReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetMaskingReport.ts.html |here} to see how to use GetMaskingReport API.
   */
  public async getMaskingReport(
    getMaskingReportRequest: requests.GetMaskingReportRequest
  ): Promise<responses.GetMaskingReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getMaskingReport.");
    const operationName = "getMaskingReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingReport/GetMaskingReport";
    const pathParams = {
      "{maskingReportId}": getMaskingReportRequest.maskingReportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMaskingReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMaskingReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingReports/{maskingReportId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMaskingReportResponse>{},
        body: await response.json(),
        bodyKey: "maskingReport",
        bodyModel: model.MaskingReport,
        type: "model.MaskingReport",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified on-premises connector.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOnPremConnectorRequest
   * @return GetOnPremConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetOnPremConnector.ts.html |here} to see how to use GetOnPremConnector API.
   */
  public async getOnPremConnector(
    getOnPremConnectorRequest: requests.GetOnPremConnectorRequest
  ): Promise<responses.GetOnPremConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getOnPremConnector.");
    const operationName = "getOnPremConnector";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/GetOnPremConnector";
    const pathParams = {
      "{onPremConnectorId}": getOnPremConnectorRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOnPremConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOnPremConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOnPremConnectorResponse>{},
        body: await response.json(),
        bodyKey: "onPremConnector",
        bodyModel: model.OnPremConnector,
        type: "model.OnPremConnector",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the details of the specified Data Safe peer target database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetPeerTargetDatabaseRequest
   * @return GetPeerTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetPeerTargetDatabase.ts.html |here} to see how to use GetPeerTargetDatabase API.
   */
  public async getPeerTargetDatabase(
    getPeerTargetDatabaseRequest: requests.GetPeerTargetDatabaseRequest
  ): Promise<responses.GetPeerTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getPeerTargetDatabase.");
    const operationName = "getPeerTargetDatabase";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/PeerTargetDatabase/GetPeerTargetDatabase";
    const pathParams = {
      "{targetDatabaseId}": getPeerTargetDatabaseRequest.targetDatabaseId,
      "{peerTargetDatabaseId}": getPeerTargetDatabaseRequest.peerTargetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPeerTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPeerTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/peerTargetDatabases/{peerTargetDatabaseId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPeerTargetDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "peerTargetDatabase",
        bodyModel: model.PeerTargetDatabase,
        type: "model.PeerTargetDatabase",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Lists the details of given profile available on the target.
* <p>
The GetProfile operation returns only the profiles in the specified 'userAssessmentId'.
* This does not include any subcompartments of the current compartment.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetProfileRequest
     * @return GetProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetProfile.ts.html |here} to see how to use GetProfile API.
     */
  public async getProfile(
    getProfileRequest: requests.GetProfileRequest
  ): Promise<responses.GetProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getProfile.");
    const operationName = "getProfile";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/GetProfile";
    const pathParams = {
      "{userAssessmentId}": getProfileRequest.userAssessmentId,
      "{profileName}": getProfileRequest.profileName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/profiles/{profileName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProfileResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Profile,
        type: "Array<model.Profile>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a report by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetReportRequest
   * @return GetReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetReport.ts.html |here} to see how to use GetReport API.
   */
  public async getReport(
    getReportRequest: requests.GetReportRequest
  ): Promise<responses.GetReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getReport.");
    const operationName = "getReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Report/GetReport";
    const pathParams = {
      "{reportId}": getReportRequest.reportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reports/{reportId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetReportResponse>{},
        body: await response.json(),
        bodyKey: "report",
        bodyModel: model.Report,
        type: "model.Report",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads the specified report in the form of .xls or .pdf.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetReportContentRequest
   * @return GetReportContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetReportContent.ts.html |here} to see how to use GetReportContent API.
   */
  public async getReportContent(
    getReportContentRequest: requests.GetReportContentRequest
  ): Promise<responses.GetReportContentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getReportContent.");
    const operationName = "getReportContent";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Report/GetReportContent";
    const pathParams = {
      "{reportId}": getReportContentRequest.reportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getReportContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getReportContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reports/{reportId}/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetReportContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of report definition specified by the identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetReportDefinitionRequest
   * @return GetReportDefinitionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetReportDefinition.ts.html |here} to see how to use GetReportDefinition API.
   */
  public async getReportDefinition(
    getReportDefinitionRequest: requests.GetReportDefinitionRequest
  ): Promise<responses.GetReportDefinitionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getReportDefinition.");
    const operationName = "getReportDefinition";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/GetReportDefinition";
    const pathParams = {
      "{reportDefinitionId}": getReportDefinitionRequest.reportDefinitionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getReportDefinitionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getReportDefinitionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reportDefinitions/{reportDefinitionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetReportDefinitionResponse>{},
        body: await response.json(),
        bodyKey: "reportDefinition",
        bodyModel: model.ReportDefinition,
        type: "model.ReportDefinition",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified SDM Masking policy difference.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSdmMaskingPolicyDifferenceRequest
   * @return GetSdmMaskingPolicyDifferenceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSdmMaskingPolicyDifference.ts.html |here} to see how to use GetSdmMaskingPolicyDifference API.
   */
  public async getSdmMaskingPolicyDifference(
    getSdmMaskingPolicyDifferenceRequest: requests.GetSdmMaskingPolicyDifferenceRequest
  ): Promise<responses.GetSdmMaskingPolicyDifferenceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getSdmMaskingPolicyDifference.");
    const operationName = "getSdmMaskingPolicyDifference";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/GetSdmMaskingPolicyDifference";
    const pathParams = {
      "{sdmMaskingPolicyDifferenceId}":
        getSdmMaskingPolicyDifferenceRequest.sdmMaskingPolicyDifferenceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSdmMaskingPolicyDifferenceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSdmMaskingPolicyDifferenceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSdmMaskingPolicyDifferenceResponse>{},
        body: await response.json(),
        bodyKey: "sdmMaskingPolicyDifference",
        bodyModel: model.SdmMaskingPolicyDifference,
        type: "model.SdmMaskingPolicyDifference",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified security assessment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSecurityAssessmentRequest
   * @return GetSecurityAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityAssessment.ts.html |here} to see how to use GetSecurityAssessment API.
   */
  public async getSecurityAssessment(
    getSecurityAssessmentRequest: requests.GetSecurityAssessmentRequest
  ): Promise<responses.GetSecurityAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getSecurityAssessment.");
    const operationName = "getSecurityAssessment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/GetSecurityAssessment";
    const pathParams = {
      "{securityAssessmentId}": getSecurityAssessmentRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSecurityAssessmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityAssessmentResponse>{},
        body: await response.json(),
        bodyKey: "securityAssessment",
        bodyModel: model.SecurityAssessment,
        type: "model.SecurityAssessment",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the comparison report for the security assessments submitted for comparison.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSecurityAssessmentComparisonRequest
   * @return GetSecurityAssessmentComparisonResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityAssessmentComparison.ts.html |here} to see how to use GetSecurityAssessmentComparison API.
   */
  public async getSecurityAssessmentComparison(
    getSecurityAssessmentComparisonRequest: requests.GetSecurityAssessmentComparisonRequest
  ): Promise<responses.GetSecurityAssessmentComparisonResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getSecurityAssessmentComparison.");
    const operationName = "getSecurityAssessmentComparison";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/GetSecurityAssessmentComparison";
    const pathParams = {
      "{securityAssessmentId}": getSecurityAssessmentComparisonRequest.securityAssessmentId,
      "{comparisonSecurityAssessmentId}":
        getSecurityAssessmentComparisonRequest.comparisonSecurityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSecurityAssessmentComparisonRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityAssessmentComparisonRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/securityAssessments/{securityAssessmentId}/comparison/{comparisonSecurityAssessmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityAssessmentComparisonResponse>{},
        body: await response.json(),
        bodyKey: "securityAssessmentComparison",
        bodyModel: model.SecurityAssessmentComparison,
        type: "model.SecurityAssessmentComparison",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a security policy by the specified OCID of the security policy resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSecurityPolicyRequest
   * @return GetSecurityPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityPolicy.ts.html |here} to see how to use GetSecurityPolicy API.
   */
  public async getSecurityPolicy(
    getSecurityPolicyRequest: requests.GetSecurityPolicyRequest
  ): Promise<responses.GetSecurityPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getSecurityPolicy.");
    const operationName = "getSecurityPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityPolicy/GetSecurityPolicy";
    const pathParams = {
      "{securityPolicyId}": getSecurityPolicyRequest.securityPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSecurityPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicies/{securityPolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityPolicyResponse>{},
        body: await response.json(),
        bodyKey: "securityPolicy",
        bodyModel: model.SecurityPolicy,
        type: "model.SecurityPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a security policy deployment by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSecurityPolicyDeploymentRequest
   * @return GetSecurityPolicyDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityPolicyDeployment.ts.html |here} to see how to use GetSecurityPolicyDeployment API.
   */
  public async getSecurityPolicyDeployment(
    getSecurityPolicyDeploymentRequest: requests.GetSecurityPolicyDeploymentRequest
  ): Promise<responses.GetSecurityPolicyDeploymentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getSecurityPolicyDeployment.");
    const operationName = "getSecurityPolicyDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityPolicyDeployment/GetSecurityPolicyDeployment";
    const pathParams = {
      "{securityPolicyDeploymentId}": getSecurityPolicyDeploymentRequest.securityPolicyDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSecurityPolicyDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityPolicyDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicyDeployments/{securityPolicyDeploymentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityPolicyDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "securityPolicyDeployment",
        bodyModel: model.SecurityPolicyDeployment,
        type: "model.SecurityPolicyDeployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a security policy entity states by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSecurityPolicyEntryStateRequest
   * @return GetSecurityPolicyEntryStateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityPolicyEntryState.ts.html |here} to see how to use GetSecurityPolicyEntryState API.
   */
  public async getSecurityPolicyEntryState(
    getSecurityPolicyEntryStateRequest: requests.GetSecurityPolicyEntryStateRequest
  ): Promise<responses.GetSecurityPolicyEntryStateResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getSecurityPolicyEntryState.");
    const operationName = "getSecurityPolicyEntryState";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityPolicyEntryState/GetSecurityPolicyEntryState";
    const pathParams = {
      "{securityPolicyDeploymentId}": getSecurityPolicyEntryStateRequest.securityPolicyDeploymentId,
      "{securityPolicyEntryStateId}": getSecurityPolicyEntryStateRequest.securityPolicyEntryStateId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSecurityPolicyEntryStateRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityPolicyEntryStateRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/securityPolicyDeployments/{securityPolicyDeploymentId}/securityPolicyEntryStates/{securityPolicyEntryStateId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityPolicyEntryStateResponse>{},
        body: await response.json(),
        bodyKey: "securityPolicyEntryState",
        bodyModel: model.SecurityPolicyEntryState,
        type: "model.SecurityPolicyEntryState",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a security policy report by the specified OCID of the security policy report resource.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSecurityPolicyReportRequest
   * @return GetSecurityPolicyReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityPolicyReport.ts.html |here} to see how to use GetSecurityPolicyReport API.
   */
  public async getSecurityPolicyReport(
    getSecurityPolicyReportRequest: requests.GetSecurityPolicyReportRequest
  ): Promise<responses.GetSecurityPolicyReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getSecurityPolicyReport.");
    const operationName = "getSecurityPolicyReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityPolicyReport/GetSecurityPolicyReport";
    const pathParams = {
      "{securityPolicyReportId}": getSecurityPolicyReportRequest.securityPolicyReportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSecurityPolicyReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityPolicyReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicyReports/{securityPolicyReportId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityPolicyReportResponse>{},
        body: await response.json(),
        bodyKey: "securityPolicyReport",
        bodyModel: model.SecurityPolicyReport,
        type: "model.SecurityPolicyReport",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified sensitive column.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSensitiveColumnRequest
   * @return GetSensitiveColumnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSensitiveColumn.ts.html |here} to see how to use GetSensitiveColumn API.
   */
  public async getSensitiveColumn(
    getSensitiveColumnRequest: requests.GetSensitiveColumnRequest
  ): Promise<responses.GetSensitiveColumnResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getSensitiveColumn.");
    const operationName = "getSensitiveColumn";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveColumn/GetSensitiveColumn";
    const pathParams = {
      "{sensitiveDataModelId}": getSensitiveColumnRequest.sensitiveDataModelId,
      "{sensitiveColumnKey}": getSensitiveColumnRequest.sensitiveColumnKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSensitiveColumnRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSensitiveColumnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns/{sensitiveColumnKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSensitiveColumnResponse>{},
        body: await response.json(),
        bodyKey: "sensitiveColumn",
        bodyModel: model.SensitiveColumn,
        type: "model.SensitiveColumn",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified sensitive data model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSensitiveDataModelRequest
   * @return GetSensitiveDataModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSensitiveDataModel.ts.html |here} to see how to use GetSensitiveDataModel API.
   */
  public async getSensitiveDataModel(
    getSensitiveDataModelRequest: requests.GetSensitiveDataModelRequest
  ): Promise<responses.GetSensitiveDataModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getSensitiveDataModel.");
    const operationName = "getSensitiveDataModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/GetSensitiveDataModel";
    const pathParams = {
      "{sensitiveDataModelId}": getSensitiveDataModelRequest.sensitiveDataModelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSensitiveDataModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSensitiveDataModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSensitiveDataModelResponse>{},
        body: await response.json(),
        bodyKey: "sensitiveDataModel",
        bodyModel: model.SensitiveDataModel,
        type: "model.SensitiveDataModel",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified sensitive type.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSensitiveTypeRequest
   * @return GetSensitiveTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSensitiveType.ts.html |here} to see how to use GetSensitiveType API.
   */
  public async getSensitiveType(
    getSensitiveTypeRequest: requests.GetSensitiveTypeRequest
  ): Promise<responses.GetSensitiveTypeResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getSensitiveType.");
    const operationName = "getSensitiveType";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveType/GetSensitiveType";
    const pathParams = {
      "{sensitiveTypeId}": getSensitiveTypeRequest.sensitiveTypeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSensitiveTypeRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSensitiveTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveTypes/{sensitiveTypeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSensitiveTypeResponse>{},
        body: await response.json(),
        bodyKey: "sensitiveType",
        bodyModel: model.SensitiveType,
        type: "model.SensitiveType",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a SQL collection by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSqlCollectionRequest
   * @return GetSqlCollectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSqlCollection.ts.html |here} to see how to use GetSqlCollection API.
   */
  public async getSqlCollection(
    getSqlCollectionRequest: requests.GetSqlCollectionRequest
  ): Promise<responses.GetSqlCollectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getSqlCollection.");
    const operationName = "getSqlCollection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlCollection/GetSqlCollection";
    const pathParams = {
      "{sqlCollectionId}": getSqlCollectionRequest.sqlCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSqlCollectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSqlCollectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollections/{sqlCollectionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSqlCollectionResponse>{},
        body: await response.json(),
        bodyKey: "sqlCollection",
        bodyModel: model.SqlCollection,
        type: "model.SqlCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a SQL Firewall policy by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSqlFirewallPolicyRequest
   * @return GetSqlFirewallPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSqlFirewallPolicy.ts.html |here} to see how to use GetSqlFirewallPolicy API.
   */
  public async getSqlFirewallPolicy(
    getSqlFirewallPolicyRequest: requests.GetSqlFirewallPolicyRequest
  ): Promise<responses.GetSqlFirewallPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getSqlFirewallPolicy.");
    const operationName = "getSqlFirewallPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlFirewallPolicy/GetSqlFirewallPolicy";
    const pathParams = {
      "{sqlFirewallPolicyId}": getSqlFirewallPolicyRequest.sqlFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSqlFirewallPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSqlFirewallPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlFirewallPolicies/{sqlFirewallPolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSqlFirewallPolicyResponse>{},
        body: await response.json(),
        bodyKey: "sqlFirewallPolicy",
        bodyModel: model.SqlFirewallPolicy,
        type: "model.SqlFirewallPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of target-alert policy association by its ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetTargetAlertPolicyAssociationRequest
   * @return GetTargetAlertPolicyAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetTargetAlertPolicyAssociation.ts.html |here} to see how to use GetTargetAlertPolicyAssociation API.
   */
  public async getTargetAlertPolicyAssociation(
    getTargetAlertPolicyAssociationRequest: requests.GetTargetAlertPolicyAssociationRequest
  ): Promise<responses.GetTargetAlertPolicyAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getTargetAlertPolicyAssociation.");
    const operationName = "getTargetAlertPolicyAssociation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociation/GetTargetAlertPolicyAssociation";
    const pathParams = {
      "{targetAlertPolicyAssociationId}":
        getTargetAlertPolicyAssociationRequest.targetAlertPolicyAssociationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTargetAlertPolicyAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTargetAlertPolicyAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetAlertPolicyAssociations/{targetAlertPolicyAssociationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTargetAlertPolicyAssociationResponse>{},
        body: await response.json(),
        bodyKey: "targetAlertPolicyAssociation",
        bodyModel: model.TargetAlertPolicyAssociation,
        type: "model.TargetAlertPolicyAssociation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the details of the specified Data Safe target database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetTargetDatabaseRequest
   * @return GetTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetTargetDatabase.ts.html |here} to see how to use GetTargetDatabase API.
   */
  public async getTargetDatabase(
    getTargetDatabaseRequest: requests.GetTargetDatabaseRequest
  ): Promise<responses.GetTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getTargetDatabase.");
    const operationName = "getTargetDatabase";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/GetTargetDatabase";
    const pathParams = {
      "{targetDatabaseId}": getTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTargetDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "targetDatabase",
        bodyModel: model.TargetDatabase,
        type: "model.TargetDatabase",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a user assessment by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetUserAssessmentRequest
   * @return GetUserAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetUserAssessment.ts.html |here} to see how to use GetUserAssessment API.
   */
  public async getUserAssessment(
    getUserAssessmentRequest: requests.GetUserAssessmentRequest
  ): Promise<responses.GetUserAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getUserAssessment.");
    const operationName = "getUserAssessment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/GetUserAssessment";
    const pathParams = {
      "{userAssessmentId}": getUserAssessmentRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUserAssessmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUserAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUserAssessmentResponse>{},
        body: await response.json(),
        bodyKey: "userAssessment",
        bodyModel: model.UserAssessment,
        type: "model.UserAssessment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the comparison report for the user assessments submitted for comparison.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetUserAssessmentComparisonRequest
   * @return GetUserAssessmentComparisonResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetUserAssessmentComparison.ts.html |here} to see how to use GetUserAssessmentComparison API.
   */
  public async getUserAssessmentComparison(
    getUserAssessmentComparisonRequest: requests.GetUserAssessmentComparisonRequest
  ): Promise<responses.GetUserAssessmentComparisonResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getUserAssessmentComparison.");
    const operationName = "getUserAssessmentComparison";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/GetUserAssessmentComparison";
    const pathParams = {
      "{userAssessmentId}": getUserAssessmentComparisonRequest.userAssessmentId,
      "{comparisonUserAssessmentId}": getUserAssessmentComparisonRequest.comparisonUserAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUserAssessmentComparisonRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUserAssessmentComparisonRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/comparison/{comparisonUserAssessmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUserAssessmentComparisonResponse>{},
        body: await response.json(),
        bodyKey: "userAssessmentComparison",
        bodyModel: model.UserAssessmentComparison,
        type: "model.UserAssessmentComparison",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the aggregation details of the alerts.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAlertAnalyticsRequest
   * @return ListAlertAnalyticsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAlertAnalytics.ts.html |here} to see how to use ListAlertAnalytics API.
   */
  public async listAlertAnalytics(
    listAlertAnalyticsRequest: requests.ListAlertAnalyticsRequest
  ): Promise<responses.ListAlertAnalyticsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listAlertAnalytics.");
    const operationName = "listAlertAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertSummary/ListAlertAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAlertAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listAlertAnalyticsRequest.compartmentIdInSubtree,
      "limit": listAlertAnalyticsRequest.limit,
      "page": listAlertAnalyticsRequest.page,
      "timeStarted": listAlertAnalyticsRequest.timeStarted,
      "timeEnded": listAlertAnalyticsRequest.timeEnded,
      "queryTimeZone": listAlertAnalyticsRequest.queryTimeZone,
      "sortOrder": listAlertAnalyticsRequest.sortOrder,
      "sortBy": listAlertAnalyticsRequest.sortBy,
      "accessLevel": listAlertAnalyticsRequest.accessLevel,
      "scimQuery": listAlertAnalyticsRequest.scimQuery,
      "summaryField": listAlertAnalyticsRequest.summaryField,
      "groupBy": listAlertAnalyticsRequest.groupBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAlertAnalyticsRequest.opcRequestId,
      "if-match": listAlertAnalyticsRequest.ifMatch,
      "opc-retry-token": listAlertAnalyticsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAlertAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alertAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAlertAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "alertAnalyticsCollection",
        bodyModel: model.AlertAnalyticsCollection,
        type: "model.AlertAnalyticsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all alert policies.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAlertPoliciesRequest
   * @return ListAlertPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAlertPolicies.ts.html |here} to see how to use ListAlertPolicies API.
   */
  public async listAlertPolicies(
    listAlertPoliciesRequest: requests.ListAlertPoliciesRequest
  ): Promise<responses.ListAlertPoliciesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listAlertPolicies.");
    const operationName = "listAlertPolicies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicy/ListAlertPolicies";
    const pathParams = {};

    const queryParams = {
      "alertPolicyId": listAlertPoliciesRequest.alertPolicyId,
      "type": listAlertPoliciesRequest.type,
      "isUserDefined": listAlertPoliciesRequest.isUserDefined,
      "displayName": listAlertPoliciesRequest.displayName,
      "compartmentId": listAlertPoliciesRequest.compartmentId,
      "lifecycleState": listAlertPoliciesRequest.lifecycleState,
      "limit": listAlertPoliciesRequest.limit,
      "page": listAlertPoliciesRequest.page,
      "sortOrder": listAlertPoliciesRequest.sortOrder,
      "sortBy": listAlertPoliciesRequest.sortBy,
      "timeCreatedGreaterThanOrEqualTo": listAlertPoliciesRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listAlertPoliciesRequest.timeCreatedLessThan,
      "compartmentIdInSubtree": listAlertPoliciesRequest.compartmentIdInSubtree,
      "accessLevel": listAlertPoliciesRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAlertPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAlertPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alertPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAlertPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "alertPolicyCollection",
        bodyModel: model.AlertPolicyCollection,
        type: "model.AlertPolicyCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the rules of the specified alert policy. The alert policy is said to be satisfied when all rules in the policy evaulate to true.
   * If there are three rules: rule1,rule2 and rule3, the policy is satisfied if rule1 AND rule2 AND rule3 is True.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAlertPolicyRulesRequest
   * @return ListAlertPolicyRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAlertPolicyRules.ts.html |here} to see how to use ListAlertPolicyRules API.
   */
  public async listAlertPolicyRules(
    listAlertPolicyRulesRequest: requests.ListAlertPolicyRulesRequest
  ): Promise<responses.ListAlertPolicyRulesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listAlertPolicyRules.");
    const operationName = "listAlertPolicyRules";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicy/ListAlertPolicyRules";
    const pathParams = {
      "{alertPolicyId}": listAlertPolicyRulesRequest.alertPolicyId
    };

    const queryParams = {
      "limit": listAlertPolicyRulesRequest.limit,
      "page": listAlertPolicyRulesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAlertPolicyRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAlertPolicyRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alertPolicies/{alertPolicyId}/rules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAlertPolicyRulesResponse>{},
        body: await response.json(),
        bodyKey: "alertPolicyRuleCollection",
        bodyModel: model.AlertPolicyRuleCollection,
        type: "model.AlertPolicyRuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all alerts.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAlertsRequest
   * @return ListAlertsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAlerts.ts.html |here} to see how to use ListAlerts API.
   */
  public async listAlerts(
    listAlertsRequest: requests.ListAlertsRequest
  ): Promise<responses.ListAlertsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listAlerts.");
    const operationName = "listAlerts";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertSummary/ListAlerts";
    const pathParams = {};

    const queryParams = {
      "id": listAlertsRequest.id,
      "compartmentId": listAlertsRequest.compartmentId,
      "compartmentIdInSubtree": listAlertsRequest.compartmentIdInSubtree,
      "limit": listAlertsRequest.limit,
      "page": listAlertsRequest.page,
      "accessLevel": listAlertsRequest.accessLevel,
      "sortOrder": listAlertsRequest.sortOrder,
      "sortBy": listAlertsRequest.sortBy,
      "scimQuery": listAlertsRequest.scimQuery,
      "field": listAlertsRequest.field
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAlertsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAlertsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alerts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAlertsResponse>{},
        body: await response.json(),
        bodyKey: "alertCollection",
        bodyModel: model.AlertCollection,
        type: "model.AlertCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the list of audit archive retrieval.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAuditArchiveRetrievalsRequest
   * @return ListAuditArchiveRetrievalsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditArchiveRetrievals.ts.html |here} to see how to use ListAuditArchiveRetrievals API.
   */
  public async listAuditArchiveRetrievals(
    listAuditArchiveRetrievalsRequest: requests.ListAuditArchiveRetrievalsRequest
  ): Promise<responses.ListAuditArchiveRetrievalsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listAuditArchiveRetrievals.");
    const operationName = "listAuditArchiveRetrievals";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditArchiveRetrieval/ListAuditArchiveRetrievals";
    const pathParams = {};

    const queryParams = {
      "displayName": listAuditArchiveRetrievalsRequest.displayName,
      "compartmentId": listAuditArchiveRetrievalsRequest.compartmentId,
      "compartmentIdInSubtree": listAuditArchiveRetrievalsRequest.compartmentIdInSubtree,
      "accessLevel": listAuditArchiveRetrievalsRequest.accessLevel,
      "auditArchiveRetrievalId": listAuditArchiveRetrievalsRequest.auditArchiveRetrievalId,
      "targetId": listAuditArchiveRetrievalsRequest.targetId,
      "limit": listAuditArchiveRetrievalsRequest.limit,
      "page": listAuditArchiveRetrievalsRequest.page,
      "lifecycleState": listAuditArchiveRetrievalsRequest.lifecycleState,
      "timeOfExpiry": listAuditArchiveRetrievalsRequest.timeOfExpiry,
      "sortOrder": listAuditArchiveRetrievalsRequest.sortOrder,
      "sortBy": listAuditArchiveRetrievalsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAuditArchiveRetrievalsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuditArchiveRetrievalsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditArchiveRetrievals",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuditArchiveRetrievalsResponse>{},
        body: await response.json(),
        bodyKey: "auditArchiveRetrievalCollection",
        bodyModel: model.AuditArchiveRetrievalCollection,
        type: "model.AuditArchiveRetrievalCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * By default the ListAuditEventAnalytics operation will return all of the summary columns. To filter for a specific summary column, specify
* it in the `summaryField` query parameter.
* <p>
**Example:**
* /ListAuditEventAnalytics?summaryField=targetName&summaryField=userName&summaryField=clientHostname
* &summaryField=dmls&summaryField=privilegeChanges&summaryField=ddls&summaryField=loginFailure&summaryField=loginSuccess
* &summaryField=allRecord&q=(auditEventTime ge \"2021-06-13T23:49:14\")
* <p>
/ListAuditEventAnalytics?timeStarted=2022-08-18T11:02:26.000Z&timeEnded=2022-08-24T11:02:26.000Z
* This will give number of events grouped by periods. Period can be 1 day, 1 week, etc.
* <p>
/ListAuditEventAnalytics?summaryField=targetName&groupBy=targetName
* This will give the number of events group by targetName. Only targetName summary column would be returned.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAuditEventAnalyticsRequest
     * @return ListAuditEventAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditEventAnalytics.ts.html |here} to see how to use ListAuditEventAnalytics API.
     */
  public async listAuditEventAnalytics(
    listAuditEventAnalyticsRequest: requests.ListAuditEventAnalyticsRequest
  ): Promise<responses.ListAuditEventAnalyticsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listAuditEventAnalytics.");
    const operationName = "listAuditEventAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditEventSummary/ListAuditEventAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAuditEventAnalyticsRequest.compartmentId,
      "limit": listAuditEventAnalyticsRequest.limit,
      "page": listAuditEventAnalyticsRequest.page,
      "compartmentIdInSubtree": listAuditEventAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listAuditEventAnalyticsRequest.accessLevel,
      "scimQuery": listAuditEventAnalyticsRequest.scimQuery,
      "summaryField": listAuditEventAnalyticsRequest.summaryField,
      "timeStarted": listAuditEventAnalyticsRequest.timeStarted,
      "timeEnded": listAuditEventAnalyticsRequest.timeEnded,
      "queryTimeZone": listAuditEventAnalyticsRequest.queryTimeZone,
      "groupBy": listAuditEventAnalyticsRequest.groupBy,
      "sortOrder": listAuditEventAnalyticsRequest.sortOrder,
      "sortBy": listAuditEventAnalyticsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAuditEventAnalyticsRequest.opcRequestId,
      "if-match": listAuditEventAnalyticsRequest.ifMatch,
      "opc-retry-token": listAuditEventAnalyticsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuditEventAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditEventAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuditEventAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "auditEventAnalyticsCollection",
        bodyModel: model.AuditEventAnalyticsCollection,
        type: "model.AuditEventAnalyticsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * The ListAuditEvents operation returns specified `compartmentId` audit Events only.
* The list does not include any audit Events associated with the `subcompartments` of the specified `compartmentId`.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListAuditEvents on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAuditEventsRequest
     * @return ListAuditEventsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditEvents.ts.html |here} to see how to use ListAuditEvents API.
     */
  public async listAuditEvents(
    listAuditEventsRequest: requests.ListAuditEventsRequest
  ): Promise<responses.ListAuditEventsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listAuditEvents.");
    const operationName = "listAuditEvents";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditEventSummary/ListAuditEvents";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAuditEventsRequest.compartmentId,
      "compartmentIdInSubtree": listAuditEventsRequest.compartmentIdInSubtree,
      "accessLevel": listAuditEventsRequest.accessLevel,
      "limit": listAuditEventsRequest.limit,
      "page": listAuditEventsRequest.page,
      "scimQuery": listAuditEventsRequest.scimQuery,
      "sortOrder": listAuditEventsRequest.sortOrder,
      "sortBy": listAuditEventsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAuditEventsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuditEventsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditEvents",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuditEventsResponse>{},
        body: await response.json(),
        bodyKey: "auditEventCollection",
        bodyModel: model.AuditEventCollection,
        type: "model.AuditEventCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieves a list of all audited targets with their corresponding provisioned audit policies, and their provisioning conditions.
* <p>
The ListAuditPolicies operation returns only the audit policies in the specified `compartmentId`.
* The list does not include any subcompartments of the compartmentId passed.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListAuditPolicies on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAuditPoliciesRequest
     * @return ListAuditPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditPolicies.ts.html |here} to see how to use ListAuditPolicies API.
     */
  public async listAuditPolicies(
    listAuditPoliciesRequest: requests.ListAuditPoliciesRequest
  ): Promise<responses.ListAuditPoliciesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listAuditPolicies.");
    const operationName = "listAuditPolicies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicyCollection/ListAuditPolicies";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAuditPoliciesRequest.compartmentId,
      "compartmentIdInSubtree": listAuditPoliciesRequest.compartmentIdInSubtree,
      "accessLevel": listAuditPoliciesRequest.accessLevel,
      "displayName": listAuditPoliciesRequest.displayName,
      "limit": listAuditPoliciesRequest.limit,
      "page": listAuditPoliciesRequest.page,
      "targetId": listAuditPoliciesRequest.targetId,
      "lifecycleState": listAuditPoliciesRequest.lifecycleState,
      "auditPolicyId": listAuditPoliciesRequest.auditPolicyId,
      "sortOrder": listAuditPoliciesRequest.sortOrder,
      "sortBy": listAuditPoliciesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAuditPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuditPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuditPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "auditPolicyCollection",
        bodyModel: model.AuditPolicyCollection,
        type: "model.AuditPolicyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets a list of aggregated audit policy details on the target databases. A audit policy aggregation
* helps understand the overall state of policies provisioned on targets.
* It is especially useful to create dashboards or to support analytics.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform SummarizedAuditPolicyInfo on the specified
* `compartmentId` and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* <p>
**Example:** ListAuditPolicyAnalytics?groupBy=auditPolicyCategory
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAuditPolicyAnalyticsRequest
     * @return ListAuditPolicyAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditPolicyAnalytics.ts.html |here} to see how to use ListAuditPolicyAnalytics API.
     */
  public async listAuditPolicyAnalytics(
    listAuditPolicyAnalyticsRequest: requests.ListAuditPolicyAnalyticsRequest
  ): Promise<responses.ListAuditPolicyAnalyticsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listAuditPolicyAnalytics.");
    const operationName = "listAuditPolicyAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicyAnalyticCollection/ListAuditPolicyAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAuditPolicyAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listAuditPolicyAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listAuditPolicyAnalyticsRequest.accessLevel,
      "limit": listAuditPolicyAnalyticsRequest.limit,
      "page": listAuditPolicyAnalyticsRequest.page,
      "groupBy": listAuditPolicyAnalyticsRequest.groupBy,
      "auditPolicyCategory": listAuditPolicyAnalyticsRequest.auditPolicyCategory,
      "auditPolicyName": listAuditPolicyAnalyticsRequest.auditPolicyName,
      "targetId": listAuditPolicyAnalyticsRequest.targetId,
      "lifecycleState": listAuditPolicyAnalyticsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAuditPolicyAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuditPolicyAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditPolicyAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuditPolicyAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "auditPolicyAnalyticCollection",
        bodyModel: model.AuditPolicyAnalyticCollection,
        type: "model.AuditPolicyAnalyticCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets a list of audit profile aggregated details . A audit profile  aggregation helps understand the overall  state of audit profile profiles.
* As an example, it helps understand how many audit profiles have paid usage. It is especially useful to create dashboards or to support analytics.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform AuditProfileAnalytics on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAuditProfileAnalyticsRequest
     * @return ListAuditProfileAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditProfileAnalytics.ts.html |here} to see how to use ListAuditProfileAnalytics API.
     */
  public async listAuditProfileAnalytics(
    listAuditProfileAnalyticsRequest: requests.ListAuditProfileAnalyticsRequest
  ): Promise<responses.ListAuditProfileAnalyticsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listAuditProfileAnalytics.");
    const operationName = "listAuditProfileAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfileAnalyticCollection/ListAuditProfileAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAuditProfileAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listAuditProfileAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listAuditProfileAnalyticsRequest.accessLevel,
      "limit": listAuditProfileAnalyticsRequest.limit,
      "page": listAuditProfileAnalyticsRequest.page,
      "groupBy": listAuditProfileAnalyticsRequest.groupBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAuditProfileAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuditProfileAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditProfileAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuditProfileAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "auditProfileAnalyticCollection",
        bodyModel: model.AuditProfileAnalyticCollection,
        type: "model.AuditProfileAnalyticCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets a list of all audit profiles.
* <p>
The ListAuditProfiles operation returns only the audit profiles in the specified `compartmentId`.
* The list does not include any subcompartments of the compartmentId passed.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListAuditProfiles on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAuditProfilesRequest
     * @return ListAuditProfilesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditProfiles.ts.html |here} to see how to use ListAuditProfiles API.
     */
  public async listAuditProfiles(
    listAuditProfilesRequest: requests.ListAuditProfilesRequest
  ): Promise<responses.ListAuditProfilesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listAuditProfiles.");
    const operationName = "listAuditProfiles";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/ListAuditProfiles";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAuditProfilesRequest.compartmentId,
      "compartmentIdInSubtree": listAuditProfilesRequest.compartmentIdInSubtree,
      "accessLevel": listAuditProfilesRequest.accessLevel,
      "auditProfileId": listAuditProfilesRequest.auditProfileId,
      "targetId": listAuditProfilesRequest.targetId,
      "displayName": listAuditProfilesRequest.displayName,
      "limit": listAuditProfilesRequest.limit,
      "page": listAuditProfilesRequest.page,
      "lifecycleState": listAuditProfilesRequest.lifecycleState,
      "isOverrideGlobalRetentionSetting": listAuditProfilesRequest.isOverrideGlobalRetentionSetting,
      "isPaidUsageEnabled": listAuditProfilesRequest.isPaidUsageEnabled,
      "auditCollectedVolumeGreaterThanOrEqualTo":
        listAuditProfilesRequest.auditCollectedVolumeGreaterThanOrEqualTo,
      "sortOrder": listAuditProfilesRequest.sortOrder,
      "sortBy": listAuditProfilesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAuditProfilesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuditProfilesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditProfiles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuditProfilesResponse>{},
        body: await response.json(),
        bodyKey: "auditProfileCollection",
        bodyModel: model.AuditProfileCollection,
        type: "model.AuditProfileCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets a list of audit trail aggregated details . A audit trail aggregation helps understand the overall  state of trails.
* As an example, it helps understand how many trails are running or stopped. It is especially useful to create dashboards or to support analytics.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform AuditTrailAnalytics on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAuditTrailAnalyticsRequest
     * @return ListAuditTrailAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditTrailAnalytics.ts.html |here} to see how to use ListAuditTrailAnalytics API.
     */
  public async listAuditTrailAnalytics(
    listAuditTrailAnalyticsRequest: requests.ListAuditTrailAnalyticsRequest
  ): Promise<responses.ListAuditTrailAnalyticsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listAuditTrailAnalytics.");
    const operationName = "listAuditTrailAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrailAnalyticCollection/ListAuditTrailAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAuditTrailAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listAuditTrailAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listAuditTrailAnalyticsRequest.accessLevel,
      "limit": listAuditTrailAnalyticsRequest.limit,
      "page": listAuditTrailAnalyticsRequest.page,
      "groupBy": listAuditTrailAnalyticsRequest.groupBy,
      "targetId": listAuditTrailAnalyticsRequest.targetId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAuditTrailAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuditTrailAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditTrailAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuditTrailAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "auditTrailAnalyticCollection",
        bodyModel: model.AuditTrailAnalyticCollection,
        type: "model.AuditTrailAnalyticCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets a list of all audit trails.
* The ListAuditTrails operation returns only the audit trails in the specified `compartmentId`.
* The list does not include any subcompartments of the compartmentId passed.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListAuditTrails on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAuditTrailsRequest
     * @return ListAuditTrailsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditTrails.ts.html |here} to see how to use ListAuditTrails API.
     */
  public async listAuditTrails(
    listAuditTrailsRequest: requests.ListAuditTrailsRequest
  ): Promise<responses.ListAuditTrailsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listAuditTrails.");
    const operationName = "listAuditTrails";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/ListAuditTrails";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAuditTrailsRequest.compartmentId,
      "compartmentIdInSubtree": listAuditTrailsRequest.compartmentIdInSubtree,
      "accessLevel": listAuditTrailsRequest.accessLevel,
      "auditTrailId": listAuditTrailsRequest.auditTrailId,
      "displayName": listAuditTrailsRequest.displayName,
      "targetId": listAuditTrailsRequest.targetId,
      "limit": listAuditTrailsRequest.limit,
      "page": listAuditTrailsRequest.page,
      "lifecycleState": listAuditTrailsRequest.lifecycleState,
      "status": listAuditTrailsRequest.status,
      "sortOrder": listAuditTrailsRequest.sortOrder,
      "sortBy": listAuditTrailsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAuditTrailsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuditTrailsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditTrails",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuditTrailsResponse>{},
        body: await response.json(),
        bodyKey: "auditTrailCollection",
        bodyModel: model.AuditTrailCollection,
        type: "model.AuditTrailCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of audit trails, and associated audit event volume for each trail up to defined start date.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAvailableAuditVolumesRequest
   * @return ListAvailableAuditVolumesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAvailableAuditVolumes.ts.html |here} to see how to use ListAvailableAuditVolumes API.
   */
  public async listAvailableAuditVolumes(
    listAvailableAuditVolumesRequest: requests.ListAvailableAuditVolumesRequest
  ): Promise<responses.ListAvailableAuditVolumesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listAvailableAuditVolumes.");
    const operationName = "listAvailableAuditVolumes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/ListAvailableAuditVolumes";
    const pathParams = {
      "{auditProfileId}": listAvailableAuditVolumesRequest.auditProfileId
    };

    const queryParams = {
      "workRequestId": listAvailableAuditVolumesRequest.workRequestId,
      "trailLocation": listAvailableAuditVolumesRequest.trailLocation,
      "monthInConsiderationGreaterThan":
        listAvailableAuditVolumesRequest.monthInConsiderationGreaterThan,
      "monthInConsiderationLessThan": listAvailableAuditVolumesRequest.monthInConsiderationLessThan,
      "limit": listAvailableAuditVolumesRequest.limit,
      "page": listAvailableAuditVolumesRequest.page,
      "sortOrder": listAvailableAuditVolumesRequest.sortOrder,
      "sortBy": listAvailableAuditVolumesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAvailableAuditVolumesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAvailableAuditVolumesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditProfiles/{auditProfileId}/availableAuditVolumes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAvailableAuditVolumesResponse>{},
        body: await response.json(),
        bodyKey: "availableAuditVolumeCollection",
        bodyModel: model.AvailableAuditVolumeCollection,
        type: "model.AvailableAuditVolumeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all collected audit volume data points.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCollectedAuditVolumesRequest
   * @return ListCollectedAuditVolumesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListCollectedAuditVolumes.ts.html |here} to see how to use ListCollectedAuditVolumes API.
   */
  public async listCollectedAuditVolumes(
    listCollectedAuditVolumesRequest: requests.ListCollectedAuditVolumesRequest
  ): Promise<responses.ListCollectedAuditVolumesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listCollectedAuditVolumes.");
    const operationName = "listCollectedAuditVolumes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/ListCollectedAuditVolumes";
    const pathParams = {
      "{auditProfileId}": listCollectedAuditVolumesRequest.auditProfileId
    };

    const queryParams = {
      "workRequestId": listCollectedAuditVolumesRequest.workRequestId,
      "monthInConsiderationGreaterThan":
        listCollectedAuditVolumesRequest.monthInConsiderationGreaterThan,
      "monthInConsiderationLessThan": listCollectedAuditVolumesRequest.monthInConsiderationLessThan,
      "limit": listCollectedAuditVolumesRequest.limit,
      "page": listCollectedAuditVolumesRequest.page,
      "sortOrder": listCollectedAuditVolumesRequest.sortOrder,
      "sortBy": listCollectedAuditVolumesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCollectedAuditVolumesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCollectedAuditVolumesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditProfiles/{auditProfileId}/collectedAuditVolumes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCollectedAuditVolumesResponse>{},
        body: await response.json(),
        bodyKey: "collectedAuditVolumeCollection",
        bodyModel: model.CollectedAuditVolumeCollection,
        type: "model.CollectedAuditVolumeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of column metadata objects.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListColumnsRequest
   * @return ListColumnsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListColumns.ts.html |here} to see how to use ListColumns API.
   */
  public async listColumns(
    listColumnsRequest: requests.ListColumnsRequest
  ): Promise<responses.ListColumnsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listColumns.");
    const operationName = "listColumns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/ListColumns";
    const pathParams = {
      "{targetDatabaseId}": listColumnsRequest.targetDatabaseId
    };

    const queryParams = {
      "limit": listColumnsRequest.limit,
      "page": listColumnsRequest.page,
      "schemaName": listColumnsRequest.schemaName,
      "tableName": listColumnsRequest.tableName,
      "columnName": listColumnsRequest.columnName,
      "datatype": listColumnsRequest.datatype,
      "sortOrder": listColumnsRequest.sortOrder,
      "sortBy": listColumnsRequest.sortBy,
      "schemaNameContains": listColumnsRequest.schemaNameContains,
      "tableNameContains": listColumnsRequest.tableNameContains,
      "columnNameContains": listColumnsRequest.columnNameContains
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listColumnsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listColumnsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/columns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListColumnsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ColumnSummary,
        type: "Array<model.ColumnSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listColumnsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ColumnSummary objects
   * contained in responses from the listColumns operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllColumns(
    request: requests.ListColumnsRequest
  ): AsyncIterableIterator<model.ColumnSummary> {
    return paginateRecords(request, req => this.listColumns(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listColumnsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listColumns operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllColumnsResponses(
    request: requests.ListColumnsRequest
  ): AsyncIterableIterator<responses.ListColumnsResponse> {
    return paginateResponses(request, req => this.listColumns(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ColumnSummary objects
   * contained in responses from the listColumns operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listColumnsRecordIterator(
    request: requests.ListColumnsRequest
  ): AsyncIterableIterator<model.ColumnSummary> {
    return paginateRecords(request, req => this.listColumns(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listColumns operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listColumnsResponseIterator(
    request: requests.ListColumnsRequest
  ): AsyncIterableIterator<responses.ListColumnsResponse> {
    return paginateResponses(request, req => this.listColumns(req));
  }

  /**
   * Gets a list of Data Safe private endpoints.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDataSafePrivateEndpointsRequest
   * @return ListDataSafePrivateEndpointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDataSafePrivateEndpoints.ts.html |here} to see how to use ListDataSafePrivateEndpoints API.
   */
  public async listDataSafePrivateEndpoints(
    listDataSafePrivateEndpointsRequest: requests.ListDataSafePrivateEndpointsRequest
  ): Promise<responses.ListDataSafePrivateEndpointsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listDataSafePrivateEndpoints.");
    const operationName = "listDataSafePrivateEndpoints";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafePrivateEndpointSummary/ListDataSafePrivateEndpoints";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDataSafePrivateEndpointsRequest.compartmentId,
      "displayName": listDataSafePrivateEndpointsRequest.displayName,
      "vcnId": listDataSafePrivateEndpointsRequest.vcnId,
      "lifecycleState": listDataSafePrivateEndpointsRequest.lifecycleState,
      "limit": listDataSafePrivateEndpointsRequest.limit,
      "page": listDataSafePrivateEndpointsRequest.page,
      "sortOrder": listDataSafePrivateEndpointsRequest.sortOrder,
      "sortBy": listDataSafePrivateEndpointsRequest.sortBy,
      "compartmentIdInSubtree": listDataSafePrivateEndpointsRequest.compartmentIdInSubtree,
      "accessLevel": listDataSafePrivateEndpointsRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDataSafePrivateEndpointsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDataSafePrivateEndpointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDataSafePrivateEndpointsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DataSafePrivateEndpointSummary,
        type: "Array<model.DataSafePrivateEndpointSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDataSafePrivateEndpointsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DataSafePrivateEndpointSummary objects
   * contained in responses from the listDataSafePrivateEndpoints operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDataSafePrivateEndpoints(
    request: requests.ListDataSafePrivateEndpointsRequest
  ): AsyncIterableIterator<model.DataSafePrivateEndpointSummary> {
    return paginateRecords(request, req => this.listDataSafePrivateEndpoints(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDataSafePrivateEndpointsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDataSafePrivateEndpoints operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDataSafePrivateEndpointsResponses(
    request: requests.ListDataSafePrivateEndpointsRequest
  ): AsyncIterableIterator<responses.ListDataSafePrivateEndpointsResponse> {
    return paginateResponses(request, req => this.listDataSafePrivateEndpoints(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DataSafePrivateEndpointSummary objects
   * contained in responses from the listDataSafePrivateEndpoints operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDataSafePrivateEndpointsRecordIterator(
    request: requests.ListDataSafePrivateEndpointsRequest
  ): AsyncIterableIterator<model.DataSafePrivateEndpointSummary> {
    return paginateRecords(request, req => this.listDataSafePrivateEndpoints(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDataSafePrivateEndpoints operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDataSafePrivateEndpointsResponseIterator(
    request: requests.ListDataSafePrivateEndpointsRequest
  ): AsyncIterableIterator<responses.ListDataSafePrivateEndpointsResponse> {
    return paginateResponses(request, req => this.listDataSafePrivateEndpoints(req));
  }

  /**
     * Retrieves a list of all database security configurations in Data Safe.
* <p>
The ListDatabaseSecurityConfigs operation returns only the database security configurations in the specified `compartmentId`.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListDatabaseSecurityConfigs on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDatabaseSecurityConfigsRequest
     * @return ListDatabaseSecurityConfigsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDatabaseSecurityConfigs.ts.html |here} to see how to use ListDatabaseSecurityConfigs API.
     */
  public async listDatabaseSecurityConfigs(
    listDatabaseSecurityConfigsRequest: requests.ListDatabaseSecurityConfigsRequest
  ): Promise<responses.ListDatabaseSecurityConfigsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listDatabaseSecurityConfigs.");
    const operationName = "listDatabaseSecurityConfigs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DatabaseSecurityConfigCollection/ListDatabaseSecurityConfigs";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDatabaseSecurityConfigsRequest.compartmentId,
      "compartmentIdInSubtree": listDatabaseSecurityConfigsRequest.compartmentIdInSubtree,
      "accessLevel": listDatabaseSecurityConfigsRequest.accessLevel,
      "displayName": listDatabaseSecurityConfigsRequest.displayName,
      "limit": listDatabaseSecurityConfigsRequest.limit,
      "page": listDatabaseSecurityConfigsRequest.page,
      "lifecycleState": listDatabaseSecurityConfigsRequest.lifecycleState,
      "databaseSecurityConfigId": listDatabaseSecurityConfigsRequest.databaseSecurityConfigId,
      "timeCreatedGreaterThanOrEqualTo":
        listDatabaseSecurityConfigsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listDatabaseSecurityConfigsRequest.timeCreatedLessThan,
      "targetId": listDatabaseSecurityConfigsRequest.targetId,
      "sortOrder": listDatabaseSecurityConfigsRequest.sortOrder,
      "sortBy": listDatabaseSecurityConfigsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDatabaseSecurityConfigsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDatabaseSecurityConfigsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseSecurityConfigs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDatabaseSecurityConfigsResponse>{},
        body: await response.json(),
        bodyKey: "databaseSecurityConfigCollection",
        bodyModel: model.DatabaseSecurityConfigCollection,
        type: "model.DatabaseSecurityConfigCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieves a list of all database table access entries in Data Safe.
* <p>
The ListDatabaseTableAccessEntries operation returns only the database table access reports for the specified security policy report.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDatabaseTableAccessEntriesRequest
     * @return ListDatabaseTableAccessEntriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDatabaseTableAccessEntries.ts.html |here} to see how to use ListDatabaseTableAccessEntries API.
     */
  public async listDatabaseTableAccessEntries(
    listDatabaseTableAccessEntriesRequest: requests.ListDatabaseTableAccessEntriesRequest
  ): Promise<responses.ListDatabaseTableAccessEntriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listDatabaseTableAccessEntries.");
    const operationName = "listDatabaseTableAccessEntries";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DatabaseTableAccessEntryCollection/ListDatabaseTableAccessEntries";
    const pathParams = {
      "{securityPolicyReportId}": listDatabaseTableAccessEntriesRequest.securityPolicyReportId
    };

    const queryParams = {
      "limit": listDatabaseTableAccessEntriesRequest.limit,
      "page": listDatabaseTableAccessEntriesRequest.page,
      "scimQuery": listDatabaseTableAccessEntriesRequest.scimQuery,
      "sortBy": listDatabaseTableAccessEntriesRequest.sortBy,
      "sortOrder": listDatabaseTableAccessEntriesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDatabaseTableAccessEntriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDatabaseTableAccessEntriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicyReports/{securityPolicyReportId}/databaseTableAccessEntries",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDatabaseTableAccessEntriesResponse>{},
        body: await response.json(),
        bodyKey: "databaseTableAccessEntryCollection",
        bodyModel: model.DatabaseTableAccessEntryCollection,
        type: "model.DatabaseTableAccessEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieves a list of all database view access entries in Data Safe.
* <p>
The ListDatabaseViewAccessEntries operation returns only the database view access objects for the specified security policy report.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDatabaseViewAccessEntriesRequest
     * @return ListDatabaseViewAccessEntriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDatabaseViewAccessEntries.ts.html |here} to see how to use ListDatabaseViewAccessEntries API.
     */
  public async listDatabaseViewAccessEntries(
    listDatabaseViewAccessEntriesRequest: requests.ListDatabaseViewAccessEntriesRequest
  ): Promise<responses.ListDatabaseViewAccessEntriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listDatabaseViewAccessEntries.");
    const operationName = "listDatabaseViewAccessEntries";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DatabaseViewAccessEntryCollection/ListDatabaseViewAccessEntries";
    const pathParams = {
      "{securityPolicyReportId}": listDatabaseViewAccessEntriesRequest.securityPolicyReportId
    };

    const queryParams = {
      "limit": listDatabaseViewAccessEntriesRequest.limit,
      "page": listDatabaseViewAccessEntriesRequest.page,
      "scimQuery": listDatabaseViewAccessEntriesRequest.scimQuery,
      "targetId": listDatabaseViewAccessEntriesRequest.targetId,
      "sortBy": listDatabaseViewAccessEntriesRequest.sortBy,
      "sortOrder": listDatabaseViewAccessEntriesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDatabaseViewAccessEntriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDatabaseViewAccessEntriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicyReports/{securityPolicyReportId}/databaseViewAccessEntries",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDatabaseViewAccessEntriesResponse>{},
        body: await response.json(),
        bodyKey: "databaseViewAccessEntryCollection",
        bodyModel: model.DatabaseViewAccessEntryCollection,
        type: "model.DatabaseViewAccessEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of columns of a SDM masking policy difference resource based on the specified query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDifferenceColumnsRequest
   * @return ListDifferenceColumnsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDifferenceColumns.ts.html |here} to see how to use ListDifferenceColumns API.
   */
  public async listDifferenceColumns(
    listDifferenceColumnsRequest: requests.ListDifferenceColumnsRequest
  ): Promise<responses.ListDifferenceColumnsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listDifferenceColumns.");
    const operationName = "listDifferenceColumns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/ListDifferenceColumns";
    const pathParams = {
      "{sdmMaskingPolicyDifferenceId}": listDifferenceColumnsRequest.sdmMaskingPolicyDifferenceId
    };

    const queryParams = {
      "differenceType": listDifferenceColumnsRequest.differenceType,
      "plannedAction": listDifferenceColumnsRequest.plannedAction,
      "syncStatus": listDifferenceColumnsRequest.syncStatus,
      "schemaName": listDifferenceColumnsRequest.schemaName,
      "objectName": listDifferenceColumnsRequest.objectName,
      "columnName": listDifferenceColumnsRequest.columnName,
      "sortOrder": listDifferenceColumnsRequest.sortOrder,
      "sortBy": listDifferenceColumnsRequest.sortBy,
      "limit": listDifferenceColumnsRequest.limit,
      "page": listDifferenceColumnsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDifferenceColumnsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDifferenceColumnsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}/differenceColumns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDifferenceColumnsResponse>{},
        body: await response.json(),
        bodyKey: "sdmMaskingPolicyDifferenceColumnCollection",
        bodyModel: model.SdmMaskingPolicyDifferenceColumnCollection,
        type: "model.SdmMaskingPolicyDifferenceColumnCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets consolidated discovery analytics data based on the specified query parameters.
   * If CompartmentIdInSubtreeQueryParam is specified as true, the behaviour
   * is equivalent to accessLevel \"ACCESSIBLE\" by default.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDiscoveryAnalyticsRequest
   * @return ListDiscoveryAnalyticsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDiscoveryAnalytics.ts.html |here} to see how to use ListDiscoveryAnalytics API.
   */
  public async listDiscoveryAnalytics(
    listDiscoveryAnalyticsRequest: requests.ListDiscoveryAnalyticsRequest
  ): Promise<responses.ListDiscoveryAnalyticsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listDiscoveryAnalytics.");
    const operationName = "listDiscoveryAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/ListDiscoveryAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDiscoveryAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listDiscoveryAnalyticsRequest.compartmentIdInSubtree,
      "groupBy": listDiscoveryAnalyticsRequest.groupBy,
      "targetId": listDiscoveryAnalyticsRequest.targetId,
      "sensitiveDataModelId": listDiscoveryAnalyticsRequest.sensitiveDataModelId,
      "sensitiveTypeId": listDiscoveryAnalyticsRequest.sensitiveTypeId,
      "limit": listDiscoveryAnalyticsRequest.limit,
      "page": listDiscoveryAnalyticsRequest.page,
      "isCommon": listDiscoveryAnalyticsRequest.isCommon
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDiscoveryAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDiscoveryAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDiscoveryAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "discoveryAnalyticsCollection",
        bodyModel: model.DiscoveryAnalyticsCollection,
        type: "model.DiscoveryAnalyticsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of discovery results based on the specified query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDiscoveryJobResultsRequest
   * @return ListDiscoveryJobResultsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDiscoveryJobResults.ts.html |here} to see how to use ListDiscoveryJobResults API.
   */
  public async listDiscoveryJobResults(
    listDiscoveryJobResultsRequest: requests.ListDiscoveryJobResultsRequest
  ): Promise<responses.ListDiscoveryJobResultsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listDiscoveryJobResults.");
    const operationName = "listDiscoveryJobResults";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJob/ListDiscoveryJobResults";
    const pathParams = {
      "{discoveryJobId}": listDiscoveryJobResultsRequest.discoveryJobId
    };

    const queryParams = {
      "discoveryType": listDiscoveryJobResultsRequest.discoveryType,
      "plannedAction": listDiscoveryJobResultsRequest.plannedAction,
      "isResultApplied": listDiscoveryJobResultsRequest.isResultApplied,
      "schemaName": listDiscoveryJobResultsRequest.schemaName,
      "objectName": listDiscoveryJobResultsRequest.objectName,
      "columnName": listDiscoveryJobResultsRequest.columnName,
      "sortOrder": listDiscoveryJobResultsRequest.sortOrder,
      "sortBy": listDiscoveryJobResultsRequest.sortBy,
      "limit": listDiscoveryJobResultsRequest.limit,
      "page": listDiscoveryJobResultsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDiscoveryJobResultsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDiscoveryJobResultsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs/{discoveryJobId}/results",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDiscoveryJobResultsResponse>{},
        body: await response.json(),
        bodyKey: "discoveryJobResultCollection",
        bodyModel: model.DiscoveryJobResultCollection,
        type: "model.DiscoveryJobResultCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of incremental discovery jobs based on the specified query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDiscoveryJobsRequest
   * @return ListDiscoveryJobsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDiscoveryJobs.ts.html |here} to see how to use ListDiscoveryJobs API.
   */
  public async listDiscoveryJobs(
    listDiscoveryJobsRequest: requests.ListDiscoveryJobsRequest
  ): Promise<responses.ListDiscoveryJobsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listDiscoveryJobs.");
    const operationName = "listDiscoveryJobs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJob/ListDiscoveryJobs";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDiscoveryJobsRequest.compartmentId,
      "compartmentIdInSubtree": listDiscoveryJobsRequest.compartmentIdInSubtree,
      "accessLevel": listDiscoveryJobsRequest.accessLevel,
      "displayName": listDiscoveryJobsRequest.displayName,
      "discoveryJobId": listDiscoveryJobsRequest.discoveryJobId,
      "targetId": listDiscoveryJobsRequest.targetId,
      "lifecycleState": listDiscoveryJobsRequest.lifecycleState,
      "sensitiveDataModelId": listDiscoveryJobsRequest.sensitiveDataModelId,
      "sortOrder": listDiscoveryJobsRequest.sortOrder,
      "sortBy": listDiscoveryJobsRequest.sortBy,
      "limit": listDiscoveryJobsRequest.limit,
      "page": listDiscoveryJobsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDiscoveryJobsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDiscoveryJobsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDiscoveryJobsResponse>{},
        body: await response.json(),
        bodyKey: "discoveryJobCollection",
        bodyModel: model.DiscoveryJobCollection,
        type: "model.DiscoveryJobCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets a list of findings aggregated details in the specified compartment. This provides information about the overall state
* of security assessment findings. You can use groupBy to get the count of findings under a certain risk level and with a certain findingKey,
* and as well as get the list of the targets that match the condition.
* This data is especially useful content for the statistic chart or to support analytics.
* <p>
When you perform the ListFindingAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
* parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
* permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
* root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
* compartmentId, then \"Not Authorized\" is returned.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListFindingAnalyticsRequest
     * @return ListFindingAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListFindingAnalytics.ts.html |here} to see how to use ListFindingAnalytics API.
     */
  public async listFindingAnalytics(
    listFindingAnalyticsRequest: requests.ListFindingAnalyticsRequest
  ): Promise<responses.ListFindingAnalyticsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listFindingAnalytics.");
    const operationName = "listFindingAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/ListFindingAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listFindingAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listFindingAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listFindingAnalyticsRequest.accessLevel,
      "isTopFinding": listFindingAnalyticsRequest.isTopFinding,
      "groupBy": listFindingAnalyticsRequest.groupBy,
      "topFindingStatus": listFindingAnalyticsRequest.topFindingStatus,
      "severity": listFindingAnalyticsRequest.severity,
      "findingKey": listFindingAnalyticsRequest.findingKey,
      "limit": listFindingAnalyticsRequest.limit,
      "page": listFindingAnalyticsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFindingAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFindingAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/findingAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFindingAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "findingAnalyticsCollection",
        bodyModel: model.FindingAnalyticsCollection,
        type: "model.FindingAnalyticsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List all the findings from all the targets in the specified compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFindingsRequest
   * @return ListFindingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListFindings.ts.html |here} to see how to use ListFindings API.
   */
  public async listFindings(
    listFindingsRequest: requests.ListFindingsRequest
  ): Promise<responses.ListFindingsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listFindings.");
    const operationName = "listFindings";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/ListFindings";
    const pathParams = {
      "{securityAssessmentId}": listFindingsRequest.securityAssessmentId
    };

    const queryParams = {
      "isTopFinding": listFindingsRequest.isTopFinding,
      "severity": listFindingsRequest.severity,
      "lifecycleState": listFindingsRequest.lifecycleState,
      "references": listFindingsRequest.references,
      "limit": listFindingsRequest.limit,
      "page": listFindingsRequest.page,
      "compartmentIdInSubtree": listFindingsRequest.compartmentIdInSubtree,
      "accessLevel": listFindingsRequest.accessLevel,
      "targetId": listFindingsRequest.targetId,
      "findingKey": listFindingsRequest.findingKey
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFindingsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFindingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/findings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFindingsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.FindingSummary,
        type: "Array<model.FindingSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listFindingsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.FindingSummary objects
   * contained in responses from the listFindings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFindings(
    request: requests.ListFindingsRequest
  ): AsyncIterableIterator<model.FindingSummary> {
    return paginateRecords(request, req => this.listFindings(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listFindingsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listFindings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFindingsResponses(
    request: requests.ListFindingsRequest
  ): AsyncIterableIterator<responses.ListFindingsResponse> {
    return paginateResponses(request, req => this.listFindings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.FindingSummary objects
   * contained in responses from the listFindings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFindingsRecordIterator(
    request: requests.ListFindingsRequest
  ): AsyncIterableIterator<model.FindingSummary> {
    return paginateRecords(request, req => this.listFindings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listFindings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFindingsResponseIterator(
    request: requests.ListFindingsRequest
  ): AsyncIterableIterator<responses.ListFindingsResponse> {
    return paginateResponses(request, req => this.listFindings(req));
  }

  /**
   * List all changes made by user to risk level of findings of the specified assessment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFindingsChangeAuditLogsRequest
   * @return ListFindingsChangeAuditLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListFindingsChangeAuditLogs.ts.html |here} to see how to use ListFindingsChangeAuditLogs API.
   */
  public async listFindingsChangeAuditLogs(
    listFindingsChangeAuditLogsRequest: requests.ListFindingsChangeAuditLogsRequest
  ): Promise<responses.ListFindingsChangeAuditLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listFindingsChangeAuditLogs.");
    const operationName = "listFindingsChangeAuditLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/ListFindingsChangeAuditLogs";
    const pathParams = {
      "{securityAssessmentId}": listFindingsChangeAuditLogsRequest.securityAssessmentId
    };

    const queryParams = {
      "severity": listFindingsChangeAuditLogsRequest.severity,
      "findingKey": listFindingsChangeAuditLogsRequest.findingKey,
      "findingTitle": listFindingsChangeAuditLogsRequest.findingTitle,
      "isRiskDeferred": listFindingsChangeAuditLogsRequest.isRiskDeferred,
      "modifiedBy": listFindingsChangeAuditLogsRequest.modifiedBy,
      "limit": listFindingsChangeAuditLogsRequest.limit,
      "page": listFindingsChangeAuditLogsRequest.page,
      "sortOrder": listFindingsChangeAuditLogsRequest.sortOrder,
      "sortBy": listFindingsChangeAuditLogsRequest.sortBy,
      "timeValidUntilGreaterThanOrEqualTo":
        listFindingsChangeAuditLogsRequest.timeValidUntilGreaterThanOrEqualTo,
      "timeValidUntilLessThan": listFindingsChangeAuditLogsRequest.timeValidUntilLessThan,
      "timeUpdatedGreaterThanOrEqualTo":
        listFindingsChangeAuditLogsRequest.timeUpdatedGreaterThanOrEqualTo,
      "timeUpdatedLessThan": listFindingsChangeAuditLogsRequest.timeUpdatedLessThan
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFindingsChangeAuditLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFindingsChangeAuditLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/findingsChangeAuditLogs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFindingsChangeAuditLogsResponse>{},
        body: await response.json(),
        bodyKey: "findingsChangeAuditLogCollection",
        bodyModel: model.FindingsChangeAuditLogCollection,
        type: "model.FindingsChangeAuditLogCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of grants for a particular user in the specified user assessment. A user grant contains details such as the
   * privilege name, type, category, and depth level. The depth level indicates how deep in the hierarchy of roles granted to
   * roles a privilege grant is. The userKey in this operation is a system-generated identifier. Perform the operation ListUsers
   * to get the userKey for a particular user.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListGrantsRequest
   * @return ListGrantsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListGrants.ts.html |here} to see how to use ListGrants API.
   */
  public async listGrants(
    listGrantsRequest: requests.ListGrantsRequest
  ): Promise<responses.ListGrantsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listGrants.");
    const operationName = "listGrants";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/ListGrants";
    const pathParams = {
      "{userAssessmentId}": listGrantsRequest.userAssessmentId,
      "{userKey}": listGrantsRequest.userKey
    };

    const queryParams = {
      "grantKey": listGrantsRequest.grantKey,
      "grantName": listGrantsRequest.grantName,
      "privilegeType": listGrantsRequest.privilegeType,
      "privilegeCategory": listGrantsRequest.privilegeCategory,
      "depthLevel": listGrantsRequest.depthLevel,
      "depthLevelGreaterThanOrEqualTo": listGrantsRequest.depthLevelGreaterThanOrEqualTo,
      "depthLevelLessThan": listGrantsRequest.depthLevelLessThan,
      "limit": listGrantsRequest.limit,
      "page": listGrantsRequest.page,
      "sortOrder": listGrantsRequest.sortOrder,
      "sortBy": listGrantsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listGrantsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listGrantsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/users/{userKey}/grants",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListGrantsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.GrantSummary,
        type: "Array<model.GrantSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listGrantsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.GrantSummary objects
   * contained in responses from the listGrants operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllGrants(
    request: requests.ListGrantsRequest
  ): AsyncIterableIterator<model.GrantSummary> {
    return paginateRecords(request, req => this.listGrants(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listGrantsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listGrants operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllGrantsResponses(
    request: requests.ListGrantsRequest
  ): AsyncIterableIterator<responses.ListGrantsResponse> {
    return paginateResponses(request, req => this.listGrants(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.GrantSummary objects
   * contained in responses from the listGrants operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listGrantsRecordIterator(
    request: requests.ListGrantsRequest
  ): AsyncIterableIterator<model.GrantSummary> {
    return paginateRecords(request, req => this.listGrants(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listGrants operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listGrantsResponseIterator(
    request: requests.ListGrantsRequest
  ): AsyncIterableIterator<responses.ListGrantsResponse> {
    return paginateResponses(request, req => this.listGrants(req));
  }

  /**
   * Gets a list of library masking formats based on the specified query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListLibraryMaskingFormatsRequest
   * @return ListLibraryMaskingFormatsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListLibraryMaskingFormats.ts.html |here} to see how to use ListLibraryMaskingFormats API.
   */
  public async listLibraryMaskingFormats(
    listLibraryMaskingFormatsRequest: requests.ListLibraryMaskingFormatsRequest
  ): Promise<responses.ListLibraryMaskingFormatsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listLibraryMaskingFormats.");
    const operationName = "listLibraryMaskingFormats";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/LibraryMaskingFormatSummary/ListLibraryMaskingFormats";
    const pathParams = {};

    const queryParams = {
      "libraryMaskingFormatId": listLibraryMaskingFormatsRequest.libraryMaskingFormatId,
      "compartmentId": listLibraryMaskingFormatsRequest.compartmentId,
      "compartmentIdInSubtree": listLibraryMaskingFormatsRequest.compartmentIdInSubtree,
      "accessLevel": listLibraryMaskingFormatsRequest.accessLevel,
      "displayName": listLibraryMaskingFormatsRequest.displayName,
      "limit": listLibraryMaskingFormatsRequest.limit,
      "page": listLibraryMaskingFormatsRequest.page,
      "lifecycleState": listLibraryMaskingFormatsRequest.lifecycleState,
      "timeCreatedGreaterThanOrEqualTo":
        listLibraryMaskingFormatsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listLibraryMaskingFormatsRequest.timeCreatedLessThan,
      "libraryMaskingFormatSource": listLibraryMaskingFormatsRequest.libraryMaskingFormatSource,
      "sortOrder": listLibraryMaskingFormatsRequest.sortOrder,
      "sortBy": listLibraryMaskingFormatsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLibraryMaskingFormatsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLibraryMaskingFormatsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/libraryMaskingFormats",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLibraryMaskingFormatsResponse>{},
        body: await response.json(),
        bodyKey: "libraryMaskingFormatCollection",
        bodyModel: model.LibraryMaskingFormatCollection,
        type: "model.LibraryMaskingFormatCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of masked columns present in the specified masking report and based on the specified query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMaskedColumnsRequest
   * @return ListMaskedColumnsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskedColumns.ts.html |here} to see how to use ListMaskedColumns API.
   */
  public async listMaskedColumns(
    listMaskedColumnsRequest: requests.ListMaskedColumnsRequest
  ): Promise<responses.ListMaskedColumnsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listMaskedColumns.");
    const operationName = "listMaskedColumns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskedColumnSummary/ListMaskedColumns";
    const pathParams = {
      "{maskingReportId}": listMaskedColumnsRequest.maskingReportId
    };

    const queryParams = {
      "limit": listMaskedColumnsRequest.limit,
      "page": listMaskedColumnsRequest.page,
      "sortOrder": listMaskedColumnsRequest.sortOrder,
      "sortBy": listMaskedColumnsRequest.sortBy,
      "schemaName": listMaskedColumnsRequest.schemaName,
      "objectName": listMaskedColumnsRequest.objectName,
      "columnName": listMaskedColumnsRequest.columnName,
      "objectType": listMaskedColumnsRequest.objectType,
      "maskingColumnGroup": listMaskedColumnsRequest.maskingColumnGroup,
      "sensitiveTypeId": listMaskedColumnsRequest.sensitiveTypeId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMaskedColumnsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMaskedColumnsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingReports/{maskingReportId}/maskedColumns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMaskedColumnsResponse>{},
        body: await response.json(),
        bodyKey: "maskedColumnCollection",
        bodyModel: model.MaskedColumnCollection,
        type: "model.MaskedColumnCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets consolidated masking analytics data based on the specified query parameters.
   * If CompartmentIdInSubtreeQueryParam is specified as true, the behaviour
   * is equivalent to accessLevel \"ACCESSIBLE\" by default.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMaskingAnalyticsRequest
   * @return ListMaskingAnalyticsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingAnalytics.ts.html |here} to see how to use ListMaskingAnalytics API.
   */
  public async listMaskingAnalytics(
    listMaskingAnalyticsRequest: requests.ListMaskingAnalyticsRequest
  ): Promise<responses.ListMaskingAnalyticsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listMaskingAnalytics.");
    const operationName = "listMaskingAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/ListMaskingAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listMaskingAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listMaskingAnalyticsRequest.compartmentIdInSubtree,
      "groupBy": listMaskingAnalyticsRequest.groupBy,
      "targetId": listMaskingAnalyticsRequest.targetId,
      "maskingPolicyId": listMaskingAnalyticsRequest.maskingPolicyId,
      "limit": listMaskingAnalyticsRequest.limit,
      "page": listMaskingAnalyticsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMaskingAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMaskingAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMaskingAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "maskingAnalyticsCollection",
        bodyModel: model.MaskingAnalyticsCollection,
        type: "model.MaskingAnalyticsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of masking columns present in the specified masking policy and based on the specified query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMaskingColumnsRequest
   * @return ListMaskingColumnsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingColumns.ts.html |here} to see how to use ListMaskingColumns API.
   */
  public async listMaskingColumns(
    listMaskingColumnsRequest: requests.ListMaskingColumnsRequest
  ): Promise<responses.ListMaskingColumnsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listMaskingColumns.");
    const operationName = "listMaskingColumns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/ListMaskingColumns";
    const pathParams = {
      "{maskingPolicyId}": listMaskingColumnsRequest.maskingPolicyId
    };

    const queryParams = {
      "limit": listMaskingColumnsRequest.limit,
      "page": listMaskingColumnsRequest.page,
      "sortOrder": listMaskingColumnsRequest.sortOrder,
      "sortBy": listMaskingColumnsRequest.sortBy,
      "maskingColumnLifecycleState": listMaskingColumnsRequest.maskingColumnLifecycleState,
      "dataType": listMaskingColumnsRequest.dataType,
      "schemaName": listMaskingColumnsRequest.schemaName,
      "objectName": listMaskingColumnsRequest.objectName,
      "columnName": listMaskingColumnsRequest.columnName,
      "objectType": listMaskingColumnsRequest.objectType,
      "maskingColumnGroup": listMaskingColumnsRequest.maskingColumnGroup,
      "sensitiveTypeId": listMaskingColumnsRequest.sensitiveTypeId,
      "isMaskingEnabled": listMaskingColumnsRequest.isMaskingEnabled,
      "isSeedRequired": listMaskingColumnsRequest.isSeedRequired,
      "timeCreatedGreaterThanOrEqualTo": listMaskingColumnsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listMaskingColumnsRequest.timeCreatedLessThan,
      "timeUpdatedGreaterThanOrEqualTo": listMaskingColumnsRequest.timeUpdatedGreaterThanOrEqualTo,
      "timeUpdatedLessThan": listMaskingColumnsRequest.timeUpdatedLessThan
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMaskingColumnsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMaskingColumnsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/maskingColumns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMaskingColumnsResponse>{},
        body: await response.json(),
        bodyKey: "maskingColumnCollection",
        bodyModel: model.MaskingColumnCollection,
        type: "model.MaskingColumnCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of masking objects present in the specified masking policy and based on the specified query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMaskingObjectsRequest
   * @return ListMaskingObjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingObjects.ts.html |here} to see how to use ListMaskingObjects API.
   */
  public async listMaskingObjects(
    listMaskingObjectsRequest: requests.ListMaskingObjectsRequest
  ): Promise<responses.ListMaskingObjectsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listMaskingObjects.");
    const operationName = "listMaskingObjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingObjectCollection/ListMaskingObjects";
    const pathParams = {
      "{maskingPolicyId}": listMaskingObjectsRequest.maskingPolicyId
    };

    const queryParams = {
      "limit": listMaskingObjectsRequest.limit,
      "page": listMaskingObjectsRequest.page,
      "sortOrder": listMaskingObjectsRequest.sortOrder,
      "sortBy": listMaskingObjectsRequest.sortBy,
      "schemaName": listMaskingObjectsRequest.schemaName,
      "objectName": listMaskingObjectsRequest.objectName,
      "objectType": listMaskingObjectsRequest.objectType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMaskingObjectsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMaskingObjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/maskingObjects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMaskingObjectsResponse>{},
        body: await response.json(),
        bodyKey: "maskingObjectCollection",
        bodyModel: model.MaskingObjectCollection,
        type: "model.MaskingObjectCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of masking policies based on the specified query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMaskingPoliciesRequest
   * @return ListMaskingPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingPolicies.ts.html |here} to see how to use ListMaskingPolicies API.
   */
  public async listMaskingPolicies(
    listMaskingPoliciesRequest: requests.ListMaskingPoliciesRequest
  ): Promise<responses.ListMaskingPoliciesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listMaskingPolicies.");
    const operationName = "listMaskingPolicies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/ListMaskingPolicies";
    const pathParams = {};

    const queryParams = {
      "maskingPolicyId": listMaskingPoliciesRequest.maskingPolicyId,
      "compartmentId": listMaskingPoliciesRequest.compartmentId,
      "displayName": listMaskingPoliciesRequest.displayName,
      "limit": listMaskingPoliciesRequest.limit,
      "page": listMaskingPoliciesRequest.page,
      "lifecycleState": listMaskingPoliciesRequest.lifecycleState,
      "sortOrder": listMaskingPoliciesRequest.sortOrder,
      "sortBy": listMaskingPoliciesRequest.sortBy,
      "sensitiveDataModelId": listMaskingPoliciesRequest.sensitiveDataModelId,
      "targetId": listMaskingPoliciesRequest.targetId,
      "timeCreatedGreaterThanOrEqualTo": listMaskingPoliciesRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listMaskingPoliciesRequest.timeCreatedLessThan,
      "compartmentIdInSubtree": listMaskingPoliciesRequest.compartmentIdInSubtree,
      "accessLevel": listMaskingPoliciesRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMaskingPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMaskingPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMaskingPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "maskingPolicyCollection",
        bodyModel: model.MaskingPolicyCollection,
        type: "model.MaskingPolicyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of errors and warnings from a masking policy health check.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMaskingPolicyHealthReportLogsRequest
   * @return ListMaskingPolicyHealthReportLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingPolicyHealthReportLogs.ts.html |here} to see how to use ListMaskingPolicyHealthReportLogs API.
   */
  public async listMaskingPolicyHealthReportLogs(
    listMaskingPolicyHealthReportLogsRequest: requests.ListMaskingPolicyHealthReportLogsRequest
  ): Promise<responses.ListMaskingPolicyHealthReportLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listMaskingPolicyHealthReportLogs.");
    const operationName = "listMaskingPolicyHealthReportLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicyHealthReport/ListMaskingPolicyHealthReportLogs";
    const pathParams = {
      "{maskingPolicyHealthReportId}":
        listMaskingPolicyHealthReportLogsRequest.maskingPolicyHealthReportId
    };

    const queryParams = {
      "limit": listMaskingPolicyHealthReportLogsRequest.limit,
      "page": listMaskingPolicyHealthReportLogsRequest.page,
      "sortOrder": listMaskingPolicyHealthReportLogsRequest.sortOrder,
      "sortBy": listMaskingPolicyHealthReportLogsRequest.sortBy,
      "messageType": listMaskingPolicyHealthReportLogsRequest.messageType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMaskingPolicyHealthReportLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMaskingPolicyHealthReportLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicyHealthReports/{maskingPolicyHealthReportId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMaskingPolicyHealthReportLogsResponse>{},
        body: await response.json(),
        bodyKey: "maskingPolicyHealthReportLogCollection",
        bodyModel: model.MaskingPolicyHealthReportLogCollection,
        type: "model.MaskingPolicyHealthReportLogCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of masking policy health reports based on the specified query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMaskingPolicyHealthReportsRequest
   * @return ListMaskingPolicyHealthReportsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingPolicyHealthReports.ts.html |here} to see how to use ListMaskingPolicyHealthReports API.
   */
  public async listMaskingPolicyHealthReports(
    listMaskingPolicyHealthReportsRequest: requests.ListMaskingPolicyHealthReportsRequest
  ): Promise<responses.ListMaskingPolicyHealthReportsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listMaskingPolicyHealthReports.");
    const operationName = "listMaskingPolicyHealthReports";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicyHealthReport/ListMaskingPolicyHealthReports";
    const pathParams = {};

    const queryParams = {
      "maskingPolicyHealthReportId":
        listMaskingPolicyHealthReportsRequest.maskingPolicyHealthReportId,
      "limit": listMaskingPolicyHealthReportsRequest.limit,
      "page": listMaskingPolicyHealthReportsRequest.page,
      "compartmentId": listMaskingPolicyHealthReportsRequest.compartmentId,
      "compartmentIdInSubtree": listMaskingPolicyHealthReportsRequest.compartmentIdInSubtree,
      "accessLevel": listMaskingPolicyHealthReportsRequest.accessLevel,
      "sortBy": listMaskingPolicyHealthReportsRequest.sortBy,
      "sortOrder": listMaskingPolicyHealthReportsRequest.sortOrder,
      "displayName": listMaskingPolicyHealthReportsRequest.displayName,
      "targetId": listMaskingPolicyHealthReportsRequest.targetId,
      "maskingPolicyId": listMaskingPolicyHealthReportsRequest.maskingPolicyId,
      "lifecycleState": listMaskingPolicyHealthReportsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMaskingPolicyHealthReportsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMaskingPolicyHealthReportsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicyHealthReports",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMaskingPolicyHealthReportsResponse>{},
        body: await response.json(),
        bodyKey: "maskingPolicyHealthReportCollection",
        bodyModel: model.MaskingPolicyHealthReportCollection,
        type: "model.MaskingPolicyHealthReportCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of masking reports based on the specified query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMaskingReportsRequest
   * @return ListMaskingReportsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingReports.ts.html |here} to see how to use ListMaskingReports API.
   */
  public async listMaskingReports(
    listMaskingReportsRequest: requests.ListMaskingReportsRequest
  ): Promise<responses.ListMaskingReportsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listMaskingReports.");
    const operationName = "listMaskingReports";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/ListMaskingReports";
    const pathParams = {};

    const queryParams = {
      "limit": listMaskingReportsRequest.limit,
      "page": listMaskingReportsRequest.page,
      "maskingPolicyId": listMaskingReportsRequest.maskingPolicyId,
      "targetId": listMaskingReportsRequest.targetId,
      "sortOrder": listMaskingReportsRequest.sortOrder,
      "sortBy": listMaskingReportsRequest.sortBy,
      "compartmentId": listMaskingReportsRequest.compartmentId,
      "compartmentIdInSubtree": listMaskingReportsRequest.compartmentIdInSubtree,
      "accessLevel": listMaskingReportsRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMaskingReportsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMaskingReportsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingReports",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMaskingReportsResponse>{},
        body: await response.json(),
        bodyKey: "maskingReportCollection",
        bodyModel: model.MaskingReportCollection,
        type: "model.MaskingReportCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of masking schemas present in the specified masking policy and based on the specified query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMaskingSchemasRequest
   * @return ListMaskingSchemasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingSchemas.ts.html |here} to see how to use ListMaskingSchemas API.
   */
  public async listMaskingSchemas(
    listMaskingSchemasRequest: requests.ListMaskingSchemasRequest
  ): Promise<responses.ListMaskingSchemasResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listMaskingSchemas.");
    const operationName = "listMaskingSchemas";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingSchemaCollection/ListMaskingSchemas";
    const pathParams = {
      "{maskingPolicyId}": listMaskingSchemasRequest.maskingPolicyId
    };

    const queryParams = {
      "limit": listMaskingSchemasRequest.limit,
      "page": listMaskingSchemasRequest.page,
      "sortOrder": listMaskingSchemasRequest.sortOrder,
      "sortBy": listMaskingSchemasRequest.sortBy,
      "schemaName": listMaskingSchemasRequest.schemaName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMaskingSchemasRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMaskingSchemasRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/maskingSchemas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMaskingSchemasResponse>{},
        body: await response.json(),
        bodyKey: "maskingSchemaCollection",
        bodyModel: model.MaskingSchemaCollection,
        type: "model.MaskingSchemaCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of on-premises connectors.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOnPremConnectorsRequest
   * @return ListOnPremConnectorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListOnPremConnectors.ts.html |here} to see how to use ListOnPremConnectors API.
   */
  public async listOnPremConnectors(
    listOnPremConnectorsRequest: requests.ListOnPremConnectorsRequest
  ): Promise<responses.ListOnPremConnectorsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listOnPremConnectors.");
    const operationName = "listOnPremConnectors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnectorSummary/ListOnPremConnectors";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOnPremConnectorsRequest.compartmentId,
      "onPremConnectorId": listOnPremConnectorsRequest.onPremConnectorId,
      "displayName": listOnPremConnectorsRequest.displayName,
      "onPremConnectorLifecycleState": listOnPremConnectorsRequest.onPremConnectorLifecycleState,
      "limit": listOnPremConnectorsRequest.limit,
      "page": listOnPremConnectorsRequest.page,
      "sortOrder": listOnPremConnectorsRequest.sortOrder,
      "sortBy": listOnPremConnectorsRequest.sortBy,
      "compartmentIdInSubtree": listOnPremConnectorsRequest.compartmentIdInSubtree,
      "accessLevel": listOnPremConnectorsRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOnPremConnectorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOnPremConnectorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOnPremConnectorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.OnPremConnectorSummary,
        type: "Array<model.OnPremConnectorSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listOnPremConnectorsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.OnPremConnectorSummary objects
   * contained in responses from the listOnPremConnectors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllOnPremConnectors(
    request: requests.ListOnPremConnectorsRequest
  ): AsyncIterableIterator<model.OnPremConnectorSummary> {
    return paginateRecords(request, req => this.listOnPremConnectors(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listOnPremConnectorsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listOnPremConnectors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllOnPremConnectorsResponses(
    request: requests.ListOnPremConnectorsRequest
  ): AsyncIterableIterator<responses.ListOnPremConnectorsResponse> {
    return paginateResponses(request, req => this.listOnPremConnectors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.OnPremConnectorSummary objects
   * contained in responses from the listOnPremConnectors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listOnPremConnectorsRecordIterator(
    request: requests.ListOnPremConnectorsRequest
  ): AsyncIterableIterator<model.OnPremConnectorSummary> {
    return paginateRecords(request, req => this.listOnPremConnectors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listOnPremConnectors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listOnPremConnectorsResponseIterator(
    request: requests.ListOnPremConnectorsRequest
  ): AsyncIterableIterator<responses.ListOnPremConnectorsResponse> {
    return paginateResponses(request, req => this.listOnPremConnectors(req));
  }

  /**
   * Lists all the peer target databases under the primary target database identified by the OCID passed as path parameter.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPeerTargetDatabasesRequest
   * @return ListPeerTargetDatabasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListPeerTargetDatabases.ts.html |here} to see how to use ListPeerTargetDatabases API.
   */
  public async listPeerTargetDatabases(
    listPeerTargetDatabasesRequest: requests.ListPeerTargetDatabasesRequest
  ): Promise<responses.ListPeerTargetDatabasesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listPeerTargetDatabases.");
    const operationName = "listPeerTargetDatabases";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/PeerTargetDatabase/ListPeerTargetDatabases";
    const pathParams = {
      "{targetDatabaseId}": listPeerTargetDatabasesRequest.targetDatabaseId
    };

    const queryParams = {
      "limit": listPeerTargetDatabasesRequest.limit,
      "page": listPeerTargetDatabasesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": listPeerTargetDatabasesRequest.ifMatch,
      "opc-request-id": listPeerTargetDatabasesRequest.opcRequestId,
      "opc-retry-token": listPeerTargetDatabasesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPeerTargetDatabasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/peerTargetDatabases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPeerTargetDatabasesResponse>{},
        body: await response.json(),
        bodyKey: "peerTargetDatabaseCollection",
        bodyModel: model.PeerTargetDatabaseCollection,
        type: "model.PeerTargetDatabaseCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets a list of aggregated user profile details in the specified compartment. This provides information about the
* overall profiles available. For example, the user profile details include how many users have the profile assigned
* and do how many use password verification function. This data is especially useful content for dashboards or to support analytics.
* <p>
When you perform the ListProfileAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
* parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has INSPECT
* permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
* root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
* compartmentId, then \"Not Authorized\" is returned.
* <p>
The parameter compartmentIdInSubtree applies when you perform ListProfileAnalytics on the compartmentId passed and when it is
* set to true, the entire hierarchy of compartments can be returned.
* <p>
To use ListProfileAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
* set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListProfileAnalyticsRequest
     * @return ListProfileAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListProfileAnalytics.ts.html |here} to see how to use ListProfileAnalytics API.
     */
  public async listProfileAnalytics(
    listProfileAnalyticsRequest: requests.ListProfileAnalyticsRequest
  ): Promise<responses.ListProfileAnalyticsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listProfileAnalytics.");
    const operationName = "listProfileAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Profile/ListProfileAnalytics";
    const pathParams = {
      "{userAssessmentId}": listProfileAnalyticsRequest.userAssessmentId
    };

    const queryParams = {
      "compartmentId": listProfileAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listProfileAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listProfileAnalyticsRequest.accessLevel,
      "targetId": listProfileAnalyticsRequest.targetId,
      "limit": listProfileAnalyticsRequest.limit,
      "page": listProfileAnalyticsRequest.page,
      "profileName": listProfileAnalyticsRequest.profileName,
      "sortBy": listProfileAnalyticsRequest.sortBy,
      "sortOrder": listProfileAnalyticsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProfileAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProfileAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/profileAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProfileAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ProfileAggregation,
        type: "Array<model.ProfileAggregation>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listProfileAnalyticsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ProfileAggregation objects
   * contained in responses from the listProfileAnalytics operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllProfileAnalytics(
    request: requests.ListProfileAnalyticsRequest
  ): AsyncIterableIterator<model.ProfileAggregation> {
    return paginateRecords(request, req => this.listProfileAnalytics(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listProfileAnalyticsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listProfileAnalytics operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllProfileAnalyticsResponses(
    request: requests.ListProfileAnalyticsRequest
  ): AsyncIterableIterator<responses.ListProfileAnalyticsResponse> {
    return paginateResponses(request, req => this.listProfileAnalytics(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ProfileAggregation objects
   * contained in responses from the listProfileAnalytics operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listProfileAnalyticsRecordIterator(
    request: requests.ListProfileAnalyticsRequest
  ): AsyncIterableIterator<model.ProfileAggregation> {
    return paginateRecords(request, req => this.listProfileAnalytics(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listProfileAnalytics operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listProfileAnalyticsResponseIterator(
    request: requests.ListProfileAnalyticsRequest
  ): AsyncIterableIterator<responses.ListProfileAnalyticsResponse> {
    return paginateResponses(request, req => this.listProfileAnalytics(req));
  }

  /**
     * Gets a list of user profiles containing the profile details along with the target id and user counts.
* <p>
The ListProfiles operation returns only the profiles belonging to a certain target. If compartment type user assessment
* id is provided, then profile information for all the targets belonging to the pertaining compartment is returned.
* The list does not include any subcompartments of the compartment under consideration.
* <p>
The parameter 'accessLevel' specifies whether to return only those compartments for which the requestor has
* INSPECT permissions on at least one resource directly or indirectly (ACCESSIBLE) (the resource can be in a
* subcompartment) or to return Not Authorized if Principal doesn't have access to even one of the child compartments.
* This is valid only when 'compartmentIdInSubtree' is set to 'true'.
* <p>
The parameter 'compartmentIdInSubtree' applies when you perform ListUserProfiles on the 'compartmentId' belonging
* to the assessmentId passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment), set the parameter
* 'compartmentIdInSubtree' to true and 'accessLevel' to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListProfileSummariesRequest
     * @return ListProfileSummariesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListProfileSummaries.ts.html |here} to see how to use ListProfileSummaries API.
     */
  public async listProfileSummaries(
    listProfileSummariesRequest: requests.ListProfileSummariesRequest
  ): Promise<responses.ListProfileSummariesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listProfileSummaries.");
    const operationName = "listProfileSummaries";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/ListProfileSummaries";
    const pathParams = {
      "{userAssessmentId}": listProfileSummariesRequest.userAssessmentId
    };

    const queryParams = {
      "compartmentId": listProfileSummariesRequest.compartmentId,
      "compartmentIdInSubtree": listProfileSummariesRequest.compartmentIdInSubtree,
      "accessLevel": listProfileSummariesRequest.accessLevel,
      "targetId": listProfileSummariesRequest.targetId,
      "limit": listProfileSummariesRequest.limit,
      "page": listProfileSummariesRequest.page,
      "profileName": listProfileSummariesRequest.profileName,
      "isUserCreated": listProfileSummariesRequest.isUserCreated,
      "passwordVerificationFunction": listProfileSummariesRequest.passwordVerificationFunction,
      "userCountGreaterThanOrEqual": listProfileSummariesRequest.userCountGreaterThanOrEqual,
      "userCountLessThan": listProfileSummariesRequest.userCountLessThan,
      "failedLoginAttemptsGreaterThanOrEqual":
        listProfileSummariesRequest.failedLoginAttemptsGreaterThanOrEqual,
      "failedLoginAttemptsLessThan": listProfileSummariesRequest.failedLoginAttemptsLessThan,
      "sessionsPerUserGreaterThanOrEqual":
        listProfileSummariesRequest.sessionsPerUserGreaterThanOrEqual,
      "sessionsPerUserLessThan": listProfileSummariesRequest.sessionsPerUserLessThan,
      "inactiveAccountTimeGreaterThanOrEqual":
        listProfileSummariesRequest.inactiveAccountTimeGreaterThanOrEqual,
      "inactiveAccountTimeLessThan": listProfileSummariesRequest.inactiveAccountTimeLessThan,
      "passwordLockTimeGreaterThanOrEqual":
        listProfileSummariesRequest.passwordLockTimeGreaterThanOrEqual,
      "passwordLockTimeLessThan": listProfileSummariesRequest.passwordLockTimeLessThan,
      "sortBy": listProfileSummariesRequest.sortBy,
      "sortOrder": listProfileSummariesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProfileSummariesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProfileSummariesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/profiles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProfileSummariesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ProfileSummary,
        type: "Array<model.ProfileSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listProfileSummariesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ProfileSummary objects
   * contained in responses from the listProfileSummaries operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllProfileSummaries(
    request: requests.ListProfileSummariesRequest
  ): AsyncIterableIterator<model.ProfileSummary> {
    return paginateRecords(request, req => this.listProfileSummaries(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listProfileSummariesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listProfileSummaries operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllProfileSummariesResponses(
    request: requests.ListProfileSummariesRequest
  ): AsyncIterableIterator<responses.ListProfileSummariesResponse> {
    return paginateResponses(request, req => this.listProfileSummaries(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ProfileSummary objects
   * contained in responses from the listProfileSummaries operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listProfileSummariesRecordIterator(
    request: requests.ListProfileSummariesRequest
  ): AsyncIterableIterator<model.ProfileSummary> {
    return paginateRecords(request, req => this.listProfileSummaries(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listProfileSummaries operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listProfileSummariesResponseIterator(
    request: requests.ListProfileSummariesRequest
  ): AsyncIterableIterator<responses.ListProfileSummariesResponse> {
    return paginateResponses(request, req => this.listProfileSummaries(req));
  }

  /**
   * Gets a list of report definitions.
   * The ListReportDefinitions operation returns only the report definitions in the specified `compartmentId`.
   * It also returns the seeded report definitions which are available to all the compartments.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListReportDefinitionsRequest
   * @return ListReportDefinitionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListReportDefinitions.ts.html |here} to see how to use ListReportDefinitions API.
   */
  public async listReportDefinitions(
    listReportDefinitionsRequest: requests.ListReportDefinitionsRequest
  ): Promise<responses.ListReportDefinitionsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listReportDefinitions.");
    const operationName = "listReportDefinitions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/ListReportDefinitions";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listReportDefinitionsRequest.compartmentId,
      "compartmentIdInSubtree": listReportDefinitionsRequest.compartmentIdInSubtree,
      "accessLevel": listReportDefinitionsRequest.accessLevel,
      "displayName": listReportDefinitionsRequest.displayName,
      "limit": listReportDefinitionsRequest.limit,
      "page": listReportDefinitionsRequest.page,
      "sortOrder": listReportDefinitionsRequest.sortOrder,
      "sortBy": listReportDefinitionsRequest.sortBy,
      "isSeeded": listReportDefinitionsRequest.isSeeded,
      "dataSource": listReportDefinitionsRequest.dataSource,
      "lifecycleState": listReportDefinitionsRequest.lifecycleState,
      "category": listReportDefinitionsRequest.category
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listReportDefinitionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listReportDefinitionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reportDefinitions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListReportDefinitionsResponse>{},
        body: await response.json(),
        bodyKey: "reportDefinitionCollection",
        bodyModel: model.ReportDefinitionCollection,
        type: "model.ReportDefinitionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all the reports in the compartment. It contains information such as report generation time.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListReportsRequest
   * @return ListReportsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListReports.ts.html |here} to see how to use ListReports API.
   */
  public async listReports(
    listReportsRequest: requests.ListReportsRequest
  ): Promise<responses.ListReportsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listReports.");
    const operationName = "listReports";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportSummary/ListReports";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listReportsRequest.compartmentId,
      "compartmentIdInSubtree": listReportsRequest.compartmentIdInSubtree,
      "accessLevel": listReportsRequest.accessLevel,
      "displayName": listReportsRequest.displayName,
      "limit": listReportsRequest.limit,
      "page": listReportsRequest.page,
      "sortOrder": listReportsRequest.sortOrder,
      "sortBy": listReportsRequest.sortBy,
      "reportDefinitionId": listReportsRequest.reportDefinitionId,
      "timeGeneratedGreaterThanOrEqualTo": listReportsRequest.timeGeneratedGreaterThanOrEqualTo,
      "timeGeneratedLessThan": listReportsRequest.timeGeneratedLessThan,
      "lifecycleState": listReportsRequest.lifecycleState,
      "type": listReportsRequest.type
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listReportsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listReportsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reports",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListReportsResponse>{},
        body: await response.json(),
        bodyKey: "reportCollection",
        bodyModel: model.ReportCollection,
        type: "model.ReportCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieves a list of all role grant paths for a particular user.
* <p>
The ListRoleGrantPaths operation returns only the role grant paths for the specified security policy report.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRoleGrantPathsRequest
     * @return ListRoleGrantPathsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListRoleGrantPaths.ts.html |here} to see how to use ListRoleGrantPaths API.
     */
  public async listRoleGrantPaths(
    listRoleGrantPathsRequest: requests.ListRoleGrantPathsRequest
  ): Promise<responses.ListRoleGrantPathsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listRoleGrantPaths.");
    const operationName = "listRoleGrantPaths";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/RoleGrantPathCollection/ListRoleGrantPaths";
    const pathParams = {
      "{securityPolicyReportId}": listRoleGrantPathsRequest.securityPolicyReportId
    };

    const queryParams = {
      "limit": listRoleGrantPathsRequest.limit,
      "page": listRoleGrantPathsRequest.page,
      "grantee": listRoleGrantPathsRequest.grantee,
      "grantedRole": listRoleGrantPathsRequest.grantedRole
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRoleGrantPathsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRoleGrantPathsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicyReports/{securityPolicyReportId}/roleGrantPaths",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRoleGrantPathsResponse>{},
        body: await response.json(),
        bodyKey: "roleGrantPathCollection",
        bodyModel: model.RoleGrantPathCollection,
        type: "model.RoleGrantPathCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of role metadata objects.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListRolesRequest
   * @return ListRolesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListRoles.ts.html |here} to see how to use ListRoles API.
   */
  public async listRoles(
    listRolesRequest: requests.ListRolesRequest
  ): Promise<responses.ListRolesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listRoles.");
    const operationName = "listRoles";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/ListRoles";
    const pathParams = {
      "{targetDatabaseId}": listRolesRequest.targetDatabaseId
    };

    const queryParams = {
      "limit": listRolesRequest.limit,
      "page": listRolesRequest.page,
      "roleName": listRolesRequest.roleName,
      "isOracleMaintained": listRolesRequest.isOracleMaintained,
      "authenticationType": listRolesRequest.authenticationType,
      "sortOrder": listRolesRequest.sortOrder,
      "sortBy": listRolesRequest.sortBy,
      "roleNameContains": listRolesRequest.roleNameContains
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRolesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRolesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/roles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRolesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.RoleSummary,
        type: "Array<model.RoleSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listRolesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.RoleSummary objects
   * contained in responses from the listRoles operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRoles(
    request: requests.ListRolesRequest
  ): AsyncIterableIterator<model.RoleSummary> {
    return paginateRecords(request, req => this.listRoles(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listRolesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listRoles operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRolesResponses(
    request: requests.ListRolesRequest
  ): AsyncIterableIterator<responses.ListRolesResponse> {
    return paginateResponses(request, req => this.listRoles(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.RoleSummary objects
   * contained in responses from the listRoles operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listRolesRecordIterator(
    request: requests.ListRolesRequest
  ): AsyncIterableIterator<model.RoleSummary> {
    return paginateRecords(request, req => this.listRoles(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listRoles operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listRolesResponseIterator(
    request: requests.ListRolesRequest
  ): AsyncIterableIterator<responses.ListRolesResponse> {
    return paginateResponses(request, req => this.listRoles(req));
  }

  /**
   * Returns list of schema.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSchemasRequest
   * @return ListSchemasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSchemas.ts.html |here} to see how to use ListSchemas API.
   */
  public async listSchemas(
    listSchemasRequest: requests.ListSchemasRequest
  ): Promise<responses.ListSchemasResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listSchemas.");
    const operationName = "listSchemas";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/ListSchemas";
    const pathParams = {
      "{targetDatabaseId}": listSchemasRequest.targetDatabaseId
    };

    const queryParams = {
      "limit": listSchemasRequest.limit,
      "page": listSchemasRequest.page,
      "schemaName": listSchemasRequest.schemaName,
      "sortOrder": listSchemasRequest.sortOrder,
      "sortBy": listSchemasRequest.sortBy,
      "isOracleMaintained": listSchemasRequest.isOracleMaintained,
      "schemaNameContains": listSchemasRequest.schemaNameContains
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSchemasRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSchemasRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/schemas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSchemasResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SchemaSummary,
        type: "Array<model.SchemaSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSchemasRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SchemaSummary objects
   * contained in responses from the listSchemas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSchemas(
    request: requests.ListSchemasRequest
  ): AsyncIterableIterator<model.SchemaSummary> {
    return paginateRecords(request, req => this.listSchemas(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSchemasResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSchemas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSchemasResponses(
    request: requests.ListSchemasRequest
  ): AsyncIterableIterator<responses.ListSchemasResponse> {
    return paginateResponses(request, req => this.listSchemas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SchemaSummary objects
   * contained in responses from the listSchemas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSchemasRecordIterator(
    request: requests.ListSchemasRequest
  ): AsyncIterableIterator<model.SchemaSummary> {
    return paginateRecords(request, req => this.listSchemas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSchemas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSchemasResponseIterator(
    request: requests.ListSchemasRequest
  ): AsyncIterableIterator<responses.ListSchemasResponse> {
    return paginateResponses(request, req => this.listSchemas(req));
  }

  /**
   * Gets a list of SDM and masking policy difference resources based on the specified query parameters.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSdmMaskingPolicyDifferencesRequest
   * @return ListSdmMaskingPolicyDifferencesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSdmMaskingPolicyDifferences.ts.html |here} to see how to use ListSdmMaskingPolicyDifferences API.
   */
  public async listSdmMaskingPolicyDifferences(
    listSdmMaskingPolicyDifferencesRequest: requests.ListSdmMaskingPolicyDifferencesRequest
  ): Promise<responses.ListSdmMaskingPolicyDifferencesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSdmMaskingPolicyDifferences.");
    const operationName = "listSdmMaskingPolicyDifferences";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/ListSdmMaskingPolicyDifferences";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSdmMaskingPolicyDifferencesRequest.compartmentId,
      "compartmentIdInSubtree": listSdmMaskingPolicyDifferencesRequest.compartmentIdInSubtree,
      "differenceAccessLevel": listSdmMaskingPolicyDifferencesRequest.differenceAccessLevel,
      "displayName": listSdmMaskingPolicyDifferencesRequest.displayName,
      "sensitiveDataModelId": listSdmMaskingPolicyDifferencesRequest.sensitiveDataModelId,
      "lifecycleState": listSdmMaskingPolicyDifferencesRequest.lifecycleState,
      "maskingPolicyId": listSdmMaskingPolicyDifferencesRequest.maskingPolicyId,
      "sortOrder": listSdmMaskingPolicyDifferencesRequest.sortOrder,
      "sortBy": listSdmMaskingPolicyDifferencesRequest.sortBy,
      "limit": listSdmMaskingPolicyDifferencesRequest.limit,
      "page": listSdmMaskingPolicyDifferencesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSdmMaskingPolicyDifferencesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSdmMaskingPolicyDifferencesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sdmMaskingPolicyDifferences",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSdmMaskingPolicyDifferencesResponse>{},
        body: await response.json(),
        bodyKey: "sdmMaskingPolicyDifferenceCollection",
        bodyModel: model.SdmMaskingPolicyDifferenceCollection,
        type: "model.SdmMaskingPolicyDifferenceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets a list of security assessments.
* <p>
The ListSecurityAssessments operation returns only the assessments in the specified `compartmentId`.
* The list does not include any subcompartments of the compartmentId passed.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListSecurityAssessments on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityAssessmentsRequest
     * @return ListSecurityAssessmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityAssessments.ts.html |here} to see how to use ListSecurityAssessments API.
     */
  public async listSecurityAssessments(
    listSecurityAssessmentsRequest: requests.ListSecurityAssessmentsRequest
  ): Promise<responses.ListSecurityAssessmentsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listSecurityAssessments.");
    const operationName = "listSecurityAssessments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessmentSummary/ListSecurityAssessments";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSecurityAssessmentsRequest.compartmentId,
      "compartmentIdInSubtree": listSecurityAssessmentsRequest.compartmentIdInSubtree,
      "accessLevel": listSecurityAssessmentsRequest.accessLevel,
      "displayName": listSecurityAssessmentsRequest.displayName,
      "type": listSecurityAssessmentsRequest.type,
      "scheduleAssessmentId": listSecurityAssessmentsRequest.scheduleAssessmentId,
      "isScheduleAssessment": listSecurityAssessmentsRequest.isScheduleAssessment,
      "triggeredBy": listSecurityAssessmentsRequest.triggeredBy,
      "targetId": listSecurityAssessmentsRequest.targetId,
      "sortOrder": listSecurityAssessmentsRequest.sortOrder,
      "isBaseline": listSecurityAssessmentsRequest.isBaseline,
      "sortBy": listSecurityAssessmentsRequest.sortBy,
      "timeCreatedGreaterThanOrEqualTo":
        listSecurityAssessmentsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listSecurityAssessmentsRequest.timeCreatedLessThan,
      "limit": listSecurityAssessmentsRequest.limit,
      "page": listSecurityAssessmentsRequest.page,
      "lifecycleState": listSecurityAssessmentsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityAssessmentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityAssessmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityAssessmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SecurityAssessmentSummary,
        type: "Array<model.SecurityAssessmentSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAssessmentsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SecurityAssessmentSummary objects
   * contained in responses from the listSecurityAssessments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAssessments(
    request: requests.ListSecurityAssessmentsRequest
  ): AsyncIterableIterator<model.SecurityAssessmentSummary> {
    return paginateRecords(request, req => this.listSecurityAssessments(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAssessmentsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAssessments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAssessmentsResponses(
    request: requests.ListSecurityAssessmentsRequest
  ): AsyncIterableIterator<responses.ListSecurityAssessmentsResponse> {
    return paginateResponses(request, req => this.listSecurityAssessments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SecurityAssessmentSummary objects
   * contained in responses from the listSecurityAssessments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAssessmentsRecordIterator(
    request: requests.ListSecurityAssessmentsRequest
  ): AsyncIterableIterator<model.SecurityAssessmentSummary> {
    return paginateRecords(request, req => this.listSecurityAssessments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAssessments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAssessmentsResponseIterator(
    request: requests.ListSecurityAssessmentsRequest
  ): AsyncIterableIterator<responses.ListSecurityAssessmentsResponse> {
    return paginateResponses(request, req => this.listSecurityAssessments(req));
  }

  /**
     * Gets a list of Database security feature usage aggregated details in the specified compartment. This provides information about the
* overall security controls, by returning the counting number of the target databases using the security features.
* <p>
When you perform the ListSecurityFeatureAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
* parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
* permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
* root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
* compartmentId, then \"Not Authorized\" is returned.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityFeatureAnalyticsRequest
     * @return ListSecurityFeatureAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityFeatureAnalytics.ts.html |here} to see how to use ListSecurityFeatureAnalytics API.
     */
  public async listSecurityFeatureAnalytics(
    listSecurityFeatureAnalyticsRequest: requests.ListSecurityFeatureAnalyticsRequest
  ): Promise<responses.ListSecurityFeatureAnalyticsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSecurityFeatureAnalytics.");
    const operationName = "listSecurityFeatureAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/ListSecurityFeatureAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSecurityFeatureAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listSecurityFeatureAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listSecurityFeatureAnalyticsRequest.accessLevel,
      "targetId": listSecurityFeatureAnalyticsRequest.targetId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityFeatureAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityFeatureAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/securityFeatureAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityFeatureAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "securityFeatureAnalyticsCollection",
        bodyModel: model.SecurityFeatureAnalyticsCollection,
        type: "model.SecurityFeatureAnalyticsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the usage of Database security features for a given compartment or a target level, based on the filters provided.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSecurityFeaturesRequest
   * @return ListSecurityFeaturesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityFeatures.ts.html |here} to see how to use ListSecurityFeatures API.
   */
  public async listSecurityFeatures(
    listSecurityFeaturesRequest: requests.ListSecurityFeaturesRequest
  ): Promise<responses.ListSecurityFeaturesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listSecurityFeatures.");
    const operationName = "listSecurityFeatures";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/ListSecurityFeatures";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSecurityFeaturesRequest.compartmentId,
      "compartmentIdInSubtree": listSecurityFeaturesRequest.compartmentIdInSubtree,
      "accessLevel": listSecurityFeaturesRequest.accessLevel,
      "targetId": listSecurityFeaturesRequest.targetId,
      "targetsWithUnifiedAudit": listSecurityFeaturesRequest.targetsWithUnifiedAudit,
      "targetsWithFineGrainedAudit": listSecurityFeaturesRequest.targetsWithFineGrainedAudit,
      "targetsWithTraditionalAudit": listSecurityFeaturesRequest.targetsWithTraditionalAudit,
      "targetsWithDatabaseVault": listSecurityFeaturesRequest.targetsWithDatabaseVault,
      "targetsWithPrivilegeAnalysis": listSecurityFeaturesRequest.targetsWithPrivilegeAnalysis,
      "targetsWithTablespaceEncryption":
        listSecurityFeaturesRequest.targetsWithTablespaceEncryption,
      "targetsWithColumnEncryption": listSecurityFeaturesRequest.targetsWithColumnEncryption,
      "targetsWithNetworkEncryption": listSecurityFeaturesRequest.targetsWithNetworkEncryption,
      "targetsWithPasswordAuthentication":
        listSecurityFeaturesRequest.targetsWithPasswordAuthentication,
      "targetsWithGlobalAuthentication":
        listSecurityFeaturesRequest.targetsWithGlobalAuthentication,
      "targetsWithExternalAuthentication":
        listSecurityFeaturesRequest.targetsWithExternalAuthentication,
      "limit": listSecurityFeaturesRequest.limit,
      "page": listSecurityFeaturesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityFeaturesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityFeaturesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/securityFeatures",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityFeaturesResponse>{},
        body: await response.json(),
        bodyKey: "securityFeatureCollection",
        bodyModel: model.SecurityFeatureCollection,
        type: "model.SecurityFeatureCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieves a list of all security policies in Data Safe.
* <p>
The ListSecurityPolicies operation returns only the security policies in the specified `compartmentId`.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicies on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityPoliciesRequest
     * @return ListSecurityPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityPolicies.ts.html |here} to see how to use ListSecurityPolicies API.
     */
  public async listSecurityPolicies(
    listSecurityPoliciesRequest: requests.ListSecurityPoliciesRequest
  ): Promise<responses.ListSecurityPoliciesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listSecurityPolicies.");
    const operationName = "listSecurityPolicies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityPolicyCollection/ListSecurityPolicies";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSecurityPoliciesRequest.compartmentId,
      "compartmentIdInSubtree": listSecurityPoliciesRequest.compartmentIdInSubtree,
      "accessLevel": listSecurityPoliciesRequest.accessLevel,
      "displayName": listSecurityPoliciesRequest.displayName,
      "limit": listSecurityPoliciesRequest.limit,
      "page": listSecurityPoliciesRequest.page,
      "lifecycleState": listSecurityPoliciesRequest.lifecycleState,
      "securityPolicyId": listSecurityPoliciesRequest.securityPolicyId,
      "sortOrder": listSecurityPoliciesRequest.sortOrder,
      "sortBy": listSecurityPoliciesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "securityPolicyCollection",
        bodyModel: model.SecurityPolicyCollection,
        type: "model.SecurityPolicyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieves a list of all security policy deployments in Data Safe.
* <p>
The ListSecurityPolicyDeployments operation returns only the security policy deployments in the specified `compartmentId`.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicyDeployments on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityPolicyDeploymentsRequest
     * @return ListSecurityPolicyDeploymentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityPolicyDeployments.ts.html |here} to see how to use ListSecurityPolicyDeployments API.
     */
  public async listSecurityPolicyDeployments(
    listSecurityPolicyDeploymentsRequest: requests.ListSecurityPolicyDeploymentsRequest
  ): Promise<responses.ListSecurityPolicyDeploymentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSecurityPolicyDeployments.");
    const operationName = "listSecurityPolicyDeployments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityPolicyDeploymentCollection/ListSecurityPolicyDeployments";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSecurityPolicyDeploymentsRequest.compartmentId,
      "compartmentIdInSubtree": listSecurityPolicyDeploymentsRequest.compartmentIdInSubtree,
      "accessLevel": listSecurityPolicyDeploymentsRequest.accessLevel,
      "displayName": listSecurityPolicyDeploymentsRequest.displayName,
      "limit": listSecurityPolicyDeploymentsRequest.limit,
      "page": listSecurityPolicyDeploymentsRequest.page,
      "lifecycleState": listSecurityPolicyDeploymentsRequest.lifecycleState,
      "securityPolicyDeploymentId": listSecurityPolicyDeploymentsRequest.securityPolicyDeploymentId,
      "targetId": listSecurityPolicyDeploymentsRequest.targetId,
      "securityPolicyId": listSecurityPolicyDeploymentsRequest.securityPolicyId,
      "sortOrder": listSecurityPolicyDeploymentsRequest.sortOrder,
      "sortBy": listSecurityPolicyDeploymentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityPolicyDeploymentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityPolicyDeploymentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicyDeployments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityPolicyDeploymentsResponse>{},
        body: await response.json(),
        bodyKey: "securityPolicyDeploymentCollection",
        bodyModel: model.SecurityPolicyDeploymentCollection,
        type: "model.SecurityPolicyDeploymentCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieves a list of all security policy entry states in Data Safe.
* <p>
The ListSecurityPolicyEntryStates operation returns only the security policy entry states for the specified security policy entry.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityPolicyEntryStatesRequest
     * @return ListSecurityPolicyEntryStatesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityPolicyEntryStates.ts.html |here} to see how to use ListSecurityPolicyEntryStates API.
     */
  public async listSecurityPolicyEntryStates(
    listSecurityPolicyEntryStatesRequest: requests.ListSecurityPolicyEntryStatesRequest
  ): Promise<responses.ListSecurityPolicyEntryStatesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSecurityPolicyEntryStates.");
    const operationName = "listSecurityPolicyEntryStates";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityPolicyEntryStateCollection/ListSecurityPolicyEntryStates";
    const pathParams = {
      "{securityPolicyDeploymentId}":
        listSecurityPolicyEntryStatesRequest.securityPolicyDeploymentId
    };

    const queryParams = {
      "limit": listSecurityPolicyEntryStatesRequest.limit,
      "page": listSecurityPolicyEntryStatesRequest.page,
      "deploymentStatus": listSecurityPolicyEntryStatesRequest.deploymentStatus,
      "securityPolicyEntryId": listSecurityPolicyEntryStatesRequest.securityPolicyEntryId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityPolicyEntryStatesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityPolicyEntryStatesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicyDeployments/{securityPolicyDeploymentId}/securityPolicyEntryStates",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityPolicyEntryStatesResponse>{},
        body: await response.json(),
        bodyKey: "securityPolicyEntryStateCollection",
        bodyModel: model.SecurityPolicyEntryStateCollection,
        type: "model.SecurityPolicyEntryStateCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieves a list of all security policy reports in Data Safe.
* <p>
The ListSecurityPolicyReports operation returns only the security policy reports in the specified `compartmentId`.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicyReports on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityPolicyReportsRequest
     * @return ListSecurityPolicyReportsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityPolicyReports.ts.html |here} to see how to use ListSecurityPolicyReports API.
     */
  public async listSecurityPolicyReports(
    listSecurityPolicyReportsRequest: requests.ListSecurityPolicyReportsRequest
  ): Promise<responses.ListSecurityPolicyReportsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSecurityPolicyReports.");
    const operationName = "listSecurityPolicyReports";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityPolicyReportCollection/ListSecurityPolicyReports";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSecurityPolicyReportsRequest.compartmentId,
      "compartmentIdInSubtree": listSecurityPolicyReportsRequest.compartmentIdInSubtree,
      "accessLevel": listSecurityPolicyReportsRequest.accessLevel,
      "displayName": listSecurityPolicyReportsRequest.displayName,
      "limit": listSecurityPolicyReportsRequest.limit,
      "page": listSecurityPolicyReportsRequest.page,
      "lifecycleState": listSecurityPolicyReportsRequest.lifecycleState,
      "securityPolicyReportId": listSecurityPolicyReportsRequest.securityPolicyReportId,
      "targetId": listSecurityPolicyReportsRequest.targetId,
      "sortOrder": listSecurityPolicyReportsRequest.sortOrder,
      "sortBy": listSecurityPolicyReportsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityPolicyReportsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityPolicyReportsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicyReports",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityPolicyReportsResponse>{},
        body: await response.json(),
        bodyKey: "securityPolicyReportCollection",
        bodyModel: model.SecurityPolicyReportCollection,
        type: "model.SecurityPolicyReportCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of sensitive columns present in the specified sensitive data model based on the specified query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSensitiveColumnsRequest
   * @return ListSensitiveColumnsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveColumns.ts.html |here} to see how to use ListSensitiveColumns API.
   */
  public async listSensitiveColumns(
    listSensitiveColumnsRequest: requests.ListSensitiveColumnsRequest
  ): Promise<responses.ListSensitiveColumnsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listSensitiveColumns.");
    const operationName = "listSensitiveColumns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveColumn/ListSensitiveColumns";
    const pathParams = {
      "{sensitiveDataModelId}": listSensitiveColumnsRequest.sensitiveDataModelId
    };

    const queryParams = {
      "timeCreatedGreaterThanOrEqualTo":
        listSensitiveColumnsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listSensitiveColumnsRequest.timeCreatedLessThan,
      "timeUpdatedGreaterThanOrEqualTo":
        listSensitiveColumnsRequest.timeUpdatedGreaterThanOrEqualTo,
      "timeUpdatedLessThan": listSensitiveColumnsRequest.timeUpdatedLessThan,
      "sensitiveColumnLifecycleState": listSensitiveColumnsRequest.sensitiveColumnLifecycleState,
      "schemaName": listSensitiveColumnsRequest.schemaName,
      "objectName": listSensitiveColumnsRequest.objectName,
      "columnName": listSensitiveColumnsRequest.columnName,
      "objectType": listSensitiveColumnsRequest.objectType,
      "dataType": listSensitiveColumnsRequest.dataType,
      "status": listSensitiveColumnsRequest.status,
      "sensitiveTypeId": listSensitiveColumnsRequest.sensitiveTypeId,
      "parentColumnKey": listSensitiveColumnsRequest.parentColumnKey,
      "relationType": listSensitiveColumnsRequest.relationType,
      "columnGroup": listSensitiveColumnsRequest.columnGroup,
      "limit": listSensitiveColumnsRequest.limit,
      "page": listSensitiveColumnsRequest.page,
      "sortOrder": listSensitiveColumnsRequest.sortOrder,
      "sortBy": listSensitiveColumnsRequest.sortBy,
      "isCaseInSensitive": listSensitiveColumnsRequest.isCaseInSensitive
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSensitiveColumnsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSensitiveColumnsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSensitiveColumnsResponse>{},
        body: await response.json(),
        bodyKey: "sensitiveColumnCollection",
        bodyModel: model.SensitiveColumnCollection,
        type: "model.SensitiveColumnCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of sensitive type Ids present in the specified sensitive data model.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSensitiveDataModelSensitiveTypesRequest
   * @return ListSensitiveDataModelSensitiveTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveDataModelSensitiveTypes.ts.html |here} to see how to use ListSensitiveDataModelSensitiveTypes API.
   */
  public async listSensitiveDataModelSensitiveTypes(
    listSensitiveDataModelSensitiveTypesRequest: requests.ListSensitiveDataModelSensitiveTypesRequest
  ): Promise<responses.ListSensitiveDataModelSensitiveTypesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSensitiveDataModelSensitiveTypes.");
    const operationName = "listSensitiveDataModelSensitiveTypes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModelSensitiveTypeCollection/ListSensitiveDataModelSensitiveTypes";
    const pathParams = {
      "{sensitiveDataModelId}": listSensitiveDataModelSensitiveTypesRequest.sensitiveDataModelId
    };

    const queryParams = {
      "sensitiveTypeId": listSensitiveDataModelSensitiveTypesRequest.sensitiveTypeId,
      "sortBy": listSensitiveDataModelSensitiveTypesRequest.sortBy,
      "sortOrder": listSensitiveDataModelSensitiveTypesRequest.sortOrder,
      "limit": listSensitiveDataModelSensitiveTypesRequest.limit,
      "page": listSensitiveDataModelSensitiveTypesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSensitiveDataModelSensitiveTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSensitiveDataModelSensitiveTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSensitiveDataModelSensitiveTypesResponse>{},
        body: await response.json(),
        bodyKey: "sensitiveDataModelSensitiveTypeCollection",
        bodyModel: model.SensitiveDataModelSensitiveTypeCollection,
        type: "model.SensitiveDataModelSensitiveTypeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of sensitive data models based on the specified query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSensitiveDataModelsRequest
   * @return ListSensitiveDataModelsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveDataModels.ts.html |here} to see how to use ListSensitiveDataModels API.
   */
  public async listSensitiveDataModels(
    listSensitiveDataModelsRequest: requests.ListSensitiveDataModelsRequest
  ): Promise<responses.ListSensitiveDataModelsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listSensitiveDataModels.");
    const operationName = "listSensitiveDataModels";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/ListSensitiveDataModels";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSensitiveDataModelsRequest.compartmentId,
      "compartmentIdInSubtree": listSensitiveDataModelsRequest.compartmentIdInSubtree,
      "accessLevel": listSensitiveDataModelsRequest.accessLevel,
      "displayName": listSensitiveDataModelsRequest.displayName,
      "sensitiveDataModelId": listSensitiveDataModelsRequest.sensitiveDataModelId,
      "timeCreatedGreaterThanOrEqualTo":
        listSensitiveDataModelsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listSensitiveDataModelsRequest.timeCreatedLessThan,
      "targetId": listSensitiveDataModelsRequest.targetId,
      "sortOrder": listSensitiveDataModelsRequest.sortOrder,
      "sortBy": listSensitiveDataModelsRequest.sortBy,
      "limit": listSensitiveDataModelsRequest.limit,
      "page": listSensitiveDataModelsRequest.page,
      "lifecycleState": listSensitiveDataModelsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSensitiveDataModelsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSensitiveDataModelsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSensitiveDataModelsResponse>{},
        body: await response.json(),
        bodyKey: "sensitiveDataModelCollection",
        bodyModel: model.SensitiveDataModelCollection,
        type: "model.SensitiveDataModelCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of sensitive objects present in the specified sensitive data model based on the specified query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSensitiveObjectsRequest
   * @return ListSensitiveObjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveObjects.ts.html |here} to see how to use ListSensitiveObjects API.
   */
  public async listSensitiveObjects(
    listSensitiveObjectsRequest: requests.ListSensitiveObjectsRequest
  ): Promise<responses.ListSensitiveObjectsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listSensitiveObjects.");
    const operationName = "listSensitiveObjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveObjectCollection/ListSensitiveObjects";
    const pathParams = {
      "{sensitiveDataModelId}": listSensitiveObjectsRequest.sensitiveDataModelId
    };

    const queryParams = {
      "schemaName": listSensitiveObjectsRequest.schemaName,
      "objectName": listSensitiveObjectsRequest.objectName,
      "objectType": listSensitiveObjectsRequest.objectType,
      "limit": listSensitiveObjectsRequest.limit,
      "page": listSensitiveObjectsRequest.page,
      "sortOrder": listSensitiveObjectsRequest.sortOrder,
      "sortBy": listSensitiveObjectsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSensitiveObjectsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSensitiveObjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveObjects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSensitiveObjectsResponse>{},
        body: await response.json(),
        bodyKey: "sensitiveObjectCollection",
        bodyModel: model.SensitiveObjectCollection,
        type: "model.SensitiveObjectCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of sensitive schemas present in the specified sensitive data model based on the specified query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSensitiveSchemasRequest
   * @return ListSensitiveSchemasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveSchemas.ts.html |here} to see how to use ListSensitiveSchemas API.
   */
  public async listSensitiveSchemas(
    listSensitiveSchemasRequest: requests.ListSensitiveSchemasRequest
  ): Promise<responses.ListSensitiveSchemasResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listSensitiveSchemas.");
    const operationName = "listSensitiveSchemas";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveSchemaCollection/ListSensitiveSchemas";
    const pathParams = {
      "{sensitiveDataModelId}": listSensitiveSchemasRequest.sensitiveDataModelId
    };

    const queryParams = {
      "schemaName": listSensitiveSchemasRequest.schemaName,
      "limit": listSensitiveSchemasRequest.limit,
      "page": listSensitiveSchemasRequest.page,
      "sortOrder": listSensitiveSchemasRequest.sortOrder,
      "sortBy": listSensitiveSchemasRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSensitiveSchemasRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSensitiveSchemasRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveSchemas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSensitiveSchemasResponse>{},
        body: await response.json(),
        bodyKey: "sensitiveSchemaCollection",
        bodyModel: model.SensitiveSchemaCollection,
        type: "model.SensitiveSchemaCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of sensitive types based on the specified query parameters.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSensitiveTypesRequest
   * @return ListSensitiveTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveTypes.ts.html |here} to see how to use ListSensitiveTypes API.
   */
  public async listSensitiveTypes(
    listSensitiveTypesRequest: requests.ListSensitiveTypesRequest
  ): Promise<responses.ListSensitiveTypesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listSensitiveTypes.");
    const operationName = "listSensitiveTypes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveType/ListSensitiveTypes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSensitiveTypesRequest.compartmentId,
      "compartmentIdInSubtree": listSensitiveTypesRequest.compartmentIdInSubtree,
      "accessLevel": listSensitiveTypesRequest.accessLevel,
      "displayName": listSensitiveTypesRequest.displayName,
      "sensitiveTypeId": listSensitiveTypesRequest.sensitiveTypeId,
      "sensitiveTypeSource": listSensitiveTypesRequest.sensitiveTypeSource,
      "entityType": listSensitiveTypesRequest.entityType,
      "parentCategoryId": listSensitiveTypesRequest.parentCategoryId,
      "defaultMaskingFormatId": listSensitiveTypesRequest.defaultMaskingFormatId,
      "timeCreatedGreaterThanOrEqualTo": listSensitiveTypesRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listSensitiveTypesRequest.timeCreatedLessThan,
      "sortOrder": listSensitiveTypesRequest.sortOrder,
      "sortBy": listSensitiveTypesRequest.sortBy,
      "limit": listSensitiveTypesRequest.limit,
      "page": listSensitiveTypesRequest.page,
      "lifecycleState": listSensitiveTypesRequest.lifecycleState,
      "isCommon": listSensitiveTypesRequest.isCommon
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSensitiveTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSensitiveTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSensitiveTypesResponse>{},
        body: await response.json(),
        bodyKey: "sensitiveTypeCollection",
        bodyModel: model.SensitiveTypeCollection,
        type: "model.SensitiveTypeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieves a list of all SQL collection analytics in Data Safe.
* <p>
The ListSqlCollectionAnalytics operation returns only the analytics for the SQL collections in the specified `compartmentId`.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListSqlCollections on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlCollectionAnalyticsRequest
     * @return ListSqlCollectionAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlCollectionAnalytics.ts.html |here} to see how to use ListSqlCollectionAnalytics API.
     */
  public async listSqlCollectionAnalytics(
    listSqlCollectionAnalyticsRequest: requests.ListSqlCollectionAnalyticsRequest
  ): Promise<responses.ListSqlCollectionAnalyticsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSqlCollectionAnalytics.");
    const operationName = "listSqlCollectionAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlCollectionAnalyticsCollection/ListSqlCollectionAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSqlCollectionAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listSqlCollectionAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listSqlCollectionAnalyticsRequest.accessLevel,
      "limit": listSqlCollectionAnalyticsRequest.limit,
      "page": listSqlCollectionAnalyticsRequest.page,
      "lifecycleState": listSqlCollectionAnalyticsRequest.lifecycleState,
      "targetId": listSqlCollectionAnalyticsRequest.targetId,
      "groupBy": listSqlCollectionAnalyticsRequest.groupBy,
      "timeStarted": listSqlCollectionAnalyticsRequest.timeStarted,
      "timeEnded": listSqlCollectionAnalyticsRequest.timeEnded
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlCollectionAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSqlCollectionAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollectionAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlCollectionAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "sqlCollectionAnalyticsCollection",
        bodyModel: model.SqlCollectionAnalyticsCollection,
        type: "model.SqlCollectionAnalyticsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of the SQL collection log analytics.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSqlCollectionLogInsightsRequest
   * @return ListSqlCollectionLogInsightsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlCollectionLogInsights.ts.html |here} to see how to use ListSqlCollectionLogInsights API.
   */
  public async listSqlCollectionLogInsights(
    listSqlCollectionLogInsightsRequest: requests.ListSqlCollectionLogInsightsRequest
  ): Promise<responses.ListSqlCollectionLogInsightsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSqlCollectionLogInsights.");
    const operationName = "listSqlCollectionLogInsights";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlCollectionLogInsightsCollection/ListSqlCollectionLogInsights";
    const pathParams = {
      "{sqlCollectionId}": listSqlCollectionLogInsightsRequest.sqlCollectionId
    };

    const queryParams = {
      "limit": listSqlCollectionLogInsightsRequest.limit,
      "page": listSqlCollectionLogInsightsRequest.page,
      "timeStarted": listSqlCollectionLogInsightsRequest.timeStarted,
      "timeEnded": listSqlCollectionLogInsightsRequest.timeEnded,
      "groupBy": listSqlCollectionLogInsightsRequest.groupBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlCollectionLogInsightsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSqlCollectionLogInsightsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollections/{sqlCollectionId}/logInsights",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlCollectionLogInsightsResponse>{},
        body: await response.json(),
        bodyKey: "sqlCollectionLogInsightsCollection",
        bodyModel: model.SqlCollectionLogInsightsCollection,
        type: "model.SqlCollectionLogInsightsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieves a list of all SQL collections in Data Safe.
* <p>
The ListSqlCollections operation returns only the SQL collections in the specified `compartmentId`.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListSqlCollections on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlCollectionsRequest
     * @return ListSqlCollectionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlCollections.ts.html |here} to see how to use ListSqlCollections API.
     */
  public async listSqlCollections(
    listSqlCollectionsRequest: requests.ListSqlCollectionsRequest
  ): Promise<responses.ListSqlCollectionsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listSqlCollections.");
    const operationName = "listSqlCollections";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlCollectionCollection/ListSqlCollections";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSqlCollectionsRequest.compartmentId,
      "compartmentIdInSubtree": listSqlCollectionsRequest.compartmentIdInSubtree,
      "accessLevel": listSqlCollectionsRequest.accessLevel,
      "displayName": listSqlCollectionsRequest.displayName,
      "limit": listSqlCollectionsRequest.limit,
      "page": listSqlCollectionsRequest.page,
      "lifecycleState": listSqlCollectionsRequest.lifecycleState,
      "sqlCollectionId": listSqlCollectionsRequest.sqlCollectionId,
      "timeCreatedGreaterThanOrEqualTo": listSqlCollectionsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listSqlCollectionsRequest.timeCreatedLessThan,
      "targetId": listSqlCollectionsRequest.targetId,
      "dbUserName": listSqlCollectionsRequest.dbUserName,
      "sortOrder": listSqlCollectionsRequest.sortOrder,
      "sortBy": listSqlCollectionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlCollectionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSqlCollectionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlCollectionsResponse>{},
        body: await response.json(),
        bodyKey: "sqlCollectionCollection",
        bodyModel: model.SqlCollectionCollection,
        type: "model.SqlCollectionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns the aggregation details of all SQL Firewall allowed SQL statements.
* <p>
The ListSqlFirewallAllowedSqlAnalytics operation returns the aggregates of the SQL Firewall allowed SQL statements in the specified `compartmentId`.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallAllowedSqlAnalytics on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlFirewallAllowedSqlAnalyticsRequest
     * @return ListSqlFirewallAllowedSqlAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlFirewallAllowedSqlAnalytics.ts.html |here} to see how to use ListSqlFirewallAllowedSqlAnalytics API.
     */
  public async listSqlFirewallAllowedSqlAnalytics(
    listSqlFirewallAllowedSqlAnalyticsRequest: requests.ListSqlFirewallAllowedSqlAnalyticsRequest
  ): Promise<responses.ListSqlFirewallAllowedSqlAnalyticsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSqlFirewallAllowedSqlAnalytics.");
    const operationName = "listSqlFirewallAllowedSqlAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlFirewallAllowedSqlAnalyticsCollection/ListSqlFirewallAllowedSqlAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSqlFirewallAllowedSqlAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listSqlFirewallAllowedSqlAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listSqlFirewallAllowedSqlAnalyticsRequest.accessLevel,
      "limit": listSqlFirewallAllowedSqlAnalyticsRequest.limit,
      "page": listSqlFirewallAllowedSqlAnalyticsRequest.page,
      "scimQuery": listSqlFirewallAllowedSqlAnalyticsRequest.scimQuery,
      "groupBy": listSqlFirewallAllowedSqlAnalyticsRequest.groupBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlFirewallAllowedSqlAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSqlFirewallAllowedSqlAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlFirewallAllowedSqlAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlFirewallAllowedSqlAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "sqlFirewallAllowedSqlAnalyticsCollection",
        bodyModel: model.SqlFirewallAllowedSqlAnalyticsCollection,
        type: "model.SqlFirewallAllowedSqlAnalyticsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieves a list of all SQL Firewall allowed SQL statements.
* <p>
The ListSqlFirewallAllowedSqls operation returns only the SQL Firewall allowed SQL statements in the specified `compartmentId`.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallPolicies on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlFirewallAllowedSqlsRequest
     * @return ListSqlFirewallAllowedSqlsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlFirewallAllowedSqls.ts.html |here} to see how to use ListSqlFirewallAllowedSqls API.
     */
  public async listSqlFirewallAllowedSqls(
    listSqlFirewallAllowedSqlsRequest: requests.ListSqlFirewallAllowedSqlsRequest
  ): Promise<responses.ListSqlFirewallAllowedSqlsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSqlFirewallAllowedSqls.");
    const operationName = "listSqlFirewallAllowedSqls";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlFirewallAllowedSqlCollection/ListSqlFirewallAllowedSqls";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSqlFirewallAllowedSqlsRequest.compartmentId,
      "compartmentIdInSubtree": listSqlFirewallAllowedSqlsRequest.compartmentIdInSubtree,
      "accessLevel": listSqlFirewallAllowedSqlsRequest.accessLevel,
      "limit": listSqlFirewallAllowedSqlsRequest.limit,
      "page": listSqlFirewallAllowedSqlsRequest.page,
      "scimQuery": listSqlFirewallAllowedSqlsRequest.scimQuery,
      "sortOrder": listSqlFirewallAllowedSqlsRequest.sortOrder,
      "sortBy": listSqlFirewallAllowedSqlsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlFirewallAllowedSqlsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSqlFirewallAllowedSqlsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlFirewallAllowedSqls",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlFirewallAllowedSqlsResponse>{},
        body: await response.json(),
        bodyKey: "sqlFirewallAllowedSqlCollection",
        bodyModel: model.SqlFirewallAllowedSqlCollection,
        type: "model.SqlFirewallAllowedSqlCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Retrieves a list of all SQL Firewall policies.
* <p>
The ListSqlFirewallPolicies operation returns only the SQL Firewall policies in the specified `compartmentId`.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallPolicies on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlFirewallPoliciesRequest
     * @return ListSqlFirewallPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlFirewallPolicies.ts.html |here} to see how to use ListSqlFirewallPolicies API.
     */
  public async listSqlFirewallPolicies(
    listSqlFirewallPoliciesRequest: requests.ListSqlFirewallPoliciesRequest
  ): Promise<responses.ListSqlFirewallPoliciesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listSqlFirewallPolicies.");
    const operationName = "listSqlFirewallPolicies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlFirewallPolicyCollection/ListSqlFirewallPolicies";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSqlFirewallPoliciesRequest.compartmentId,
      "compartmentIdInSubtree": listSqlFirewallPoliciesRequest.compartmentIdInSubtree,
      "accessLevel": listSqlFirewallPoliciesRequest.accessLevel,
      "displayName": listSqlFirewallPoliciesRequest.displayName,
      "limit": listSqlFirewallPoliciesRequest.limit,
      "page": listSqlFirewallPoliciesRequest.page,
      "securityPolicyId": listSqlFirewallPoliciesRequest.securityPolicyId,
      "lifecycleState": listSqlFirewallPoliciesRequest.lifecycleState,
      "sqlFirewallPolicyId": listSqlFirewallPoliciesRequest.sqlFirewallPolicyId,
      "dbUserName": listSqlFirewallPoliciesRequest.dbUserName,
      "violationAction": listSqlFirewallPoliciesRequest.violationAction,
      "timeCreatedGreaterThanOrEqualTo":
        listSqlFirewallPoliciesRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listSqlFirewallPoliciesRequest.timeCreatedLessThan,
      "sortOrder": listSqlFirewallPoliciesRequest.sortOrder,
      "sortBy": listSqlFirewallPoliciesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlFirewallPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSqlFirewallPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlFirewallPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlFirewallPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "sqlFirewallPolicyCollection",
        bodyModel: model.SqlFirewallPolicyCollection,
        type: "model.SqlFirewallPolicyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets a list of aggregated SQL Firewall policy details.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform SummarizedSqlFirewallPolicyInfo on the specified
* `compartmentId` and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlFirewallPolicyAnalyticsRequest
     * @return ListSqlFirewallPolicyAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlFirewallPolicyAnalytics.ts.html |here} to see how to use ListSqlFirewallPolicyAnalytics API.
     */
  public async listSqlFirewallPolicyAnalytics(
    listSqlFirewallPolicyAnalyticsRequest: requests.ListSqlFirewallPolicyAnalyticsRequest
  ): Promise<responses.ListSqlFirewallPolicyAnalyticsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSqlFirewallPolicyAnalytics.");
    const operationName = "listSqlFirewallPolicyAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlFirewallPolicyAnalyticsCollection/ListSqlFirewallPolicyAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSqlFirewallPolicyAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listSqlFirewallPolicyAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listSqlFirewallPolicyAnalyticsRequest.accessLevel,
      "limit": listSqlFirewallPolicyAnalyticsRequest.limit,
      "page": listSqlFirewallPolicyAnalyticsRequest.page,
      "groupBy": listSqlFirewallPolicyAnalyticsRequest.groupBy,
      "lifecycleState": listSqlFirewallPolicyAnalyticsRequest.lifecycleState,
      "securityPolicyId": listSqlFirewallPolicyAnalyticsRequest.securityPolicyId,
      "timeStarted": listSqlFirewallPolicyAnalyticsRequest.timeStarted,
      "timeEnded": listSqlFirewallPolicyAnalyticsRequest.timeEnded
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlFirewallPolicyAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSqlFirewallPolicyAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlFirewallPolicyAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlFirewallPolicyAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "sqlFirewallPolicyAnalyticsCollection",
        bodyModel: model.SqlFirewallPolicyAnalyticsCollection,
        type: "model.SqlFirewallPolicyAnalyticsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the aggregation details of the SQL Firewall violations.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSqlFirewallViolationAnalyticsRequest
   * @return ListSqlFirewallViolationAnalyticsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlFirewallViolationAnalytics.ts.html |here} to see how to use ListSqlFirewallViolationAnalytics API.
   */
  public async listSqlFirewallViolationAnalytics(
    listSqlFirewallViolationAnalyticsRequest: requests.ListSqlFirewallViolationAnalyticsRequest
  ): Promise<responses.ListSqlFirewallViolationAnalyticsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSqlFirewallViolationAnalytics.");
    const operationName = "listSqlFirewallViolationAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlFirewallViolationSummary/ListSqlFirewallViolationAnalytics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSqlFirewallViolationAnalyticsRequest.compartmentId,
      "compartmentIdInSubtree": listSqlFirewallViolationAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listSqlFirewallViolationAnalyticsRequest.accessLevel,
      "limit": listSqlFirewallViolationAnalyticsRequest.limit,
      "page": listSqlFirewallViolationAnalyticsRequest.page,
      "timeStarted": listSqlFirewallViolationAnalyticsRequest.timeStarted,
      "timeEnded": listSqlFirewallViolationAnalyticsRequest.timeEnded,
      "queryTimeZone": listSqlFirewallViolationAnalyticsRequest.queryTimeZone,
      "sortOrder": listSqlFirewallViolationAnalyticsRequest.sortOrder,
      "sortBy": listSqlFirewallViolationAnalyticsRequest.sortBy,
      "scimQuery": listSqlFirewallViolationAnalyticsRequest.scimQuery,
      "summaryField": listSqlFirewallViolationAnalyticsRequest.summaryField,
      "groupBy": listSqlFirewallViolationAnalyticsRequest.groupBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlFirewallViolationAnalyticsRequest.opcRequestId,
      "opc-retry-token": listSqlFirewallViolationAnalyticsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSqlFirewallViolationAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlFirewallViolationAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlFirewallViolationAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "sqlFirewallViolationAnalyticsCollection",
        bodyModel: model.SqlFirewallViolationAnalyticsCollection,
        type: "model.SqlFirewallViolationAnalyticsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all the SQL Firewall violations captured by the firewall.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSqlFirewallViolationsRequest
   * @return ListSqlFirewallViolationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlFirewallViolations.ts.html |here} to see how to use ListSqlFirewallViolations API.
   */
  public async listSqlFirewallViolations(
    listSqlFirewallViolationsRequest: requests.ListSqlFirewallViolationsRequest
  ): Promise<responses.ListSqlFirewallViolationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listSqlFirewallViolations.");
    const operationName = "listSqlFirewallViolations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlFirewallViolationSummary/ListSqlFirewallViolations";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSqlFirewallViolationsRequest.compartmentId,
      "compartmentIdInSubtree": listSqlFirewallViolationsRequest.compartmentIdInSubtree,
      "limit": listSqlFirewallViolationsRequest.limit,
      "page": listSqlFirewallViolationsRequest.page,
      "accessLevel": listSqlFirewallViolationsRequest.accessLevel,
      "sortOrder": listSqlFirewallViolationsRequest.sortOrder,
      "sortBy": listSqlFirewallViolationsRequest.sortBy,
      "scimQuery": listSqlFirewallViolationsRequest.scimQuery
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlFirewallViolationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSqlFirewallViolationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlFirewallViolations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlFirewallViolationsResponse>{},
        body: await response.json(),
        bodyKey: "sqlFirewallViolationsCollection",
        bodyModel: model.SqlFirewallViolationsCollection,
        type: "model.SqlFirewallViolationsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of table metadata objects.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTablesRequest
   * @return ListTablesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListTables.ts.html |here} to see how to use ListTables API.
   */
  public async listTables(
    listTablesRequest: requests.ListTablesRequest
  ): Promise<responses.ListTablesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listTables.");
    const operationName = "listTables";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/ListTables";
    const pathParams = {
      "{targetDatabaseId}": listTablesRequest.targetDatabaseId
    };

    const queryParams = {
      "limit": listTablesRequest.limit,
      "page": listTablesRequest.page,
      "schemaName": listTablesRequest.schemaName,
      "tableName": listTablesRequest.tableName,
      "sortOrder": listTablesRequest.sortOrder,
      "sortBy": listTablesRequest.sortBy,
      "tableNameContains": listTablesRequest.tableNameContains,
      "schemaNameContains": listTablesRequest.schemaNameContains
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTablesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTablesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/tables",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTablesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.TableSummary,
        type: "Array<model.TableSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listTablesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.TableSummary objects
   * contained in responses from the listTables operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTables(
    request: requests.ListTablesRequest
  ): AsyncIterableIterator<model.TableSummary> {
    return paginateRecords(request, req => this.listTables(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listTablesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listTables operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTablesResponses(
    request: requests.ListTablesRequest
  ): AsyncIterableIterator<responses.ListTablesResponse> {
    return paginateResponses(request, req => this.listTables(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.TableSummary objects
   * contained in responses from the listTables operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listTablesRecordIterator(
    request: requests.ListTablesRequest
  ): AsyncIterableIterator<model.TableSummary> {
    return paginateRecords(request, req => this.listTables(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listTables operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listTablesResponseIterator(
    request: requests.ListTablesRequest
  ): AsyncIterableIterator<responses.ListTablesResponse> {
    return paginateResponses(request, req => this.listTables(req));
  }

  /**
   * Gets a list of all target-alert policy associations.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTargetAlertPolicyAssociationsRequest
   * @return ListTargetAlertPolicyAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListTargetAlertPolicyAssociations.ts.html |here} to see how to use ListTargetAlertPolicyAssociations API.
   */
  public async listTargetAlertPolicyAssociations(
    listTargetAlertPolicyAssociationsRequest: requests.ListTargetAlertPolicyAssociationsRequest
  ): Promise<responses.ListTargetAlertPolicyAssociationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listTargetAlertPolicyAssociations.");
    const operationName = "listTargetAlertPolicyAssociations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociationSummary/ListTargetAlertPolicyAssociations";
    const pathParams = {};

    const queryParams = {
      "targetAlertPolicyAssociationId":
        listTargetAlertPolicyAssociationsRequest.targetAlertPolicyAssociationId,
      "alertPolicyId": listTargetAlertPolicyAssociationsRequest.alertPolicyId,
      "targetId": listTargetAlertPolicyAssociationsRequest.targetId,
      "compartmentId": listTargetAlertPolicyAssociationsRequest.compartmentId,
      "lifecycleState": listTargetAlertPolicyAssociationsRequest.lifecycleState,
      "limit": listTargetAlertPolicyAssociationsRequest.limit,
      "page": listTargetAlertPolicyAssociationsRequest.page,
      "sortOrder": listTargetAlertPolicyAssociationsRequest.sortOrder,
      "sortBy": listTargetAlertPolicyAssociationsRequest.sortBy,
      "timeCreatedGreaterThanOrEqualTo":
        listTargetAlertPolicyAssociationsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listTargetAlertPolicyAssociationsRequest.timeCreatedLessThan,
      "compartmentIdInSubtree": listTargetAlertPolicyAssociationsRequest.compartmentIdInSubtree,
      "accessLevel": listTargetAlertPolicyAssociationsRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTargetAlertPolicyAssociationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTargetAlertPolicyAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetAlertPolicyAssociations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTargetAlertPolicyAssociationsResponse>{},
        body: await response.json(),
        bodyKey: "targetAlertPolicyAssociationCollection",
        bodyModel: model.TargetAlertPolicyAssociationCollection,
        type: "model.TargetAlertPolicyAssociationCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the list of registered target databases in Data Safe.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTargetDatabasesRequest
   * @return ListTargetDatabasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListTargetDatabases.ts.html |here} to see how to use ListTargetDatabases API.
   */
  public async listTargetDatabases(
    listTargetDatabasesRequest: requests.ListTargetDatabasesRequest
  ): Promise<responses.ListTargetDatabasesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listTargetDatabases.");
    const operationName = "listTargetDatabases";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabaseSummary/ListTargetDatabases";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listTargetDatabasesRequest.compartmentId,
      "associatedResourceId": listTargetDatabasesRequest.associatedResourceId,
      "targetDatabaseId": listTargetDatabasesRequest.targetDatabaseId,
      "displayName": listTargetDatabasesRequest.displayName,
      "lifecycleState": listTargetDatabasesRequest.lifecycleState,
      "databaseType": listTargetDatabasesRequest.databaseType,
      "infrastructureType": listTargetDatabasesRequest.infrastructureType,
      "limit": listTargetDatabasesRequest.limit,
      "page": listTargetDatabasesRequest.page,
      "compartmentIdInSubtree": listTargetDatabasesRequest.compartmentIdInSubtree,
      "accessLevel": listTargetDatabasesRequest.accessLevel,
      "sortOrder": listTargetDatabasesRequest.sortOrder,
      "sortBy": listTargetDatabasesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTargetDatabasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTargetDatabasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTargetDatabasesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.TargetDatabaseSummary,
        type: "Array<model.TargetDatabaseSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listTargetDatabasesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.TargetDatabaseSummary objects
   * contained in responses from the listTargetDatabases operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTargetDatabases(
    request: requests.ListTargetDatabasesRequest
  ): AsyncIterableIterator<model.TargetDatabaseSummary> {
    return paginateRecords(request, req => this.listTargetDatabases(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listTargetDatabasesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listTargetDatabases operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTargetDatabasesResponses(
    request: requests.ListTargetDatabasesRequest
  ): AsyncIterableIterator<responses.ListTargetDatabasesResponse> {
    return paginateResponses(request, req => this.listTargetDatabases(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.TargetDatabaseSummary objects
   * contained in responses from the listTargetDatabases operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listTargetDatabasesRecordIterator(
    request: requests.ListTargetDatabasesRequest
  ): AsyncIterableIterator<model.TargetDatabaseSummary> {
    return paginateRecords(request, req => this.listTargetDatabases(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listTargetDatabases operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listTargetDatabasesResponseIterator(
    request: requests.ListTargetDatabasesRequest
  ): AsyncIterableIterator<responses.ListTargetDatabasesResponse> {
    return paginateResponses(request, req => this.listTargetDatabases(req));
  }

  /**
   * Gets a list of aggregated user access analytics in the specified target in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListUserAccessAnalyticsRequest
   * @return ListUserAccessAnalyticsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListUserAccessAnalytics.ts.html |here} to see how to use ListUserAccessAnalytics API.
   */
  public async listUserAccessAnalytics(
    listUserAccessAnalyticsRequest: requests.ListUserAccessAnalyticsRequest
  ): Promise<responses.ListUserAccessAnalyticsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listUserAccessAnalytics.");
    const operationName = "listUserAccessAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/ListUserAccessAnalytics";
    const pathParams = {
      "{userAssessmentId}": listUserAccessAnalyticsRequest.userAssessmentId
    };

    const queryParams = {
      "sortBy": listUserAccessAnalyticsRequest.sortBy,
      "sortOrder": listUserAccessAnalyticsRequest.sortOrder,
      "limit": listUserAccessAnalyticsRequest.limit,
      "page": listUserAccessAnalyticsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUserAccessAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUserAccessAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/userAccessAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUserAccessAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "userAccessAnalyticsCollection",
        bodyModel: model.UserAccessAnalyticsCollection,
        type: "model.UserAccessAnalyticsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets a list of aggregated user details from the specified user assessment. This provides information about the overall state.
* of database user security.  For example, the user details include how many users have the DBA role and how many users are in
* the critical category. This data is especially useful content for dashboards or to support analytics.
* <p>
When you perform the ListUserAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
* parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has INSPECT
* permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
* root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
* compartmentId, then \"Not Authorized\" is returned.
* <p>
The parameter compartmentIdInSubtree applies when you perform ListUserAnalytics on the compartmentId passed and when it is
* set to true, the entire hierarchy of compartments can be returned.
* <p>
To use ListUserAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
* set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListUserAnalyticsRequest
     * @return ListUserAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListUserAnalytics.ts.html |here} to see how to use ListUserAnalytics API.
     */
  public async listUserAnalytics(
    listUserAnalyticsRequest: requests.ListUserAnalyticsRequest
  ): Promise<responses.ListUserAnalyticsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listUserAnalytics.");
    const operationName = "listUserAnalytics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/ListUserAnalytics";
    const pathParams = {
      "{userAssessmentId}": listUserAnalyticsRequest.userAssessmentId
    };

    const queryParams = {
      "compartmentIdInSubtree": listUserAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listUserAnalyticsRequest.accessLevel,
      "limit": listUserAnalyticsRequest.limit,
      "userCategory": listUserAnalyticsRequest.userCategory,
      "userKey": listUserAnalyticsRequest.userKey,
      "accountStatus": listUserAnalyticsRequest.accountStatus,
      "authenticationType": listUserAnalyticsRequest.authenticationType,
      "userName": listUserAnalyticsRequest.userName,
      "targetId": listUserAnalyticsRequest.targetId,
      "timeLastLoginGreaterThanOrEqualTo":
        listUserAnalyticsRequest.timeLastLoginGreaterThanOrEqualTo,
      "timeLastLoginLessThan": listUserAnalyticsRequest.timeLastLoginLessThan,
      "timeUserCreatedGreaterThanOrEqualTo":
        listUserAnalyticsRequest.timeUserCreatedGreaterThanOrEqualTo,
      "timeUserCreatedLessThan": listUserAnalyticsRequest.timeUserCreatedLessThan,
      "timePasswordLastChangedGreaterThanOrEqualTo":
        listUserAnalyticsRequest.timePasswordLastChangedGreaterThanOrEqualTo,
      "timePasswordLastChangedLessThan": listUserAnalyticsRequest.timePasswordLastChangedLessThan,
      "page": listUserAnalyticsRequest.page,
      "sortOrder": listUserAnalyticsRequest.sortOrder,
      "sortBy": listUserAnalyticsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUserAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUserAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/userAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUserAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.UserAggregation,
        type: "Array<model.UserAggregation>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listUserAnalyticsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.UserAggregation objects
   * contained in responses from the listUserAnalytics operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUserAnalytics(
    request: requests.ListUserAnalyticsRequest
  ): AsyncIterableIterator<model.UserAggregation> {
    return paginateRecords(request, req => this.listUserAnalytics(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listUserAnalyticsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listUserAnalytics operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUserAnalyticsResponses(
    request: requests.ListUserAnalyticsRequest
  ): AsyncIterableIterator<responses.ListUserAnalyticsResponse> {
    return paginateResponses(request, req => this.listUserAnalytics(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.UserAggregation objects
   * contained in responses from the listUserAnalytics operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listUserAnalyticsRecordIterator(
    request: requests.ListUserAnalyticsRequest
  ): AsyncIterableIterator<model.UserAggregation> {
    return paginateRecords(request, req => this.listUserAnalytics(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listUserAnalytics operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listUserAnalyticsResponseIterator(
    request: requests.ListUserAnalyticsRequest
  ): AsyncIterableIterator<responses.ListUserAnalyticsResponse> {
    return paginateResponses(request, req => this.listUserAnalytics(req));
  }

  /**
     * Gets a list of user assessments.
* <p>
The ListUserAssessments operation returns only the assessments in the specified `compartmentId`.
* The list does not include any subcompartments of the compartmentId passed.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListUserAssessments on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListUserAssessmentsRequest
     * @return ListUserAssessmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListUserAssessments.ts.html |here} to see how to use ListUserAssessments API.
     */
  public async listUserAssessments(
    listUserAssessmentsRequest: requests.ListUserAssessmentsRequest
  ): Promise<responses.ListUserAssessmentsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listUserAssessments.");
    const operationName = "listUserAssessments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessmentSummary/ListUserAssessments";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listUserAssessmentsRequest.compartmentId,
      "compartmentIdInSubtree": listUserAssessmentsRequest.compartmentIdInSubtree,
      "accessLevel": listUserAssessmentsRequest.accessLevel,
      "displayName": listUserAssessmentsRequest.displayName,
      "scheduleUserAssessmentId": listUserAssessmentsRequest.scheduleUserAssessmentId,
      "isScheduleAssessment": listUserAssessmentsRequest.isScheduleAssessment,
      "isBaseline": listUserAssessmentsRequest.isBaseline,
      "targetId": listUserAssessmentsRequest.targetId,
      "type": listUserAssessmentsRequest.type,
      "triggeredBy": listUserAssessmentsRequest.triggeredBy,
      "timeCreatedGreaterThanOrEqualTo": listUserAssessmentsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listUserAssessmentsRequest.timeCreatedLessThan,
      "limit": listUserAssessmentsRequest.limit,
      "page": listUserAssessmentsRequest.page,
      "lifecycleState": listUserAssessmentsRequest.lifecycleState,
      "sortOrder": listUserAssessmentsRequest.sortOrder,
      "sortBy": listUserAssessmentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUserAssessmentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUserAssessmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUserAssessmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.UserAssessmentSummary,
        type: "Array<model.UserAssessmentSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listUserAssessmentsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.UserAssessmentSummary objects
   * contained in responses from the listUserAssessments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUserAssessments(
    request: requests.ListUserAssessmentsRequest
  ): AsyncIterableIterator<model.UserAssessmentSummary> {
    return paginateRecords(request, req => this.listUserAssessments(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listUserAssessmentsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listUserAssessments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUserAssessmentsResponses(
    request: requests.ListUserAssessmentsRequest
  ): AsyncIterableIterator<responses.ListUserAssessmentsResponse> {
    return paginateResponses(request, req => this.listUserAssessments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.UserAssessmentSummary objects
   * contained in responses from the listUserAssessments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listUserAssessmentsRecordIterator(
    request: requests.ListUserAssessmentsRequest
  ): AsyncIterableIterator<model.UserAssessmentSummary> {
    return paginateRecords(request, req => this.listUserAssessments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listUserAssessments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listUserAssessmentsResponseIterator(
    request: requests.ListUserAssessmentsRequest
  ): AsyncIterableIterator<responses.ListUserAssessmentsResponse> {
    return paginateResponses(request, req => this.listUserAssessments(req));
  }

  /**
   * Gets a list of users of the specified user assessment. The result contains the database user details for each user, such
   * as user type, account status, last login time, user creation time, authentication type, user profile, and the date and time
   * of the latest password change. It also contains the user category derived from these user details as well as privileges
   * granted to each user.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListUsersRequest
   * @return ListUsersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListUsers.ts.html |here} to see how to use ListUsers API.
   */
  public async listUsers(
    listUsersRequest: requests.ListUsersRequest
  ): Promise<responses.ListUsersResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listUsers.");
    const operationName = "listUsers";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/ListUsers";
    const pathParams = {
      "{userAssessmentId}": listUsersRequest.userAssessmentId
    };

    const queryParams = {
      "limit": listUsersRequest.limit,
      "compartmentIdInSubtree": listUsersRequest.compartmentIdInSubtree,
      "accessLevel": listUsersRequest.accessLevel,
      "userCategory": listUsersRequest.userCategory,
      "userRole": listUsersRequest.userRole,
      "userProfile": listUsersRequest.userProfile,
      "userType": listUsersRequest.userType,
      "userKey": listUsersRequest.userKey,
      "accountStatus": listUsersRequest.accountStatus,
      "authenticationType": listUsersRequest.authenticationType,
      "userName": listUsersRequest.userName,
      "targetId": listUsersRequest.targetId,
      "timeLastLoginGreaterThanOrEqualTo": listUsersRequest.timeLastLoginGreaterThanOrEqualTo,
      "timeLastLoginLessThan": listUsersRequest.timeLastLoginLessThan,
      "timeUserCreatedGreaterThanOrEqualTo": listUsersRequest.timeUserCreatedGreaterThanOrEqualTo,
      "timeUserCreatedLessThan": listUsersRequest.timeUserCreatedLessThan,
      "timePasswordLastChangedGreaterThanOrEqualTo":
        listUsersRequest.timePasswordLastChangedGreaterThanOrEqualTo,
      "timePasswordLastChangedLessThan": listUsersRequest.timePasswordLastChangedLessThan,
      "page": listUsersRequest.page,
      "sortOrder": listUsersRequest.sortOrder,
      "sortBy": listUsersRequest.sortBy,
      "schemaList": listUsersRequest.schemaList,
      "areAllSchemasAccessible": listUsersRequest.areAllSchemasAccessible
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUsersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUsersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/users",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUsersResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.UserSummary,
        type: "Array<model.UserSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listUsersRecordIterator function.
   * Creates a new async iterator which will iterate over the models.UserSummary objects
   * contained in responses from the listUsers operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUsers(
    request: requests.ListUsersRequest
  ): AsyncIterableIterator<model.UserSummary> {
    return paginateRecords(request, req => this.listUsers(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listUsersResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listUsers operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUsersResponses(
    request: requests.ListUsersRequest
  ): AsyncIterableIterator<responses.ListUsersResponse> {
    return paginateResponses(request, req => this.listUsers(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.UserSummary objects
   * contained in responses from the listUsers operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listUsersRecordIterator(
    request: requests.ListUsersRequest
  ): AsyncIterableIterator<model.UserSummary> {
    return paginateRecords(request, req => this.listUsers(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listUsers operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listUsersResponseIterator(
    request: requests.ListUsersRequest
  ): AsyncIterableIterator<responses.ListUsersResponse> {
    return paginateResponses(request, req => this.listUsers(req));
  }

  /**
   * Gets a list of errors for the specified work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequestError/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsRecordIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsResponseIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Gets a list of log entries for the specified work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequestLogEntry/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLogEntry,
        type: "Array<model.WorkRequestLogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsRecordIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsResponseIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Gets a list of work requests.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequestSummary/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "operationType": listWorkRequestsRequest.operationType,
      "sortBy": listWorkRequestsRequest.sortBy,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "resourceId": listWorkRequestsRequest.resourceId,
      "targetDatabaseId": listWorkRequestsRequest.targetDatabaseId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "compartmentIdInSubtree": listWorkRequestsRequest.compartmentIdInSubtree,
      "accessLevel": listWorkRequestsRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestSummary,
        type: "Array<model.WorkRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsRecordIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsResponseIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Masks data using the specified masking policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param MaskDataRequest
   * @return MaskDataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/MaskData.ts.html |here} to see how to use MaskData API.
   */
  public async maskData(
    maskDataRequest: requests.MaskDataRequest
  ): Promise<responses.MaskDataResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#maskData.");
    const operationName = "maskData";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/MaskData";
    const pathParams = {
      "{maskingPolicyId}": maskDataRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": maskDataRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      maskDataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/actions/mask",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        maskDataRequest.maskDataDetails,
        "MaskDataDetails",
        model.MaskDataDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.MaskDataResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modifies Global Settings in Data Safe in the tenancy and region.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ModifyGlobalSettingsRequest
   * @return ModifyGlobalSettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ModifyGlobalSettings.ts.html |here} to see how to use ModifyGlobalSettings API.
   */
  public async modifyGlobalSettings(
    modifyGlobalSettingsRequest: requests.ModifyGlobalSettingsRequest
  ): Promise<responses.ModifyGlobalSettingsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#modifyGlobalSettings.");
    const operationName = "modifyGlobalSettings";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafeConfiguration/ModifyGlobalSettings";
    const pathParams = {
      "{compartmentId}": modifyGlobalSettingsRequest.compartmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": modifyGlobalSettingsRequest.ifMatch,
      "opc-request-id": modifyGlobalSettingsRequest.opcRequestId,
      "opc-retry-token": modifyGlobalSettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      modifyGlobalSettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration/{compartmentId}/actions/modifyGlobalSettings",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        modifyGlobalSettingsRequest.modifyGlobalSettingsDetails,
        "ModifyGlobalSettingsDetails",
        model.ModifyGlobalSettingsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ModifyGlobalSettingsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the status of one or more alert specified by the alert IDs.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PatchAlertsRequest
   * @return PatchAlertsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchAlerts.ts.html |here} to see how to use PatchAlerts API.
   */
  public async patchAlerts(
    patchAlertsRequest: requests.PatchAlertsRequest
  ): Promise<responses.PatchAlertsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#patchAlerts.");
    const operationName = "patchAlerts";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Alert/PatchAlerts";
    const pathParams = {};

    const queryParams = {
      "compartmentIdInSubtree": patchAlertsRequest.compartmentIdInSubtree,
      "accessLevel": patchAlertsRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": patchAlertsRequest.opcRequestId,
      "if-match": patchAlertsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchAlertsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alerts",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchAlertsRequest.patchAlertsDetails,
        "PatchAlertsDetails",
        model.PatchAlertsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchAlertsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Patches one or more discovery results. You can use this operation to set the plannedAction attribute before using
   * ApplyDiscoveryJobResults to process the results based on this attribute.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PatchDiscoveryJobResultsRequest
   * @return PatchDiscoveryJobResultsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchDiscoveryJobResults.ts.html |here} to see how to use PatchDiscoveryJobResults API.
   */
  public async patchDiscoveryJobResults(
    patchDiscoveryJobResultsRequest: requests.PatchDiscoveryJobResultsRequest
  ): Promise<responses.PatchDiscoveryJobResultsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#patchDiscoveryJobResults.");
    const operationName = "patchDiscoveryJobResults";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DiscoveryJob/PatchDiscoveryJobResults";
    const pathParams = {
      "{discoveryJobId}": patchDiscoveryJobResultsRequest.discoveryJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": patchDiscoveryJobResultsRequest.ifMatch,
      "opc-request-id": patchDiscoveryJobResultsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchDiscoveryJobResultsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/discoveryJobs/{discoveryJobId}/results",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchDiscoveryJobResultsRequest.patchDiscoveryJobResultDetails,
        "PatchDiscoveryJobResultDetails",
        model.PatchDiscoveryJobResultDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchDiscoveryJobResultsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Patches one or more columns in the specified masking policy. Use it to create, or update
   * masking columns. To create masking columns, use CreateMaskingColumnDetails as the patch
   * value. And to update masking columns, use UpdateMaskingColumnDetails as the patch value.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PatchMaskingColumnsRequest
   * @return PatchMaskingColumnsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchMaskingColumns.ts.html |here} to see how to use PatchMaskingColumns API.
   */
  public async patchMaskingColumns(
    patchMaskingColumnsRequest: requests.PatchMaskingColumnsRequest
  ): Promise<responses.PatchMaskingColumnsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#patchMaskingColumns.");
    const operationName = "patchMaskingColumns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/PatchMaskingColumns";
    const pathParams = {
      "{maskingPolicyId}": patchMaskingColumnsRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": patchMaskingColumnsRequest.opcRequestId,
      "if-match": patchMaskingColumnsRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchMaskingColumnsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/maskingColumns",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchMaskingColumnsRequest.patchMaskingColumnsDetails,
        "PatchMaskingColumnsDetails",
        model.PatchMaskingColumnsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchMaskingColumnsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Patches one or more SDM masking policy difference columns. You can use this operation to set the plannedAction attribute before using
   * ApplySdmMaskingPolicyDifference to process the difference based on this attribute.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PatchSdmMaskingPolicyDifferenceColumnsRequest
   * @return PatchSdmMaskingPolicyDifferenceColumnsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchSdmMaskingPolicyDifferenceColumns.ts.html |here} to see how to use PatchSdmMaskingPolicyDifferenceColumns API.
   */
  public async patchSdmMaskingPolicyDifferenceColumns(
    patchSdmMaskingPolicyDifferenceColumnsRequest: requests.PatchSdmMaskingPolicyDifferenceColumnsRequest
  ): Promise<responses.PatchSdmMaskingPolicyDifferenceColumnsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#patchSdmMaskingPolicyDifferenceColumns.");
    const operationName = "patchSdmMaskingPolicyDifferenceColumns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/PatchSdmMaskingPolicyDifferenceColumns";
    const pathParams = {
      "{sdmMaskingPolicyDifferenceId}":
        patchSdmMaskingPolicyDifferenceColumnsRequest.sdmMaskingPolicyDifferenceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": patchSdmMaskingPolicyDifferenceColumnsRequest.ifMatch,
      "opc-request-id": patchSdmMaskingPolicyDifferenceColumnsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchSdmMaskingPolicyDifferenceColumnsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}/differenceColumns",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchSdmMaskingPolicyDifferenceColumnsRequest.patchSdmMaskingPolicyDifferenceColumnsDetails,
        "PatchSdmMaskingPolicyDifferenceColumnsDetails",
        model.PatchSdmMaskingPolicyDifferenceColumnsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchSdmMaskingPolicyDifferenceColumnsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Patches one or more columns in the specified sensitive data model. Use it to create, update, or delete sensitive columns.
   * To create sensitive columns, use CreateSensitiveColumnDetails as the patch value. And to update sensitive columns,
   * use UpdateSensitiveColumnDetails as the patch value.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PatchSensitiveColumnsRequest
   * @return PatchSensitiveColumnsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchSensitiveColumns.ts.html |here} to see how to use PatchSensitiveColumns API.
   */
  public async patchSensitiveColumns(
    patchSensitiveColumnsRequest: requests.PatchSensitiveColumnsRequest
  ): Promise<responses.PatchSensitiveColumnsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#patchSensitiveColumns.");
    const operationName = "patchSensitiveColumns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveColumn/PatchSensitiveColumns";
    const pathParams = {
      "{sensitiveDataModelId}": patchSensitiveColumnsRequest.sensitiveDataModelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": patchSensitiveColumnsRequest.ifMatch,
      "opc-request-id": patchSensitiveColumnsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchSensitiveColumnsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchSensitiveColumnsRequest.patchSensitiveColumnDetails,
        "PatchSensitiveColumnDetails",
        model.PatchSensitiveColumnDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchSensitiveColumnsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates new target-alert policy associations that will be applied on the target database.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PatchTargetAlertPolicyAssociationRequest
   * @return PatchTargetAlertPolicyAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchTargetAlertPolicyAssociation.ts.html |here} to see how to use PatchTargetAlertPolicyAssociation API.
   */
  public async patchTargetAlertPolicyAssociation(
    patchTargetAlertPolicyAssociationRequest: requests.PatchTargetAlertPolicyAssociationRequest
  ): Promise<responses.PatchTargetAlertPolicyAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#patchTargetAlertPolicyAssociation.");
    const operationName = "patchTargetAlertPolicyAssociation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociation/PatchTargetAlertPolicyAssociation";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": patchTargetAlertPolicyAssociationRequest.opcRequestId,
      "if-match": patchTargetAlertPolicyAssociationRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchTargetAlertPolicyAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetAlertPolicyAssociations",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchTargetAlertPolicyAssociationRequest.patchTargetAlertPolicyAssociationDetails,
        "PatchTargetAlertPolicyAssociationDetails",
        model.PatchTargetAlertPolicyAssociationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchTargetAlertPolicyAssociationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Provision audit policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ProvisionAuditPolicyRequest
   * @return ProvisionAuditPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ProvisionAuditPolicy.ts.html |here} to see how to use ProvisionAuditPolicy API.
   */
  public async provisionAuditPolicy(
    provisionAuditPolicyRequest: requests.ProvisionAuditPolicyRequest
  ): Promise<responses.ProvisionAuditPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#provisionAuditPolicy.");
    const operationName = "provisionAuditPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicy/ProvisionAuditPolicy";
    const pathParams = {
      "{auditPolicyId}": provisionAuditPolicyRequest.auditPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": provisionAuditPolicyRequest.ifMatch,
      "opc-request-id": provisionAuditPolicyRequest.opcRequestId,
      "opc-retry-token": provisionAuditPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      provisionAuditPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditPolicies/{auditPolicyId}/actions/provision",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        provisionAuditPolicyRequest.provisionAuditPolicyDetails,
        "ProvisionAuditPolicyDetails",
        model.ProvisionAuditPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ProvisionAuditPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Purge the SQL collection logs for the specified SqlCollection.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PurgeSqlCollectionLogsRequest
   * @return PurgeSqlCollectionLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PurgeSqlCollectionLogs.ts.html |here} to see how to use PurgeSqlCollectionLogs API.
   */
  public async purgeSqlCollectionLogs(
    purgeSqlCollectionLogsRequest: requests.PurgeSqlCollectionLogsRequest
  ): Promise<responses.PurgeSqlCollectionLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#purgeSqlCollectionLogs.");
    const operationName = "purgeSqlCollectionLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlCollection/PurgeSqlCollectionLogs";
    const pathParams = {
      "{sqlCollectionId}": purgeSqlCollectionLogsRequest.sqlCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": purgeSqlCollectionLogsRequest.ifMatch,
      "opc-request-id": purgeSqlCollectionLogsRequest.opcRequestId,
      "opc-retry-token": purgeSqlCollectionLogsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      purgeSqlCollectionLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollections/{sqlCollectionId}/actions/purgeLogs",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PurgeSqlCollectionLogsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Refreshes the specified database security configuration.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RefreshDatabaseSecurityConfigurationRequest
   * @return RefreshDatabaseSecurityConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RefreshDatabaseSecurityConfiguration.ts.html |here} to see how to use RefreshDatabaseSecurityConfiguration API.
   */
  public async refreshDatabaseSecurityConfiguration(
    refreshDatabaseSecurityConfigurationRequest: requests.RefreshDatabaseSecurityConfigurationRequest
  ): Promise<responses.RefreshDatabaseSecurityConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#refreshDatabaseSecurityConfiguration.");
    const operationName = "refreshDatabaseSecurityConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DatabaseSecurityConfig/RefreshDatabaseSecurityConfiguration";
    const pathParams = {
      "{databaseSecurityConfigId}":
        refreshDatabaseSecurityConfigurationRequest.databaseSecurityConfigId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": refreshDatabaseSecurityConfigurationRequest.ifMatch,
      "opc-request-id": refreshDatabaseSecurityConfigurationRequest.opcRequestId,
      "opc-retry-token": refreshDatabaseSecurityConfigurationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      refreshDatabaseSecurityConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseSecurityConfigs/{databaseSecurityConfigId}/actions/refresh",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RefreshDatabaseSecurityConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Runs a security assessment, refreshes the latest assessment, and saves it for future reference.
   * The assessment runs with a securityAssessmentId of type LATEST. Before you start, first call the ListSecurityAssessments operation with filter \"type = latest\" to get the security assessment id for the target's latest assessment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RefreshSecurityAssessmentRequest
   * @return RefreshSecurityAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RefreshSecurityAssessment.ts.html |here} to see how to use RefreshSecurityAssessment API.
   */
  public async refreshSecurityAssessment(
    refreshSecurityAssessmentRequest: requests.RefreshSecurityAssessmentRequest
  ): Promise<responses.RefreshSecurityAssessmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#refreshSecurityAssessment.");
    const operationName = "refreshSecurityAssessment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/RefreshSecurityAssessment";
    const pathParams = {
      "{securityAssessmentId}": refreshSecurityAssessmentRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": refreshSecurityAssessmentRequest.opcRetryToken,
      "opc-request-id": refreshSecurityAssessmentRequest.opcRequestId,
      "if-match": refreshSecurityAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      refreshSecurityAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/refresh",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        refreshSecurityAssessmentRequest.runSecurityAssessmentDetails,
        "RunSecurityAssessmentDetails",
        model.RunSecurityAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RefreshSecurityAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Refresh the specified SQL collection Log Insights.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RefreshSqlCollectionLogInsightsRequest
   * @return RefreshSqlCollectionLogInsightsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RefreshSqlCollectionLogInsights.ts.html |here} to see how to use RefreshSqlCollectionLogInsights API.
   */
  public async refreshSqlCollectionLogInsights(
    refreshSqlCollectionLogInsightsRequest: requests.RefreshSqlCollectionLogInsightsRequest
  ): Promise<responses.RefreshSqlCollectionLogInsightsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#refreshSqlCollectionLogInsights.");
    const operationName = "refreshSqlCollectionLogInsights";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlCollection/RefreshSqlCollectionLogInsights";
    const pathParams = {
      "{sqlCollectionId}": refreshSqlCollectionLogInsightsRequest.sqlCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": refreshSqlCollectionLogInsightsRequest.ifMatch,
      "opc-request-id": refreshSqlCollectionLogInsightsRequest.opcRequestId,
      "opc-retry-token": refreshSqlCollectionLogInsightsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      refreshSqlCollectionLogInsightsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollections/{sqlCollectionId}/actions/refreshLogInsights",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RefreshSqlCollectionLogInsightsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Refreshes the Data Safe target database to update it's state.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RefreshTargetDatabaseRequest
   * @return RefreshTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RefreshTargetDatabase.ts.html |here} to see how to use RefreshTargetDatabase API.
   */
  public async refreshTargetDatabase(
    refreshTargetDatabaseRequest: requests.RefreshTargetDatabaseRequest
  ): Promise<responses.RefreshTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#refreshTargetDatabase.");
    const operationName = "refreshTargetDatabase";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/RefreshTargetDatabase";
    const pathParams = {
      "{targetDatabaseId}": refreshTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": refreshTargetDatabaseRequest.opcRetryToken,
      "if-match": refreshTargetDatabaseRequest.ifMatch,
      "opc-request-id": refreshTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      refreshTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/actions/refresh",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RefreshTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Refreshes the latest assessment and saves it for future reference. This operation runs with a userAssessmentId of type LATEST.
   * Before you start, first call the ListUserAssessments operation with filter \"type = latest\" to get the user assessment ID for
   * the target's latest assessment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RefreshUserAssessmentRequest
   * @return RefreshUserAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RefreshUserAssessment.ts.html |here} to see how to use RefreshUserAssessment API.
   */
  public async refreshUserAssessment(
    refreshUserAssessmentRequest: requests.RefreshUserAssessmentRequest
  ): Promise<responses.RefreshUserAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#refreshUserAssessment.");
    const operationName = "refreshUserAssessment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/RefreshUserAssessment";
    const pathParams = {
      "{userAssessmentId}": refreshUserAssessmentRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": refreshUserAssessmentRequest.opcRetryToken,
      "opc-request-id": refreshUserAssessmentRequest.opcRequestId,
      "if-match": refreshUserAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      refreshUserAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/refresh",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        refreshUserAssessmentRequest.runUserAssessmentDetails,
        "RunUserAssessmentDetails",
        model.RunUserAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RefreshUserAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the schedule of a .xls or .pdf report.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RemoveScheduleReportRequest
   * @return RemoveScheduleReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RemoveScheduleReport.ts.html |here} to see how to use RemoveScheduleReport API.
   */
  public async removeScheduleReport(
    removeScheduleReportRequest: requests.RemoveScheduleReportRequest
  ): Promise<responses.RemoveScheduleReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#removeScheduleReport.");
    const operationName = "removeScheduleReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/RemoveScheduleReport";
    const pathParams = {
      "{reportDefinitionId}": removeScheduleReportRequest.reportDefinitionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": removeScheduleReportRequest.ifMatch,
      "opc-request-id": removeScheduleReportRequest.opcRequestId,
      "opc-retry-token": removeScheduleReportRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeScheduleReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reportDefinitions/{reportDefinitionId}/actions/removeScheduleReport",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveScheduleReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Resumes the specified audit trail once it got stopped.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ResumeAuditTrailRequest
   * @return ResumeAuditTrailResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ResumeAuditTrail.ts.html |here} to see how to use ResumeAuditTrail API.
   */
  public async resumeAuditTrail(
    resumeAuditTrailRequest: requests.ResumeAuditTrailRequest
  ): Promise<responses.ResumeAuditTrailResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#resumeAuditTrail.");
    const operationName = "resumeAuditTrail";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/ResumeAuditTrail";
    const pathParams = {
      "{auditTrailId}": resumeAuditTrailRequest.auditTrailId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": resumeAuditTrailRequest.ifMatch,
      "opc-request-id": resumeAuditTrailRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      resumeAuditTrailRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditTrails/{auditTrailId}/actions/resume",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ResumeAuditTrailResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Resume the given work request. Issuing a resume does not guarantee of immediate resume of the work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ResumeWorkRequestRequest
   * @return ResumeWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ResumeWorkRequest.ts.html |here} to see how to use ResumeWorkRequest API.
   */
  public async resumeWorkRequest(
    resumeWorkRequestRequest: requests.ResumeWorkRequestRequest
  ): Promise<responses.ResumeWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#resumeWorkRequest.");
    const operationName = "resumeWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequest/ResumeWorkRequest";
    const pathParams = {
      "{workRequestId}": resumeWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": resumeWorkRequestRequest.opcRetryToken,
      "opc-request-id": resumeWorkRequestRequest.opcRequestId,
      "if-match": resumeWorkRequestRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      resumeWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/actions/resume",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ResumeWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the audit policy details from the source target database.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param RetrieveAuditPoliciesRequest
   * @return RetrieveAuditPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RetrieveAuditPolicies.ts.html |here} to see how to use RetrieveAuditPolicies API.
   */
  public async retrieveAuditPolicies(
    retrieveAuditPoliciesRequest: requests.RetrieveAuditPoliciesRequest
  ): Promise<responses.RetrieveAuditPoliciesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#retrieveAuditPolicies.");
    const operationName = "retrieveAuditPolicies";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicy/RetrieveAuditPolicies";
    const pathParams = {
      "{auditPolicyId}": retrieveAuditPoliciesRequest.auditPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": retrieveAuditPoliciesRequest.ifMatch,
      "opc-request-id": retrieveAuditPoliciesRequest.opcRequestId,
      "opc-retry-token": retrieveAuditPoliciesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      retrieveAuditPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditPolicies/{auditPolicyId}/actions/retrieveFromTarget",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RetrieveAuditPoliciesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Schedules a .xls or .pdf report based on parameters and report definition.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ScheduleReportRequest
   * @return ScheduleReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ScheduleReport.ts.html |here} to see how to use ScheduleReport API.
   */
  public async scheduleReport(
    scheduleReportRequest: requests.ScheduleReportRequest
  ): Promise<responses.ScheduleReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#scheduleReport.");
    const operationName = "scheduleReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/ScheduleReport";
    const pathParams = {
      "{reportDefinitionId}": scheduleReportRequest.reportDefinitionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": scheduleReportRequest.ifMatch,
      "opc-request-id": scheduleReportRequest.opcRequestId,
      "opc-retry-token": scheduleReportRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      scheduleReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reportDefinitions/{reportDefinitionId}/actions/scheduleReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        scheduleReportRequest.scheduleReportDetails,
        "ScheduleReportDetails",
        model.ScheduleReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ScheduleReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Sets the saved security assessment as the baseline in the compartment where the the specified assessment resides. The security assessment needs to be of type 'SAVED'.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SetSecurityAssessmentBaselineRequest
   * @return SetSecurityAssessmentBaselineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/SetSecurityAssessmentBaseline.ts.html |here} to see how to use SetSecurityAssessmentBaseline API.
   */
  public async setSecurityAssessmentBaseline(
    setSecurityAssessmentBaselineRequest: requests.SetSecurityAssessmentBaselineRequest
  ): Promise<responses.SetSecurityAssessmentBaselineResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#setSecurityAssessmentBaseline.");
    const operationName = "setSecurityAssessmentBaseline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/SetSecurityAssessmentBaseline";
    const pathParams = {
      "{securityAssessmentId}": setSecurityAssessmentBaselineRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": setSecurityAssessmentBaselineRequest.ifMatch,
      "opc-retry-token": setSecurityAssessmentBaselineRequest.opcRetryToken,
      "opc-request-id": setSecurityAssessmentBaselineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      setSecurityAssessmentBaselineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/setBaseline",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        setSecurityAssessmentBaselineRequest.baseLineDetails,
        "SecurityAssessmentBaseLineDetails",
        model.SecurityAssessmentBaseLineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SetSecurityAssessmentBaselineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Sets the saved user assessment as the baseline in the compartment where the specified assessment resides. The user assessment needs to be of type 'SAVED'.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SetUserAssessmentBaselineRequest
   * @return SetUserAssessmentBaselineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/SetUserAssessmentBaseline.ts.html |here} to see how to use SetUserAssessmentBaseline API.
   */
  public async setUserAssessmentBaseline(
    setUserAssessmentBaselineRequest: requests.SetUserAssessmentBaselineRequest
  ): Promise<responses.SetUserAssessmentBaselineResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#setUserAssessmentBaseline.");
    const operationName = "setUserAssessmentBaseline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/SetUserAssessmentBaseline";
    const pathParams = {
      "{userAssessmentId}": setUserAssessmentBaselineRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": setUserAssessmentBaselineRequest.ifMatch,
      "opc-retry-token": setUserAssessmentBaselineRequest.opcRetryToken,
      "opc-request-id": setUserAssessmentBaselineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      setUserAssessmentBaselineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/setBaseline",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        setUserAssessmentBaselineRequest.baseLineDetails,
        "UserAssessmentBaseLineDetails",
        model.UserAssessmentBaseLineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SetUserAssessmentBaselineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Starts collection of audit records on the specified audit trail.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StartAuditTrailRequest
   * @return StartAuditTrailResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/StartAuditTrail.ts.html |here} to see how to use StartAuditTrail API.
   */
  public async startAuditTrail(
    startAuditTrailRequest: requests.StartAuditTrailRequest
  ): Promise<responses.StartAuditTrailResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#startAuditTrail.");
    const operationName = "startAuditTrail";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/StartAuditTrail";
    const pathParams = {
      "{auditTrailId}": startAuditTrailRequest.auditTrailId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": startAuditTrailRequest.ifMatch,
      "opc-request-id": startAuditTrailRequest.opcRequestId,
      "opc-retry-token": startAuditTrailRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startAuditTrailRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditTrails/{auditTrailId}/actions/start",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        startAuditTrailRequest.startAuditTrailDetails,
        "StartAuditTrailDetails",
        model.StartAuditTrailDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartAuditTrailResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Start the specified SQL collection.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StartSqlCollectionRequest
   * @return StartSqlCollectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/StartSqlCollection.ts.html |here} to see how to use StartSqlCollection API.
   */
  public async startSqlCollection(
    startSqlCollectionRequest: requests.StartSqlCollectionRequest
  ): Promise<responses.StartSqlCollectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#startSqlCollection.");
    const operationName = "startSqlCollection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/sqlCollection/StartSqlCollection";
    const pathParams = {
      "{sqlCollectionId}": startSqlCollectionRequest.sqlCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": startSqlCollectionRequest.ifMatch,
      "opc-request-id": startSqlCollectionRequest.opcRequestId,
      "opc-retry-token": startSqlCollectionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startSqlCollectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollections/{sqlCollectionId}/actions/start",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartSqlCollectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stops the specified audit trail.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StopAuditTrailRequest
   * @return StopAuditTrailResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/StopAuditTrail.ts.html |here} to see how to use StopAuditTrail API.
   */
  public async stopAuditTrail(
    stopAuditTrailRequest: requests.StopAuditTrailRequest
  ): Promise<responses.StopAuditTrailResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#stopAuditTrail.");
    const operationName = "stopAuditTrail";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/StopAuditTrail";
    const pathParams = {
      "{auditTrailId}": stopAuditTrailRequest.auditTrailId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": stopAuditTrailRequest.ifMatch,
      "opc-request-id": stopAuditTrailRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopAuditTrailRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditTrails/{auditTrailId}/actions/stop",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopAuditTrailResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stops the specified SQL collection.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param StopSqlCollectionRequest
   * @return StopSqlCollectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/StopSqlCollection.ts.html |here} to see how to use StopSqlCollection API.
   */
  public async stopSqlCollection(
    stopSqlCollectionRequest: requests.StopSqlCollectionRequest
  ): Promise<responses.StopSqlCollectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#stopSqlCollection.");
    const operationName = "stopSqlCollection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlCollection/StopSqlCollection";
    const pathParams = {
      "{sqlCollectionId}": stopSqlCollectionRequest.sqlCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": stopSqlCollectionRequest.ifMatch,
      "opc-request-id": stopSqlCollectionRequest.opcRequestId,
      "opc-retry-token": stopSqlCollectionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopSqlCollectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollections/{sqlCollectionId}/actions/stop",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopSqlCollectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Suspend the given work request. Issuing a suspend does not guarantee of a immediate suspend of the work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param SuspendWorkRequestRequest
   * @return SuspendWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/SuspendWorkRequest.ts.html |here} to see how to use SuspendWorkRequest API.
   */
  public async suspendWorkRequest(
    suspendWorkRequestRequest: requests.SuspendWorkRequestRequest
  ): Promise<responses.SuspendWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#suspendWorkRequest.");
    const operationName = "suspendWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/WorkRequest/SuspendWorkRequest";
    const pathParams = {
      "{workRequestId}": suspendWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": suspendWorkRequestRequest.opcRetryToken,
      "opc-request-id": suspendWorkRequestRequest.opcRequestId,
      "if-match": suspendWorkRequestRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      suspendWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/actions/suspend",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SuspendWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the baseline setting for the saved security assessment associated with the targetId passed via body.
   * If no body or empty body is passed then the baseline settings of all the saved security assessments pertaining to the baseline assessment OCID provided in the path will be removed.
   * Sets the if-match parameter to the value of the etag from a previous GET or POST response for that resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UnsetSecurityAssessmentBaselineRequest
   * @return UnsetSecurityAssessmentBaselineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UnsetSecurityAssessmentBaseline.ts.html |here} to see how to use UnsetSecurityAssessmentBaseline API.
   */
  public async unsetSecurityAssessmentBaseline(
    unsetSecurityAssessmentBaselineRequest: requests.UnsetSecurityAssessmentBaselineRequest
  ): Promise<responses.UnsetSecurityAssessmentBaselineResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#unsetSecurityAssessmentBaseline.");
    const operationName = "unsetSecurityAssessmentBaseline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/UnsetSecurityAssessmentBaseline";
    const pathParams = {
      "{securityAssessmentId}": unsetSecurityAssessmentBaselineRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": unsetSecurityAssessmentBaselineRequest.ifMatch,
      "opc-retry-token": unsetSecurityAssessmentBaselineRequest.opcRetryToken,
      "opc-request-id": unsetSecurityAssessmentBaselineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      unsetSecurityAssessmentBaselineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/unsetBaseline",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        unsetSecurityAssessmentBaselineRequest.unsetSecurityAssessmentBaselineDetails,
        "UnsetSecurityAssessmentBaselineDetails",
        model.UnsetSecurityAssessmentBaselineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UnsetSecurityAssessmentBaselineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the baseline setting for the saved user assessment associated with the targetId passed via body.
   * If no body or empty body is passed then the baseline settings of all the saved user assessments pertaining to the baseline assessment OCID provided in the path will be removed.
   * Sets the if-match parameter to the value of the etag from a previous GET or POST response for that resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UnsetUserAssessmentBaselineRequest
   * @return UnsetUserAssessmentBaselineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UnsetUserAssessmentBaseline.ts.html |here} to see how to use UnsetUserAssessmentBaseline API.
   */
  public async unsetUserAssessmentBaseline(
    unsetUserAssessmentBaselineRequest: requests.UnsetUserAssessmentBaselineRequest
  ): Promise<responses.UnsetUserAssessmentBaselineResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#unsetUserAssessmentBaseline.");
    const operationName = "unsetUserAssessmentBaseline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/UnsetUserAssessmentBaseline";
    const pathParams = {
      "{userAssessmentId}": unsetUserAssessmentBaselineRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": unsetUserAssessmentBaselineRequest.ifMatch,
      "opc-retry-token": unsetUserAssessmentBaselineRequest.opcRetryToken,
      "opc-request-id": unsetUserAssessmentBaselineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      unsetUserAssessmentBaselineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/unsetBaseline",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        unsetUserAssessmentBaselineRequest.unsetUserAssessmentBaselineDetails,
        "UnsetUserAssessmentBaselineDetails",
        model.UnsetUserAssessmentBaselineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UnsetUserAssessmentBaselineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the status of the specified alert.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAlertRequest
   * @return UpdateAlertResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAlert.ts.html |here} to see how to use UpdateAlert API.
   */
  public async updateAlert(
    updateAlertRequest: requests.UpdateAlertRequest
  ): Promise<responses.UpdateAlertResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateAlert.");
    const operationName = "updateAlert";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Alert/UpdateAlert";
    const pathParams = {
      "{alertId}": updateAlertRequest.alertId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAlertRequest.ifMatch,
      "opc-request-id": updateAlertRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAlertRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alerts/{alertId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAlertRequest.updateAlertDetails,
        "UpdateAlertDetails",
        model.UpdateAlertDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAlertResponse>{},
        body: await response.json(),
        bodyKey: "alert",
        bodyModel: model.Alert,
        type: "model.Alert",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified alert policy .
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAlertPolicyRequest
   * @return UpdateAlertPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAlertPolicy.ts.html |here} to see how to use UpdateAlertPolicy API.
   */
  public async updateAlertPolicy(
    updateAlertPolicyRequest: requests.UpdateAlertPolicyRequest
  ): Promise<responses.UpdateAlertPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateAlertPolicy.");
    const operationName = "updateAlertPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicy/UpdateAlertPolicy";
    const pathParams = {
      "{alertPolicyId}": updateAlertPolicyRequest.alertPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAlertPolicyRequest.ifMatch,
      "opc-request-id": updateAlertPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAlertPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alertPolicies/{alertPolicyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAlertPolicyRequest.updateAlertPolicyDetails,
        "UpdateAlertPolicyDetails",
        model.UpdateAlertPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAlertPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified alert policy rule.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAlertPolicyRuleRequest
   * @return UpdateAlertPolicyRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAlertPolicyRule.ts.html |here} to see how to use UpdateAlertPolicyRule API.
   */
  public async updateAlertPolicyRule(
    updateAlertPolicyRuleRequest: requests.UpdateAlertPolicyRuleRequest
  ): Promise<responses.UpdateAlertPolicyRuleResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateAlertPolicyRule.");
    const operationName = "updateAlertPolicyRule";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AlertPolicyRule/UpdateAlertPolicyRule";
    const pathParams = {
      "{alertPolicyId}": updateAlertPolicyRuleRequest.alertPolicyId,
      "{ruleKey}": updateAlertPolicyRuleRequest.ruleKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAlertPolicyRuleRequest.ifMatch,
      "opc-request-id": updateAlertPolicyRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAlertPolicyRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alertPolicies/{alertPolicyId}/rules/{ruleKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAlertPolicyRuleRequest.updateAlertPolicyRuleDetails,
        "UpdateAlertPolicyRuleDetails",
        model.UpdateAlertPolicyRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAlertPolicyRuleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the audit archive retrieval.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAuditArchiveRetrievalRequest
   * @return UpdateAuditArchiveRetrievalResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAuditArchiveRetrieval.ts.html |here} to see how to use UpdateAuditArchiveRetrieval API.
   */
  public async updateAuditArchiveRetrieval(
    updateAuditArchiveRetrievalRequest: requests.UpdateAuditArchiveRetrievalRequest
  ): Promise<responses.UpdateAuditArchiveRetrievalResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateAuditArchiveRetrieval.");
    const operationName = "updateAuditArchiveRetrieval";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditArchiveRetrieval/UpdateAuditArchiveRetrieval";
    const pathParams = {
      "{auditArchiveRetrievalId}": updateAuditArchiveRetrievalRequest.auditArchiveRetrievalId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAuditArchiveRetrievalRequest.ifMatch,
      "opc-request-id": updateAuditArchiveRetrievalRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAuditArchiveRetrievalRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditArchiveRetrievals/{auditArchiveRetrievalId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAuditArchiveRetrievalRequest.updateAuditArchiveRetrievalDetails,
        "UpdateAuditArchiveRetrievalDetails",
        model.UpdateAuditArchiveRetrievalDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAuditArchiveRetrievalResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the audit policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAuditPolicyRequest
   * @return UpdateAuditPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAuditPolicy.ts.html |here} to see how to use UpdateAuditPolicy API.
   */
  public async updateAuditPolicy(
    updateAuditPolicyRequest: requests.UpdateAuditPolicyRequest
  ): Promise<responses.UpdateAuditPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateAuditPolicy.");
    const operationName = "updateAuditPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditPolicy/UpdateAuditPolicy";
    const pathParams = {
      "{auditPolicyId}": updateAuditPolicyRequest.auditPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAuditPolicyRequest.ifMatch,
      "opc-request-id": updateAuditPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAuditPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditPolicies/{auditPolicyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAuditPolicyRequest.updateAuditPolicyDetails,
        "UpdateAuditPolicyDetails",
        model.UpdateAuditPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAuditPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified audit profile.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAuditProfileRequest
   * @return UpdateAuditProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAuditProfile.ts.html |here} to see how to use UpdateAuditProfile API.
   */
  public async updateAuditProfile(
    updateAuditProfileRequest: requests.UpdateAuditProfileRequest
  ): Promise<responses.UpdateAuditProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateAuditProfile.");
    const operationName = "updateAuditProfile";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditProfile/UpdateAuditProfile";
    const pathParams = {
      "{auditProfileId}": updateAuditProfileRequest.auditProfileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAuditProfileRequest.ifMatch,
      "opc-request-id": updateAuditProfileRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAuditProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditProfiles/{auditProfileId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAuditProfileRequest.updateAuditProfileDetails,
        "UpdateAuditProfileDetails",
        model.UpdateAuditProfileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAuditProfileResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified audit trail.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateAuditTrailRequest
   * @return UpdateAuditTrailResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAuditTrail.ts.html |here} to see how to use UpdateAuditTrail API.
   */
  public async updateAuditTrail(
    updateAuditTrailRequest: requests.UpdateAuditTrailRequest
  ): Promise<responses.UpdateAuditTrailResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateAuditTrail.");
    const operationName = "updateAuditTrail";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/AuditTrail/UpdateAuditTrail";
    const pathParams = {
      "{auditTrailId}": updateAuditTrailRequest.auditTrailId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAuditTrailRequest.ifMatch,
      "opc-request-id": updateAuditTrailRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAuditTrailRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/auditTrails/{auditTrailId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAuditTrailRequest.updateAuditTrailDetails,
        "UpdateAuditTrailDetails",
        model.UpdateAuditTrailDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAuditTrailResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified Data Safe private endpoint.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDataSafePrivateEndpointRequest
   * @return UpdateDataSafePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateDataSafePrivateEndpoint.ts.html |here} to see how to use UpdateDataSafePrivateEndpoint API.
   */
  public async updateDataSafePrivateEndpoint(
    updateDataSafePrivateEndpointRequest: requests.UpdateDataSafePrivateEndpointRequest
  ): Promise<responses.UpdateDataSafePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateDataSafePrivateEndpoint.");
    const operationName = "updateDataSafePrivateEndpoint";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DataSafePrivateEndpoint/UpdateDataSafePrivateEndpoint";
    const pathParams = {
      "{dataSafePrivateEndpointId}": updateDataSafePrivateEndpointRequest.dataSafePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDataSafePrivateEndpointRequest.ifMatch,
      "opc-request-id": updateDataSafePrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDataSafePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDataSafePrivateEndpointRequest.updateDataSafePrivateEndpointDetails,
        "UpdateDataSafePrivateEndpointDetails",
        model.UpdateDataSafePrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDataSafePrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the database security configuration.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDatabaseSecurityConfigRequest
   * @return UpdateDatabaseSecurityConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateDatabaseSecurityConfig.ts.html |here} to see how to use UpdateDatabaseSecurityConfig API.
   */
  public async updateDatabaseSecurityConfig(
    updateDatabaseSecurityConfigRequest: requests.UpdateDatabaseSecurityConfigRequest
  ): Promise<responses.UpdateDatabaseSecurityConfigResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateDatabaseSecurityConfig.");
    const operationName = "updateDatabaseSecurityConfig";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/DatabaseSecurityConfig/UpdateDatabaseSecurityConfig";
    const pathParams = {
      "{databaseSecurityConfigId}": updateDatabaseSecurityConfigRequest.databaseSecurityConfigId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDatabaseSecurityConfigRequest.ifMatch,
      "opc-request-id": updateDatabaseSecurityConfigRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDatabaseSecurityConfigRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseSecurityConfigs/{databaseSecurityConfigId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDatabaseSecurityConfigRequest.updateDatabaseSecurityConfigDetails,
        "UpdateDatabaseSecurityConfigDetails",
        model.UpdateDatabaseSecurityConfigDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDatabaseSecurityConfigResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified finding.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateFindingRequest
   * @return UpdateFindingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateFinding.ts.html |here} to see how to use UpdateFinding API.
   */
  public async updateFinding(
    updateFindingRequest: requests.UpdateFindingRequest
  ): Promise<responses.UpdateFindingResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateFinding.");
    const operationName = "updateFinding";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Finding/UpdateFinding";
    const pathParams = {
      "{securityAssessmentId}": updateFindingRequest.securityAssessmentId,
      "{findingKey}": updateFindingRequest.findingKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateFindingRequest.opcRetryToken,
      "opc-request-id": updateFindingRequest.opcRequestId,
      "if-match": updateFindingRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFindingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/findings/{findingKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFindingRequest.updateFindingDetails,
        "UpdateFindingDetails",
        model.UpdateFindingDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFindingResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified library masking format. Note that updating the formatEntries attribute replaces all the existing masking format entries with the specified format entries.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateLibraryMaskingFormatRequest
   * @return UpdateLibraryMaskingFormatResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateLibraryMaskingFormat.ts.html |here} to see how to use UpdateLibraryMaskingFormat API.
   */
  public async updateLibraryMaskingFormat(
    updateLibraryMaskingFormatRequest: requests.UpdateLibraryMaskingFormatRequest
  ): Promise<responses.UpdateLibraryMaskingFormatResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateLibraryMaskingFormat.");
    const operationName = "updateLibraryMaskingFormat";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/LibraryMaskingFormat/UpdateLibraryMaskingFormat";
    const pathParams = {
      "{libraryMaskingFormatId}": updateLibraryMaskingFormatRequest.libraryMaskingFormatId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateLibraryMaskingFormatRequest.ifMatch,
      "opc-request-id": updateLibraryMaskingFormatRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLibraryMaskingFormatRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/libraryMaskingFormats/{libraryMaskingFormatId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLibraryMaskingFormatRequest.updateLibraryMaskingFormatDetails,
        "UpdateLibraryMaskingFormatDetails",
        model.UpdateLibraryMaskingFormatDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLibraryMaskingFormatResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified masking column. Note that updating the maskingFormats
   * attribute replaces the currently assigned masking formats with the specified masking formats.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateMaskingColumnRequest
   * @return UpdateMaskingColumnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateMaskingColumn.ts.html |here} to see how to use UpdateMaskingColumn API.
   */
  public async updateMaskingColumn(
    updateMaskingColumnRequest: requests.UpdateMaskingColumnRequest
  ): Promise<responses.UpdateMaskingColumnResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateMaskingColumn.");
    const operationName = "updateMaskingColumn";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingColumn/UpdateMaskingColumn";
    const pathParams = {
      "{maskingColumnKey}": updateMaskingColumnRequest.maskingColumnKey,
      "{maskingPolicyId}": updateMaskingColumnRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateMaskingColumnRequest.ifMatch,
      "opc-request-id": updateMaskingColumnRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateMaskingColumnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/maskingColumns/{maskingColumnKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMaskingColumnRequest.updateMaskingColumnDetails,
        "UpdateMaskingColumnDetails",
        model.UpdateMaskingColumnDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMaskingColumnResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified masking policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateMaskingPolicyRequest
   * @return UpdateMaskingPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateMaskingPolicy.ts.html |here} to see how to use UpdateMaskingPolicy API.
   */
  public async updateMaskingPolicy(
    updateMaskingPolicyRequest: requests.UpdateMaskingPolicyRequest
  ): Promise<responses.UpdateMaskingPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateMaskingPolicy.");
    const operationName = "updateMaskingPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/UpdateMaskingPolicy";
    const pathParams = {
      "{maskingPolicyId}": updateMaskingPolicyRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateMaskingPolicyRequest.ifMatch,
      "opc-request-id": updateMaskingPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateMaskingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateMaskingPolicyRequest.updateMaskingPolicyDetails,
        "UpdateMaskingPolicyDetails",
        model.UpdateMaskingPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateMaskingPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified on-premises connector.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOnPremConnectorRequest
   * @return UpdateOnPremConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateOnPremConnector.ts.html |here} to see how to use UpdateOnPremConnector API.
   */
  public async updateOnPremConnector(
    updateOnPremConnectorRequest: requests.UpdateOnPremConnectorRequest
  ): Promise<responses.UpdateOnPremConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateOnPremConnector.");
    const operationName = "updateOnPremConnector";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/UpdateOnPremConnector";
    const pathParams = {
      "{onPremConnectorId}": updateOnPremConnectorRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOnPremConnectorRequest.ifMatch,
      "opc-request-id": updateOnPremConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOnPremConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOnPremConnectorRequest.updateOnPremConnectorDetails,
        "UpdateOnPremConnectorDetails",
        model.UpdateOnPremConnectorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOnPremConnectorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the wallet for the specified on-premises connector to a new version.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateOnPremConnectorWalletRequest
   * @return UpdateOnPremConnectorWalletResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateOnPremConnectorWallet.ts.html |here} to see how to use UpdateOnPremConnectorWallet API.
   */
  public async updateOnPremConnectorWallet(
    updateOnPremConnectorWalletRequest: requests.UpdateOnPremConnectorWalletRequest
  ): Promise<responses.UpdateOnPremConnectorWalletResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateOnPremConnectorWallet.");
    const operationName = "updateOnPremConnectorWallet";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/OnPremConnector/UpdateOnPremConnectorWallet";
    const pathParams = {
      "{onPremConnectorId}": updateOnPremConnectorWalletRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateOnPremConnectorWalletRequest.opcRetryToken,
      "if-match": updateOnPremConnectorWalletRequest.ifMatch,
      "opc-request-id": updateOnPremConnectorWalletRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOnPremConnectorWalletRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}/wallet",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOnPremConnectorWalletRequest.updateOnPremConnectorWalletDetails,
        "UpdateOnPremConnectorWalletDetails",
        model.UpdateOnPremConnectorWalletDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOnPremConnectorWalletResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified Data Safe peer target database.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdatePeerTargetDatabaseRequest
   * @return UpdatePeerTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdatePeerTargetDatabase.ts.html |here} to see how to use UpdatePeerTargetDatabase API.
   */
  public async updatePeerTargetDatabase(
    updatePeerTargetDatabaseRequest: requests.UpdatePeerTargetDatabaseRequest
  ): Promise<responses.UpdatePeerTargetDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updatePeerTargetDatabase.");
    const operationName = "updatePeerTargetDatabase";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/PeerTargetDatabase/UpdatePeerTargetDatabase";
    const pathParams = {
      "{targetDatabaseId}": updatePeerTargetDatabaseRequest.targetDatabaseId,
      "{peerTargetDatabaseId}": updatePeerTargetDatabaseRequest.peerTargetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updatePeerTargetDatabaseRequest.ifMatch,
      "opc-request-id": updatePeerTargetDatabaseRequest.opcRequestId,
      "opc-retry-token": updatePeerTargetDatabaseRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePeerTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/peerTargetDatabases/{peerTargetDatabaseId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePeerTargetDatabaseRequest.updatePeerTargetDatabaseDetails,
        "UpdatePeerTargetDatabaseDetails",
        model.UpdatePeerTargetDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePeerTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified report. Only tags can be updated.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateReportRequest
   * @return UpdateReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateReport.ts.html |here} to see how to use UpdateReport API.
   */
  public async updateReport(
    updateReportRequest: requests.UpdateReportRequest
  ): Promise<responses.UpdateReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateReport.");
    const operationName = "updateReport";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/Report/UpdateReport";
    const pathParams = {
      "{reportId}": updateReportRequest.reportId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateReportRequest.ifMatch,
      "opc-request-id": updateReportRequest.opcRequestId,
      "opc-retry-token": updateReportRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reports/{reportId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateReportRequest.updateReportDetails,
        "UpdateReportDetails",
        model.UpdateReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified report definition. Only user created report definition can be updated. Seeded report definitions need to be saved as new report definition first.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateReportDefinitionRequest
   * @return UpdateReportDefinitionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateReportDefinition.ts.html |here} to see how to use UpdateReportDefinition API.
   */
  public async updateReportDefinition(
    updateReportDefinitionRequest: requests.UpdateReportDefinitionRequest
  ): Promise<responses.UpdateReportDefinitionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateReportDefinition.");
    const operationName = "updateReportDefinition";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/ReportDefinition/UpdateReportDefinition";
    const pathParams = {
      "{reportDefinitionId}": updateReportDefinitionRequest.reportDefinitionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateReportDefinitionRequest.ifMatch,
      "opc-request-id": updateReportDefinitionRequest.opcRequestId,
      "opc-retry-token": updateReportDefinitionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateReportDefinitionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/reportDefinitions/{reportDefinitionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateReportDefinitionRequest.updateReportDefinitionDetails,
        "UpdateReportDefinitionDetails",
        model.UpdateReportDefinitionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateReportDefinitionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified sdm masking policy difference.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSdmMaskingPolicyDifferenceRequest
   * @return UpdateSdmMaskingPolicyDifferenceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSdmMaskingPolicyDifference.ts.html |here} to see how to use UpdateSdmMaskingPolicyDifference API.
   */
  public async updateSdmMaskingPolicyDifference(
    updateSdmMaskingPolicyDifferenceRequest: requests.UpdateSdmMaskingPolicyDifferenceRequest
  ): Promise<responses.UpdateSdmMaskingPolicyDifferenceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateSdmMaskingPolicyDifference.");
    const operationName = "updateSdmMaskingPolicyDifference";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SdmMaskingPolicyDifference/UpdateSdmMaskingPolicyDifference";
    const pathParams = {
      "{sdmMaskingPolicyDifferenceId}":
        updateSdmMaskingPolicyDifferenceRequest.sdmMaskingPolicyDifferenceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSdmMaskingPolicyDifferenceRequest.ifMatch,
      "opc-request-id": updateSdmMaskingPolicyDifferenceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSdmMaskingPolicyDifferenceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sdmMaskingPolicyDifferences/{sdmMaskingPolicyDifferenceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSdmMaskingPolicyDifferenceRequest.updateSdmMaskingPolicyDifferenceDetails,
        "UpdateSdmMaskingPolicyDifferenceDetails",
        model.UpdateSdmMaskingPolicyDifferenceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSdmMaskingPolicyDifferenceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified security assessment. This operation allows to update the security assessment displayName, description, or schedule.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSecurityAssessmentRequest
   * @return UpdateSecurityAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSecurityAssessment.ts.html |here} to see how to use UpdateSecurityAssessment API.
   */
  public async updateSecurityAssessment(
    updateSecurityAssessmentRequest: requests.UpdateSecurityAssessmentRequest
  ): Promise<responses.UpdateSecurityAssessmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateSecurityAssessment.");
    const operationName = "updateSecurityAssessment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityAssessment/UpdateSecurityAssessment";
    const pathParams = {
      "{securityAssessmentId}": updateSecurityAssessmentRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateSecurityAssessmentRequest.opcRequestId,
      "if-match": updateSecurityAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSecurityAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSecurityAssessmentRequest.updateSecurityAssessmentDetails,
        "UpdateSecurityAssessmentDetails",
        model.UpdateSecurityAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSecurityAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the security policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSecurityPolicyRequest
   * @return UpdateSecurityPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSecurityPolicy.ts.html |here} to see how to use UpdateSecurityPolicy API.
   */
  public async updateSecurityPolicy(
    updateSecurityPolicyRequest: requests.UpdateSecurityPolicyRequest
  ): Promise<responses.UpdateSecurityPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateSecurityPolicy.");
    const operationName = "updateSecurityPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityPolicy/UpdateSecurityPolicy";
    const pathParams = {
      "{securityPolicyId}": updateSecurityPolicyRequest.securityPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSecurityPolicyRequest.ifMatch,
      "opc-request-id": updateSecurityPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSecurityPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicies/{securityPolicyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSecurityPolicyRequest.updateSecurityPolicyDetails,
        "UpdateSecurityPolicyDetails",
        model.UpdateSecurityPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSecurityPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the security policy deployment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSecurityPolicyDeploymentRequest
   * @return UpdateSecurityPolicyDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSecurityPolicyDeployment.ts.html |here} to see how to use UpdateSecurityPolicyDeployment API.
   */
  public async updateSecurityPolicyDeployment(
    updateSecurityPolicyDeploymentRequest: requests.UpdateSecurityPolicyDeploymentRequest
  ): Promise<responses.UpdateSecurityPolicyDeploymentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateSecurityPolicyDeployment.");
    const operationName = "updateSecurityPolicyDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SecurityPolicyDeployment/UpdateSecurityPolicyDeployment";
    const pathParams = {
      "{securityPolicyDeploymentId}":
        updateSecurityPolicyDeploymentRequest.securityPolicyDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSecurityPolicyDeploymentRequest.ifMatch,
      "opc-request-id": updateSecurityPolicyDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSecurityPolicyDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityPolicyDeployments/{securityPolicyDeploymentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSecurityPolicyDeploymentRequest.updateSecurityPolicyDeploymentDetails,
        "UpdateSecurityPolicyDeploymentDetails",
        model.UpdateSecurityPolicyDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSecurityPolicyDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified sensitive column.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSensitiveColumnRequest
   * @return UpdateSensitiveColumnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSensitiveColumn.ts.html |here} to see how to use UpdateSensitiveColumn API.
   */
  public async updateSensitiveColumn(
    updateSensitiveColumnRequest: requests.UpdateSensitiveColumnRequest
  ): Promise<responses.UpdateSensitiveColumnResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateSensitiveColumn.");
    const operationName = "updateSensitiveColumn";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveColumn/UpdateSensitiveColumn";
    const pathParams = {
      "{sensitiveDataModelId}": updateSensitiveColumnRequest.sensitiveDataModelId,
      "{sensitiveColumnKey}": updateSensitiveColumnRequest.sensitiveColumnKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSensitiveColumnRequest.ifMatch,
      "opc-request-id": updateSensitiveColumnRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSensitiveColumnRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns/{sensitiveColumnKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSensitiveColumnRequest.updateSensitiveColumnDetails,
        "UpdateSensitiveColumnDetails",
        model.UpdateSensitiveColumnDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSensitiveColumnResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified sensitive data model. Note that updating any attribute of a sensitive
   * data model does not perform data discovery.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSensitiveDataModelRequest
   * @return UpdateSensitiveDataModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSensitiveDataModel.ts.html |here} to see how to use UpdateSensitiveDataModel API.
   */
  public async updateSensitiveDataModel(
    updateSensitiveDataModelRequest: requests.UpdateSensitiveDataModelRequest
  ): Promise<responses.UpdateSensitiveDataModelResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateSensitiveDataModel.");
    const operationName = "updateSensitiveDataModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/UpdateSensitiveDataModel";
    const pathParams = {
      "{sensitiveDataModelId}": updateSensitiveDataModelRequest.sensitiveDataModelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSensitiveDataModelRequest.ifMatch,
      "opc-request-id": updateSensitiveDataModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSensitiveDataModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSensitiveDataModelRequest.updateSensitiveDataModelDetails,
        "UpdateSensitiveDataModelDetails",
        model.UpdateSensitiveDataModelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSensitiveDataModelResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified sensitive type.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSensitiveTypeRequest
   * @return UpdateSensitiveTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSensitiveType.ts.html |here} to see how to use UpdateSensitiveType API.
   */
  public async updateSensitiveType(
    updateSensitiveTypeRequest: requests.UpdateSensitiveTypeRequest
  ): Promise<responses.UpdateSensitiveTypeResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateSensitiveType.");
    const operationName = "updateSensitiveType";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveType/UpdateSensitiveType";
    const pathParams = {
      "{sensitiveTypeId}": updateSensitiveTypeRequest.sensitiveTypeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSensitiveTypeRequest.ifMatch,
      "opc-request-id": updateSensitiveTypeRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSensitiveTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveTypes/{sensitiveTypeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSensitiveTypeRequest.updateSensitiveTypeDetails,
        "UpdateSensitiveTypeDetails",
        model.UpdateSensitiveTypeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSensitiveTypeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the SQL collection.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSqlCollectionRequest
   * @return UpdateSqlCollectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSqlCollection.ts.html |here} to see how to use UpdateSqlCollection API.
   */
  public async updateSqlCollection(
    updateSqlCollectionRequest: requests.UpdateSqlCollectionRequest
  ): Promise<responses.UpdateSqlCollectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateSqlCollection.");
    const operationName = "updateSqlCollection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlCollection/UpdateSqlCollection";
    const pathParams = {
      "{sqlCollectionId}": updateSqlCollectionRequest.sqlCollectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSqlCollectionRequest.ifMatch,
      "opc-request-id": updateSqlCollectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSqlCollectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlCollections/{sqlCollectionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSqlCollectionRequest.updateSqlCollectionDetails,
        "UpdateSqlCollectionDetails",
        model.UpdateSqlCollectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSqlCollectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the SQL Firewall policy.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateSqlFirewallPolicyRequest
   * @return UpdateSqlFirewallPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSqlFirewallPolicy.ts.html |here} to see how to use UpdateSqlFirewallPolicy API.
   */
  public async updateSqlFirewallPolicy(
    updateSqlFirewallPolicyRequest: requests.UpdateSqlFirewallPolicyRequest
  ): Promise<responses.UpdateSqlFirewallPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateSqlFirewallPolicy.");
    const operationName = "updateSqlFirewallPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SqlFirewallPolicy/UpdateSqlFirewallPolicy";
    const pathParams = {
      "{sqlFirewallPolicyId}": updateSqlFirewallPolicyRequest.sqlFirewallPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSqlFirewallPolicyRequest.ifMatch,
      "opc-request-id": updateSqlFirewallPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSqlFirewallPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sqlFirewallPolicies/{sqlFirewallPolicyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSqlFirewallPolicyRequest.updateSqlFirewallPolicyDetails,
        "UpdateSqlFirewallPolicyDetails",
        model.UpdateSqlFirewallPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSqlFirewallPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified target-alert policy association.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateTargetAlertPolicyAssociationRequest
   * @return UpdateTargetAlertPolicyAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateTargetAlertPolicyAssociation.ts.html |here} to see how to use UpdateTargetAlertPolicyAssociation API.
   */
  public async updateTargetAlertPolicyAssociation(
    updateTargetAlertPolicyAssociationRequest: requests.UpdateTargetAlertPolicyAssociationRequest
  ): Promise<responses.UpdateTargetAlertPolicyAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateTargetAlertPolicyAssociation.");
    const operationName = "updateTargetAlertPolicyAssociation";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetAlertPolicyAssociation/UpdateTargetAlertPolicyAssociation";
    const pathParams = {
      "{targetAlertPolicyAssociationId}":
        updateTargetAlertPolicyAssociationRequest.targetAlertPolicyAssociationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTargetAlertPolicyAssociationRequest.ifMatch,
      "opc-request-id": updateTargetAlertPolicyAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTargetAlertPolicyAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetAlertPolicyAssociations/{targetAlertPolicyAssociationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTargetAlertPolicyAssociationRequest.updateTargetAlertPolicyAssociationDetails,
        "UpdateTargetAlertPolicyAssociationDetails",
        model.UpdateTargetAlertPolicyAssociationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTargetAlertPolicyAssociationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified Data Safe target database.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateTargetDatabaseRequest
   * @return UpdateTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateTargetDatabase.ts.html |here} to see how to use UpdateTargetDatabase API.
   */
  public async updateTargetDatabase(
    updateTargetDatabaseRequest: requests.UpdateTargetDatabaseRequest
  ): Promise<responses.UpdateTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateTargetDatabase.");
    const operationName = "updateTargetDatabase";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/TargetDatabase/UpdateTargetDatabase";
    const pathParams = {
      "{targetDatabaseId}": updateTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateTargetDatabaseRequest.opcRequestId,
      "if-match": updateTargetDatabaseRequest.ifMatch,
      "opc-retry-token": updateTargetDatabaseRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTargetDatabaseRequest.updateTargetDatabaseDetails,
        "UpdateTargetDatabaseDetails",
        model.UpdateTargetDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified user assessment. This operation allows to update the user assessment displayName, description, or schedule.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateUserAssessmentRequest
   * @return UpdateUserAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateUserAssessment.ts.html |here} to see how to use UpdateUserAssessment API.
   */
  public async updateUserAssessment(
    updateUserAssessmentRequest: requests.UpdateUserAssessmentRequest
  ): Promise<responses.UpdateUserAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateUserAssessment.");
    const operationName = "updateUserAssessment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/UserAssessment/UpdateUserAssessment";
    const pathParams = {
      "{userAssessmentId}": updateUserAssessmentRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateUserAssessmentRequest.opcRequestId,
      "if-match": updateUserAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateUserAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateUserAssessmentRequest.updateUserAssessmentDetails,
        "UpdateUserAssessmentDetails",
        model.UpdateUserAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateUserAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Uploads a masking policy file (also called template) to update the specified masking policy.
   * To create a new masking policy using a file, first use the CreateMaskingPolicy operation
   * to create an empty masking policy and then use this endpoint to upload the masking policy file.
   * Note that the upload operation replaces the content of the specified masking policy,
   * including all the existing columns and masking formats, with the content of the file.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UploadMaskingPolicyRequest
   * @return UploadMaskingPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UploadMaskingPolicy.ts.html |here} to see how to use UploadMaskingPolicy API.
   */
  public async uploadMaskingPolicy(
    uploadMaskingPolicyRequest: requests.UploadMaskingPolicyRequest
  ): Promise<responses.UploadMaskingPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#uploadMaskingPolicy.");
    const operationName = "uploadMaskingPolicy";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/MaskingPolicy/UploadMaskingPolicy";
    const pathParams = {
      "{maskingPolicyId}": uploadMaskingPolicyRequest.maskingPolicyId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": uploadMaskingPolicyRequest.ifMatch,
      "opc-request-id": uploadMaskingPolicyRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      uploadMaskingPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/maskingPolicies/{maskingPolicyId}/actions/upload",
      method: "POST",
      bodyContent: uploadMaskingPolicyRequest.uploadMaskingPolicyDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UploadMaskingPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Uploads a sensitive data model file (also called template) to update the specified sensitive data model. To create
   * a new sensitive data model using a file, first use the CreateSensitiveDataModel operation to create an empty data model
   * and then use this endpoint to upload the data model file. Note that the upload operation replaces the content of the
   * specified sensitive data model, including all the existing columns and their relationships, with the content of the file.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UploadSensitiveDataModelRequest
   * @return UploadSensitiveDataModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UploadSensitiveDataModel.ts.html |here} to see how to use UploadSensitiveDataModel API.
   */
  public async uploadSensitiveDataModel(
    uploadSensitiveDataModelRequest: requests.UploadSensitiveDataModelRequest
  ): Promise<responses.UploadSensitiveDataModelResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#uploadSensitiveDataModel.");
    const operationName = "uploadSensitiveDataModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-safe/20181201/SensitiveDataModel/UploadSensitiveDataModel";
    const pathParams = {
      "{sensitiveDataModelId}": uploadSensitiveDataModelRequest.sensitiveDataModelId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": uploadSensitiveDataModelRequest.ifMatch,
      "opc-request-id": uploadSensitiveDataModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      uploadSensitiveDataModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sensitiveDataModels/{sensitiveDataModelId}/actions/upload",
      method: "POST",
      bodyContent: uploadSensitiveDataModelRequest.uploadSensitiveDataModelDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UploadSensitiveDataModelResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
