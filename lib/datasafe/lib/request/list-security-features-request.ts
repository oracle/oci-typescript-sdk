/**
 *
 *
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityFeatures.ts.html |here} to see how to use ListSecurityFeaturesRequest.
 */
export interface ListSecurityFeaturesRequest extends common.BaseRequest {
  /**
   * A filter to return only resources that match the specified compartment OCID.
   */
  "compartmentId": string;
  /**
   * Default is false.
   * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
   *
   */
  "compartmentIdInSubtree"?: boolean;
  /**
   * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED.
   * Setting this to ACCESSIBLE returns only those compartments for which the
   * user has INSPECT permissions directly or indirectly (permissions can be on a
   * resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
   *
   */
  "accessLevel"?: ListSecurityFeaturesRequest.AccessLevel;
  /**
   * A filter to return only items related to a specific target OCID.
   */
  "targetId"?: string;
  /**
   * A filter to return only the targets with the DB security feature - Unified Audit enabled/disabled.
   */
  "targetsWithUnifiedAudit"?: ListSecurityFeaturesRequest.TargetsWithUnifiedAudit;
  /**
   * A filter to return only the targets with the DB security feature - Fine Grained Audit enabled/disabled.
   */
  "targetsWithFineGrainedAudit"?: ListSecurityFeaturesRequest.TargetsWithFineGrainedAudit;
  /**
   * A filter to return only the targets with the DB security feature - Traditional Audit enabled/disabled.
   */
  "targetsWithTraditionalAudit"?: ListSecurityFeaturesRequest.TargetsWithTraditionalAudit;
  /**
   * A filter to return only the targets with the DB security feature - Database Vault enabled/disabled.
   */
  "targetsWithDatabaseVault"?: ListSecurityFeaturesRequest.TargetsWithDatabaseVault;
  /**
   * A filter to return only the targets with the DB security feature - Privilege Analysis enabled/disabled.
   */
  "targetsWithPrivilegeAnalysis"?: ListSecurityFeaturesRequest.TargetsWithPrivilegeAnalysis;
  /**
   * A filter to return only the targets with the DB security feature - Tablespace Encryption enabled/disabled.
   */
  "targetsWithTablespaceEncryption"?: ListSecurityFeaturesRequest.TargetsWithTablespaceEncryption;
  /**
   * A filter to return only the targets that enable the DB security feature - Column Encryption enabled/disabled.
   */
  "targetsWithColumnEncryption"?: ListSecurityFeaturesRequest.TargetsWithColumnEncryption;
  /**
   * A filter to return only the targets with the DB security feature - Network Encryption enabled/disabled.
   */
  "targetsWithNetworkEncryption"?: ListSecurityFeaturesRequest.TargetsWithNetworkEncryption;
  /**
   * A filter to return only the targets with the DB security feature - Password Authentication enabled/disabled.
   */
  "targetsWithPasswordAuthentication"?: ListSecurityFeaturesRequest.TargetsWithPasswordAuthentication;
  /**
   * A filter to return only the targets with the DB security feature - Global Authentication enabled/disabled.
   */
  "targetsWithGlobalAuthentication"?: ListSecurityFeaturesRequest.TargetsWithGlobalAuthentication;
  /**
   * A filter to return only the targets with the DB security feature - External Authentication enabled/disabled.
   */
  "targetsWithExternalAuthentication"?: ListSecurityFeaturesRequest.TargetsWithExternalAuthentication;
  /**
   * Unique identifier for the request.
   */
  "opcRequestId"?: string;
  /**
   * For list pagination. The maximum number of items to return per page in a paginated \"List\" call. For details about how pagination works, see [List Pagination](https://docs.oracle.com/iaas/en-us/iaas/Content/API/Concepts/usingapi.htm#nine).
   */
  "limit"?: number;
  /**
   * For list pagination. The page token representing the page at which to start retrieving results. It is usually retrieved from a previous \"List\" call. For details about how pagination works, see [List Pagination](https://docs.oracle.com/iaas/en-us/iaas/Content/API/Concepts/usingapi.htm#nine).
   */
  "page"?: string;
  /**
   * A filter to return the target database group that matches the specified OCID.
   */
  "targetDatabaseGroupId"?: string;
}

export namespace ListSecurityFeaturesRequest {
  export enum AccessLevel {
    Restricted = "RESTRICTED",
    Accessible = "ACCESSIBLE"
  }

  export enum TargetsWithUnifiedAudit {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    None = "NONE"
  }

  export enum TargetsWithFineGrainedAudit {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    None = "NONE"
  }

  export enum TargetsWithTraditionalAudit {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    None = "NONE"
  }

  export enum TargetsWithDatabaseVault {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    None = "NONE"
  }

  export enum TargetsWithPrivilegeAnalysis {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    None = "NONE"
  }

  export enum TargetsWithTablespaceEncryption {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    None = "NONE"
  }

  export enum TargetsWithColumnEncryption {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    None = "NONE"
  }

  export enum TargetsWithNetworkEncryption {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    None = "NONE"
  }

  export enum TargetsWithPasswordAuthentication {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    None = "NONE"
  }

  export enum TargetsWithGlobalAuthentication {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    None = "NONE"
  }

  export enum TargetsWithExternalAuthentication {
    Enabled = "ENABLED",
    Disabled = "DISABLED",
    None = "NONE"
  }
}
